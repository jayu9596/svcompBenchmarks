var $M.0: [ref]i8;

var $M.1: i64;

var $M.2: [ref]i64;

var $M.3: [ref]i8;

var $M.4: [ref]ref;

var $M.5: [ref]i64;

var $M.6: i32;

var $M.7: [ref]i8;

var $M.8: [ref]i8;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]i8;

var $M.12: [ref]i32;

var $M.13: [ref]i32;

var $M.14: [ref]i32;

var $M.15: [ref]i32;

var $M.16: [ref]i64;

var $M.17: [ref]i32;

var $M.20: i32;

var $M.21: i32;

var $M.22: i32;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]i32;

var $M.27: [ref]i64;

var $M.28: [ref]i64;

var $M.29: [ref]i32;

var $M.30: [ref]ref;

var $M.31: i64;

var $M.32: i64;

var $M.33: [ref]i64;

var $M.34: [ref]i64;

var $M.35: [ref]i64;

var $M.36: [ref]i64;

var $M.37: [ref]i64;

var $M.38: [ref]i64;

var $M.39: [ref]i64;

var $M.40: [ref]i64;

var $M.41: [ref]i64;

var $M.42: [ref]i64;

var $M.43: [ref]i64;

var $M.44: [ref]i64;

var $M.45: [ref]i64;

var $M.46: [ref]i64;

var $M.47: [ref]i64;

var $M.48: [ref]i64;

var $M.49: [ref]i64;

var $M.50: [ref]i64;

var $M.51: [ref]i64;

var $M.52: [ref]i64;

var $M.53: [ref]i64;

var $M.54: [ref]i8;

var $M.56: i32;

var $M.57: ref;

var $M.58: [ref]i8;

var $M.59: [ref]ref;

var $M.60: [ref]i8;

var $M.61: ref;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: ref;

var $M.75: i32;

var $M.76: ref;

var $M.77: ref;

var $M.78: ref;

var $M.79: ref;

var $M.80: ref;

var $M.81: ref;

var $M.82: i32;

var $M.83: ref;

var $M.84: ref;

var $M.85: ref;

var $M.86: ref;

var $M.87: ref;

var $M.88: ref;

var $M.89: ref;

var $M.90: i32;

var $M.91: ref;

var $M.92: ref;

var $M.93: ref;

var $M.94: i32;

var $M.95: ref;

var $M.96: ref;

var $M.97: i32;

var $M.98: ref;

var $M.99: ref;

var $M.100: ref;

var $M.101: i32;

var $M.102: i32;

var $M.103: i32;

var $M.104: i32;

var $M.105: ref;

var $M.106: [ref]ref;

var $M.107: [ref]ref;

var $M.108: [ref]i32;

var $M.110: [ref]i16;

var $M.111: [ref]ref;

var $M.113: [ref]i8;

var $M.114: [ref]i8;

var $M.115: [ref]i8;

var $M.116: [ref]i8;

var $M.117: [ref]i8;

var $M.118: [ref]i8;

var $M.119: [ref]ref;

var $M.120: [ref]ref;

var $M.121: [ref]ref;

var $M.122: [ref]ref;

var $M.123: [ref]ref;

var $M.124: [ref]ref;

var $M.125: [ref]ref;

var $M.126: [ref]ref;

var $M.127: [ref]ref;

var $M.128: [ref]ref;

var $M.129: [ref]ref;

var $M.130: [ref]ref;

var $M.131: [ref]ref;

var $M.132: [ref]ref;

var $M.133: [ref]ref;

var $M.134: [ref]ref;

var $M.135: [ref]ref;

var $M.136: [ref]ref;

var $M.137: [ref]ref;

var $M.138: [ref]ref;

var $M.139: [ref]ref;

var $M.140: [ref]ref;

var $M.141: [ref]ref;

var $M.142: [ref]ref;

var $M.143: [ref]ref;

var $M.144: [ref]ref;

var $M.145: [ref]ref;

var $M.146: [ref]ref;

var $M.147: [ref]ref;

var $M.148: [ref]ref;

var $M.149: [ref]ref;

var $M.150: [ref]ref;

var $M.151: [ref]i8;

var $M.202: [ref]i8;

var $M.203: [ref]i8;

var $M.204: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 917121);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32952));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const gru_vm_ops: ref;

axiom gru_vm_ops == $sub.ref(0, 2140);

const ldv_mutex_ts_ctxlock_of_gru_thread_state: ref;

axiom ldv_mutex_ts_ctxlock_of_gru_thread_state == $sub.ref(0, 3168);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 4196);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 5224);

const ldv_mutex_i_mutex_of_inode: ref;

axiom ldv_mutex_i_mutex_of_inode == $sub.ref(0, 6252);

const {:count 13} __kstrtab_gru_copy_gpa: ref;

axiom __kstrtab_gru_copy_gpa == $sub.ref(0, 7289);

const {:count 13} __kstrtab_gru_read_gpa: ref;

axiom __kstrtab_gru_read_gpa == $sub.ref(0, 8326);

const {:count 21} __kstrtab_gru_get_next_message: ref;

axiom __kstrtab_gru_get_next_message == $sub.ref(0, 9371);

const {:count 17} __kstrtab_gru_free_message: ref;

axiom __kstrtab_gru_free_message == $sub.ref(0, 10412);

const {:count 21} __kstrtab_gru_send_message_gpa: ref;

axiom __kstrtab_gru_send_message_gpa == $sub.ref(0, 11457);

const {:count 25} __kstrtab_gru_create_message_queue: ref;

axiom __kstrtab_gru_create_message_queue == $sub.ref(0, 12506);

const cch_seq_ops: ref;

axiom cch_seq_ops == $sub.ref(0, 13562);

const gru_seq_ops: ref;

axiom gru_seq_ops == $sub.ref(0, 14618);

const gru_fops___0: ref;

axiom gru_fops___0 == $sub.ref(0, 15866);

const cch_fops: ref;

axiom cch_fops == $sub.ref(0, 17114);

const options_fops: ref;

axiom options_fops == $sub.ref(0, 18362);

const mcs_statistics_fops: ref;

axiom mcs_statistics_fops == $sub.ref(0, 19610);

const statistics_fops: ref;

axiom statistics_fops == $sub.ref(0, 20858);

const {:count 6} proc_files: ref;

axiom proc_files == $sub.ref(0, 22074);

const gru_mmuops: ref;

axiom gru_mmuops == $sub.ref(0, 23162);

const gru_driver: ref;

axiom gru_driver == $sub.ref(0, 24306);

const gru_device: ref;

axiom gru_device == $sub.ref(0, 26754);

const max_user_dsr_bytes: ref;

axiom max_user_dsr_bytes == $sub.ref(0, 27782);

const max_user_cbrs: ref;

axiom max_user_cbrs == $sub.ref(0, 28810);

const gru_fops: ref;

axiom gru_fops == $sub.ref(0, 30058);

const gru_miscdev: ref;

axiom gru_miscdev == $sub.ref(0, 31162);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 32190);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 33222);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 34250);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 35282);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 36314);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 37342);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 38374);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 39402);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 40430);

const proc_gru: ref;

axiom proc_gru == $sub.ref(0, 41462);

const {:count 8} mcs_op_statistics: ref;

axiom mcs_op_statistics == $sub.ref(0, 42678);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 43706);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 44734);

const gru_options: ref;

axiom gru_options == $sub.ref(0, 45766);

const gru_max_gids: ref;

axiom gru_max_gids == $sub.ref(0, 46794);

const gru_start_vaddr: ref;

axiom gru_start_vaddr == $sub.ref(0, 47826);

const gru_end_paddr: ref;

axiom gru_end_paddr == $sub.ref(0, 48858);

const gru_start_paddr: ref;

axiom gru_start_paddr == $sub.ref(0, 49890);

const {:count 1024} gru_base: ref;

axiom gru_base == $sub.ref(0, 59106);

const gru_stats: ref;

axiom gru_stats == $sub.ref(0, 60722);

const gru_mmuops_group0: ref;

axiom gru_mmuops_group0 == $sub.ref(0, 61754);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 62782);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 63810);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 64838);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 65866);

const statistics_fops_group2: ref;

axiom statistics_fops_group2 == $sub.ref(0, 66898);

const options_fops_group1: ref;

axiom options_fops_group1 == $sub.ref(0, 67930);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 68958);

const gru_seq_ops_group3: ref;

axiom gru_seq_ops_group3 == $sub.ref(0, 69990);

const cch_seq_ops_group1: ref;

axiom cch_seq_ops_group1 == $sub.ref(0, 71022);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 72050);

const cch_seq_ops_group3: ref;

axiom cch_seq_ops_group3 == $sub.ref(0, 73082);

const gru_seq_ops_group1: ref;

axiom gru_seq_ops_group1 == $sub.ref(0, 74114);

const options_fops_group2: ref;

axiom options_fops_group2 == $sub.ref(0, 75146);

const gru_vm_ops_group0: ref;

axiom gru_vm_ops_group0 == $sub.ref(0, 76178);

const statistics_fops_group1: ref;

axiom statistics_fops_group1 == $sub.ref(0, 77210);

const gru_fops_group2: ref;

axiom gru_fops_group2 == $sub.ref(0, 78242);

const mcs_statistics_fops_group1: ref;

axiom mcs_statistics_fops_group1 == $sub.ref(0, 79274);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 80302);

const cch_fops_group1: ref;

axiom cch_fops_group1 == $sub.ref(0, 81334);

const cch_seq_ops_group2: ref;

axiom cch_seq_ops_group2 == $sub.ref(0, 82366);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 83394);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 84422);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 85450);

const cch_fops_group2: ref;

axiom cch_fops_group2 == $sub.ref(0, 86482);

const gru_mmuops_group1: ref;

axiom gru_mmuops_group1 == $sub.ref(0, 87514);

const gru_seq_ops_group2: ref;

axiom gru_seq_ops_group2 == $sub.ref(0, 88546);

const mcs_statistics_fops_group2: ref;

axiom mcs_statistics_fops_group2 == $sub.ref(0, 89578);

const gru_fops_group1: ref;

axiom gru_fops_group1 == $sub.ref(0, 90610);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 91638);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 92666);

const __ksymtab_gru_copy_gpa: ref;

axiom __ksymtab_gru_copy_gpa == $sub.ref(0, 93706);

const __ksymtab_gru_read_gpa: ref;

axiom __ksymtab_gru_read_gpa == $sub.ref(0, 94746);

const __ksymtab_gru_get_next_message: ref;

axiom __ksymtab_gru_get_next_message == $sub.ref(0, 95786);

const __ksymtab_gru_free_message: ref;

axiom __ksymtab_gru_free_message == $sub.ref(0, 96826);

const __ksymtab_gru_send_message_gpa: ref;

axiom __ksymtab_gru_send_message_gpa == $sub.ref(0, 97866);

const __ksymtab_gru_create_message_queue: ref;

axiom __ksymtab_gru_create_message_queue == $sub.ref(0, 98906);

const grudev: ref;

axiom grudev == $sub.ref(0, 99938);

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 41} .str.21: ref;

axiom .str.21 == $sub.ref(0, 101003);

const {:count 10} .str.22: ref;

axiom .str.22 == $sub.ref(0, 102037);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 58} .str.12: ref;

axiom .str.12 == $sub.ref(0, 103119);

const {:count 17} .str.13: ref;

axiom .str.13 == $sub.ref(0, 104160);

const {:count 209} .str.11: ref;

axiom .str.11 == $sub.ref(0, 105393);

const {:count 72} .str.14: ref;

axiom .str.14 == $sub.ref(0, 106489);

const tsc_khz: ref;

axiom tsc_khz == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 4} .str.256: ref;

axiom .str.256 == $sub.ref(0, 107517);

const {:count 4} .str.257: ref;

axiom .str.257 == $sub.ref(0, 108545);

const {:count 4} .str.258: ref;

axiom .str.258 == $sub.ref(0, 109573);

const {:count 4} .str.259: ref;

axiom .str.259 == $sub.ref(0, 110601);

const {:count 32} .str.260: ref;

axiom .str.260 == $sub.ref(0, 111657);

const pv_cpu_ops: ref;

axiom pv_cpu_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 34} .str.108: ref;

axiom .str.108 == $sub.ref(0, 112715);

const {:count 73} .str.83: ref;

axiom .str.83 == $sub.ref(0, 113812);

const {:count 20} .str.84: ref;

axiom .str.84 == $sub.ref(0, 114856);

const {:count 31} .str.85: ref;

axiom .str.85 == $sub.ref(0, 115911);

const {:count 16} .str.86: ref;

axiom .str.86 == $sub.ref(0, 116951);

const {:count 21} .str.87: ref;

axiom .str.87 == $sub.ref(0, 117996);

const {:count 56} .str.88: ref;

axiom .str.88 == $sub.ref(0, 119076);

const {:count 51} .str.89: ref;

axiom .str.89 == $sub.ref(0, 120151);

const {:count 20} .str.37: ref;

axiom .str.37 == $sub.ref(0, 121195);

const {:count 18} .str.38: ref;

axiom .str.38 == $sub.ref(0, 122237);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const this_cpu_off: ref;

axiom this_cpu_off == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const __uv_hub_info: ref;

axiom __uv_hub_info == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 14} .str.90: ref;

axiom .str.90 == $sub.ref(0, 123275);

const x86_cpu_to_apicid: ref;

axiom x86_cpu_to_apicid == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const __per_cpu_offset: ref;

axiom __per_cpu_offset == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const {:count 90} .str.15: ref;

axiom .str.15 == $sub.ref(0, 124389);

const {:count 18} .str.16: ref;

axiom .str.16 == $sub.ref(0, 125431);

const {:count 48} .str.9: ref;

axiom .str.9 == $sub.ref(0, 126503);

const {:count 19} .str.10: ref;

axiom .str.10 == $sub.ref(0, 127546);

const {:count 28} .str.81: ref;

axiom .str.81 == $sub.ref(0, 128598);

const {:count 21} .str.82: ref;

axiom .str.82 == $sub.ref(0, 129643);

const {:count 44} .str.43: ref;

axiom .str.43 == $sub.ref(0, 130711);

const {:count 22} .str.44: ref;

axiom .str.44 == $sub.ref(0, 131757);

const {:count 64} .str.79: ref;

axiom .str.79 == $sub.ref(0, 132845);

const {:count 22} .str.80: ref;

axiom .str.80 == $sub.ref(0, 133891);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const {:count 61} .str.17: ref;

axiom .str.17 == $sub.ref(0, 134976);

const {:count 23} .str.18: ref;

axiom .str.18 == $sub.ref(0, 136023);

const {:count 41} .str.19: ref;

axiom .str.19 == $sub.ref(0, 137088);

const .str.20: ref;

axiom .str.20 == $sub.ref(0, 138113);

const {:count 36} .str.91: ref;

axiom .str.91 == $sub.ref(0, 139173);

const {:count 18} .str.92: ref;

axiom .str.92 == $sub.ref(0, 140215);

const {:count 28} .str.6: ref;

axiom .str.6 == $sub.ref(0, 141267);

const {:count 22} .str.7: ref;

axiom .str.7 == $sub.ref(0, 142313);

const {:count 214} .str.46: ref;

axiom .str.46 == $sub.ref(0, 143551);

const uv_apicid_hibits: ref;

axiom uv_apicid_hibits == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32856));

const uv_possible_blades: ref;

axiom uv_possible_blades == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32864));

const uv_blade_info: ref;

axiom uv_blade_info == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32872));

const .str: ref;

axiom .str == $sub.ref(0, 144592);

const {:count 26} .str.1: ref;

axiom .str.1 == $sub.ref(0, 145642);

const {:count 14} .str.2: ref;

axiom .str.2 == $sub.ref(0, 146680);

const {:count 29} .str.39: ref;

axiom .str.39 == $sub.ref(0, 147733);

const {:count 20} .str.40: ref;

axiom .str.40 == $sub.ref(0, 148777);

const {:count 31} .str.41: ref;

axiom .str.41 == $sub.ref(0, 149832);

const {:count 26} .str.42: ref;

axiom .str.42 == $sub.ref(0, 150882);

const {:count 25} .str.113: ref;

axiom .str.113 == $sub.ref(0, 151931);

const {:count 44} .str.115: ref;

axiom .str.115 == $sub.ref(0, 152999);

const rcu_lock_map: ref;

axiom rcu_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32880));

const {:count 42} .str.114: ref;

axiom .str.114 == $sub.ref(0, 154065);

const {:count 4} .str.55: ref;

axiom .str.55 == $sub.ref(0, 155093);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32888));

const {:count 52} .str.74: ref;

axiom .str.74 == $sub.ref(0, 156169);

const {:count 14} .str.75: ref;

axiom .str.75 == $sub.ref(0, 157207);

const {:count 26} .str.3: ref;

axiom .str.3 == $sub.ref(0, 158257);

const {:count 28} .str.4: ref;

axiom .str.4 == $sub.ref(0, 159309);

const {:count 19} .str.5: ref;

axiom .str.5 == $sub.ref(0, 160352);

const {:count 38} .str.76: ref;

axiom .str.76 == $sub.ref(0, 161414);

const {:count 24} .str.77: ref;

axiom .str.77 == $sub.ref(0, 162462);

const {:count 33} .str.112: ref;

axiom .str.112 == $sub.ref(0, 163519);

const cpu_online_mask: ref;

axiom cpu_online_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32896));

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32904));

const uv_node_to_blade: ref;

axiom uv_node_to_blade == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32912));

const node_states: ref;

axiom node_states == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32920));

const {:count 26} .str.255: ref;

axiom .str.255 == $sub.ref(0, 164569);

const {:count 16} .str.252: ref;

axiom .str.252 == $sub.ref(0, 165609);

const {:count 38} .str.253: ref;

axiom .str.253 == $sub.ref(0, 166671);

const {:count 59} .str.254: ref;

axiom .str.254 == $sub.ref(0, 167754);

const {:count 46} .str.250: ref;

axiom .str.250 == $sub.ref(0, 168824);

const {:count 52} .str.251: ref;

axiom .str.251 == $sub.ref(0, 169900);

const {:count 35} .str.246: ref;

axiom .str.246 == $sub.ref(0, 170959);

const {:count 36} .str.247: ref;

axiom .str.247 == $sub.ref(0, 172019);

const {:count 35} .str.248: ref;

axiom .str.248 == $sub.ref(0, 173078);

const {:count 53} .str.249: ref;

axiom .str.249 == $sub.ref(0, 174155);

const {:count 45} .str.23: ref;

axiom .str.23 == $sub.ref(0, 175224);

const {:count 24} .str.24: ref;

axiom .str.24 == $sub.ref(0, 176272);

const {:count 210} .str.111: ref;

axiom .str.111 == $sub.ref(0, 177506);

const {:count 7} .str.99: ref;

axiom .str.99 == $sub.ref(0, 178537);

const {:count 11} .str.100: ref;

axiom .str.100 == $sub.ref(0, 179572);

const {:count 108} .str.97: ref;

axiom .str.97 == $sub.ref(0, 180704);

const {:count 15} .str.98: ref;

axiom .str.98 == $sub.ref(0, 181743);

const {:count 51} .str.101: ref;

axiom .str.101 == $sub.ref(0, 182818);

const {:count 47} .str.102: ref;

axiom .str.102 == $sub.ref(0, 183889);

const {:count 44} .str.103: ref;

axiom .str.103 == $sub.ref(0, 184957);

const {:count 65} .str.104: ref;

axiom .str.104 == $sub.ref(0, 186046);

const {:count 45} .str.105: ref;

axiom .str.105 == $sub.ref(0, 187115);

const {:count 49} .str.106: ref;

axiom .str.106 == $sub.ref(0, 188188);

const {:count 56} .str.107: ref;

axiom .str.107 == $sub.ref(0, 189268);

const {:count 93} .str.109: ref;

axiom .str.109 == $sub.ref(0, 190385);

const {:count 16} .str.110: ref;

axiom .str.110 == $sub.ref(0, 191425);

const pv_mmu_ops: ref;

axiom pv_mmu_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32928));

const {:count 48} .str.29: ref;

axiom .str.29 == $sub.ref(0, 192497);

const {:count 19} .str.30: ref;

axiom .str.30 == $sub.ref(0, 193540);

const {:count 59} .str.33: ref;

axiom .str.33 == $sub.ref(0, 194623);

const {:count 20} .str.34: ref;

axiom .str.34 == $sub.ref(0, 195667);

const {:count 88} .str.35: ref;

axiom .str.35 == $sub.ref(0, 196779);

const {:count 73} .str.36: ref;

axiom .str.36 == $sub.ref(0, 197876);

const {:count 24} .str.27: ref;

axiom .str.27 == $sub.ref(0, 198924);

const {:count 24} .str.28: ref;

axiom .str.28 == $sub.ref(0, 199972);

const {:count 25} .str.25: ref;

axiom .str.25 == $sub.ref(0, 201021);

const {:count 112} .str.26: ref;

axiom .str.26 == $sub.ref(0, 202157);

const {:count 45} .str.31: ref;

axiom .str.31 == $sub.ref(0, 203226);

const {:count 23} .str.32: ref;

axiom .str.32 == $sub.ref(0, 204273);

const {:count 23} .str.8: ref;

axiom .str.8 == $sub.ref(0, 205320);

const {:count 44} .str.120: ref;

axiom .str.120 == $sub.ref(0, 206388);

const {:count 25} .str.121: ref;

axiom .str.121 == $sub.ref(0, 207437);

const {:count 52} .str.118: ref;

axiom .str.118 == $sub.ref(0, 208513);

const {:count 27} .str.119: ref;

axiom .str.119 == $sub.ref(0, 209564);

const {:count 35} .str.122: ref;

axiom .str.122 == $sub.ref(0, 210623);

const {:count 20} .str.123: ref;

axiom .str.123 == $sub.ref(0, 211667);

const {:count 20} .str.116: ref;

axiom .str.116 == $sub.ref(0, 212711);

const {:count 12} .str.117: ref;

axiom .str.117 == $sub.ref(0, 213747);

const {:count 11} .str.124: ref;

axiom .str.124 == $sub.ref(0, 214782);

const {:count 15} .str.125: ref;

axiom .str.125 == $sub.ref(0, 215821);

const {:count 14} .str.126: ref;

axiom .str.126 == $sub.ref(0, 216859);

const {:count 11} .str.127: ref;

axiom .str.127 == $sub.ref(0, 217894);

const {:count 11} .str.128: ref;

axiom .str.128 == $sub.ref(0, 218929);

const {:count 12} .str.172: ref;

axiom .str.172 == $sub.ref(0, 219965);

const {:count 11} .str.173: ref;

axiom .str.173 == $sub.ref(0, 221000);

const {:count 10} .str.174: ref;

axiom .str.174 == $sub.ref(0, 222034);

const {:count 9} .str.175: ref;

axiom .str.175 == $sub.ref(0, 223067);

const {:count 10} .str.176: ref;

axiom .str.176 == $sub.ref(0, 224101);

const {:count 9} .str.177: ref;

axiom .str.177 == $sub.ref(0, 225134);

const {:count 20} .str.178: ref;

axiom .str.178 == $sub.ref(0, 226178);

const {:count 15} .str.179: ref;

axiom .str.179 == $sub.ref(0, 227217);

const {:count 22} .str.180: ref;

axiom .str.180 == $sub.ref(0, 228263);

const {:count 13} .str.181: ref;

axiom .str.181 == $sub.ref(0, 229300);

const {:count 18} .str.182: ref;

axiom .str.182 == $sub.ref(0, 230342);

const {:count 20} .str.183: ref;

axiom .str.183 == $sub.ref(0, 231386);

const {:count 20} .str.184: ref;

axiom .str.184 == $sub.ref(0, 232430);

const {:count 22} .str.185: ref;

axiom .str.185 == $sub.ref(0, 233476);

const {:count 19} .str.186: ref;

axiom .str.186 == $sub.ref(0, 234519);

const {:count 21} .str.187: ref;

axiom .str.187 == $sub.ref(0, 235564);

const {:count 21} .str.188: ref;

axiom .str.188 == $sub.ref(0, 236609);

const {:count 6} .str.189: ref;

axiom .str.189 == $sub.ref(0, 237639);

const {:count 9} .str.190: ref;

axiom .str.190 == $sub.ref(0, 238672);

const {:count 10} .str.191: ref;

axiom .str.191 == $sub.ref(0, 239706);

const {:count 10} .str.192: ref;

axiom .str.192 == $sub.ref(0, 240740);

const {:count 11} .str.193: ref;

axiom .str.193 == $sub.ref(0, 241775);

const {:count 5} .str.194: ref;

axiom .str.194 == $sub.ref(0, 242804);

const {:count 9} .str.195: ref;

axiom .str.195 == $sub.ref(0, 243837);

const {:count 9} .str.196: ref;

axiom .str.196 == $sub.ref(0, 244870);

const {:count 14} .str.197: ref;

axiom .str.197 == $sub.ref(0, 245908);

const {:count 20} .str.198: ref;

axiom .str.198 == $sub.ref(0, 246952);

const {:count 8} .str.199: ref;

axiom .str.199 == $sub.ref(0, 247984);

const {:count 19} .str.200: ref;

axiom .str.200 == $sub.ref(0, 249027);

const {:count 15} .str.201: ref;

axiom .str.201 == $sub.ref(0, 250066);

const {:count 20} .str.202: ref;

axiom .str.202 == $sub.ref(0, 251110);

const {:count 15} .str.203: ref;

axiom .str.203 == $sub.ref(0, 252149);

const {:count 19} .str.204: ref;

axiom .str.204 == $sub.ref(0, 253192);

const {:count 28} .str.205: ref;

axiom .str.205 == $sub.ref(0, 254244);

const {:count 21} .str.206: ref;

axiom .str.206 == $sub.ref(0, 255289);

const {:count 11} .str.207: ref;

axiom .str.207 == $sub.ref(0, 256324);

const {:count 17} .str.208: ref;

axiom .str.208 == $sub.ref(0, 257365);

const {:count 24} .str.209: ref;

axiom .str.209 == $sub.ref(0, 258413);

const {:count 20} .str.210: ref;

axiom .str.210 == $sub.ref(0, 259457);

const {:count 24} .str.211: ref;

axiom .str.211 == $sub.ref(0, 260505);

const {:count 29} .str.212: ref;

axiom .str.212 == $sub.ref(0, 261558);

const {:count 21} .str.213: ref;

axiom .str.213 == $sub.ref(0, 262603);

const {:count 20} .str.214: ref;

axiom .str.214 == $sub.ref(0, 263647);

const {:count 29} .str.215: ref;

axiom .str.215 == $sub.ref(0, 264700);

const {:count 19} .str.216: ref;

axiom .str.216 == $sub.ref(0, 265743);

const {:count 21} .str.217: ref;

axiom .str.217 == $sub.ref(0, 266788);

const {:count 20} .str.218: ref;

axiom .str.218 == $sub.ref(0, 267832);

const {:count 10} .str.219: ref;

axiom .str.219 == $sub.ref(0, 268866);

const {:count 14} .str.220: ref;

axiom .str.220 == $sub.ref(0, 269904);

const {:count 18} .str.221: ref;

axiom .str.221 == $sub.ref(0, 270946);

const {:count 24} .str.222: ref;

axiom .str.222 == $sub.ref(0, 271994);

const {:count 9} .str.223: ref;

axiom .str.223 == $sub.ref(0, 273027);

const {:count 9} .str.224: ref;

axiom .str.224 == $sub.ref(0, 274060);

const {:count 13} .str.225: ref;

axiom .str.225 == $sub.ref(0, 275097);

const {:count 18} .str.226: ref;

axiom .str.226 == $sub.ref(0, 276139);

const {:count 10} .str.227: ref;

axiom .str.227 == $sub.ref(0, 277173);

const {:count 17} .str.228: ref;

axiom .str.228 == $sub.ref(0, 278214);

const {:count 10} .str.229: ref;

axiom .str.229 == $sub.ref(0, 279248);

const {:count 27} .str.230: ref;

axiom .str.230 == $sub.ref(0, 280299);

const {:count 22} .str.231: ref;

axiom .str.231 == $sub.ref(0, 281345);

const {:count 25} .str.232: ref;

axiom .str.232 == $sub.ref(0, 282394);

const {:count 21} .str.233: ref;

axiom .str.233 == $sub.ref(0, 283439);

const {:count 21} .str.234: ref;

axiom .str.234 == $sub.ref(0, 284484);

const {:count 15} .str.235: ref;

axiom .str.235 == $sub.ref(0, 285523);

const {:count 22} .str.236: ref;

axiom .str.236 == $sub.ref(0, 286569);

const {:count 27} .str.237: ref;

axiom .str.237 == $sub.ref(0, 287620);

const {:count 25} .str.238: ref;

axiom .str.238 == $sub.ref(0, 288669);

const {:count 27} .str.239: ref;

axiom .str.239 == $sub.ref(0, 289720);

const {:count 22} .str.240: ref;

axiom .str.240 == $sub.ref(0, 290766);

const {:count 25} .str.241: ref;

axiom .str.241 == $sub.ref(0, 291815);

const {:count 21} .str.242: ref;

axiom .str.242 == $sub.ref(0, 292860);

const {:count 21} .str.243: ref;

axiom .str.243 == $sub.ref(0, 293905);

const {:count 24} .str.244: ref;

axiom .str.244 == $sub.ref(0, 294953);

const {:count 10} .str.245: ref;

axiom .str.245 == $sub.ref(0, 295987);

const {:count 13} .str.143: ref;

axiom .str.143 == $sub.ref(0, 297024);

const {:count 10} .str.144: ref;

axiom .str.144 == $sub.ref(0, 298058);

const {:count 14} .str.145: ref;

axiom .str.145 == $sub.ref(0, 299096);

const {:count 19} .str.146: ref;

axiom .str.146 == $sub.ref(0, 300139);

const {:count 15} .str.147: ref;

axiom .str.147 == $sub.ref(0, 301178);

const {:count 15} .str.148: ref;

axiom .str.148 == $sub.ref(0, 302217);

const {:count 18} .str.149: ref;

axiom .str.149 == $sub.ref(0, 303259);

const {:count 15} .str.150: ref;

axiom .str.150 == $sub.ref(0, 304298);

const {:count 19} .str.151: ref;

axiom .str.151 == $sub.ref(0, 305341);

const {:count 4} .str.152: ref;

axiom .str.152 == $sub.ref(0, 306369);

const {:count 6} .str.153: ref;

axiom .str.153 == $sub.ref(0, 307399);

const {:count 10} .str.154: ref;

axiom .str.154 == $sub.ref(0, 308433);

const {:count 9} .str.155: ref;

axiom .str.155 == $sub.ref(0, 309466);

const {:count 22} .str.156: ref;

axiom .str.156 == $sub.ref(0, 310512);

const {:count 33} .str.157: ref;

axiom .str.157 == $sub.ref(0, 311569);

const {:count 7} .str.158: ref;

axiom .str.158 == $sub.ref(0, 312600);

const {:count 27} .str.134: ref;

axiom .str.134 == $sub.ref(0, 313651);

const {:count 4} .str.135: ref;

axiom .str.135 == $sub.ref(0, 314679);

const {:count 4} .str.136: ref;

axiom .str.136 == $sub.ref(0, 315707);

const {:count 4} .str.137: ref;

axiom .str.137 == $sub.ref(0, 316735);

const {:count 4} .str.138: ref;

axiom .str.138 == $sub.ref(0, 317763);

const {:count 4} .str.139: ref;

axiom .str.139 == $sub.ref(0, 318791);

const {:count 5} .str.140: ref;

axiom .str.140 == $sub.ref(0, 319820);

const {:count 5} .str.141: ref;

axiom .str.141 == $sub.ref(0, 320849);

const {:count 33} .str.142: ref;

axiom .str.142 == $sub.ref(0, 321906);

const {:count 3} .str.159: ref;

axiom .str.159 == $sub.ref(0, 322933);

const {:count 4} .str.160: ref;

axiom .str.160 == $sub.ref(0, 323961);

const {:count 5} .str.161: ref;

axiom .str.161 == $sub.ref(0, 324990);

const {:count 8} .str.162: ref;

axiom .str.162 == $sub.ref(0, 326022);

const {:count 27} .str.163: ref;

axiom .str.163 == $sub.ref(0, 327073);

const {:count 4} .str.164: ref;

axiom .str.164 == $sub.ref(0, 328101);

const {:count 5} .str.165: ref;

axiom .str.165 == $sub.ref(0, 329130);

const {:count 5} .str.166: ref;

axiom .str.166 == $sub.ref(0, 330159);

const {:count 4} .str.167: ref;

axiom .str.167 == $sub.ref(0, 331187);

const {:count 5} .str.168: ref;

axiom .str.168 == $sub.ref(0, 332216);

const {:count 8} .str.169: ref;

axiom .str.169 == $sub.ref(0, 333248);

const {:count 5} .str.170: ref;

axiom .str.170 == $sub.ref(0, 334277);

const {:count 27} .str.171: ref;

axiom .str.171 == $sub.ref(0, 335328);

const {:count 39} .str.51: ref;

axiom .str.51 == $sub.ref(0, 336391);

const {:count 14} .str.52: ref;

axiom .str.52 == $sub.ref(0, 337429);

const {:count 27} .str.57: ref;

axiom .str.57 == $sub.ref(0, 338480);

const {:count 27} .str.58: ref;

axiom .str.58 == $sub.ref(0, 339531);

const {:count 22} .str.59: ref;

axiom .str.59 == $sub.ref(0, 340577);

const {:count 23} .str.60: ref;

axiom .str.60 == $sub.ref(0, 341624);

const {:count 25} .str.61: ref;

axiom .str.61 == $sub.ref(0, 342673);

const {:count 10} .str.62: ref;

axiom .str.62 == $sub.ref(0, 343707);

const {:count 5} .str.63: ref;

axiom .str.63 == $sub.ref(0, 344736);

const {:count 9} .str.70: ref;

axiom .str.70 == $sub.ref(0, 345769);

const {:count 9} .str.71: ref;

axiom .str.71 == $sub.ref(0, 346802);

const {:count 209} .str.53: ref;

axiom .str.53 == $sub.ref(0, 348035);

const {:count 44} .str.93: ref;

axiom .str.93 == $sub.ref(0, 349103);

const {:count 80} .str.94: ref;

axiom .str.94 == $sub.ref(0, 350207);

const {:count 9} .str.95: ref;

axiom .str.95 == $sub.ref(0, 351240);

const {:count 42} .str.96: ref;

axiom .str.96 == $sub.ref(0, 352306);

const {:count 24} .str.54: ref;

axiom .str.54 == $sub.ref(0, 353354);

const {:count 36} .str.72: ref;

axiom .str.72 == $sub.ref(0, 354414);

const {:count 35} .str.73: ref;

axiom .str.73 == $sub.ref(0, 355473);

const uv_cpu_to_blade: ref;

axiom uv_cpu_to_blade == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32936));

const {:count 34} .str.64: ref;

axiom .str.64 == $sub.ref(0, 356531);

const {:count 29} .str.65: ref;

axiom .str.65 == $sub.ref(0, 357584);

const {:count 24} .str.66: ref;

axiom .str.66 == $sub.ref(0, 358632);

const {:count 29} .str.67: ref;

axiom .str.67 == $sub.ref(0, 359685);

const {:count 46} .str.68: ref;

axiom .str.68 == $sub.ref(0, 360755);

const {:count 17} .str.69: ref;

axiom .str.69 == $sub.ref(0, 361796);

const node_data: ref;

axiom node_data == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32944));

const numa_node: ref;

axiom numa_node == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32952));

const {:count 11} .str.45: ref;

axiom .str.45 == $sub.ref(0, 362831);

const {:count 83} .str.47: ref;

axiom .str.47 == $sub.ref(0, 363938);

const {:count 13} .str.48: ref;

axiom .str.48 == $sub.ref(0, 364975);

const {:count 30} .str.49: ref;

axiom .str.49 == $sub.ref(0, 366029);

const {:count 15} .str.50: ref;

axiom .str.50 == $sub.ref(0, 367068);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 368100);

const {:count 3} .str.1.322: ref;

axiom .str.1.322 == $sub.ref(0, 369127);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 370165);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 371193);

const gru_vma_close: ref;

axiom gru_vma_close == $sub.ref(0, 372225);

procedure gru_vma_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, assertsPassed, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_vma_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i21: i32;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p37: ref;
  var $p38: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i9 := $M.1;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p30);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i34, $i35);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p7);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} kfree($p51);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i52 := $M.1;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 2);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb41:
    assume $i54 == 1;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(8, 1)));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb30:
    assume $i36 == 1;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p37, $p38 := $p32, $p30;
    goto $bb33;

  $bb33:
    call $p39, $p40, $p41, $p42, $p43, $i44, $i45, $p46, $p47, $p48, $i49, $i50, $p37, $p38 := gru_vma_close_loop_$bb33($i34, $p39, $p40, $p41, $p42, $p43, $i44, $i45, $p46, $p47, $p48, $i49, $i50, $p37, $p38);
    goto $bb33_last;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} list_del($p40);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p39, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} ldv_mutex_lock_12($p41);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p39, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p39, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} ldv_mutex_unlock_13($p46);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} gts_drop($p39);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p37, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p37);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i34, $i49);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i50 == 1);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb38:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $p37, $p38 := $p48, $p37;
    goto $bb38_dummy;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i45 == 1;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} gru_unload_context($p39, 0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} __bad_size_call_parameter();
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i21 := $u0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} vslice_dummy_var_89 := printk.ref.i32.ref.ref.ref.ref(.str.51, $i21, .str.52, $p0, $p26, $p7);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb12:
    assume $i15 == 1;
    call {:si_unique_call 0} $i24 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i24);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb24;

  $bb10:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb14;

  $bb15:
    assume $i16 == 1;
    call {:si_unique_call 2} $i23 := devirtbounce(0, cpu_number);
    call {:si_unique_call 3} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i23);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i21 := $i23;
    goto $bb24;

  $bb8:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb14;

  $bb19:
    assume $i18 == 1;
    call {:si_unique_call 4} $i22 := devirtbounce(0, cpu_number);
    call {:si_unique_call 5} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i22);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i21 := $i22;
    goto $bb24;

  $bb17:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb14;

  $bb21:
    assume $i19 == 1;
    call {:si_unique_call 6} $i20 := devirtbounce(0, cpu_number);
    call {:si_unique_call 7} {:cexpr "pfo_ret__"} boogie_si_record_i32($i20);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb24;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb38_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_45;
}



const gru_fault: ref;

axiom gru_fault == $sub.ref(0, 373257);

procedure gru_fault($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.5, $CurrAddr, $M.6, assertsPassed, $M.10, $M.9, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_fault($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i18: i32;
  var $i22: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $p75: ref;
  var $i76: i64;
  var $p78: ref;
  var $i35: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i64;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    call {:si_unique_call 18} {:cexpr "vaddr"} boogie_si_record_i64($i5);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i6 := $M.1;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i24 := $M.1;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 2);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i29 := $sub.i64($i5, $i28);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i30 := $udiv.i64($i29, 262144);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p32 := gru_find_thread_state($p0, $i31);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p32, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} ldv_mutex_lock_42($p36);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} __preempt_count_add(1);
    call {:si_unique_call 33} devirtbounce.1(0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} gru_check_context_placement($p32);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p32, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    call {:si_unique_call 52} devirtbounce.1(0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} __preempt_count_sub(1);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p32, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} ldv_mutex_unlock_44($p78);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i35 := 256;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i40 == 1;
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    call $i41, $i42, $i43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $p52, $i53, $p55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, vslice_dummy_var_91 := gru_fault_loop_$bb36($p2, $p32, $p36, $p37, $i41, $i42, $i43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $p52, $i53, $p55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, vslice_dummy_var_91);
    goto $bb36_last;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 2);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p44 := gru_assign_gru_context($p32);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} gru_load_context($p32);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p32, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 424)), $mul.ref(8, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p32, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i69 := $mul.i32($i68, 4194304);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i66, $i70);
    call {:si_unique_call 50} {:cexpr "paddr"} boogie_si_record_i64($i71);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i72 := $and.i64($i5, $sub.i64(0, 262144));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i73 := $lshr.i64($i71, 12);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, $p75);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vslice_dummy_var_92 := remap_pfn_range($p0, $i72, $i73, 262144, $i76);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i46 == 1;
    call {:si_unique_call 37} devirtbounce.1(0);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} __preempt_count_sub(1);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p32, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} ldv_mutex_unlock_43($p47);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p48 := get_current();
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 11712)), $mul.ref(11696, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, 0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p2, 1);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p50 := get_current();
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.2, $p2);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p50, $mul.ref(0, 11712)), $mul.ref(0, 1));
    call {:si_unique_call 42} $i53 := devirtbounce.2(0, $p52, $i51, $p52);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p2, $i53);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_91 := schedule_timeout(5);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p32, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i57 := $add.i64($i56, 50);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.3, jiffies);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i59 := $ult.i64($i57, $i58);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} ldv_mutex_lock_42($p36);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} __preempt_count_add(1);
    call {:si_unique_call 47} devirtbounce.1(0);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} gru_check_context_placement($p32);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p37);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i62 == 1);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb46_dummy;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i59 == 1;
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} gru_steal_context($p32);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i43 == 1;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(80, 1)));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i34 == 1;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i35 := 2;
    goto $bb31;

  $bb26:
    assume $i26 == 1;
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(136, 1)));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb1:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} __bad_size_call_parameter();
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i18 := $u0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i5, $sub.i64(0, 262144));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_90 := printk.ref.i32.ref.ref.i64.i64(.str.21, $i18, .str.22, $p0, $i5, $i22);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i12 == 1;
    call {:si_unique_call 19} $i21 := devirtbounce(0, cpu_number);
    call {:si_unique_call 20} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i21);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i18 := $i21;
    goto $bb20;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb11:
    assume $i13 == 1;
    call {:si_unique_call 21} $i20 := devirtbounce(0, cpu_number);
    call {:si_unique_call 22} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i20);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i18 := $i20;
    goto $bb20;

  $bb4:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb15:
    assume $i15 == 1;
    call {:si_unique_call 23} $i19 := devirtbounce(0, cpu_number);
    call {:si_unique_call 24} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i19);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i18 := $i19;
    goto $bb20;

  $bb13:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb17:
    assume $i16 == 1;
    call {:si_unique_call 25} $i17 := devirtbounce(0, cpu_number);
    call {:si_unique_call 26} {:cexpr "pfo_ret__"} boogie_si_record_i32($i17);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb20;

  $bb46_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    $i41 := $M.1;
    goto corral_source_split_133;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 374289);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 375321);

procedure __bad_size_call_parameter();



const printk: ref;

axiom printk == $sub.ref(0, 376353);

procedure printk.ref.i32.ref.i32.i32.ref.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32.i32.ref.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 55} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 56} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 57} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 58} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 1} true;
    call {:si_unique_call 59} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 60} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32.i32.i32.i64.i64.i64.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i64, p.7: i64, p.8: i64, p.9: i64) returns ($r: i32);



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 1} true;
    call {:si_unique_call 61} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 62} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 63} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 64} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 1} true;
    call {:si_unique_call 65} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 66} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.ref.ref($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.ref.ref($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 67} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 68} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref($p0: ref, p.1: i32, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref($p0: ref, p.1: i32, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 1} true;
    call {:si_unique_call 69} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 70} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.i64($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.i64($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 71} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 72} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.i64.i64.i32($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i64, p.5: i64, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.i64.i64.i32($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i64, p.5: i64, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 1} true;
    call {:si_unique_call 73} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 74} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.i64.i64($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i64, p.5: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.i64.i64($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i64, p.5: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 1} true;
    call {:si_unique_call 75} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 76} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.ref($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.ref($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 1} true;
    call {:si_unique_call 77} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 78} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32.i64.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i64, p.5: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32.i64.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i64, p.5: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 1} true;
    call {:si_unique_call 79} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 80} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i64.i32.i32.i32.i32.i32.i64.i32($p0: ref, p.1: i32, p.2: ref, p.3: i64, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i64, p.10: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i64.i32.i32.i32.i32.i32.i64.i32($p0: ref, p.1: i32, p.2: ref, p.3: i64, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i64, p.10: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 1} true;
    call {:si_unique_call 81} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 82} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i64.i32.ref($p0: ref, p.1: i32, p.2: ref, p.3: i64, p.4: i32, p.5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i64.i32.ref($p0: ref, p.1: i32, p.2: ref, p.3: i64, p.4: i32, p.5: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb15:
    assume {:verifier.code 1} true;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 1} true;
    call {:si_unique_call 83} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 84} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i64($p0: ref, p.1: i32, p.2: ref, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i64($p0: ref, p.1: i32, p.2: ref, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb16:
    assume {:verifier.code 1} true;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 1} true;
    call {:si_unique_call 85} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 86} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32.i32.i32.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32.i32.i32.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb17:
    assume {:verifier.code 1} true;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 1} true;
    call {:si_unique_call 87} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 88} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32.i32.i64.i32.i64.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i32, p.5: i64, p.6: i32, p.7: i64, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32.i32.i64.i32.i64.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i32, p.5: i64, p.6: i32, p.7: i64, p.8: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb18:
    assume {:verifier.code 1} true;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 1} true;
    call {:si_unique_call 89} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 90} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.i64.i64.i64($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i64, p.5: i64, p.6: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.i64.i64.i64($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i64, p.5: i64, p.6: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb19:
    assume {:verifier.code 1} true;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 1} true;
    call {:si_unique_call 91} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 92} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i64.i64.i64($p0: ref, p.1: i32, p.2: ref, p.3: i64, p.4: i64, p.5: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i64.i64.i64($p0: ref, p.1: i32, p.2: ref, p.3: i64, p.4: i64, p.5: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb20:
    assume {:verifier.code 1} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 1} true;
    call {:si_unique_call 93} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 94} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.i32.ref.ref.i64.i32.i32.i32.i64($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i64, p.8: i32, p.9: i32, p.10: i32, p.11: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.i32.ref.ref.i64.i32.i32.i32.i64($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i64, p.8: i32, p.9: i32, p.10: i32, p.11: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb21:
    assume {:verifier.code 1} true;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 95} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 96} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.i32($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.i32($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb22:
    assume {:verifier.code 1} true;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 1} true;
    call {:si_unique_call 97} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 98} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb23:
    assume {:verifier.code 1} true;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 99} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 100} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.i32.ref.ref.i64.i32.i32.i32.i32.i64($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i64, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.i32.ref.ref.i64.i32.i32.i32.i32.i64($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i64, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb24:
    assume {:verifier.code 1} true;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 101} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 102} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64.i64($p0: ref, p.1: i32, p.2: i64, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64.i64($p0: ref, p.1: i32, p.2: i64, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb25:
    assume {:verifier.code 1} true;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 1} true;
    call {:si_unique_call 103} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 104} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb26:
    assume {:verifier.code 1} true;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 1} true;
    call {:si_unique_call 105} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 106} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64($p0: ref, p.1: i32, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64($p0: ref, p.1: i32, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb27:
    assume {:verifier.code 1} true;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 107} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 108} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.ref.i32($p0: ref, p.1: i32, p.2: i32, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.ref.i32($p0: ref, p.1: i32, p.2: i32, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb28:
    assume {:verifier.code 1} true;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 1} true;
    call {:si_unique_call 109} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 110} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb29:
    assume {:verifier.code 1} true;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 111} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 112} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i64.i64.i64.i64($p0: ref, p.1: i32, p.2: i32, p.3: i64, p.4: i64, p.5: i64, p.6: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i64.i64.i64.i64($p0: ref, p.1: i32, p.2: i32, p.3: i64, p.4: i64, p.5: i64, p.6: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb30:
    assume {:verifier.code 1} true;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 113} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 114} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb31:
    assume {:verifier.code 1} true;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 1} true;
    call {:si_unique_call 115} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 116} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.i32.i64($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i32, p.5: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.i32.i64($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i32, p.5: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb32:
    assume {:verifier.code 1} true;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 1} true;
    call {:si_unique_call 117} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 118} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.i64.ref.ref($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i64, p.5: ref, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.i64.ref.ref($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i64, p.5: ref, p.6: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb33:
    assume {:verifier.code 1} true;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 1} true;
    call {:si_unique_call 119} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 120} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb34:
    assume {:verifier.code 1} true;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 1} true;
    call {:si_unique_call 121} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 122} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb35:
    assume {:verifier.code 1} true;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 1} true;
    call {:si_unique_call 123} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32.ref.ref.i32.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i32, p.7: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32.ref.ref.i32.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i32, p.7: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb36:
    assume {:verifier.code 1} true;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 1} true;
    call {:si_unique_call 125} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 126} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32.i32.ref.i32.i32.i64.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: i32, p.7: i32, p.8: i64, p.9: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32.i32.ref.i32.i32.i64.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: i32, p.7: i32, p.8: i64, p.9: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb37:
    assume {:verifier.code 1} true;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 128} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb38:
    assume {:verifier.code 1} true;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 129} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 130} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32.ref.ref.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32.ref.ref.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb39:
    assume {:verifier.code 1} true;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 131} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 132} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32.ref.ref.i32.i32.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i32, p.7: i32, p.8: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32.ref.ref.i32.i32.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i32, p.7: i32, p.8: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb40:
    assume {:verifier.code 1} true;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32.ref.i64.i64.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: ref, p.5: i64, p.6: i64, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32.ref.i64.i64.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: ref, p.5: i64, p.6: i64, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb41:
    assume {:verifier.code 1} true;
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 1} true;
    call {:si_unique_call 135} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 136} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32.ref.ref.i64.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i64, p.7: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32.ref.ref.i64.i64($p0: ref, p.1: i32, p.2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i64, p.7: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb42:
    assume {:verifier.code 1} true;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 1} true;
    call {:si_unique_call 137} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_long_inc: ref;

axiom atomic_long_inc == $sub.ref(0, 377385);

procedure atomic_long_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_long_inc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} atomic64_inc($p0);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    return;
}



const gru_find_thread_state: ref;

axiom gru_find_thread_state == $sub.ref(0, 378417);

procedure gru_find_thread_state($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation gru_find_thread_state($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i20: i32;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "gru_find_thread_state:arg:tsid"} boogie_si_record_i32($i1);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} spin_lock($p5);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $p6 := gru_find_current_gts_nolock($p4, $i1);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} spin_unlock($p7);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i8 := $M.1;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} __bad_size_call_parameter();
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i20 := $u0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} vslice_dummy_var_93 := printk.ref.i32.ref.ref.ref(.str.6, $i20, .str.7, $p0, $p6);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i14 == 1;
    call {:si_unique_call 144} $i23 := devirtbounce(0, cpu_number);
    call {:si_unique_call 145} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i23);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb20;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb11:
    assume $i15 == 1;
    call {:si_unique_call 146} $i22 := devirtbounce(0, cpu_number);
    call {:si_unique_call 147} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i22);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb20;

  $bb4:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb15:
    assume $i17 == 1;
    call {:si_unique_call 148} $i21 := devirtbounce(0, cpu_number);
    call {:si_unique_call 149} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i21);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb20;

  $bb13:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb17:
    assume $i18 == 1;
    call {:si_unique_call 150} $i19 := devirtbounce(0, cpu_number);
    call {:si_unique_call 151} {:cexpr "pfo_ret__"} boogie_si_record_i32($i19);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb20;
}



const ldv_mutex_lock_42: ref;

axiom ldv_mutex_lock_42 == $sub.ref(0, 379449);

procedure ldv_mutex_lock_42($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_42($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} ldv_mutex_lock_ts_ctxlock_of_gru_thread_state($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} mutex_lock($p0);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 380481);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 159} devirtbounce.4(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 158} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 157} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_check_context_placement: ref;

axiom gru_check_context_placement == $sub.ref(0, 381513);

procedure gru_check_context_placement($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation gru_check_context_placement($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p5 := get_current();
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(248, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 11712)), $mul.ref(2132, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i7, $i9);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i11 := gru_check_chiplet_assignment($p2, $p0);
    call {:si_unique_call 162} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i16 := gru_retarget_intr($p0);
    call {:si_unique_call 164} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i17 == 1;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i18 := $M.1;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 2);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(264, 1)));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i13 := $M.1;
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, 2);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} gru_unload_context($p0, 1);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(272, 1)));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_assign_gru_context: ref;

axiom gru_assign_gru_context == $sub.ref(0, 382545);

procedure gru_assign_gru_context($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_assign_gru_context($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i30: i32;
  var $p31: ref;
  var $i14: i32;
  var $p15: ref;
  var $p32: ref;
  var $p29: ref;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i8;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i65: i64;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i77: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $p36: ref;
  var $i105: i64;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i117: i32;
  var $i122: i64;
  var $i123: i64;
  var $i124: i1;
  var $p104: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i1;
  var $p136: ref;
  var $i137: i16;
  var $i138: i32;
  var $i139: i1;
  var $p135: ref;
  var $p33: ref;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(252, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i3 := $sext.i16.i32($i2);
    call {:si_unique_call 168} {:cexpr "blade_id"} boogie_si_record_i32($i3);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i7, $p8, $p9, $p10, $p11, $i12, $i13, $p16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $p24, $i25, $i26, $i27, $p28, $i30, $p31, $i14, $p15, $p32, $p29, $i34, $i35, $p37, $p38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $p47, $p46, $p36, $i125, $i126, $p127, $i128, $i129, $p130, $i131, $i132, $i133, $i134, $p136, $i137, $i138, $i139, $p135, $p33 := gru_assign_gru_context_loop_$bb4($p0, $i6, $i7, $p8, $p9, $p10, $p11, $i12, $i13, $p16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $p24, $i25, $i26, $i27, $p28, $i30, $p31, $i14, $p15, $p32, $p29, $i34, $i35, $p37, $p38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $p47, $p46, $p36, $i125, $i126, $p127, $i128, $i129, $p130, $i131, $i132, $i133, $i134, $p136, $i137, $i138, $i139, $p135, $p33);
    goto $bb4_last;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i7, 8));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.4, $p8);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i12 := gru_check_chiplet_assignment($p11, $p0);
    call {:si_unique_call 172} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i22 := check_gru_resources($p11, $i18, $i21, 16);
    call {:si_unique_call 174} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i30, $p31 := 16, $0.ref;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i14, $p15 := $i30, $p31;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p11, $mul.ref(1, 424));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i125 := gru_check_chiplet_assignment($p32, $p0);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 0);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.0, $p127);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i133 := check_gru_resources($p32, $i129, $i132, $i14);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $p135 := $p15;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p33 := $p135;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p29 := $p33;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p29);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p36 := $p29;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i105 := $M.1;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i64.i32($i105);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 1);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i122 := $M.1;
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i123 := $and.i64($i122, 2);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p104 := $p36;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $r := $p104;
    return;

  $bb80:
    assume $i124 == 1;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(64, 1)));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb55:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i109 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i110 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i111 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} __bad_size_call_parameter();
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i117 := $u0;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_95 := printk.ref.i32.ref.ref(.str.19, $i117, .str.18, .str.20);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb62:
    assume $i111 == 1;
    call {:si_unique_call 196} $i120 := devirtbounce(0, cpu_number);
    call {:si_unique_call 197} {:cexpr "pfo_ret_____6"} boogie_si_record_i32($i120);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i117 := $i120;
    goto $bb74;

  $bb60:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i112 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb64;

  $bb65:
    assume $i112 == 1;
    call {:si_unique_call 198} $i119 := devirtbounce(0, cpu_number);
    call {:si_unique_call 199} {:cexpr "pfo_ret_____5"} boogie_si_record_i32($i119);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i117 := $i119;
    goto $bb74;

  $bb58:
    assume $i109 == 1;
    assume {:verifier.code 0} true;
    $i113 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb64;

  $bb69:
    assume $i114 == 1;
    call {:si_unique_call 200} $i118 := devirtbounce(0, cpu_number);
    call {:si_unique_call 201} {:cexpr "pfo_ret_____4"} boogie_si_record_i32($i118);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i117 := $i118;
    goto $bb74;

  $bb67:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i115 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb64;

  $bb71:
    assume $i115 == 1;
    call {:si_unique_call 202} $i116 := devirtbounce(0, cpu_number);
    call {:si_unique_call 203} {:cexpr "pfo_ret_____3"} boogie_si_record_i32($i116);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i117 := $i116;
    goto $bb74;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p29, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} spin_lock($p37);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i44 := check_gru_resources($p29, $i40, $i43, 16);
    call {:si_unique_call 179} {:cexpr "tmp___1"} boogie_si_record_i32($i44);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p46 := $p29;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} reserve_gru_resources($p46, $p0);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p46);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p46, $mul.ref(0, 424)), $mul.ref(26, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i16.i8($i50);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(279, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i51);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i53 := gru_assign_context_number($p46);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(272, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} atomic_inc($p55);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref($i58, 8));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p0);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p46, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} spin_unlock($p61);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i62 := $M.1;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 2);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i65 := $M.1;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 1);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p104 := $p46;
    goto $bb54;

  $bb29:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i69 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} __bad_size_call_parameter();
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i77 := $u0;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i87 := $mul.i32($i86, 4194304);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i87);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p84, $mul.ref($i88, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.0, $p92);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} vslice_dummy_var_94 := printk.ref.i32.ref.ref.ref.i32.i32.i32.i32(.str.17, $i77, .str.18, $p89, $p0, $i94, $i96, $i99, $i102);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb36:
    assume $i71 == 1;
    call {:si_unique_call 186} $i80 := devirtbounce(0, cpu_number);
    call {:si_unique_call 187} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i80);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i77 := $i80;
    goto $bb48;

  $bb34:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i72 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb38;

  $bb39:
    assume $i72 == 1;
    call {:si_unique_call 188} $i79 := devirtbounce(0, cpu_number);
    call {:si_unique_call 189} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i79);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i77 := $i79;
    goto $bb48;

  $bb32:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i73 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb38;

  $bb43:
    assume $i74 == 1;
    call {:si_unique_call 190} $i78 := devirtbounce(0, cpu_number);
    call {:si_unique_call 191} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i78);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i77 := $i78;
    goto $bb48;

  $bb41:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i75 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb38;

  $bb45:
    assume $i75 == 1;
    call {:si_unique_call 192} $i76 := devirtbounce(0, cpu_number);
    call {:si_unique_call 193} {:cexpr "pfo_ret__"} boogie_si_record_i32($i76);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i77 := $i76;
    goto $bb48;

  $bb26:
    assume $i64 == 1;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(56, 1)));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p29, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} spin_unlock($p47);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    goto corral_source_split_481_dummy;

  $bb86:
    assume $i134 == 1;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p11, $mul.ref(1, 424)), $mul.ref(224, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i137 := $load.i16($M.0, $p136);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i138 := $zext.i16.i32($i137);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 0);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p28 := $p32;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p135 := $p32;
    goto $bb88;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p29 := $p28;
    goto $bb16;

  $bb83:
    assume $i126 == 1;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p33 := $p15;
    goto $bb92;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 424)), $mul.ref(224, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    call {:si_unique_call 175} {:cexpr "max_active_contexts"} boogie_si_record_i32($i26);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p28 := $p10;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i30, $p31 := $i26, $p10;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb14;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i14, $p15 := 16, $0.ref;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i5 := uv_numa_blade_id();
    call {:si_unique_call 170} {:cexpr "blade_id"} boogie_si_record_i32($i5);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;

  corral_source_split_481_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_421;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 383577);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 211} devirtbounce.4(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 210} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 209} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_43: ref;

axiom ldv_mutex_unlock_43 == $sub.ref(0, 384609);

procedure ldv_mutex_unlock_43($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_43($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} ldv_mutex_unlock_ts_ctxlock_of_gru_thread_state($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} mutex_unlock($p0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 385641);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $p0 := devirtbounce.5(0, current_task);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 386673);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 215} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 1} true;
    call {:si_unique_call 216} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 217} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gru_steal_context: ref;

axiom gru_steal_context == $sub.ref(0, 387705);

procedure gru_steal_context($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.10, $M.9, assertsPassed, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_steal_context($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p35: ref;
  var $p34: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p54: ref;
  var $i55: i1;
  var $i60: i1;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $i64: i1;
  var $i65: i32;
  var $p66: ref;
  var $i69: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p58: ref;
  var $i59: i32;
  var $i81: i32;
  var $p82: ref;
  var $i56: i32;
  var $p57: ref;
  var $i67: i32;
  var $p68: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $i89: i1;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $i93: i1;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i94: i32;
  var $p95: ref;
  var $i96: i1;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p111: ref;
  var $p110: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p117: ref;
  var $i118: i64;
  var $i119: i64;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i64;
  var $i128: i64;
  var $i129: i1;
  var $i130: i64;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i64;
  var $i136: i64;
  var $p137: ref;
  var $i138: i64;
  var $i139: i64;
  var $i140: i1;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i1;
  var $i147: i32;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $i148: i32;
  var $p152: ref;
  var $i153: i16;
  var $i154: i32;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(252, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i3 := $sext.i16.i32($i2);
    call {:si_unique_call 218} {:cexpr "blade_id"} boogie_si_record_i32($i3);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 221} {:cexpr "cbr"} boogie_si_record_i32($i9);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    call {:si_unique_call 222} {:cexpr "dsr"} boogie_si_record_i32($i12);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i6);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i13, 8));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.4, $p14);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1136)), $mul.ref(200, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} spin_lock($p16);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref(0, 1136)), $mul.ref(272, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i19 := $sle.i32($i18, 13);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p15, $mul.ref(0, 1136)), $mul.ref(280, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i23, 0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $p37 := $p25;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref(0, 1136)), $mul.ref(280, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p37);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref(0, 1136)), $mul.ref(272, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i23);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i40, $p41, $i42, $p43 := $i23, $0.ref, 0, $p37;
    goto $bb13;

  $bb13:
    call $i40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $p50, $p54, $i55, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i69, $p71, $p72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $p58, $i59, $i81, $p82, $i56, $p57, $i67, $p68, $p83, $i84, $i85, $i89, $i90, $i91, $i92, $i93, $p86, $p87, $i88, $i94, $p95, $i96, $i97, $i98, $i99, $p100, $i101, $p102, $p103, $p104, $p105, $i106, $i107, $i108, $p109, $p111, $p110 := gru_steal_context_loop_$bb13($p0, $i9, $i12, $p15, $i23, $p37, $i40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $p50, $p54, $i55, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i69, $p71, $p72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $p58, $i59, $i81, $p82, $i56, $p57, $i67, $p68, $p83, $i84, $i85, $i89, $i90, $i91, $i92, $i93, $p86, $p87, $i88, $i94, $p95, $i96, $i97, $i98, $i99, $p100, $i101, $p102, $p103, $p104, $p105, $i106, $i107, $i108, $p109, $p111, $p110);
    goto $bb13_last;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i44 := gru_check_chiplet_assignment($p43, $p0);
    call {:si_unique_call 225} {:cexpr "tmp___1"} boogie_si_record_i32($i44);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i94, $p95 := $i40, $p41;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i42, 0);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p15, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p104, $mul.ref(1, 424));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p43);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i108 := $ugt.i64($i106, $i107);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i108 == 1);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p15, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p110 := $p111;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i40, $p41, $i42, $p43 := 0, $p95, 1, $p110;
    goto corral_source_split_768_dummy;

  $bb61:
    assume $i108 == 1;
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p43, $mul.ref(1, 424));
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p110 := $p109;
    goto $bb63;

  $bb55:
    assume $i96 == 1;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p43);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p37);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i99 := $eq.i64($i97, $i98);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p100, $i101, $p102 := $p43, $i94, $p95;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb57;

  $bb58:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p51, $i52, $p53 := $p100, $i101, $p102;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p15, $mul.ref(0, 1136)), $mul.ref(200, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} spin_unlock($p113);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p53);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i115 == 1);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i127 := $M.1;
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i128 := $and.i64($i127, 2);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i130 := $M.1;
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i64.i32($i130);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, 1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    return;

  $bb70:
    assume $i133 == 1;
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p51, $mul.ref(0, 424)), $mul.ref(208, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.0, $p134);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i136 := __arch_hweight64($i135);
    call {:si_unique_call 240} {:cexpr "tmp___3"} boogie_si_record_i64($i136);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p51, $mul.ref(0, 424)), $mul.ref(200, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i138 := $load.i64($M.0, $p137);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i139 := __arch_hweight64($i138);
    call {:si_unique_call 242} {:cexpr "tmp___4"} boogie_si_record_i64($i139);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i140 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    $i141 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    $i142 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} __bad_size_call_parameter();
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i148 := $u0;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p51, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i153 := $load.i16($M.0, $p152);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i154 := $zext.i16.i32($i153);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_96 := printk.ref.i32.ref.i32.i32.ref.i32.i32.i64.i64(.str.15, $i148, .str.16, $i154, $i52, $p53, $i9, $i12, $i139, $i136);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb77:
    assume $i142 == 1;
    call {:si_unique_call 243} $i151 := devirtbounce(0, cpu_number);
    call {:si_unique_call 244} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i151);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i148 := $i151;
    goto $bb89;

  $bb75:
    assume $i141 == 1;
    assume {:verifier.code 0} true;
    $i143 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i143 == 1);
    goto $bb79;

  $bb80:
    assume $i143 == 1;
    call {:si_unique_call 245} $i150 := devirtbounce(0, cpu_number);
    call {:si_unique_call 246} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i150);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i148 := $i150;
    goto $bb89;

  $bb73:
    assume $i140 == 1;
    assume {:verifier.code 0} true;
    $i144 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i145 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb79;

  $bb84:
    assume $i145 == 1;
    call {:si_unique_call 247} $i149 := devirtbounce(0, cpu_number);
    call {:si_unique_call 248} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i149);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i148 := $i149;
    goto $bb89;

  $bb82:
    assume $i144 == 1;
    assume {:verifier.code 0} true;
    $i146 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb79;

  $bb86:
    assume $i146 == 1;
    call {:si_unique_call 249} $i147 := devirtbounce(0, cpu_number);
    call {:si_unique_call 250} {:cexpr "pfo_ret__"} boogie_si_record_i32($i147);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i148 := $i147;
    goto $bb89;

  $bb67:
    assume $i129 == 1;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(128, 1)));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb64:
    assume $i115 == 1;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(352, 1)), $mul.ref(24, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i118 := $load.i64($M.0, $p117);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i119 := $add.i64($i118, 1);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(352, 1)), $mul.ref(24, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p121, $i119);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i122 := $load.i64($M.3, jiffies);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p53, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p123, $i122);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i124 := is_kernel_context($p53);
    call {:si_unique_call 235} {:cexpr "tmp___2"} boogie_si_record_i32($i124);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i126 := $zext.i1.i32($i125);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} gru_unload_context($p53, $i126);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} gts_stolen($p53, $p15);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i46 := check_gru_resources($p43, $i9, $i12, 16);
    call {:si_unique_call 227} {:cexpr "tmp"} boogie_si_record_i32($i46);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i48, $p49, $p50 := $i40, $p41, $p43;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p43, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} spin_lock($p54);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i55 := $sle.i32($i40, 15);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i56, $p57 := $i40, $p41;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i67, $p68 := $i56, $p57;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p43, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} spin_unlock($p83);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p68);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p86, $p87, $i88 := $p43, $p68, $i67;
    assume true;
    goto $bb43, $bb45;

  $bb45:
    assume !($i85 == 1);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i42, 0);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i94, $p95 := $i67, $p68;
    goto $bb54;

  $bb46:
    assume $i89 == 1;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p43);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p37);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i90, $i91);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb48;

  $bb49:
    assume $i92 == 1;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i67, $i23);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p86, $p87, $i88 := $p43, $p68, $i67;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb48;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p51, $i52, $p53 := $p86, $i88, $p87;
    goto $bb18;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb44;

  $bb20:
    assume $i55 == 1;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p58, $i59 := $p41, $i40;
    goto $bb23;

  $bb23:
    call $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i69, $p71, $p72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $p58, $i59, $i81, $p82 := gru_steal_context_loop_$bb23($p15, $i23, $p37, $i42, $p43, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i69, $p71, $p72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $p58, $i59, $i81, $p82);
    goto $bb23_last;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i42, 0);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i59);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref($i69, 8));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i59, 1);
    call {:si_unique_call 233} {:cexpr "ctxnum"} boogie_si_record_i32($i79);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i80 := $sle.i32($i79, 15);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i81, $p82 := $i79, $0.ref;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i56, $p57 := $i81, $p82;
    goto $bb22;

  $bb40:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $p58, $i59 := $0.ref, $i79;
    goto $bb40_dummy;

  $bb34:
    assume $i74 == 1;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $i75 := is_gts_stealable($p72, $p15);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 232} {:cexpr "tmp___0"} boogie_si_record_i32($i75);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i77, $p78 := $i59, $p72;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i67, $p68 := $i77, $p78;
    goto $bb32;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i60 == 1;
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p43);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p37);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i61, $i62);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb27;

  $bb28:
    assume $i63 == 1;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i59, $i23);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i65, $p66 := $i59, $p58;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb27;

  $bb30:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i67, $p68 := $i65, $p66;
    goto $bb32;

  $bb16:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p51, $i52, $p53 := $p50, $i48, $p49;
    goto $bb18;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p15, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(1, 424));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p25);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i64($i30, $i31);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p15, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p34 := $p35;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p37 := $p34;
    goto $bb12;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p25, $mul.ref(1, 424));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p34 := $p33;
    goto $bb11;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 1136)), $mul.ref(272, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i5 := uv_numa_blade_id();
    call {:si_unique_call 220} {:cexpr "blade_id"} boogie_si_record_i32($i5);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;

  $bb40_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  corral_source_split_768_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_672;
}



const gru_load_context: ref;

axiom gru_load_context == $sub.ref(0, 388737);

procedure gru_load_context($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation gru_load_context($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i11: i1;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $i20: i8;
  var $i21: i8;
  var $i22: i8;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var $i29: i8;
  var $i30: i8;
  var $i31: i8;
  var $i32: i8;
  var $i33: i8;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i8;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i8;
  var $i57: i8;
  var $i58: i8;
  var $p59: ref;
  var $i60: i8;
  var $p61: ref;
  var $i62: i8;
  var $i63: i8;
  var $i64: i8;
  var $i65: i8;
  var $p66: ref;
  var $i67: i8;
  var $i68: i8;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $i74: i64;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i8;
  var $i84: i8;
  var $i85: i8;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $i92: i8;
  var $i93: i8;
  var $i94: i8;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $i100: i8;
  var $i101: i8;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $i107: i8;
  var $i108: i8;
  var $i109: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i16;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i118: i64;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $i130: i32;
  var $p134: ref;
  var $i135: i64;
  var $p136: ref;
  var $i137: i64;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $p145: ref;
  var $i146: i64;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $i150: i1;
  var $i151: i64;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $i155: i1;
  var $i156: i1;
  var $i157: i1;
  var $i158: i1;
  var $i159: i1;
  var $i160: i1;
  var $i161: i1;
  var $i162: i32;
  var $i164: i32;
  var $i165: i32;
  var $i166: i32;
  var $i163: i32;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i16;
  var $i171: i32;
  var $p172: ref;
  var $i173: i64;
  var $p174: ref;
  var $i175: i64;
  var $p176: ref;
  var $i177: i64;
  var $i178: i1;
  var $i179: i32;
  var $p180: ref;
  var $i181: i32;
  var $i183: i32;
  var $p185: ref;
  var $p186: ref;
  var $i187: i16;
  var $p189: ref;
  var $i190: i32;
  var $p192: ref;
  var $p193: ref;
  var $i194: i16;
  var $p196: ref;
  var $i197: i32;
  var $p199: ref;
  var $p200: ref;
  var $i201: i16;
  var $p203: ref;
  var $i204: i32;
  var $p206: ref;
  var $p207: ref;
  var $i208: i16;
  var $p210: ref;
  var $i211: i32;
  var $p213: ref;
  var $p214: ref;
  var $i215: i16;
  var $p217: ref;
  var $i218: i32;
  var $p220: ref;
  var $p221: ref;
  var $i222: i16;
  var $p224: ref;
  var $i225: i32;
  var $p227: ref;
  var $p228: ref;
  var $i229: i16;
  var $p231: ref;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 253} {:cexpr "ctxnum"} boogie_si_record_i32($i4);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $p7 := get_cch($p6, $i4);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} lock_cch_handle($p7);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 3);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i11 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 2);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i11);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i19 := $and.i8($i16, 1);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i20 := $shl.i8($i19, 4);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i21 := $and.i8($i18, $sub.i8(0, 17));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i22 := $or.i8($i21, $i20);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i22);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 2);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i30 := $and.i8($i27, 1);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i31 := $shl.i8($i30, 3);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i32 := $and.i8($i29, $sub.i8(0, 9));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i33 := $or.i8($i32, $i31);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i33);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p7);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(1, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(278, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i53 := $sext.i8.i32($i52);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i54 := $sge.i32($i53, 0);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i54 == 1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p7);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i68 := $and.i8($i67, $sub.i8(0, 65));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i68);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(2, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, $sub.i32(0, 65537));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i72);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(224, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i64.i32($i74);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, $i75);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(216, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p77);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p79, $i78);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i80 := is_kernel_context($p0);
    call {:si_unique_call 258} {:cexpr "tmp"} boogie_si_record_i32($i80);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i81 == 1);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p7);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i101 := $and.i8($i100, $sub.i8(0, 33));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, $i101);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(2, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, $sub.i32(0, 65537));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, $i105);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i108 := $and.i8($i107, $sub.i8(0, 5));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, $i108);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i109 := gru_load_mm_tracker($p2, $p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 260} {:cexpr "asid"} boogie_si_record_i32($i109);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 4));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i109);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i113 := $load.i16($M.0, $p112);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(0, 2));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p115, $i113);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i183 := $add.i32($i109, 1);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(1, 4));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p185, $i183);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i187 := $load.i16($M.0, $p186);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(1, 2));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p189, $i187);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i109, 2);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(2, 4));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p192, $i190);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i194 := $load.i16($M.0, $p193);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(2, 2));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p196, $i194);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i197 := $add.i32($i109, 3);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(3, 4));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p199, $i197);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i201 := $load.i16($M.0, $p200);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(3, 2));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p203, $i201);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i204 := $add.i32($i109, 4);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(4, 4));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p206, $i204);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i208 := $load.i16($M.0, $p207);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(4, 2));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p210, $i208);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i211 := $add.i32($i109, 5);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(5, 4));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p213, $i211);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i215 := $load.i16($M.0, $p214);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(5, 2));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p217, $i215);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i218 := $add.i32($i109, 6);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(6, 4));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p220, $i218);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i222 := $load.i16($M.0, $p221);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(6, 2));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p224, $i222);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i225 := $add.i32($i109, 7);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(7, 4));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p227, $i225);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i229 := $load.i16($M.0, $p228);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(7, 2));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p231, $i229);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i116 := cch_allocate($p7);
    call {:si_unique_call 262} {:cexpr "err"} boogie_si_record_i32($i116);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(464, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p2, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(216, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i144 := $load.i64($M.0, $p143);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(224, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i146 := $load.i64($M.0, $p145);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(348, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} gru_load_context_data($p140, $p142, $i4, $i144, $i146, $i148);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i149 := cch_start($p7);
    call {:si_unique_call 276} {:cexpr "tmp___0"} boogie_si_record_i32($i149);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i150 := $ne.i32($i149, 0);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} unlock_cch_handle($p7);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i151 := $M.1;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i64.i32($i151);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i152, 1);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    return;

  $bb50:
    assume $i154 == 1;
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i155 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    $i156 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    $i157 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} __bad_size_call_parameter();
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i163 := $u0;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i170 := $load.i16($M.0, $p169);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i171 := $zext.i16.i32($i170);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(216, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i173 := $load.i64($M.0, $p172);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(224, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i175 := $load.i64($M.0, $p174);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i177 := $load.i64($M.0, $p176);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i178 := $eq.i64($i177, 2);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i179 := $zext.i1.i32($i178);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_98 := printk.ref.i32.ref.i32.ref.i64.i64.i32.i32(.str.14, $i163, .str.13, $i171, $p0, $i173, $i175, $i179, $i181);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb57:
    assume $i157 == 1;
    call {:si_unique_call 279} $i166 := devirtbounce(0, cpu_number);
    call {:si_unique_call 280} {:cexpr "pfo_ret_____6"} boogie_si_record_i32($i166);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i163 := $i166;
    goto $bb69;

  $bb55:
    assume $i156 == 1;
    assume {:verifier.code 0} true;
    $i158 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i158 == 1);
    goto $bb59;

  $bb60:
    assume $i158 == 1;
    call {:si_unique_call 281} $i165 := devirtbounce(0, cpu_number);
    call {:si_unique_call 282} {:cexpr "pfo_ret_____5"} boogie_si_record_i32($i165);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i163 := $i165;
    goto $bb69;

  $bb53:
    assume $i155 == 1;
    assume {:verifier.code 0} true;
    $i159 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    $i160 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb59;

  $bb64:
    assume $i160 == 1;
    call {:si_unique_call 283} $i164 := devirtbounce(0, cpu_number);
    call {:si_unique_call 284} {:cexpr "pfo_ret_____4"} boogie_si_record_i32($i164);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i163 := $i164;
    goto $bb69;

  $bb62:
    assume $i159 == 1;
    assume {:verifier.code 0} true;
    $i161 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb59;

  $bb66:
    assume $i161 == 1;
    call {:si_unique_call 285} $i162 := devirtbounce(0, cpu_number);
    call {:si_unique_call 286} {:cexpr "pfo_ret_____3"} boogie_si_record_i32($i162);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i163 := $i162;
    goto $bb69;

  $bb46:
    assume $i150 == 1;
    call {:si_unique_call 277} devirtbounce.6(0, .str.11, 645, 12);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    call gru_load_context_loop_$bb48();
    goto $bb48_last;

  $bb17:
    assume $i117 == 1;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i118 := $M.1;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i64.i32($i118);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 1);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    call {:si_unique_call 273} devirtbounce.6(0, .str.11, 638, 12);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    call gru_load_context_loop_$bb44();
    goto $bb44_last;

  $bb19:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i122 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i124 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} __bad_size_call_parameter();
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i130 := $u0;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(216, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.0, $p134);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(224, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i137 := $load.i64($M.0, $p136);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} vslice_dummy_var_97 := printk.ref.i32.ref.i32.ref.ref.i64.i64(.str.12, $i130, .str.13, $i116, $p7, $p0, $i135, $i137);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb26:
    assume $i124 == 1;
    call {:si_unique_call 263} $i133 := devirtbounce(0, cpu_number);
    call {:si_unique_call 264} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i133);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i130 := $i133;
    goto $bb38;

  $bb24:
    assume $i123 == 1;
    assume {:verifier.code 0} true;
    $i125 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb28;

  $bb29:
    assume $i125 == 1;
    call {:si_unique_call 265} $i132 := devirtbounce(0, cpu_number);
    call {:si_unique_call 266} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i132);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i130 := $i132;
    goto $bb38;

  $bb22:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $i126 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i127 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb28;

  $bb33:
    assume $i127 == 1;
    call {:si_unique_call 267} $i131 := devirtbounce(0, cpu_number);
    call {:si_unique_call 268} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i131);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i130 := $i131;
    goto $bb38;

  $bb31:
    assume $i126 == 1;
    assume {:verifier.code 0} true;
    $i128 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb28;

  $bb35:
    assume $i128 == 1;
    call {:si_unique_call 269} $i129 := devirtbounce(0, cpu_number);
    call {:si_unique_call 270} {:cexpr "pfo_ret__"} boogie_si_record_i32($i129);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i130 := $i129;
    goto $bb38;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i81 == 1;
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p7);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i84 := $and.i8($i83, $sub.i8(0, 33));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i85 := $or.i8($i84, 32);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, $i85);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(2, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, $sub.i32(0, 65537));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i90 := $or.i32($i89, 65536);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i90);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i93 := $and.i8($i92, $sub.i8(0, 5));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i94 := $or.i8($i93, 4);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, $i94);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(2, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, $sub.i32(0, 16));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i98);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i54 == 1;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p7);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i57 := $and.i8($i56, $sub.i8(0, 65));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i58 := $or.i8($i57, 64);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, $i58);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(278, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i63 := $and.i8($i60, 3);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i64 := $and.i8($i62, $sub.i8(0, 4));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i65 := $or.i8($i64, $i63);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $i65);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i38 == 1;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i39 := gru_cpu_fault_map_id();
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(2, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i43);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p45);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i46, 15);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i47, $sub.i32(0, 16));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i49, $i48);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i50);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb48_dummy:
    assume false;
    return;

  $bb48_last:
    assume {:verifier.code 0} true;
    goto $bb48_dummy;

  $bb44_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    goto $bb44_dummy;
}



const remap_pfn_range: ref;

axiom remap_pfn_range == $sub.ref(0, 389769);

procedure remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $CurrAddr;



implementation remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.5 := $store.i64($M.5, $p6, $i4);
    call {:si_unique_call 290} {:cexpr "remap_pfn_range:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 291} {:cexpr "remap_pfn_range:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 292} {:cexpr "remap_pfn_range:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 1} true;
    call {:si_unique_call 293} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 294} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv_mutex_unlock_44: ref;

axiom ldv_mutex_unlock_44 == $sub.ref(0, 390801);

procedure ldv_mutex_unlock_44($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_44($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} ldv_mutex_unlock_ts_ctxlock_of_gru_thread_state($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} mutex_unlock($p0);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_ts_ctxlock_of_gru_thread_state: ref;

axiom ldv_mutex_unlock_ts_ctxlock_of_gru_thread_state == $sub.ref(0, 391833);

procedure ldv_mutex_unlock_ts_ctxlock_of_gru_thread_state($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_ts_ctxlock_of_gru_thread_state($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 298} {:cexpr "ldv_mutex_ts_ctxlock_of_gru_thread_state"} boogie_si_record_i32(1);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} ldv_error();
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 392865);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 393897);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 299} __VERIFIER_error();
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const get_cch: ref;

axiom get_cch == $sub.ref(0, 394929);

procedure get_cch($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_cch($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} {:cexpr "get_cch:arg:ctxnum"} boogie_si_record_i32($i1);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i1, 256);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 67239936);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p0, $mul.ref($i4, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const lock_cch_handle: ref;

axiom lock_cch_handle == $sub.ref(0, 395961);

procedure lock_cch_handle($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation lock_cch_handle($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} __lock_handle($p1);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    return;
}



const gru_cpu_fault_map_id: ref;

axiom gru_cpu_fault_map_id == $sub.ref(0, 396993);

procedure gru_cpu_fault_map_id() returns ($r: i32);
  free requires assertsPassed;



implementation gru_cpu_fault_map_id() returns ($r: i32)
{
  var $i0: i1;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i8: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i0 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i0} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i0 == 1);
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} __bad_size_call_parameter();
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i8 := $u0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i12 := devirtbounce.7(0, x86_cpu_to_apicid);
    call {:si_unique_call 311} {:cexpr "__ptr"} boogie_si_record_i64($i12);
    call {:si_unique_call 312} $i13 := devirtbounce.7(0, x86_cpu_to_apicid);
    call {:si_unique_call 313} {:cexpr "__ptr___0"} boogie_si_record_i64($i13);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i8);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i14, 8));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.3, $p15);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, $i12);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.3, $p18);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i21 := $ashr.i32($i20, 2);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 4);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i8);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i23, 8));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.3, $p24);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, $i13);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.3, $p27);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i30 := $ashr.i32($i29, 1);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 3);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i22, $i31);
    call {:si_unique_call 314} {:cexpr "core"} boogie_si_record_i32($i32);
    call {:si_unique_call 315} $i33 := devirtbounce.7(0, x86_cpu_to_apicid);
    call {:si_unique_call 316} {:cexpr "__ptr___1"} boogie_si_record_i64($i33);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i8);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i34, 8));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.3, $p35);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, $i33);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i37);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.3, $p38);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i41 := $ashr.i32($i40, 5);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 1);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i43 := $mul.i32($i42, 8);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, $i32);
    call {:si_unique_call 317} {:cexpr "id"} boogie_si_record_i32($i44);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb6:
    assume $i2 == 1;
    call {:si_unique_call 302} $i11 := devirtbounce(0, cpu_number);
    call {:si_unique_call 303} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i11);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb18;

  $bb4:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb9:
    assume $i3 == 1;
    call {:si_unique_call 304} $i10 := devirtbounce(0, cpu_number);
    call {:si_unique_call 305} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i10);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb18;

  $bb2:
    assume $i0 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb13:
    assume $i5 == 1;
    call {:si_unique_call 306} $i9 := devirtbounce(0, cpu_number);
    call {:si_unique_call 307} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i9);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb18;

  $bb11:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb15:
    assume $i6 == 1;
    call {:si_unique_call 308} $i7 := devirtbounce(0, cpu_number);
    call {:si_unique_call 309} {:cexpr "pfo_ret__"} boogie_si_record_i32($i7);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb18;
}



const is_kernel_context: ref;

axiom is_kernel_context == $sub.ref(0, 398025);

procedure is_kernel_context($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_kernel_context($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const gru_load_mm_tracker: ref;

axiom gru_load_mm_tracker == $sub.ref(0, 399057);

procedure gru_load_mm_tracker($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation gru_load_mm_tracker($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $i48: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i16;
  var $p69: ref;
  var $p70: ref;
  var $i71: i16;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i16;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i95: i32;
  var $p99: ref;
  var $i100: i16;
  var $i101: i32;
  var $p102: ref;
  var $i103: i32;
  var $p105: ref;
  var $i106: i64;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 25032)), $mul.ref(456, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i64($i7);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref($i8, 12));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32(1, $i11);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    call {:si_unique_call 319} {:cexpr "ctxbitmap"} boogie_si_record_i16($i13);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 25032)), $mul.ref(32, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} spin_lock($p14);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref($i8, 12)), $mul.ref(4, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 16777215);
    call {:si_unique_call 321} {:cexpr "asid"} boogie_si_record_i32($i18);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(32, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} spin_lock($p19);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i18, 0);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i20 == 1);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref($i8, 12)), $mul.ref(8, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i49 := $M.1;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 2);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i48 := $i18;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(32, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} spin_unlock($p52);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref($i8, 12)), $mul.ref(8, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i13);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i55, $i56);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 328} {:cexpr "tmp"} boogie_si_record_i64($i61);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref($i8, 12)), $mul.ref(8, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.0, $p63);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i13);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i65, $i66);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref($i8, 12)), $mul.ref(8, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $i68);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p70);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i64($i71);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 25032)), $mul.ref(200, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i75 := variable_test_bit($i72, $p74);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 332} {:cexpr "tmp___0"} boogie_si_record_i32($i75);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 25032)), $mul.ref(32, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} spin_unlock($p82);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i83 := $M.1;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i64.i32($i83);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 1);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb23:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i87 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} __bad_size_call_parameter();
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i95 := $u0;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.0, $p99);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 25032)), $mul.ref(200, 1)), $mul.ref(0, 8));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.0, $p105);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_99 := printk.ref.i32.ref.i32.ref.ref.i32.i32.i64(.str.83, $i95, .str.84, $i101, $p1, $p3, $i103, $i48, $i106);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb30:
    assume $i89 == 1;
    call {:si_unique_call 335} $i98 := devirtbounce(0, cpu_number);
    call {:si_unique_call 336} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i98);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i95 := $i98;
    goto $bb42;

  $bb28:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i90 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb32;

  $bb33:
    assume $i90 == 1;
    call {:si_unique_call 337} $i97 := devirtbounce(0, cpu_number);
    call {:si_unique_call 338} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i97);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i95 := $i97;
    goto $bb42;

  $bb26:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i91 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb32;

  $bb37:
    assume $i92 == 1;
    call {:si_unique_call 339} $i96 := devirtbounce(0, cpu_number);
    call {:si_unique_call 340} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i96);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i95 := $i96;
    goto $bb42;

  $bb35:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i93 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb32;

  $bb39:
    assume $i93 == 1;
    call {:si_unique_call 341} $i94 := devirtbounce(0, cpu_number);
    call {:si_unique_call 342} {:cexpr "pfo_ret__"} boogie_si_record_i32($i94);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i95 := $i94;
    goto $bb42;

  $bb20:
    assume $i76 == 1;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.0, $p77);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i64($i78);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 25032)), $mul.ref(200, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} __set_bit($i79, $p81);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i62 == 1;
    call {:si_unique_call 330} devirtbounce.6(0, .str.11, 260, 12);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call gru_load_mm_tracker_loop_$bb18();
    goto $bb18_last;

  $bb13:
    assume $i51 == 1;
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(168, 1)));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p9);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 16777215);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(184, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i27, $i29);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i31 := gru_assign_asid($p0);
    call {:si_unique_call 324} {:cexpr "asid"} boogie_si_record_i32($i31);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref($i8, 12)), $mul.ref(4, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i31, 16777215);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i34, $sub.i32(0, 16777216));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i36, $i35);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i37);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(184, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p9);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i39, 16777215);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i41, $sub.i32(0, 16777216));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, $i42);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i44);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i45 := $M.1;
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 2);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i48 := $i31;
    goto $bb12;

  $bb9:
    assume $i47 == 1;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(144, 1)));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;

  $bb18_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto $bb18_dummy;
}



const cch_allocate: ref;

axiom cch_allocate == $sub.ref(0, 400089);

procedure cch_allocate($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cch_allocate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i3 := $and.i8($i2, $sub.i8(0, 29));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i4 := $or.i8($i3, 8);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i4);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} start_instruction($p5);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i7 := wait_instruction_complete($p6, 0);
    call {:si_unique_call 347} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} sync_core();
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const gru_load_context_data: ref;

axiom gru_load_context_data == $sub.ref(0, 401121);

procedure gru_load_context_data($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i64, $i5: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_load_context_data($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i64, $i5: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i27: i1;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p37: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p25: ref;
  var $p26: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i32;
  var $i52: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p53: ref;
  var $p17: ref;
  var $i54: i1;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i67: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $p66: ref;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 350} {:cexpr "gru_load_context_data:arg:ctxnum"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $i3);
    call {:si_unique_call 351} {:cexpr "gru_load_context_data:arg:dsrmap"} boogie_si_record_i64($i4);
    call {:si_unique_call 352} {:cexpr "gru_load_context_data:arg:data_valid"} boogie_si_record_i32($i5);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i2, 4194304);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref($i8, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p1, $mul.ref(67174400, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i11 := __arch_hweight64($i4);
    call {:si_unique_call 354} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i12 := $mul.i64($i11, 1024);
    call {:si_unique_call 355} {:cexpr "length"} boogie_si_record_i64($i12);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p6);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} gru_prefetch_context($p9, $p9, $p10, $i13, $i12);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i14 := find_first_bit($p6, 64);
    call {:si_unique_call 358} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    call {:si_unique_call 359} {:cexpr "scr"} boogie_si_record_i32($i15);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i15, 63);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p17 := $p0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i5, 0);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    $i59 := $add.i64($i8, 131072);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p1, $mul.ref($i59, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 375} cmdloc_dummy_var_8 := $memset.i8(cmdloc_dummy_var_7, $p60, 0, $i12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i54 == 1;
    $i55 := $add.i64($i8, 131072);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p1, $mul.ref($i55, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} memcpy_guard($p56, $p17, $i12);
    $i57 := $add.i64($i8, 131072);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p1, $mul.ref($i57, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 374} cmdloc_dummy_var_6 := $memcpy.i8(cmdloc_dummy_var_4, cmdloc_dummy_var_5, $p58, $p17, $i12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_6;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p18, $i19, $p20 := $p0, $i15, $p9;
    goto $bb4;

  $bb4:
    call $i21, $i22, $i23, $i24, $i27, $i28, $p29, $i30, $i31, $i32, $p33, $i34, $i35, $p36, $i38, $i39, $i40, $p41, $p37, $i42, $i43, $i44, $p45, $p46, $i47, $p25, $p26, $i48, $i49, $i50, $i51, $i52, $p18, $i19, $p20, $p53, $i61, $i62, $i63, $i64, $p65, $i67, $p68, $i69, $i70, $i71, $p72, $i73, $i74, $p75, $p66, $i76, $i77, $i78, $p79, $i80, $p81, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11, cmdloc_dummy_var_12 := gru_load_context_data_loop_$bb4($p1, $i5, $p6, $i21, $i22, $i23, $i24, $i27, $i28, $p29, $i30, $i31, $i32, $p33, $i34, $i35, $p36, $i38, $i39, $i40, $p41, $p37, $i42, $i43, $i44, $p45, $p46, $i47, $p25, $p26, $i48, $i49, $i50, $i51, $i52, $p18, $i19, $p20, $p53, $i61, $i62, $i63, $i64, $p65, $i67, $p68, $i69, $i70, $i71, $p72, $i73, $i74, $p75, $p66, $i76, $i77, $i78, $p79, $i80, $p81, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11, cmdloc_dummy_var_12);
    goto $bb4_last;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i21 := $mul.i32($i19, 2);
    call {:si_unique_call 360} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i19, 1);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i22, 2);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, $i21);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p25, $p26 := $p20, $p18;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i19, 1);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i50 := find_next_bit($p6, 64, $i49);
    call {:si_unique_call 371} {:cexpr "tmp___3"} boogie_si_record_i64($i50);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i50);
    call {:si_unique_call 372} {:cexpr "scr"} boogie_si_record_i32($i51);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i52 := $sle.i32($i51, 63);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p53 := $p26;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p17 := $p53;
    goto $bb3;

  $bb16:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $p18, $i19, $p20 := $p26, $i51, $p25;
    goto $bb16_dummy;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i5, 0);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 365} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p20, 0, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i38 := $mul.i32($i21, 256);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    $i40 := $add.i64(67174400, $i39);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p1, $mul.ref($i40, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 366} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p41, 0, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    assume {:verifier.code 0} true;
    $p37 := $p18;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} devirtbounce.1(0);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i21, 256);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    $i44 := $add.i64(67174400, $i43);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p1, $mul.ref($i44, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} gru_flush_cache($p45);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p20, $mul.ref(256, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i21, 1);
    call {:si_unique_call 369} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i5, 0);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i61 == 1);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 378} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p46, 0, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i62 := $mul.i32($i47, 256);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    $i64 := $add.i64(67174400, $i63);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p1, $mul.ref($i64, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 379} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p65, 0, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    assume {:verifier.code 0} true;
    $p66 := $p37;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} devirtbounce.1(0);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i76 := $mul.i32($i47, 256);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i76);
    $i78 := $add.i64(67174400, $i77);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p1, $mul.ref($i78, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} gru_flush_cache($p79);
    $i80 := $add.i64(256, 256);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p20, $mul.ref($i80, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p25, $p26 := $p81, $p66;
    goto $bb8;

  $bb22:
    assume $i61 == 1;
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i67 := gru_copy_handle($p46, $p37);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p37, $mul.ref($i67, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i69 := $mul.i32($i47, 256);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    $i71 := $add.i64(67174400, $i70);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p1, $mul.ref($i71, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i73 := gru_copy_handle($p72, $p68);
    $i74 := $add.i64($i67, $i73);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p37, $mul.ref($i74, 1));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p66 := $p75;
    goto $bb24;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i28 := gru_copy_handle($p20, $p18);
    call {:si_unique_call 362} {:cexpr "tmp___1"} boogie_si_record_i64($i28);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p18, $mul.ref($i28, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i21, 256);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    $i32 := $add.i64(67174400, $i31);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref($i32, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i34 := gru_copy_handle($p33, $p29);
    call {:si_unique_call 364} {:cexpr "tmp___2"} boogie_si_record_i64($i34);
    $i35 := $add.i64($i28, $i34);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p18, $mul.ref($i35, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p37 := $p36;
    goto $bb13;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1347;
}



const cch_start: ref;

axiom cch_start == $sub.ref(0, 402153);

procedure cch_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cch_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i3 := $and.i8($i2, $sub.i8(0, 29));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i4 := $or.i8($i3, 4);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i4);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} start_instruction($p5);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i7 := wait_instruction_complete($p6, 1);
    call {:si_unique_call 384} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const unlock_cch_handle: ref;

axiom unlock_cch_handle == $sub.ref(0, 403185);

procedure unlock_cch_handle($p0: ref);
  free requires assertsPassed;



implementation unlock_cch_handle($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} __unlock_handle($p1);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    return;
}



const __unlock_handle: ref;

axiom __unlock_handle == $sub.ref(0, 404217);

procedure __unlock_handle($p0: ref);
  free requires assertsPassed;



implementation __unlock_handle($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} clear_bit(1, $p1);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 405249);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 388} devirtbounce.8(0, $p1, $i0, $p1);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    return;
}



const start_instruction: ref;

axiom start_instruction == $sub.ref(0, 406281);

procedure start_instruction($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation start_instruction($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 389} devirtbounce.1(0);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i3 := $or.i64($i2, 131073);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, $i3);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} gru_flush_cache($p0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    return;
}



const wait_instruction_complete: ref;

axiom wait_instruction_complete == $sub.ref(0, 407313);

procedure wait_instruction_complete($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation wait_instruction_complete($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i12: i64;
  var $i13: i32;
  var $i9: i64;
  var $i10: i32;
  var $i11: i64;
  var $i14: i64;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} {:cexpr "wait_instruction_complete:arg:opc"} boogie_si_record_i32($i1);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i2 := get_cycles___1();
    call {:si_unique_call 393} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} cpu_relax();
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i64($i4, 16);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 3);
    call {:si_unique_call 395} {:cexpr "status"} boogie_si_record_i32($i7);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 2);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i2, $i7;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i11 := $i2;
    goto $bb4;

  $bb4:
    call $i12, $i13, $i11, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26 := wait_instruction_complete_loop_$bb4($p0, $p3, $i12, $i13, $i11, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i14 := get_cycles___1();
    call {:si_unique_call 397} {:cexpr "tmp___1"} boogie_si_record_i64($i14);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.3, tsc_khz);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 10000);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64($i14, $i11);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i19 := $ult.i64($i17, $i18);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i11;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} cpu_relax();
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p3);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i64($i22, 16);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 3);
    call {:si_unique_call 402} {:cexpr "status"} boogie_si_record_i32($i25);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 2);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i21, $i25;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i21;
    goto $bb11_dummy;

  $bb5:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i12, $i13;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i27 := $M.1;
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 2);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i30 := get_cycles___1();
    call {:si_unique_call 404} {:cexpr "tmp___2"} boogie_si_record_i64($i30);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i31 := $sub.i64($i30, $i9);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} update_mcs_stats($i1, $i31);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} report_instruction_timeout($p0);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i20 := get_cycles___1();
    call {:si_unique_call 400} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb10;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const get_cycles___1: ref;

axiom get_cycles___1 == $sub.ref(0, 408345);

procedure get_cycles___1() returns ($r: i64);
  free requires assertsPassed;



implementation get_cycles___1() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i0 := paravirt_read_tsc___1();
    call {:si_unique_call 407} {:cexpr "ret"} boogie_si_record_i64($i0);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const cpu_relax: ref;

axiom cpu_relax == $sub.ref(0, 409377);

procedure cpu_relax();
  free requires assertsPassed;



implementation cpu_relax()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} rep_nop();
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    return;
}



const report_instruction_timeout: ref;

axiom report_instruction_timeout == $sub.ref(0, 410409);

procedure report_instruction_timeout($p0: ref);
  free requires assertsPassed;



implementation report_instruction_timeout($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i64;
  var $i11: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p12: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, 134217727);
    call {:si_unique_call 409} {:cexpr "goff"} boogie_si_record_i64($i2);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i64($i2, 67239935);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i64($i2, 67141631);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i64($i2, 67207167);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p17 := .str.256;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p12 := $p17;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p7 := $p12;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} panic.ref.ref.ref(.str.260, $p0, $p7);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i14 := $ule.i64($i2, 67239935);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb19;

  $bb20:
    assume $i14 == 1;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i2, 255);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb19;

  $bb22:
    assume $i16 == 1;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p17 := .str.259;
    goto $bb24;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i9 := $ule.i64($i2, 67147775);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb11;

  $bb12:
    assume $i9 == 1;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i2, 255);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb11;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p12 := .str.258;
    goto $bb16;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i4 := $ule.i64($i2, 67244031);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i2, 255);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p7 := .str.257;
    goto $bb8;
}



const update_mcs_stats: ref;

axiom update_mcs_stats == $sub.ref(0, 411441);

procedure update_mcs_stats($i0: i32, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation update_mcs_stats($i0: i32, $i1: i64)
{
  var $i2: i64;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} {:cexpr "update_mcs_stats:arg:op"} boogie_si_record_i32($i0);
    call {:si_unique_call 412} {:cexpr "update_mcs_stats:arg:clks"} boogie_si_record_i64($i1);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i2 := $mul.i64($i1, 1000000);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.3, tsc_khz);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i5 := $udiv.i64($i2, $i4);
    call {:si_unique_call 413} {:cexpr "nsec"} boogie_si_record_i64($i5);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref($i6, 24)), $mul.ref(0, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} atomic_long_inc($p8);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref($i9, 24)), $mul.ref(8, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} atomic_long_add($i5, $p11);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref($i12, 24)), $mul.ref(16, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i16 := $ult.i64($i15, $i5);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i0);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref($i17, 24)), $mul.ref(16, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i5);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_long_add: ref;

axiom atomic_long_add == $sub.ref(0, 412473);

procedure atomic_long_add($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation atomic_long_add($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} {:cexpr "atomic_long_add:arg:i"} boogie_si_record_i64($i0);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} atomic64_add($i0, $p1);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    return;
}



const atomic64_add: ref;

axiom atomic64_add == $sub.ref(0, 413505);

procedure atomic64_add($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation atomic64_add($i0: i64, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} {:cexpr "atomic64_add:arg:i"} boogie_si_record_i64($i0);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    call {:si_unique_call 419} devirtbounce.8(0, $p2, $i0, $p3);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    return;
}



const panic: ref;

axiom panic == $sub.ref(0, 414537);

procedure panic.ref.ref.ref($p0: ref, p.1: ref, p.2: ref);
  free requires assertsPassed;



implementation panic.ref.ref.ref($p0: ref, p.1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    return;
}



const rep_nop: ref;

axiom rep_nop == $sub.ref(0, 415569);

procedure rep_nop();
  free requires assertsPassed;



implementation rep_nop()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} devirtbounce.1(0);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    return;
}



const paravirt_read_tsc___1: ref;

axiom paravirt_read_tsc___1 == $sub.ref(0, 416601);

procedure paravirt_read_tsc___1() returns ($r: i64);
  free requires assertsPassed;



implementation paravirt_read_tsc___1() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.3, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 312)), $mul.ref(240, 1)));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 422} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 424} $p7 := devirtbounce.9(0, 34, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 312)), $mul.ref(240, 1)), 511);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i8 := $extractvalue($p7, 4);
    call {:si_unique_call 425} {:cexpr "__eax"} boogie_si_record_i64($i8);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 423} devirtbounce.6(0, .str.108, 179, 12);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call paravirt_read_tsc___1_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 417633);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 427} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const gru_flush_cache: ref;

axiom gru_flush_cache == $sub.ref(0, 418665);

procedure gru_flush_cache($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_flush_cache($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} clflush($p0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    return;
}



const clflush: ref;

axiom clflush == $sub.ref(0, 419697);

procedure clflush($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation clflush($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} devirtbounce.10(0, $p0, $p0);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    return;
}



const __arch_hweight64: ref;

axiom __arch_hweight64 == $sub.ref(0, 420729);

procedure __arch_hweight64($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __arch_hweight64($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} {:cexpr "__arch_hweight64:arg:w"} boogie_si_record_i64($i0);
    call {:si_unique_call 431} $i1 := devirtbounce.11(0, $i0);
    call {:si_unique_call 432} {:cexpr "res"} boogie_si_record_i64($i1);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gru_prefetch_context: ref;

axiom gru_prefetch_context == $sub.ref(0, 421761);

procedure gru_prefetch_context($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_prefetch_context($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $i10: i32;
  var $i11: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p18: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i32;
  var $i28: i1;
  var $i12: i32;
  var $p13: ref;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i3);
    call {:si_unique_call 434} {:cexpr "gru_prefetch_context:arg:length"} boogie_si_record_i64($i4);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p0, $mul.ref(131072, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i7 := $udiv.i64($i4, 64);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} prefetch_data($p6, $i8, 64);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i9 := find_first_bit($p5, 64);
    call {:si_unique_call 437} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    call {:si_unique_call 438} {:cexpr "scr"} boogie_si_record_i32($i10);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i11 := $sle.i32($i10, 63);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i12, $p13 := $i10, $p1;
    goto $bb4;

  $bb4:
    call $i14, $i15, $i16, $i17, $i19, $i20, $p21, $p22, $i23, $p18, $i24, $i25, $i26, $i27, $i28, $i12, $p13, $i29, $i30, $p31, $i32, $p33 := gru_prefetch_context_loop_$bb4($p2, $p5, $i14, $i15, $i16, $i17, $i19, $i20, $p21, $p22, $i23, $p18, $i24, $i25, $i26, $i27, $i28, $i12, $p13, $i29, $i30, $p31, $i32, $p33);
    goto $bb4_last;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i12, 2);
    call {:si_unique_call 439} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i12, 1);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i15, 2);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, $i14);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p18 := $p13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i12, 1);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $i26 := find_next_bit($p5, 64, $i25);
    call {:si_unique_call 446} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    call {:si_unique_call 447} {:cexpr "scr"} boogie_si_record_i32($i27);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i28 := $sle.i32($i27, 63);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i12, $p13 := $i27, $p18;
    goto $bb13_dummy;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} prefetch_data($p13, 1, 64);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i14, 256);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p2, $mul.ref($i20, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} prefetch_data($p21, 1, 64);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p13, $mul.ref(256, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i14, 1);
    call {:si_unique_call 442} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} prefetch_data($p22, 1, 64);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i29 := $mul.i32($i23, 256);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p2, $mul.ref($i30, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} prefetch_data($p31, 1, 64);
    $i32 := $add.i64(256, 256);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p13, $mul.ref($i32, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p18 := $p33;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1607;
}



const find_first_bit: ref;

axiom find_first_bit == $sub.ref(0, 422793);

procedure find_first_bit($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_first_bit($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 448} {:cexpr "find_first_bit:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 449} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 450} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gru_copy_handle: ref;

axiom gru_copy_handle == $sub.ref(0, 423825);

procedure gru_copy_handle($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_copy_handle($p0: ref, $p1: ref) returns ($r: i64)
{
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} memcpy_guard($p0, $p1, 64);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 452} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p0, $p1, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $r := 64;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 424857);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const find_next_bit: ref;

axiom find_next_bit == $sub.ref(0, 425889);

procedure find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 453} {:cexpr "find_next_bit:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 454} {:cexpr "find_next_bit:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 1} true;
    call {:si_unique_call 455} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 456} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const memcpy_guard: ref;

axiom memcpy_guard == $sub.ref(0, 426921);

procedure memcpy_guard($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation memcpy_guard($p0: ref, $p1: ref, $i2: i64)
{
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} {:cexpr "memcpy_guard:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p0, $mul.ref($i2, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i4 := $ule.ref($p3, $p1);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p1, $mul.ref($i2, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i6 := $ule.ref($p5, $p0);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} abort();
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 427953);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const abort: ref;

axiom abort == $sub.ref(0, 428985);

procedure abort();



const prefetch_data: ref;

axiom prefetch_data == $sub.ref(0, 430017);

procedure prefetch_data($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation prefetch_data($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} {:cexpr "prefetch_data:arg:num"} boogie_si_record_i32($i1);
    call {:si_unique_call 460} {:cexpr "prefetch_data:arg:stride"} boogie_si_record_i32($i2);
    call {:si_unique_call 461} {:cexpr "prefetch_data:arg:tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i1, 1);
    call {:si_unique_call 462} {:cexpr "num"} boogie_si_record_i32($i3);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i1, 0);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i5, $p6 := $i3, $p0;
    goto $bb4;

  $bb4:
    call $i7, $p8, $i9, $i10, $i5, $p6 := prefetch_data_loop_$bb4($i2, $i7, $p8, $i9, $i10, $i5, $p6);
    goto $bb4_last;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} prefetchw($p6);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i2);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i5, 1);
    call {:si_unique_call 464} {:cexpr "num"} boogie_si_record_i32($i9);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i5, 0);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i5, $p6 := $i9, $p8;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1666;
}



const prefetchw: ref;

axiom prefetchw == $sub.ref(0, 431049);

procedure prefetchw($p0: ref);
  free requires assertsPassed;



implementation prefetchw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} devirtbounce.12(0, 0, $p0);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    return;
}



const sync_core: ref;

axiom sync_core == $sub.ref(0, 432081);

procedure sync_core();
  free requires assertsPassed;



implementation sync_core()
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i0 := devirtbounce.13(0, 1);
    call {:si_unique_call 467} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 433113);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} _raw_spin_lock($p2);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    return;
}



const gru_assign_asid: ref;

axiom gru_assign_asid == $sub.ref(0, 434145);

procedure gru_assign_asid($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_assign_asid($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i24: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(176, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 8);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(176, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(176, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 469} {:cexpr "asid"} boogie_si_record_i32($i6);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(180, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i9 := $uge.i32($i6, $i8);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i12 := $M.1;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i16 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} __bad_size_call_parameter();
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i24 := $u0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} vslice_dummy_var_100 := printk.ref.i32.ref.i32.i32(.str.85, $i24, .str.86, $i30, $i11);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb11:
    assume $i18 == 1;
    call {:si_unique_call 472} $i27 := devirtbounce(0, cpu_number);
    call {:si_unique_call 473} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i27);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i24 := $i27;
    goto $bb23;

  $bb9:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb13;

  $bb14:
    assume $i19 == 1;
    call {:si_unique_call 474} $i26 := devirtbounce(0, cpu_number);
    call {:si_unique_call 475} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i26);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i24 := $i26;
    goto $bb23;

  $bb7:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb13;

  $bb18:
    assume $i21 == 1;
    call {:si_unique_call 476} $i25 := devirtbounce(0, cpu_number);
    call {:si_unique_call 477} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i25);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i24 := $i25;
    goto $bb23;

  $bb16:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb20:
    assume $i22 == 1;
    call {:si_unique_call 478} $i23 := devirtbounce(0, cpu_number);
    call {:si_unique_call 479} {:cexpr "pfo_ret__"} boogie_si_record_i32($i23);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb23;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i10 := gru_reset_asid_limit($p0, $i6);
    call {:si_unique_call 471} {:cexpr "asid"} boogie_si_record_i32($i10);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 435177);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} _raw_spin_unlock($p2);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 436209);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.0, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 484} $i2 := devirtbounce.14(0, $p1, $i0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 485} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const __set_bit: ref;

axiom __set_bit == $sub.ref(0, 437241);

procedure __set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} {:cexpr "__set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 487} devirtbounce.8(0, $p1, $i0, $p1);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 438273);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    return;
}



const gru_reset_asid_limit: ref;

axiom gru_reset_asid_limit == $sub.ref(0, 439305);

procedure gru_reset_asid_limit($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_reset_asid_limit($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i14: i32;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i47: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i64;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i64;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i78: i32;
  var $p82: ref;
  var $i83: i16;
  var $i84: i32;
  var $i85: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i108: i1;
  var $i109: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i110: i32;
  var $i111: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i128: i32;
  var $p132: ref;
  var $i133: i16;
  var $i134: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} {:cexpr "gru_reset_asid_limit:arg:asid"} boogie_si_record_i32($i1);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i22 := $M.1;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 2);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $sge.i32($i1, 16777200);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} gru_flush_all_tlb($p0);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    call {:si_unique_call 503} {:cexpr "gid"} boogie_si_record_i32($i30);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i31, $i32 := $u0, $i27;
    goto $bb32;

  $bb32:
    call $i31, $i32, $i37, $p39, $p40, $i41, $i42, $i47, $p49, $p50, $i51, $i52, $i53, $i54, $p56, $p57, $p58, $p59, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i79, $i80, $i81, $i78, $p82, $i83, $i84, $i85, $p87, $p88, $i89, $p91, $p92, $p93, $p94, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i43, $i44, $i45, $i46, $i110, $i111, $i33, $i34, $i35, $i36, $i112, $i113, vslice_dummy_var_102 := gru_reset_asid_limit_loop_$bb32($p0, $i30, $i31, $i32, $i37, $p39, $p40, $i41, $i42, $i47, $p49, $p50, $i51, $i52, $i53, $i54, $p56, $p57, $p58, $p59, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i79, $i80, $i81, $i78, $p82, $i83, $i84, $i85, $p87, $p88, $i89, $p91, $p92, $p93, $p94, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i43, $i44, $i45, $i46, $i110, $i111, $i33, $i34, $i35, $i36, $i112, $i113, vslice_dummy_var_102);
    goto $bb32_last;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i33, $i34, $i35, $i36 := $i32, 0, $i31, 16777200;
    goto $bb33;

  $bb33:
    call $i37, $p39, $p40, $i41, $i42, $i47, $p49, $p50, $i51, $i52, $i53, $i54, $p56, $p57, $p58, $p59, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i79, $i80, $i81, $i78, $p82, $i83, $i84, $i85, $p87, $p88, $i89, $p91, $p92, $p93, $p94, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i106, $i107, $i108, $i109, $i43, $i44, $i45, $i46, $i110, $i111, $i33, $i34, $i35, $i36, $i112, $i113, vslice_dummy_var_102 := gru_reset_asid_limit_loop_$bb33($p0, $i30, $i37, $p39, $p40, $i41, $i42, $i47, $p49, $p50, $i51, $i52, $i53, $i54, $p56, $p57, $p58, $p59, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i79, $i80, $i81, $i78, $p82, $i83, $i84, $i85, $p87, $p88, $i89, $p91, $p92, $p93, $p94, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i106, $i107, $i108, $i109, $i43, $i44, $i45, $i46, $i110, $i111, $i33, $i34, $i35, $i36, $i112, $i113, vslice_dummy_var_102);
    goto $bb33_last;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i34);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref($i37, 8));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i42 == 1);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i34);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref($i47, 8));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i51 := is_kernel_context($p50);
    call {:si_unique_call 505} {:cexpr "tmp"} boogie_si_record_i32($i51);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i30);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i34);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref($i54, 8));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p59, $mul.ref(0, 25032)), $mul.ref(456, 1)), $mul.ref($i53, 12)), $mul.ref(4, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 16777215);
    call {:si_unique_call 507} {:cexpr "inuse_asid"} boogie_si_record_i32($i65);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i66 := $M.1;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i64.i32($i66);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 1);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i96, $i97 := $i34, $i35;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i65, $i33);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i106 := $i33;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i107 := $sgt.i32($i65, $i106);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i109 := $i36;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i43, $i44, $i45, $i46 := $i96, $i109, $i97, $i106;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i43, 1);
    call {:si_unique_call 506} {:cexpr "i"} boogie_si_record_i32($i110);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i111 := $sle.i32($i110, 15);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i112, $i113 := $i44, $i46;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(180, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, $i112);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(176, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, $i113);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i116 := $M.1;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i64.i32($i116);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, 1);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $r := $i113;
    return;

  $bb85:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i120 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} __bad_size_call_parameter();
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i128 := $u0;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i133 := $load.i16($M.0, $p132);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32($i133);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} vslice_dummy_var_103 := printk.ref.i32.ref.i32.i32.i32(.str.89, $i128, .str.87, $i134, $i113, $i112);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb92:
    assume $i122 == 1;
    call {:si_unique_call 521} $i131 := devirtbounce(0, cpu_number);
    call {:si_unique_call 522} {:cexpr "pfo_ret_____10"} boogie_si_record_i32($i131);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i128 := $i131;
    goto $bb104;

  $bb90:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $i123 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb94;

  $bb95:
    assume $i123 == 1;
    call {:si_unique_call 523} $i130 := devirtbounce(0, cpu_number);
    call {:si_unique_call 524} {:cexpr "pfo_ret_____9"} boogie_si_record_i32($i130);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i128 := $i130;
    goto $bb104;

  $bb88:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $i124 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $i125 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb94;

  $bb99:
    assume $i125 == 1;
    call {:si_unique_call 525} $i129 := devirtbounce(0, cpu_number);
    call {:si_unique_call 526} {:cexpr "pfo_ret_____8"} boogie_si_record_i32($i129);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i128 := $i129;
    goto $bb104;

  $bb97:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    $i126 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb94;

  $bb101:
    assume $i126 == 1;
    call {:si_unique_call 527} $i127 := devirtbounce(0, cpu_number);
    call {:si_unique_call 528} {:cexpr "pfo_ret_____7"} boogie_si_record_i32($i127);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i128 := $i127;
    goto $bb104;

  $bb82:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    $i33, $i34, $i35, $i36 := $i46, $i110, $i45, $i44;
    goto $bb82_dummy;

  $bb76:
    assume $i107 == 1;
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i65, $i36);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb78;

  $bb79:
    assume $i108 == 1;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i109 := $i65;
    goto $bb81;

  $bb67:
    assume $i98 == 1;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i33, 8);
    call {:si_unique_call 518} {:cexpr "asid"} boogie_si_record_i32($i99);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i100 := $sge.i32($i99, $i36);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i101, $i102 := $i97, $i99;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i106 := $i99;
    goto $bb75;

  $bb69:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i103 := $sgt.i32($i102, 16777199);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i105 := $i102;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i31, $i32 := $i101, $i105;
    goto corral_source_split_1850_dummy;

  $bb71:
    assume $i103 == 1;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i104 := gru_wrap_asid($p0);
    call {:si_unique_call 520} {:cexpr "asid"} boogie_si_record_i32($i104);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i105 := $i104;
    goto $bb73;

  $bb42:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i70 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} __bad_size_call_parameter();
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i78 := $i35;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.0, $p82);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i83);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i34);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref($i85, 8));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i34);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref($i89, 8));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} vslice_dummy_var_102 := printk.ref.i32.ref.i32.ref.ref.i32.i32(.str.88, $i78, .str.87, $i84, $p88, $p94, $i65, $i34);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i96, $i97 := $i34, $i78;
    goto $bb66;

  $bb49:
    assume $i72 == 1;
    call {:si_unique_call 508} $i81 := devirtbounce(0, cpu_number);
    call {:si_unique_call 509} {:cexpr "pfo_ret_____6"} boogie_si_record_i32($i81);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i78 := $i81;
    goto $bb61;

  $bb47:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i73 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb51;

  $bb52:
    assume $i73 == 1;
    call {:si_unique_call 510} $i80 := devirtbounce(0, cpu_number);
    call {:si_unique_call 511} {:cexpr "pfo_ret_____5"} boogie_si_record_i32($i80);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i78 := $i80;
    goto $bb61;

  $bb45:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i74 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb51;

  $bb56:
    assume $i75 == 1;
    call {:si_unique_call 512} $i79 := devirtbounce(0, cpu_number);
    call {:si_unique_call 513} {:cexpr "pfo_ret_____4"} boogie_si_record_i32($i79);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i78 := $i79;
    goto $bb61;

  $bb54:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i76 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb51;

  $bb58:
    assume $i76 == 1;
    call {:si_unique_call 514} $i77 := devirtbounce(0, cpu_number);
    call {:si_unique_call 515} {:cexpr "pfo_ret_____3"} boogie_si_record_i32($i77);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb61;

  $bb38:
    assume $i52 == 1;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i43, $i44, $i45, $i46 := $i34, $i36, $i35, $i33;
    goto $bb37;

  $bb35:
    assume $i42 == 1;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i43, $i44, $i45, $i46 := $i34, $i36, $i35, $i33;
    goto $bb37;

  $bb29:
    assume $i25 == 1;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i26 := gru_wrap_asid($p0);
    call {:si_unique_call 501} {:cexpr "asid"} boogie_si_record_i32($i26);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb31;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(152, 1)));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} __bad_size_call_parameter();
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i14 := $u0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_101 := printk.ref.i32.ref.i32.i32(.str.85, $i14, .str.87, $i20, $i1);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i8 == 1;
    call {:si_unique_call 489} $i17 := devirtbounce(0, cpu_number);
    call {:si_unique_call 490} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i17);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i14 := $i17;
    goto $bb20;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    call {:si_unique_call 491} $i16 := devirtbounce(0, cpu_number);
    call {:si_unique_call 492} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i16);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb20;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb15:
    assume $i11 == 1;
    call {:si_unique_call 493} $i15 := devirtbounce(0, cpu_number);
    call {:si_unique_call 494} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i15);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb20;

  $bb13:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb17:
    assume $i12 == 1;
    call {:si_unique_call 495} $i13 := devirtbounce(0, cpu_number);
    call {:si_unique_call 496} {:cexpr "pfo_ret__"} boogie_si_record_i32($i13);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb20;

  $bb82_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1775;

  corral_source_split_1850_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1773;
}



const gru_wrap_asid: ref;

axiom gru_wrap_asid == $sub.ref(0, 440337);

procedure gru_wrap_asid($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_wrap_asid($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i13: i32;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i21 := $M.1;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 2);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(184, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(184, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $r := 8;
    return;

  $bb26:
    assume $i23 == 1;
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(160, 1)));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb1:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} __bad_size_call_parameter();
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i13 := $u0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} vslice_dummy_var_104 := printk.ref.i32.ref.i32(.str.37, $i13, .str.90, $i19);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i7 == 1;
    call {:si_unique_call 531} $i16 := devirtbounce(0, cpu_number);
    call {:si_unique_call 532} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i16);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb20;

  $bb6:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb11:
    assume $i8 == 1;
    call {:si_unique_call 533} $i15 := devirtbounce(0, cpu_number);
    call {:si_unique_call 534} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i15);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i13 := $i15;
    goto $bb20;

  $bb4:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb15:
    assume $i10 == 1;
    call {:si_unique_call 535} $i14 := devirtbounce(0, cpu_number);
    call {:si_unique_call 536} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i14);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb20;

  $bb13:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb17:
    assume $i11 == 1;
    call {:si_unique_call 537} $i12 := devirtbounce(0, cpu_number);
    call {:si_unique_call 538} {:cexpr "pfo_ret__"} boogie_si_record_i32($i12);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb20;
}



const gru_flush_all_tlb: ref;

axiom gru_flush_all_tlb == $sub.ref(0, 441369);

procedure gru_flush_all_tlb($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_flush_all_tlb($p0: ref)
{
  var $i1: i64;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i13: i32;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $p21: ref;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $p21 := get_lock_tgh_handle($p0);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_106 := tgh_invalidate($p21, 0, $sub.i64(0, 1), 0, 1, 1, 1023, $sub.i16(0, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} get_unlock_tgh_handle($p21);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} __bad_size_call_parameter();
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i13 := $u0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} vslice_dummy_var_105 := printk.ref.i32.ref.i32(.str.37, $i13, .str.38, $i19);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i7 == 1;
    call {:si_unique_call 542} $i16 := devirtbounce(0, cpu_number);
    call {:si_unique_call 543} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i16);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb20;

  $bb6:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb11:
    assume $i8 == 1;
    call {:si_unique_call 544} $i15 := devirtbounce(0, cpu_number);
    call {:si_unique_call 545} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i15);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i13 := $i15;
    goto $bb20;

  $bb4:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb15:
    assume $i10 == 1;
    call {:si_unique_call 546} $i14 := devirtbounce(0, cpu_number);
    call {:si_unique_call 547} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i14);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb20;

  $bb13:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb17:
    assume $i11 == 1;
    call {:si_unique_call 548} $i12 := devirtbounce(0, cpu_number);
    call {:si_unique_call 549} {:cexpr "pfo_ret__"} boogie_si_record_i32($i12);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb20;
}



const get_lock_tgh_handle: ref;

axiom get_lock_tgh_handle == $sub.ref(0, 442401);

procedure get_lock_tgh_handle($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation get_lock_tgh_handle($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i8: i32;
  var $i7: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} __preempt_count_add___0(1);
    call {:si_unique_call 556} devirtbounce.1(0);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i1 := uv_numa_blade_id();
    call {:si_unique_call 558} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(26, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, $i4);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i8 := get_off_blade_tgh($p0);
    call {:si_unique_call 562} {:cexpr "n"} boogie_si_record_i32($i8);
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p11 := get_tgh($p10, $i7);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} lock_tgh_handle($p11);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i6 := get_on_blade_tgh($p0);
    call {:si_unique_call 560} {:cexpr "n"} boogie_si_record_i32($i6);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const tgh_invalidate: ref;

axiom tgh_invalidate == $sub.ref(0, 443433);

procedure tgh_invalidate($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tgh_invalidate($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i16) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i96;
  var $i16: i96;
  var $i17: i96;
  var $i18: i96;
  var $i19: i96;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $i23: i96;
  var $i24: i96;
  var $i25: i96;
  var $i26: i96;
  var $i27: i96;
  var $i28: i96;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $i32: i96;
  var $i33: i96;
  var $i34: i96;
  var $i35: i96;
  var $i36: i96;
  var $i37: i96;
  var $p38: ref;
  var $p39: ref;
  var $i40: i96;
  var $i41: i96;
  var $i42: i96;
  var $i43: i96;
  var $i44: i96;
  var $i45: i96;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i8;
  var $i50: i8;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} {:cexpr "tgh_invalidate:arg:vaddr"} boogie_si_record_i64($i1);
    call {:si_unique_call 566} {:cexpr "tgh_invalidate:arg:vaddrmask"} boogie_si_record_i64($i2);
    call {:si_unique_call 567} {:cexpr "tgh_invalidate:arg:asid"} boogie_si_record_i32($i3);
    call {:si_unique_call 568} {:cexpr "tgh_invalidate:arg:pagesize"} boogie_si_record_i32($i4);
    call {:si_unique_call 569} {:cexpr "tgh_invalidate:arg:global"} boogie_si_record_i32($i5);
    call {:si_unique_call 570} {:cexpr "tgh_invalidate:arg:n"} boogie_si_record_i32($i6);
    call {:si_unique_call 571} {:cexpr "tgh_invalidate:arg:ctxbitmap"} boogie_si_record_i16($i7);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i1);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i24($i3);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i24($M.0, $p10, $i11);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i4);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i96($i12);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i16 := $load.i96($M.0, $p14);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i17 := $and.i96($i15, 31);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i18 := $and.i96($i16, $sub.i96(0, 32));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i19 := $or.i96($i18, $i17);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p14, $i19);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i6);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i96($i20);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i24 := $load.i96($M.0, $p22);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i25 := $and.i96($i23, 1023);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i26 := $shl.i96($i25, 80);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i27 := $and.i96($i24, $sub.i96(0, 1236731113465765645724418049));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i28 := $or.i96($i27, $i26);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p22, $i28);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i5);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i96($i29);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i33 := $load.i96($M.0, $p31);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i34 := $and.i96($i32, 1);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i35 := $shl.i96($i34, 16);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i36 := $and.i96($i33, $sub.i96(0, 65537));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i37 := $or.i96($i36, $i35);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p31, $i37);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i40 := $zext.i64.i96($i2);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i41 := $load.i96($M.0, $p39);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i42 := $and.i96($i40, 549755813887);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i43 := $shl.i96($i42, 32);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i44 := $and.i96($i41, $sub.i96(0, 2361183241430527639553));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i45 := $or.i96($i44, $i43);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p39, $i45);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, $i7);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p0);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i49 := $and.i8($i48, $sub.i8(0, 5));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i50 := $or.i8($i49, 4);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i50);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} start_instruction($p51);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p0);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i53 := wait_instruction_complete($p52, 7);
    call {:si_unique_call 574} {:cexpr "tmp"} boogie_si_record_i32($i53);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;
}



const get_unlock_tgh_handle: ref;

axiom get_unlock_tgh_handle == $sub.ref(0, 444465);

procedure get_unlock_tgh_handle($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation get_unlock_tgh_handle($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} unlock_tgh_handle($p0);
    call {:si_unique_call 576} devirtbounce.1(0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} __preempt_count_sub___0(1);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    return;
}



const unlock_tgh_handle: ref;

axiom unlock_tgh_handle == $sub.ref(0, 445497);

procedure unlock_tgh_handle($p0: ref);
  free requires assertsPassed;



implementation unlock_tgh_handle($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} __unlock_handle($p1);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub___0: ref;

axiom __preempt_count_sub___0 == $sub.ref(0, 446529);

procedure __preempt_count_sub___0($i0: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __preempt_count_sub___0($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} {:cexpr "__preempt_count_sub___0:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 582} devirtbounce.4(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 581} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 580} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __preempt_count_add___0: ref;

axiom __preempt_count_add___0 == $sub.ref(0, 447561);

procedure __preempt_count_add___0($i0: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __preempt_count_add___0($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} {:cexpr "__preempt_count_add___0:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 586} devirtbounce.4(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 585} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 584} devirtbounce.3(0, __preempt_count, __preempt_count);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const uv_numa_blade_id: ref;

axiom uv_numa_blade_id == $sub.ref(0, 448593);

procedure uv_numa_blade_id() returns ($r: i32);
  free requires assertsPassed;



implementation uv_numa_blade_id() returns ($r: i32)
{
  var $i0: i64;
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i0 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 588} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i0);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(54, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.3, $p2);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const get_on_blade_tgh: ref;

axiom get_on_blade_tgh == $sub.ref(0, 449625);

procedure get_on_blade_tgh($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_on_blade_tgh($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i1 := uv_blade_processor_id();
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(29, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i5 := $ashr.i32($i1, $i4);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const get_off_blade_tgh: ref;

axiom get_off_blade_tgh == $sub.ref(0, 450657);

procedure get_off_blade_tgh($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_off_blade_tgh($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(30, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(24, $i3);
    call {:si_unique_call 591} {:cexpr "n"} boogie_si_record_i32($i4);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i5 := get_cycles();
    call {:si_unique_call 593} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i7 := $urem.i64($i5, $i6);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    call {:si_unique_call 594} {:cexpr "n"} boogie_si_record_i32($i8);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(30, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $i8);
    call {:si_unique_call 595} {:cexpr "n"} boogie_si_record_i32($i12);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const get_tgh: ref;

axiom get_tgh == $sub.ref(0, 451689);

procedure get_tgh($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_tgh($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} {:cexpr "get_tgh:arg:ctxnum"} boogie_si_record_i32($i1);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i1, 256);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 67141632);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p0, $mul.ref($i4, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const lock_tgh_handle: ref;

axiom lock_tgh_handle == $sub.ref(0, 452721);

procedure lock_tgh_handle($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation lock_tgh_handle($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} __lock_handle___0($p1);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    return;
}



const __lock_handle___0: ref;

axiom __lock_handle___0 == $sub.ref(0, 453753);

procedure __lock_handle___0($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __lock_handle___0($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i2 := test_and_set_bit(1, $p1);
    call {:si_unique_call 599} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i4, $i5 := __lock_handle___0_loop_$bb4($p1, $i4, $i5);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} cpu_relax();
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i4 := test_and_set_bit(1, $p1);
    call {:si_unique_call 602} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 454785);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 604} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 605} devirtbounce.16(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.7, $p2);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const get_cycles: ref;

axiom get_cycles == $sub.ref(0, 455817);

procedure get_cycles() returns ($r: i64);
  free requires assertsPassed;



implementation get_cycles() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i0 := paravirt_read_tsc();
    call {:si_unique_call 607} {:cexpr "ret"} boogie_si_record_i64($i0);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const paravirt_read_tsc: ref;

axiom paravirt_read_tsc == $sub.ref(0, 456849);

procedure paravirt_read_tsc() returns ($r: i64);
  free requires assertsPassed;



implementation paravirt_read_tsc() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.3, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 312)), $mul.ref(240, 1)));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 609} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 611} $p7 := devirtbounce.9(0, 34, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 312)), $mul.ref(240, 1)), 511);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i8 := $extractvalue($p7, 4);
    call {:si_unique_call 612} {:cexpr "__eax"} boogie_si_record_i64($i8);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 610} devirtbounce.6(0, .str.108, 179, 12);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call paravirt_read_tsc_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const uv_blade_processor_id: ref;

axiom uv_blade_processor_id == $sub.ref(0, 457881);

procedure uv_blade_processor_id() returns ($r: i32);
  free requires assertsPassed;



implementation uv_blade_processor_id() returns ($r: i32)
{
  var $i0: i64;
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i0 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 614} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i0);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(56, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.3, $p2);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 458913);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    return;
}



const __lock_handle: ref;

axiom __lock_handle == $sub.ref(0, 459945);

procedure __lock_handle($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __lock_handle($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i2 := test_and_set_bit(1, $p1);
    call {:si_unique_call 616} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i4, $i5 := __lock_handle_loop_$bb4($p1, $i4, $i5);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} cpu_relax();
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i4 := test_and_set_bit(1, $p1);
    call {:si_unique_call 619} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const gru_check_chiplet_assignment: ref;

axiom gru_check_chiplet_assignment == $sub.ref(0, 460977);

procedure gru_check_chiplet_assignment($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gru_check_chiplet_assignment($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i17: i1;
  var $i15: i1;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(252, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    call {:si_unique_call 620} {:cexpr "blade_id"} boogie_si_record_i32($i4);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(254, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    call {:si_unique_call 623} {:cexpr "chiplet_id"} boogie_si_record_i32($i10);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(26, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $i7);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i15 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i15);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i10, 0);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i17 := 1;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(28, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, $i10);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i17 := $i21;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i15 := $i17;
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb8;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i6 := uv_numa_blade_id();
    call {:si_unique_call 622} {:cexpr "blade_id"} boogie_si_record_i32($i6);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const check_gru_resources: ref;

axiom check_gru_resources == $sub.ref(0, 462009);

procedure check_gru_resources($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation check_gru_resources($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} {:cexpr "check_gru_resources:arg:cbr_au_count"} boogie_si_record_i32($i1);
    call {:si_unique_call 625} {:cexpr "check_gru_resources:arg:dsr_au_count"} boogie_si_record_i32($i2);
    call {:si_unique_call 626} {:cexpr "check_gru_resources:arg:max_active_contexts"} boogie_si_record_i32($i3);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(200, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i6 := __arch_hweight64($i5);
    call {:si_unique_call 628} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i1);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i6, $i7);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(208, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i11 := __arch_hweight64($i10);
    call {:si_unique_call 630} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i2);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i13 := $uge.i64($i11, $i12);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb9;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(224, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, $i3);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb8;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb7;
}



const is_gts_stealable: ref;

axiom is_gts_stealable == $sub.ref(0, 463041);

procedure is_gts_stealable($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation is_gts_stealable($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p7: ref;
  var $i8: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i2 := is_kernel_context($p0);
    call {:si_unique_call 632} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i8 := ldv_mutex_trylock_40($p7);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 636} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i5 := down_write_trylock($p4);
    call {:si_unique_call 634} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const gru_unload_context: ref;

axiom gru_unload_context == $sub.ref(0, 464073);

procedure gru_unload_context($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation gru_unload_context($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i35: i32;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} {:cexpr "gru_unload_context:arg:savestate"} boogie_si_record_i32($i1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 638} {:cexpr "ctxnum"} boogie_si_record_i32($i5);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i6 := is_kernel_context($p0);
    call {:si_unique_call 640} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p22 := get_cch($p21, $i5);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i23 := $M.1;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} lock_cch_handle($p22);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i44 := cch_interrupt_sync($p22);
    call {:si_unique_call 655} {:cexpr "tmp___0"} boogie_si_record_i32($i44);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i46 := is_kernel_context($p0);
    call {:si_unique_call 658} {:cexpr "tmp___1"} boogie_si_record_i32($i46);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i1, 0);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $i58 := cch_deallocate($p22);
    call {:si_unique_call 662} {:cexpr "tmp___2"} boogie_si_record_i32($i58);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} unlock_cch_handle($p22);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} gru_free_gru_context($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i59 == 1;
    call {:si_unique_call 663} devirtbounce.6(0, .str.11, 581, 12);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    call gru_unload_context_loop_$bb41();
    goto $bb41_last;

  $bb36:
    assume $i48 == 1;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(464, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(216, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(224, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} gru_unload_context_data($p50, $p52, $i5, $i54, $i56);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(348, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 1);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i47 == 1;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} gru_unload_mm_tracker($p3, $p0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume $i45 == 1;
    call {:si_unique_call 656} devirtbounce.6(0, .str.11, 569, 12);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    call gru_unload_context_loop_$bb31();
    goto $bb31_last;

  $bb4:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i27 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} __bad_size_call_parameter();
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i35 := $u0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(216, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(224, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} vslice_dummy_var_108 := printk.ref.i32.ref.ref.i64.i64(.str.9, $i35, .str.10, $p0, $i40, $i42);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb11:
    assume $i29 == 1;
    call {:si_unique_call 643} $i38 := devirtbounce(0, cpu_number);
    call {:si_unique_call 644} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i38);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i35 := $i38;
    goto $bb23;

  $bb9:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb13;

  $bb14:
    assume $i30 == 1;
    call {:si_unique_call 645} $i37 := devirtbounce(0, cpu_number);
    call {:si_unique_call 646} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i37);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i35 := $i37;
    goto $bb23;

  $bb7:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb13;

  $bb18:
    assume $i32 == 1;
    call {:si_unique_call 647} $i36 := devirtbounce(0, cpu_number);
    call {:si_unique_call 648} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i36);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i35 := $i36;
    goto $bb23;

  $bb16:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb13;

  $bb20:
    assume $i33 == 1;
    call {:si_unique_call 649} $i34 := devirtbounce(0, cpu_number);
    call {:si_unique_call 650} {:cexpr "pfo_ret__"} boogie_si_record_i32($i34);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb23;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(260, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 262144);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i13, $i17);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} vslice_dummy_var_107 := zap_vma_ptes($p9, $i18, 262144);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb41_dummy:
    assume false;
    return;

  $bb41_last:
    assume {:verifier.code 0} true;
    goto $bb41_dummy;

  $bb31_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;
}



const gts_stolen: ref;

axiom gts_stolen == $sub.ref(0, 465105);

procedure gts_stolen($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, assertsPassed;



implementation gts_stolen($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i2 := is_kernel_context($p0);
    call {:si_unique_call 667} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} ldv_mutex_unlock_41($p8);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i9 := $M.1;
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i9, 2);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(112, 1)));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} up_write($p4);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 2);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(120, 1)));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const up_write: ref;

axiom up_write == $sub.ref(0, 466137);

procedure up_write($p0: ref);
  free requires assertsPassed;



implementation up_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_41: ref;

axiom ldv_mutex_unlock_41 == $sub.ref(0, 467169);

procedure ldv_mutex_unlock_41($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_41($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} ldv_mutex_unlock_ts_ctxlock_of_gru_thread_state($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} mutex_unlock($p0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const zap_vma_ptes: ref;

axiom zap_vma_ptes == $sub.ref(0, 468201);

procedure zap_vma_ptes($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation zap_vma_ptes($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 674} {:cexpr "zap_vma_ptes:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 675} {:cexpr "zap_vma_ptes:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 1} true;
    call {:si_unique_call 676} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 677} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cch_interrupt_sync: ref;

axiom cch_interrupt_sync == $sub.ref(0, 469233);

procedure cch_interrupt_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cch_interrupt_sync($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i3 := $and.i8($i2, $sub.i8(0, 29));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i4 := $or.i8($i3, 20);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i4);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} start_instruction($p5);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i7 := wait_instruction_complete($p6, 3);
    call {:si_unique_call 680} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const gru_unload_mm_tracker: ref;

axiom gru_unload_mm_tracker == $sub.ref(0, 470265);

procedure gru_unload_mm_tracker($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_unload_mm_tracker($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i46: i32;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $i57: i64;
  var $p59: ref;
  var $p60: ref;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 25032)), $mul.ref(456, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i64($i7);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32(1, $i11);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    call {:si_unique_call 681} {:cexpr "ctxbitmap"} boogie_si_record_i16($i13);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 25032)), $mul.ref(32, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} spin_lock($p14);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(32, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} spin_lock($p15);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref($i8, 12)), $mul.ref(8, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i13);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i18, $i19);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i13);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i20, $i21);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 685} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref($i8, 12)), $mul.ref(8, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i13);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i31 := $xor.i32($i29, $i30);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref($i8, 12)), $mul.ref(8, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, $i32);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i34 := $M.1;
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 1);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(32, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} spin_unlock($p59);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 25032)), $mul.ref(32, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} spin_unlock($p60);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i38 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} __bad_size_call_parameter();
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i46 := $u0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 25032)), $mul.ref(200, 1)), $mul.ref(0, 8));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_109 := printk.ref.i32.ref.i32.ref.ref.i32.i64(.str.79, $i46, .str.80, $i52, $p1, $p3, $i54, $i57);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb12:
    assume $i40 == 1;
    call {:si_unique_call 687} $i49 := devirtbounce(0, cpu_number);
    call {:si_unique_call 688} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i49);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i46 := $i49;
    goto $bb24;

  $bb10:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb14;

  $bb15:
    assume $i41 == 1;
    call {:si_unique_call 689} $i48 := devirtbounce(0, cpu_number);
    call {:si_unique_call 690} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i48);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i46 := $i48;
    goto $bb24;

  $bb8:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb14;

  $bb19:
    assume $i43 == 1;
    call {:si_unique_call 691} $i47 := devirtbounce(0, cpu_number);
    call {:si_unique_call 692} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i47);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i46 := $i47;
    goto $bb24;

  $bb17:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb14;

  $bb21:
    assume $i44 == 1;
    call {:si_unique_call 693} $i45 := devirtbounce(0, cpu_number);
    call {:si_unique_call 694} {:cexpr "pfo_ret__"} boogie_si_record_i32($i45);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb24;

  $bb1:
    assume $i26 == 1;
    call {:si_unique_call 686} devirtbounce.6(0, .str.11, 284, 12);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call gru_unload_mm_tracker_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const gru_unload_context_data: ref;

axiom gru_unload_context_data == $sub.ref(0, 471297);

procedure gru_unload_context_data($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_unload_context_data($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i32;
  var $i29: i1;
  var $i15: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i32;
  var $i33: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p42: ref;
  var $p43: ref;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $i58: i32;
  var $i59: i1;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p60: ref;
  var $p34: ref;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 700} {:cexpr "gru_unload_context_data:arg:ctxnum"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i3);
    call {:si_unique_call 701} {:cexpr "gru_unload_context_data:arg:dsrmap"} boogie_si_record_i64($i4);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i2, 4194304);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p1, $mul.ref($i7, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref(67174400, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i10 := __arch_hweight64($i4);
    call {:si_unique_call 703} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i11 := $mul.i64($i10, 1024);
    call {:si_unique_call 704} {:cexpr "length"} boogie_si_record_i64($i11);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i12 := find_first_bit($p5, 64);
    call {:si_unique_call 706} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    call {:si_unique_call 707} {:cexpr "scr"} boogie_si_record_i32($i13);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i13, 63);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call {:si_unique_call 715} devirtbounce.1(0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p5);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} gru_prefetch_context($p8, $p8, $p9, $i30, $i11);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i31 := find_first_bit($p5, 64);
    call {:si_unique_call 718} {:cexpr "tmp___2"} boogie_si_record_i64($i31);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    call {:si_unique_call 719} {:cexpr "scr"} boogie_si_record_i32($i32);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i33 := $sle.i32($i32, 63);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p34 := $p0;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    $i61 := $add.i64($i7, 131072);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p1, $mul.ref($i61, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} memcpy_guard($p34, $p62, $i11);
    $i63 := $add.i64($i7, 131072);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p1, $mul.ref($i63, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 732} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p34, $p64, $i11, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p35, $i36, $p37 := $p0, $i32, $p8;
    goto $bb19;

  $bb19:
    call $i38, $i39, $i40, $i41, $i44, $p45, $i46, $i47, $i48, $p49, $i50, $i51, $p52, $p53, $i54, $p42, $p43, $i55, $i56, $i57, $i58, $i59, $p35, $i36, $p37, $p60, $i65, $i66, $p67, $i68, $i69, $i70, $p71, $i72, $i73, $p74, $i75, $p76 := gru_unload_context_data_loop_$bb19($p1, $p5, $i38, $i39, $i40, $i41, $i44, $p45, $i46, $i47, $i48, $p49, $i50, $i51, $p52, $p53, $i54, $p42, $p43, $i55, $i56, $i57, $i58, $i59, $p35, $i36, $p37, $p60, $i65, $i66, $p67, $i68, $i69, $i70, $p71, $i72, $i73, $p74, $i75, $p76);
    goto $bb19_last;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i38 := $mul.i32($i36, 2);
    call {:si_unique_call 720} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i36, 1);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i40 := $mul.i32($i39, 2);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, $i38);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p42, $p43 := $p37, $p35;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i36, 1);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i57 := find_next_bit($p5, 64, $i56);
    call {:si_unique_call 729} {:cexpr "tmp___5"} boogie_si_record_i64($i57);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i57);
    call {:si_unique_call 730} {:cexpr "scr"} boogie_si_record_i32($i58);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i59 := $sle.i32($i58, 63);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p60 := $p43;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p34 := $p60;
    goto $bb18;

  $bb28:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $p35, $i36, $p37 := $p43, $i58, $p42;
    goto $bb28_dummy;

  $bb21:
    assume $i41 == 1;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i44 := gru_copy_handle($p35, $p37);
    call {:si_unique_call 722} {:cexpr "tmp___3"} boogie_si_record_i64($i44);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p35, $mul.ref($i44, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i38, 256);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    $i48 := $add.i64(67174400, $i47);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p1, $mul.ref($i48, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i50 := gru_copy_handle($p45, $p49);
    call {:si_unique_call 724} {:cexpr "tmp___4"} boogie_si_record_i64($i50);
    $i51 := $add.i64($i44, $i50);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p35, $mul.ref($i51, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p37, $mul.ref(256, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i38, 1);
    call {:si_unique_call 725} {:cexpr "i"} boogie_si_record_i32($i54);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i65 := gru_copy_handle($p52, $p53);
    $i66 := $add.i64($i51, $i65);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p35, $mul.ref($i66, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i68 := $mul.i32($i54, 256);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    $i70 := $add.i64(67174400, $i69);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p1, $mul.ref($i70, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i72 := gru_copy_handle($p67, $p71);
    $i73 := $add.i64($i66, $i72);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p35, $mul.ref($i73, 1));
    $i75 := $add.i64(256, 256);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p37, $mul.ref($i75, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p42, $p43 := $p76, $p74;
    goto $bb23;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb4;

  $bb4:
    call $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i15, $i77, $i78, $i79, $p80 := gru_unload_context_data_loop_$bb4($p1, $p5, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i15, $i77, $i78, $i79, $p80);
    goto $bb4_last;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i15, 2);
    call {:si_unique_call 708} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i15, 1);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, 2);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, $i16);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i15, 1);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i27 := find_next_bit($p5, 64, $i26);
    call {:si_unique_call 713} {:cexpr "tmp___1"} boogie_si_record_i64($i27);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    call {:si_unique_call 714} {:cexpr "scr"} boogie_si_record_i32($i28);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i29 := $sle.i32($i28, 63);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i28;
    goto $bb13_dummy;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32($i16, 256);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    $i22 := $add.i64(67174400, $i21);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p1, $mul.ref($i22, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} gru_flush_cache($p23);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i16, 1);
    call {:si_unique_call 710} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i77 := $mul.i32($i24, 256);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    $i79 := $add.i64(67174400, $i78);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p1, $mul.ref($i79, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} gru_flush_cache($p80);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb28_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2466;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2429;
}



const cch_deallocate: ref;

axiom cch_deallocate == $sub.ref(0, 472329);

procedure cch_deallocate($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cch_deallocate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i3 := $and.i8($i2, $sub.i8(0, 29));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i4 := $or.i8($i3, 16);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i4);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} start_instruction($p5);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i7 := wait_instruction_complete($p6, 4);
    call {:si_unique_call 735} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} sync_core();
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const gru_free_gru_context: ref;

axiom gru_free_gru_context == $sub.ref(0, 473361);

procedure gru_free_gru_context($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation gru_free_gru_context($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i15: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} spin_lock($p23);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref($i26, 8));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} free_gru_resources($p2, $p0);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 424)), $mul.ref(192, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i33 := variable_test_bit($i31, $p32);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 750} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 752} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 424)), $mul.ref(192, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} __clear_bit($i41, $p42);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $sub.i32(0, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $0.ref);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(279, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, $sub.i8(0, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} spin_unlock($p46);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} gts_drop($p0);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i47 := $M.1;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 2);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i49 == 1;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(72, 1)));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb26:
    assume $i38 == 1;
    call {:si_unique_call 753} devirtbounce.6(0, .str.11, 447, 12);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call gru_free_gru_context_loop_$bb28();
    goto $bb28_last;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} __bad_size_call_parameter();
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i15 := $u0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_110 := printk.ref.i32.ref.ref.i32(.str.81, $i15, .str.82, $p0, $i21);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i9 == 1;
    call {:si_unique_call 737} $i18 := devirtbounce(0, cpu_number);
    call {:si_unique_call 738} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i18);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb20;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb11:
    assume $i10 == 1;
    call {:si_unique_call 739} $i17 := devirtbounce(0, cpu_number);
    call {:si_unique_call 740} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i17);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i15 := $i17;
    goto $bb20;

  $bb4:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb15:
    assume $i12 == 1;
    call {:si_unique_call 741} $i16 := devirtbounce(0, cpu_number);
    call {:si_unique_call 742} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i16);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb20;

  $bb13:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb17:
    assume $i13 == 1;
    call {:si_unique_call 743} $i14 := devirtbounce(0, cpu_number);
    call {:si_unique_call 744} {:cexpr "pfo_ret__"} boogie_si_record_i32($i14);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb20;

  $bb28_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;
}



const free_gru_resources: ref;

axiom free_gru_resources == $sub.ref(0, 474393);

procedure free_gru_resources($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation free_gru_resources($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(224, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(224, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $i6);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(200, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(216, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i12 := $or.i64($i9, $i11);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(200, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i12);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(208, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(224, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i18 := $or.i64($i15, $i17);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(208, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    return;
}



const __clear_bit: ref;

axiom __clear_bit == $sub.ref(0, 475425);

procedure __clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} {:cexpr "__clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 759} devirtbounce.8(0, $p1, $i0, $p1);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    return;
}



const gts_drop: ref;

axiom gts_drop == $sub.ref(0, 476457);

procedure gts_drop($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gts_drop($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(272, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i4 := atomic_sub_return(1, $p3);
    call {:si_unique_call 761} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} kfree($p12);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i13 := $M.1;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, 2);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(24, 1)));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} gru_drop_mmu_notifier($p11);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_sub_return: ref;

axiom atomic_sub_return == $sub.ref(0, 477489);

procedure atomic_sub_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_sub_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} {:cexpr "atomic_sub_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, $i0);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i3 := atomic_add_return($i2, $p1);
    call {:si_unique_call 767} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gru_drop_mmu_notifier: ref;

axiom gru_drop_mmu_notifier == $sub.ref(0, 478521);

procedure gru_drop_mmu_notifier($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_drop_mmu_notifier($p0: ref)
{
  var $i1: i64;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i15: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 25032)), $mul.ref(24, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i24 := atomic_sub_return(1, $p23);
    call {:si_unique_call 781} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i25 == 1;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 25032)), $mul.ref(108, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p0);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} kfree($p34);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i35 := $M.1;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 2);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i37 == 1;
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(40, 1)));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i29 == 1;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p30 := get_current();
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 25032)), $mul.ref(0, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref(0, 11712)), $mul.ref(1968, 1));
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} mmu_notifier_unregister($p31, $p33);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 25032)), $mul.ref(24, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i6 := atomic_read($p5);
    call {:si_unique_call 769} {:cexpr "tmp"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} __bad_size_call_parameter();
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i15 := $u0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 25032)), $mul.ref(108, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} vslice_dummy_var_111 := printk.ref.i32.ref.ref.i32.i32(.str.43, $i15, .str.44, $p0, $i6, $i21);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i9 == 1;
    call {:si_unique_call 770} $i18 := devirtbounce(0, cpu_number);
    call {:si_unique_call 771} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i18);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb20;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb11:
    assume $i10 == 1;
    call {:si_unique_call 772} $i17 := devirtbounce(0, cpu_number);
    call {:si_unique_call 773} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i17);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i15 := $i17;
    goto $bb20;

  $bb4:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb15:
    assume $i12 == 1;
    call {:si_unique_call 774} $i16 := devirtbounce(0, cpu_number);
    call {:si_unique_call 775} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i16);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb20;

  $bb13:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb17:
    assume $i13 == 1;
    call {:si_unique_call 776} $i14 := devirtbounce(0, cpu_number);
    call {:si_unique_call 777} {:cexpr "pfo_ret__"} boogie_si_record_i32($i14);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb20;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 479553);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} free_($p0);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 480585);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 787} $free($p0);
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 481617);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mmu_notifier_unregister: ref;

axiom mmu_notifier_unregister == $sub.ref(0, 482649);

procedure mmu_notifier_unregister($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation mmu_notifier_unregister($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 483681);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 789} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 790} $i3 := devirtbounce.17(0, $p2, $i0, $p2);
    call {:si_unique_call 791} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const down_write_trylock: ref;

axiom down_write_trylock == $sub.ref(0, 484713);

procedure down_write_trylock($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation down_write_trylock($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 1} true;
    call {:si_unique_call 792} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 793} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_trylock_40: ref;

axiom ldv_mutex_trylock_40 == $sub.ref(0, 485745);

procedure ldv_mutex_trylock_40($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_trylock_40($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $i1 := mutex_trylock($p0);
    call {:si_unique_call 795} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i2 := ldv_mutex_trylock_ts_ctxlock_of_gru_thread_state($p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 797} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const mutex_trylock: ref;

axiom mutex_trylock == $sub.ref(0, 486777);

procedure mutex_trylock($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_trylock($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 1} true;
    call {:si_unique_call 798} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 799} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_trylock_ts_ctxlock_of_gru_thread_state: ref;

axiom ldv_mutex_trylock_ts_ctxlock_of_gru_thread_state == $sub.ref(0, 487809);

procedure ldv_mutex_trylock_ts_ctxlock_of_gru_thread_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_trylock_ts_ctxlock_of_gru_thread_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i3 := ldv_undef_int();
    call {:si_unique_call 802} {:cexpr "is_mutex_held_by_another_thread"} boogie_si_record_i32($i3);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.6 := 2;
    call {:si_unique_call 803} {:cexpr "ldv_mutex_ts_ctxlock_of_gru_thread_state"} boogie_si_record_i32(2);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ldv_error();
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 488841);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 1} true;
    call {:si_unique_call 804} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 805} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 806} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const reserve_gru_resources: ref;

axiom reserve_gru_resources == $sub.ref(0, 489873);

procedure reserve_gru_resources($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation reserve_gru_resources($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(224, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(224, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $i6);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(281, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i13 := gru_reserve_cb_resources($p0, $i10, $p12);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(216, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i13);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i18 := gru_reserve_ds_resources($p0, $i17, $0.ref);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(224, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    return;
}



const gru_assign_context_number: ref;

axiom gru_assign_context_number == $sub.ref(0, 490905);

procedure gru_assign_context_number($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gru_assign_context_number($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(192, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i2 := find_first_zero_bit($p1, 16);
    call {:si_unique_call 810} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    call {:si_unique_call 811} {:cexpr "ctxnum"} boogie_si_record_i32($i3);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(192, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} __set_bit($i4, $p5);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 491937);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 813} devirtbounce.3(0, $p1, $p1);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    return;
}



const find_first_zero_bit: ref;

axiom find_first_zero_bit == $sub.ref(0, 492969);

procedure find_first_zero_bit($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_first_zero_bit($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 814} {:cexpr "find_first_zero_bit:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 1} true;
    call {:si_unique_call 815} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 816} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gru_reserve_cb_resources: ref;

axiom gru_reserve_cb_resources == $sub.ref(0, 494001);

procedure gru_reserve_cb_resources($p0: ref, $i1: i32, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_reserve_cb_resources($p0: ref, $i1: i32, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} {:cexpr "gru_reserve_cb_resources:arg:cbr_au_count"} boogie_si_record_i32($i1);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(200, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i4 := reserve_resources($p3, $i1, 64, $p2);
    call {:si_unique_call 819} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const gru_reserve_ds_resources: ref;

axiom gru_reserve_ds_resources == $sub.ref(0, 495033);

procedure gru_reserve_ds_resources($p0: ref, $i1: i32, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_reserve_ds_resources($p0: ref, $i1: i32, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} {:cexpr "gru_reserve_ds_resources:arg:dsr_au_count"} boogie_si_record_i32($i1);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(208, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i4 := reserve_resources($p3, $i1, 32, $p2);
    call {:si_unique_call 822} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const reserve_resources: ref;

axiom reserve_resources == $sub.ref(0, 496065);

procedure reserve_resources($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation reserve_resources($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i7: i32;
  var $p8: ref;
  var $i22: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 824} {:cexpr "reserve_resources:arg:n"} boogie_si_record_i32($i1);
    call {:si_unique_call 825} {:cexpr "reserve_resources:arg:mmax"} boogie_si_record_i32($i2);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 0);
    call {:si_unique_call 826} {:cexpr "reserve_resources:arg:tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i1, 1);
    call {:si_unique_call 827} {:cexpr "n"} boogie_si_record_i32($i5);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 0);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p4);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i7, $p8 := $i5, $p3;
    goto $bb4;

  $bb4:
    call $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $i18, $p19, $i20, $i21, $i7, $p8 := reserve_resources_loop_$bb4($p0, $i2, $p4, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $i18, $p19, $i20, $i21, $i7, $p8);
    goto $bb4_last;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i2);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i10 := find_first_bit($p0, $i9);
    call {:si_unique_call 829} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    call {:si_unique_call 830} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, $i2);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i11);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} __clear_bit($i13, $p0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i11);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} __set_bit($i14, $p4);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p8);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $p19 := $p8;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i7, 1);
    call {:si_unique_call 834} {:cexpr "n"} boogie_si_record_i32($i20);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i7, 0);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i7, $p8 := $i20, $p19;
    goto $bb13_dummy;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p8, $mul.ref(1, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i11);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i18);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p19 := $p17;
    goto $bb12;

  $bb6:
    assume $i12 == 1;
    call {:si_unique_call 831} devirtbounce.6(0, .str.11, 176, 12);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call reserve_resources_loop_$bb8();
    goto $bb8_last;

  $bb8_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2791;
}



const gru_retarget_intr: ref;

axiom gru_retarget_intr == $sub.ref(0, 497097);

procedure gru_retarget_intr($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_retarget_intr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i22: i32;
  var $p26: ref;
  var $i27: i32;
  var $i29: i32;
  var $i4: i32;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i5 := gru_cpu_fault_map_id();
    call {:si_unique_call 836} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i5);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $M.1;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i29 := gru_update_cch($p0);
    call {:si_unique_call 850} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i4 := $i29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i13 := gru_cpu_fault_map_id();
    call {:si_unique_call 838} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} __bad_size_call_parameter();
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i22 := $u0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vslice_dummy_var_112 := printk.ref.i32.ref.i32.i32(.str.91, $i22, .str.92, $i27, $i13);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb15:
    assume $i16 == 1;
    call {:si_unique_call 839} $i25 := devirtbounce(0, cpu_number);
    call {:si_unique_call 840} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i25);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i22 := $i25;
    goto $bb27;

  $bb13:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb17;

  $bb18:
    assume $i17 == 1;
    call {:si_unique_call 841} $i24 := devirtbounce(0, cpu_number);
    call {:si_unique_call 842} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i24);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i22 := $i24;
    goto $bb27;

  $bb11:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb17;

  $bb22:
    assume $i19 == 1;
    call {:si_unique_call 843} $i23 := devirtbounce(0, cpu_number);
    call {:si_unique_call 844} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i23);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i22 := $i23;
    goto $bb27;

  $bb20:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb17;

  $bb24:
    assume $i20 == 1;
    call {:si_unique_call 845} $i21 := devirtbounce(0, cpu_number);
    call {:si_unique_call 846} {:cexpr "pfo_ret__"} boogie_si_record_i32($i21);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb27;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const gru_update_cch: ref;

axiom gru_update_cch == $sub.ref(0, 498129);

procedure gru_update_cch($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_update_cch($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i16;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $i43: i1;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $i50: i8;
  var $i51: i8;
  var $i52: i8;
  var $i53: i8;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i22: i32;
  var $p58: ref;
  var $i59: i16;
  var $p61: ref;
  var $p62: ref;
  var $i63: i16;
  var $p65: ref;
  var $p66: ref;
  var $i67: i16;
  var $p69: ref;
  var $p70: ref;
  var $i71: i16;
  var $p73: ref;
  var $p74: ref;
  var $i75: i16;
  var $p77: ref;
  var $p78: ref;
  var $i79: i16;
  var $p81: ref;
  var $p82: ref;
  var $i83: i16;
  var $p85: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 851} {:cexpr "ctxnum"} boogie_si_record_i32($i4);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p7 := get_cch($p6, $i4);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} lock_cch_handle($p7);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(2, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 8);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i22 := $i57;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} unlock_cch_handle($p7);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref($i15, 8));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p0);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i19, $i20);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i23 := cch_interrupt($p7);
    call {:si_unique_call 856} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(0, 2));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $i26);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.0, $p58);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(1, 2));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p61, $i59);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $p62);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(2, 2));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, $i63);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.0, $p66);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(3, 2));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $i67);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p70);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(4, 2));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, $i71);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.0, $p74);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(5, 2));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p77, $i75);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(6, 2));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p81, $i79);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.0, $p82);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(7, 2));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, $i83);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i29 := gru_cpu_fault_map_id();
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i31 := gru_cpu_fault_map_id();
    call {:si_unique_call 860} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(2, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i32);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p34);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i35, 15);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i36, $sub.i32(0, 16));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, $i37);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i39);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 3);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i43 := 1;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i42 == 1);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 2);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i43 := $i46;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i43);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i51 := $and.i8($i48, 1);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i52 := $shl.i8($i51, 4);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i53 := $and.i8($i50, $sub.i8(0, 17));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i54 := $or.i8($i53, $i52);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, $i54);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i55 := cch_start($p7);
    call {:si_unique_call 862} {:cexpr "tmp___1"} boogie_si_record_i32($i55);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i57 := 1;
    goto $bb22;

  $bb18:
    assume $i56 == 1;
    call {:si_unique_call 863} devirtbounce.6(0, .str.11, 680, 12);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    call gru_update_cch_loop_$bb20();
    goto $bb20_last;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb16;

  $bb7:
    assume $i24 == 1;
    call {:si_unique_call 857} devirtbounce.6(0, .str.11, 671, 12);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call gru_update_cch_loop_$bb9();
    goto $bb9_last;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb5;

  $bb20_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb9_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;
}



const cch_interrupt: ref;

axiom cch_interrupt == $sub.ref(0, 499161);

procedure cch_interrupt($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cch_interrupt($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i3 := $and.i8($i2, $sub.i8(0, 29));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i4 := $or.i8($i3, 12);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i4);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} start_instruction($p5);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i7 := wait_instruction_complete($p6, 2);
    call {:si_unique_call 866} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv_mutex_lock_ts_ctxlock_of_gru_thread_state: ref;

axiom ldv_mutex_lock_ts_ctxlock_of_gru_thread_state == $sub.ref(0, 500193);

procedure ldv_mutex_lock_ts_ctxlock_of_gru_thread_state($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_ts_ctxlock_of_gru_thread_state($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.6 := 2;
    call {:si_unique_call 868} {:cexpr "ldv_mutex_ts_ctxlock_of_gru_thread_state"} boogie_si_record_i32(2);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} ldv_error();
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 501225);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    return;
}



const gru_find_current_gts_nolock: ref;

axiom gru_find_current_gts_nolock == $sub.ref(0, 502257);

procedure gru_find_current_gts_nolock($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation gru_find_current_gts_nolock($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p11: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} {:cexpr "gru_find_current_gts_nolock:arg:tsid"} boogie_si_record_i32($i1);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb4;

  $bb4:
    call $p12, $i13, $i14, $p15, $p18, $p19, $p20, $p21, $i22, $i23, $p11 := gru_find_current_gts_nolock_loop_$bb4($i1, $i9, $p12, $i13, $i14, $p15, $p18, $p19, $p20, $p21, $i22, $i23, $p11);
    goto $bb4_last;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(260, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $i1);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p15 := $p11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, $i9);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p19;
    goto $bb10_dummy;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p16 := $p15;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3008;
}



const atomic64_inc: ref;

axiom atomic64_inc == $sub.ref(0, 503289);

procedure atomic64_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic64_inc($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    call {:si_unique_call 870} devirtbounce.18(0, $p1, $p2);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    return;
}



const gru_create_message_queue: ref;

axiom gru_create_message_queue == $sub.ref(0, 504321);

procedure gru_create_message_queue($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $CurrAddr;



implementation gru_create_message_queue($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 872} {:cexpr "gru_create_message_queue:arg:bytes"} boogie_si_record_i32($i2);
    call {:si_unique_call 873} {:cexpr "gru_create_message_queue:arg:nasid"} boogie_si_record_i32($i3);
    call {:si_unique_call 874} {:cexpr "gru_create_message_queue:arg:vector"} boogie_si_record_i32($i4);
    call {:si_unique_call 875} {:cexpr "gru_create_message_queue:arg:apicid"} boogie_si_record_i32($i5);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i8 := $udiv.i32($i2, 64);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i8, 2);
    call {:si_unique_call 876} {:cexpr "qlines"} boogie_si_record_i32($i9);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p7);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i2);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 877} cmdloc_dummy_var_20 := $memset.i8(cmdloc_dummy_var_19, $p10, 0, $i11, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p12);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i15 := $udiv.i32($i9, 2);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 67108863);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, 64);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p14, $mul.ref($i18, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p21);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i9, 67108862);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i24, 64);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p23, $mul.ref($i26, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p27);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i9);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(16, 1)), $mul.ref(0, 8));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, 0);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(16, 1)), $mul.ref(1, 8));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, 1);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i35 := $udiv.i32($i9, 2);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 1);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i37 := gru_mesq_head(2, $i36);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i37);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p34);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p6);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 879} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p39, $p40, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p1);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p7);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i44 := uv_gpa($p43);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p45, $i44);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i9);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i47 := $ashr.i32($i3, 1);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i4);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i5);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const gru_mesq_head: ref;

axiom gru_mesq_head == $sub.ref(0, 505353);

procedure gru_mesq_head($i0: i32, $i1: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.8, $CurrAddr;



implementation gru_mesq_head($i0: i32, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 883} {:cexpr "gru_mesq_head:arg:head"} boogie_si_record_i32($i0);
    call {:si_unique_call 884} {:cexpr "gru_mesq_head:arg:limit"} boogie_si_record_i32($i1);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p5, $i0);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p7, $i1);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.8;
    cmdloc_dummy_var_25 := $M.8;
    call {:si_unique_call 885} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p8, $p9, 8, $zext.i32.i64(8), 0 == 1);
    $M.8 := cmdloc_dummy_var_26;
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.8, $p10);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const uv_gpa: ref;

axiom uv_gpa == $sub.ref(0, 506385);

procedure uv_gpa($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation uv_gpa($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i2 := __phys_addr($i1);
    call {:si_unique_call 887} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $i3 := uv_soc_phys_ram_to_gpa($i2);
    call {:si_unique_call 889} {:cexpr "tmp___0"} boogie_si_record_i64($i3);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 507417);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 890} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 1} true;
    call {:si_unique_call 891} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 892} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const uv_soc_phys_ram_to_gpa: ref;

axiom uv_soc_phys_ram_to_gpa == $sub.ref(0, 508449);

procedure uv_soc_phys_ram_to_gpa($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation uv_soc_phys_ram_to_gpa($i0: i64) returns ($r: i64)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} {:cexpr "uv_soc_phys_ram_to_gpa:arg:paddr"} boogie_si_record_i64($i0);
    call {:si_unique_call 894} $i1 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 895} {:cexpr "tcp_ptr_____0"} boogie_si_record_i64($i1);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.3, $p3);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i64($i4, $i0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i12 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 900} {:cexpr "tcp_ptr_____1"} boogie_si_record_i64($i12);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.3, $p14);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i16 := $or.i64($i15, $i11);
    call {:si_unique_call 901} {:cexpr "paddr"} boogie_si_record_i64($i16);
    call {:si_unique_call 902} $i17 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 903} {:cexpr "tcp_ptr_____2"} boogie_si_record_i64($i17);
    call {:si_unique_call 904} $i18 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 905} {:cexpr "tcp_ptr_____3"} boogie_si_record_i64($i18);
    call {:si_unique_call 906} $i19 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 907} {:cexpr "tcp_ptr_____4"} boogie_si_record_i64($i19);
    call {:si_unique_call 908} $i20 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 909} {:cexpr "tcp_ptr_____5"} boogie_si_record_i64($i20);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i17);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 232)), $mul.ref(22, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.3, $p22);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i26 := $shl.i64($i16, $i25);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i18);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(22, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.3, $p28);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i32 := $lshr.i64($i26, $i31);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i19);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 232)), $mul.ref(57, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.3, $p34);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i38 := $lshr.i64($i16, $i37);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i20);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 232)), $mul.ref(23, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.3, $p40);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i44 := $shl.i64($i38, $i43);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i45 := $or.i64($i32, $i44);
    call {:si_unique_call 910} {:cexpr "paddr"} boogie_si_record_i64($i45);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb1:
    assume $i5 == 1;
    call {:si_unique_call 896} $i6 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 897} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i6);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.3, $p8);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i10 := $or.i64($i9, $i0);
    call {:si_unique_call 898} {:cexpr "paddr"} boogie_si_record_i64($i10);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const gru_send_message_gpa: ref;

axiom gru_send_message_gpa == $sub.ref(0, 509481);

procedure gru_send_message_gpa($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.8, $M.11, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation gru_send_message_gpa($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $p28: ref;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $i19: i32;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 913} {:cexpr "gru_send_message_gpa:arg:bytes"} boogie_si_record_i32($i2);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 2);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i8 := $ule.i32($i2, 3);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i9 := 1;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i8 == 1);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i2, 128);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 916} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i2, 63);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i16 := $udiv.i32($i15, 64);
    call {:si_unique_call 918} {:cexpr "clines"} boogie_si_record_i32($i16);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i17 := gru_get_cpu_resources($i2, $p3, $p4);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 920} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.9, $p4);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i2);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} memcpy_guard($p20, $p1, $i21);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.9, $p4);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i2);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 922} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p22, $p1, $i23, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.9, $p4);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 1);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i16);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i27);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i16, 2);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call $p35, $i36, $p37, $p38, $i39, $i40, $i41, $p42, $i43, $i44, $p45, $p46, $i47, $i48, $i49, $i50 := gru_send_message_gpa_loop_$bb18($p0, $p3, $p4, $i16, $p25, $p35, $i36, $p37, $p38, $i39, $i40, $i41, $p42, $i43, $i44, $p45, $p46, $i47, $i48, $i49, $i50);
    goto $bb18_last;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i36 := gru_get_tri($p35);
    call {:si_unique_call 927} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.10, $p3);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i36);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i16);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} gru_mesq($p37, $i39, $i40, $i41, 1);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.10, $p3);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i43 := gru_wait($p42);
    call {:si_unique_call 930} {:cexpr "istatus"} boogie_si_record_i32($i43);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, $sub.i32(0, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i50 := $i48;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.10, $p3);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.9, $p4);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} gru_free_cpu_resources($p51, $p52);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i50, 0);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i19 := $i50;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb25:
    assume $i53 == 1;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i54 := $M.1;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 2);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i56 == 1;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(448, 1)));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb22_dummy;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.10, $p3);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.9, $p4);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i47 := send_message_failure($p45, $p0, $p46, $i16);
    call {:si_unique_call 932} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb21;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p25);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i31 := get_present2($p30);
    call {:si_unique_call 924} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p25, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i32);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p25);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} restore_present2($p34, 1);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i19 := 11;
    goto $bb13;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i14 == 1;
    call {:si_unique_call 917} devirtbounce.6(0, .str.46, 806, 12);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call gru_send_message_gpa_loop_$bb9();
    goto $bb9_last;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb5;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(440, 1)));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p25);
    goto corral_source_split_3209;

  $bb9_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;
}



const gru_get_cpu_resources: ref;

axiom gru_get_cpu_resources == $sub.ref(0, 510513);

procedure gru_get_cpu_resources($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.0, $M.6, $CurrAddr, assertsPassed, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_get_cpu_resources($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} {:cexpr "gru_get_cpu_resources:arg:dsr_bytes"} boogie_si_record_i32($i0);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i0, 256);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 937} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} __preempt_count_add___0(1);
    call {:si_unique_call 940} devirtbounce.1(0);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $p8 := gru_lock_kernel_context($sub.i32(0, 1));
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i9 := uv_blade_processor_id();
    call {:si_unique_call 943} {:cexpr "lcpu"} boogie_si_record_i32($i9);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 1136)), $mul.ref(0, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i9, 256);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p11, $mul.ref($i13, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p1, $p14);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 1136)), $mul.ref(8, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i9, 256);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p16, $mul.ref($i18, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p2, $p19);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 938} devirtbounce.6(0, .str.46, 267, 12);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call gru_get_cpu_resources_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_present2: ref;

axiom get_present2 == $sub.ref(0, 511545);

procedure get_present2($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_present2($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(64, 4)), $mul.ref(0, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const restore_present2: ref;

axiom restore_present2 == $sub.ref(0, 512577);

procedure restore_present2($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation restore_present2($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i4: i8;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} {:cexpr "restore_present2:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i1);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(64, 4)), $mul.ref(0, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i4);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    return;
}



const gru_get_tri: ref;

axiom gru_get_tri == $sub.ref(0, 513609);

procedure gru_get_tri($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gru_get_tri($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 262143);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 131072);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const gru_mesq: ref;

axiom gru_mesq == $sub.ref(0, 514641);

procedure gru_mesq($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_mesq($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} {:cexpr "gru_mesq:arg:queue"} boogie_si_record_i64($i1);
    call {:si_unique_call 946} {:cexpr "gru_mesq:arg:tri0"} boogie_si_record_i64($i2);
    call {:si_unique_call 947} {:cexpr "gru_mesq:arg:nelem"} boogie_si_record_i64($i3);
    call {:si_unique_call 948} {:cexpr "gru_mesq:arg:hints"} boogie_si_record_i64($i4);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $i1);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i3);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i8($i4);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 2);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i12 := __opdword(8, 0, 6, 0, 0, $i2, $i11);
    call {:si_unique_call 950} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} gru_start_instruction($p5, $i12);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    return;
}



const gru_wait: ref;

axiom gru_wait == $sub.ref(0, 515673);

procedure gru_wait($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.12, $M.16, $M.17, $CurrAddr;



implementation gru_wait($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i1 := gru_wait_proc($p0);
    call {:si_unique_call 953} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const send_message_failure: ref;

axiom send_message_failure == $sub.ref(0, 516705);

procedure send_message_failure($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.11, $M.0, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation send_message_failure($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} {:cexpr "send_message_failure:arg:lines"} boogie_si_record_i32($i3);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i4 := gru_get_cb_message_queue_substatus($p0);
    call {:si_unique_call 956} {:cexpr "substatus"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i4, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    call {:si_unique_call 967} devirtbounce.6(0, .str.46, 786, 12);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    call send_message_failure_loop_$bb37();
    goto $bb37_last;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i26 := $M.1;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 2);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i29 := send_message_put_nacked($p0, $p1, $p2, $i3);
    call {:si_unique_call 965} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i15 := $i29;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb30:
    assume $i28 == 1;
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(496, 1)));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i23 := $M.1;
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 2);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb20;

  $bb27:
    assume $i25 == 1;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(488, 1)));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i30 := $M.1;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 2);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i32 == 1;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(504, 1)));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i19 := $M.1;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 2);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i22 := send_message_queue_full($p0, $p1, $p2, $i3);
    call {:si_unique_call 961} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i15 := $i22;
    goto $bb20;

  $bb24:
    assume $i21 == 1;
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(480, 1)));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 2);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb20;

  $bb21:
    assume $i18 == 1;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(472, 1)));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb15:
    assume $i11 == 1;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i12 := $M.1;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i13 := $and.i64($i12, 2);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i15 := 3;
    goto $bb20;

  $bb17:
    assume $i14 == 1;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(464, 1)));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb37_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    goto $bb37_dummy;
}



const gru_free_cpu_resources: ref;

axiom gru_free_cpu_resources == $sub.ref(0, 517737);

procedure gru_free_cpu_resources($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_free_cpu_resources($p0: ref, $p1: ref)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i2 := uv_numa_blade_id();
    call {:si_unique_call 969} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} gru_unlock_kernel_context($i2);
    call {:si_unique_call 971} devirtbounce.1(0);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} __preempt_count_sub___0(1);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    return;
}



const gru_unlock_kernel_context: ref;

axiom gru_unlock_kernel_context == $sub.ref(0, 518769);

procedure gru_unlock_kernel_context($i0: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_unlock_kernel_context($i0: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} {:cexpr "gru_unlock_kernel_context:arg:blade_id"} boogie_si_record_i32($i0);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64($i0);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i1, 8));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.4, $p2);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} up_read($p4);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 2);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(104, 1)));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const up_read: ref;

axiom up_read == $sub.ref(0, 519801);

procedure up_read($p0: ref);
  free requires assertsPassed;



implementation up_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    return;
}



const gru_get_cb_message_queue_substatus: ref;

axiom gru_get_cb_message_queue_substatus == $sub.ref(0, 520833);

procedure gru_get_cb_message_queue_substatus($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gru_get_cb_message_queue_substatus($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i64($i3, 58);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 15);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i8($i5);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 7);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const send_message_queue_full: ref;

axiom send_message_queue_full == $sub.ref(0, 521865);

procedure send_message_queue_full($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.11, $M.0, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation send_message_queue_full($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i32;
  var $i34: i1;
  var $i35: i64;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i32;
  var $i51: i1;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i32;
  var $i62: i1;
  var $i63: i64;
  var $i64: i1;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i32;
  var $i75: i1;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $i40: i32;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 979} {:cexpr "send_message_queue_full:arg:lines"} boogie_si_record_i32($i3);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i7 := gru_get_amo_value($p0);
    call {:si_unique_call 981} {:cexpr "avalue"} boogie_si_record_i64($i7);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i8 := gru_get_amo_value_head($p0);
    call {:si_unique_call 983} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i9 := gru_get_amo_value_limit($p0);
    call {:si_unique_call 985} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 986} {:cexpr "qlines"} boogie_si_record_i32($i11);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, $i9);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 987} {:cexpr "half"} boogie_si_record_i32($i13);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i21 := $sdiv.i32($i11, 2);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i23 := gru_mesq_head(2, $i22);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $M.11 := $store.i64($M.11, $p24, $i23);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p4);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p6);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.11;
    cmdloc_dummy_var_34 := $M.11;
    call {:si_unique_call 991} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p25, $p26, 8, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_35;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i13);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 2);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i31 := $mul.i64($i30, 8);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i28, $i31);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} gru_gamir($p0, 2, $i32, 3, 1);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i33 := gru_wait($p0);
    call {:si_unique_call 994} {:cexpr "tmp___1"} boogie_si_record_i32($i33);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i35 := gru_get_amo_value($p0);
    call {:si_unique_call 996} {:cexpr "tmp___2"} boogie_si_record_i64($i35);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i8, $i9);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i56 := $i7;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p4);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.11, $p59);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} gru_gamer($p0, 8, $i58, 3, $i60, $i56, 1);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $i61 := gru_wait($p0);
    call {:si_unique_call 1007} {:cexpr "tmp___5"} boogie_si_record_i32($i61);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $i63 := gru_get_amo_value($p0);
    call {:si_unique_call 1009} {:cexpr "tmp___7"} boogie_si_record_i64($i63);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, $i56);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb30:
    assume $i64 == 1;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i65 := $M.1;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 2);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i13);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 2);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i72 := $mul.i64($i71, 8);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i69, $i72);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} gru_gamir($p0, 5, $i73, 3, 1);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $i74 := gru_wait($p0);
    call {:si_unique_call 1013} {:cexpr "tmp___6"} boogie_si_record_i32($i74);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i75 == 1;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i76 := $M.1;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 2);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i40 := 3;
    goto $bb13;

  $bb39:
    assume $i78 == 1;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(536, 1)));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb32:
    assume $i67 == 1;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(528, 1)));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb27:
    assume $i62 == 1;
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb15:
    assume $i41 == 1;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i42 := send_noop_message($p0, $p1, $p2);
    call {:si_unique_call 999} {:cexpr "tmp___4"} boogie_si_record_i32($i42);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i7, 1);
    call {:si_unique_call 1004} {:cexpr "avalue"} boogie_si_record_i64($i55);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb26;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i13);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 2);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i48 := $mul.i64($i47, 8);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i45, $i48);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} gru_gamir($p0, 5, $i49, 3, 1);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $i50 := gru_wait($p0);
    call {:si_unique_call 1002} {:cexpr "tmp___3"} boogie_si_record_i32($i50);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i52 := $M.1;
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 2);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 1);
    goto $bb13;

  $bb22:
    assume $i54 == 1;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(520, 1)));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i51 == 1;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i37 := $M.1;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 2);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i40 := 2;
    goto $bb13;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(512, 1)));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i15 := $sdiv.i32($i11, 2);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i17 := gru_mesq_head($i16, $i11);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $M.11 := $store.i64($M.11, $p18, $i17);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p4);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p5);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.11;
    cmdloc_dummy_var_31 := $M.11;
    call {:si_unique_call 989} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p19, $p20, 8, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_32;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const send_message_put_nacked: ref;

axiom send_message_put_nacked == $sub.ref(0, 522897);

procedure send_message_put_nacked($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.12, $M.16, $M.17, $CurrAddr;



implementation send_message_put_nacked($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} {:cexpr "send_message_put_nacked:arg:lines"} boogie_si_record_i32($i3);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $i5 := gru_get_amo_value_head($p0);
    call {:si_unique_call 1017} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i5, 6);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i7, $i9);
    call {:si_unique_call 1018} {:cexpr "m"} boogie_si_record_i64($i10);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i3, 2);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i16 := gru_get_tri($p2);
    call {:si_unique_call 1023} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i3);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} gru_vstore($p0, $i10, $i16, 6, $i17, 1, 1);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i18 := gru_wait($p0);
    call {:si_unique_call 1026} {:cexpr "tmp___2"} boogie_si_record_i32($i18);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i25 := uv_global_gru_mmr_address($i24, 394496);
    call {:si_unique_call 1028} {:cexpr "gpa"} boogie_si_record_i64($i25);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p4);
    call {:si_unique_call 1029} {:cexpr "save"} boogie_si_record_i64($i26);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i31 := uv_hub_ipi_value($i28, $i30, 0);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i31);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $i32 := gru_get_tri($p2);
    call {:si_unique_call 1032} {:cexpr "tmp___3"} boogie_si_record_i32($i32);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} gru_vstore_phys($p0, $i25, $i32, 3, 1);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i33 := gru_wait($p0);
    call {:si_unique_call 1035} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i26);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i15 := 3;
    goto $bb5;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i15 := 3;
    goto $bb5;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i3);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} gru_vset($p0, $i10, 0, 6, $i12, 1, 1);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i13 := gru_wait($p0);
    call {:si_unique_call 1021} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i15 := 3;
    goto $bb5;
}



const gru_get_amo_value_head: ref;

axiom gru_get_amo_value_head == $sub.ref(0, 523929);

procedure gru_get_amo_value_head($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gru_get_amo_value_head($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const gru_vset: ref;

axiom gru_vset == $sub.ref(0, 524961);

procedure gru_vset($p0: ref, $i1: i64, $i2: i64, $i3: i8, $i4: i64, $i5: i64, $i6: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_vset($p0: ref, $i1: i64, $i2: i64, $i3: i8, $i4: i64, $i5: i64, $i6: i64)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i8;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} {:cexpr "gru_vset:arg:mem_addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1037} {:cexpr "gru_vset:arg:value"} boogie_si_record_i64($i2);
    call {:si_unique_call 1038} {:cexpr "gru_vset:arg:xtype"} boogie_si_record_i8($i3);
    call {:si_unique_call 1039} {:cexpr "gru_vset:arg:nelem"} boogie_si_record_i64($i4);
    call {:si_unique_call 1040} {:cexpr "gru_vset:arg:stride"} boogie_si_record_i64($i5);
    call {:si_unique_call 1041} {:cexpr "gru_vset:arg:hints"} boogie_si_record_i64($i6);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i2);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i4);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i5);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i3);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i8($i6);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 2);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i18 := __opdword(6, 0, $i13, 0, 0, 0, $i17);
    call {:si_unique_call 1043} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} gru_start_instruction($p7, $i18);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    return;
}



const gru_vstore: ref;

axiom gru_vstore == $sub.ref(0, 525993);

procedure gru_vstore($p0: ref, $i1: i64, $i2: i32, $i3: i8, $i4: i64, $i5: i64, $i6: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_vstore($p0: ref, $i1: i64, $i2: i32, $i3: i8, $i4: i64, $i5: i64, $i6: i64)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i8;
  var $i13: i64;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} {:cexpr "gru_vstore:arg:mem_addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1046} {:cexpr "gru_vstore:arg:tri0"} boogie_si_record_i32($i2);
    call {:si_unique_call 1047} {:cexpr "gru_vstore:arg:xtype"} boogie_si_record_i8($i3);
    call {:si_unique_call 1048} {:cexpr "gru_vstore:arg:nelem"} boogie_si_record_i64($i4);
    call {:si_unique_call 1049} {:cexpr "gru_vstore:arg:stride"} boogie_si_record_i64($i5);
    call {:si_unique_call 1050} {:cexpr "gru_vstore:arg:hints"} boogie_si_record_i64($i6);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i1);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i4);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i5);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i3);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i2);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i8($i6);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 2);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i18 := __opdword(4, 0, $i12, 0, 0, $i13, $i17);
    call {:si_unique_call 1052} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} gru_start_instruction($p7, $i18);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    return;
}



const uv_global_gru_mmr_address: ref;

axiom uv_global_gru_mmr_address == $sub.ref(0, 527025);

procedure uv_global_gru_mmr_address($i0: i32, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation uv_global_gru_mmr_address($i0: i32, $i1: i64) returns ($r: i64)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} {:cexpr "uv_global_gru_mmr_address:arg:pnode"} boogie_si_record_i32($i0);
    call {:si_unique_call 1055} {:cexpr "uv_global_gru_mmr_address:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 1056} $i2 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 1057} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i2);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i0);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i2);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(57, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.3, $p5);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i9 := $shl.i64($i3, $i8);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i10 := $or.i64($i9, $i1);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i11 := $or.i64($i10, 67108864);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const uv_hub_ipi_value: ref;

axiom uv_hub_ipi_value == $sub.ref(0, 528057);

procedure uv_hub_ipi_value($i0: i32, $i1: i32, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation uv_hub_ipi_value($i0: i32, $i1: i32, $i2: i32) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} {:cexpr "uv_hub_ipi_value:arg:apicid"} boogie_si_record_i32($i0);
    call {:si_unique_call 1059} {:cexpr "uv_hub_ipi_value:arg:vector"} boogie_si_record_i32($i1);
    call {:si_unique_call 1060} {:cexpr "uv_hub_ipi_value:arg:mode"} boogie_si_record_i32($i2);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.3, uv_apicid_hibits);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i0, $i3);
    call {:si_unique_call 1061} {:cexpr "apicid"} boogie_si_record_i32($i4);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i4, 16);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i2, 8);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i9 := $or.i64($i6, $i8);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i1);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i11 := $or.i64($i9, $i10);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i12 := $or.i64($i11, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const gru_vstore_phys: ref;

axiom gru_vstore_phys == $sub.ref(0, 529089);

procedure gru_vstore_phys($p0: ref, $i1: i64, $i2: i32, $i3: i32, $i4: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_vstore_phys($p0: ref, $i1: i64, $i2: i32, $i3: i32, $i4: i64)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i64;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} {:cexpr "gru_vstore_phys:arg:gpa"} boogie_si_record_i64($i1);
    call {:si_unique_call 1063} {:cexpr "gru_vstore_phys:arg:tri0"} boogie_si_record_i32($i2);
    call {:si_unique_call 1064} {:cexpr "gru_vstore_phys:arg:iaa"} boogie_si_record_i32($i3);
    call {:si_unique_call 1065} {:cexpr "gru_vstore_phys:arg:hints"} boogie_si_record_i64($i4);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i3);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i7 := $shl.i64($i6, 62);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i8 := $or.i64($i7, $i1);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i8);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, 1);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, 1);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i3);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i2);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i8($i4);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 2);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i20 := __opdword(4, 0, 3, $i14, 0, $i15, $i19);
    call {:si_unique_call 1067} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} gru_start_instruction($p5, $i20);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    return;
}



const __opdword: ref;

axiom __opdword == $sub.ref(0, 530121);

procedure __opdword($i0: i8, $i1: i8, $i2: i8, $i3: i8, $i4: i8, $i5: i64, $i6: i8) returns ($r: i64);
  free requires assertsPassed;



implementation __opdword($i0: i8, $i1: i8, $i2: i8, $i3: i8, $i4: i8, $i5: i64, $i6: i8) returns ($r: i64)
{
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} {:cexpr "__opdword:arg:opcode"} boogie_si_record_i8($i0);
    call {:si_unique_call 1070} {:cexpr "__opdword:arg:exopc"} boogie_si_record_i8($i1);
    call {:si_unique_call 1071} {:cexpr "__opdword:arg:xtype"} boogie_si_record_i8($i2);
    call {:si_unique_call 1072} {:cexpr "__opdword:arg:iaa0"} boogie_si_record_i8($i3);
    call {:si_unique_call 1073} {:cexpr "__opdword:arg:iaa1"} boogie_si_record_i8($i4);
    call {:si_unique_call 1074} {:cexpr "__opdword:arg:idef2"} boogie_si_record_i64($i5);
    call {:si_unique_call 1075} {:cexpr "__opdword:arg:ima"} boogie_si_record_i8($i6);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i7 := $shl.i64($i5, 32);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i3);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i8, 11);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i11 := $or.i64($i7, $i10);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i4);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 13);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i15 := $or.i64($i11, $i14);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i6);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 1);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i19 := $or.i64($i15, $i18);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i2);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 8);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i23 := $or.i64($i19, $i22);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i0);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 16);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i27 := $or.i64($i23, $i26);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i1);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i29 := $shl.i32($i28, 24);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i31 := $or.i64($i27, $i30);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i32 := $or.i64($i31, 144115188075855873);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;
}



const gru_start_instruction: ref;

axiom gru_start_instruction == $sub.ref(0, 531153);

procedure gru_start_instruction($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_start_instruction($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} {:cexpr "gru_start_instruction:arg:op64"} boogie_si_record_i64($i1);
    call {:si_unique_call 1077} devirtbounce.1(0);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i1);
    call {:si_unique_call 1078} devirtbounce.1(0);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} gru_flush_cache($p3);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    return;
}



const gru_get_amo_value: ref;

axiom gru_get_amo_value == $sub.ref(0, 532185);

procedure gru_get_amo_value($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation gru_get_amo_value($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gru_get_amo_value_limit: ref;

axiom gru_get_amo_value_limit == $sub.ref(0, 533217);

procedure gru_get_amo_value_limit($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gru_get_amo_value_limit($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i64($i3, 32);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const gru_gamir: ref;

axiom gru_gamir == $sub.ref(0, 534249);

procedure gru_gamir($p0: ref, $i1: i32, $i2: i64, $i3: i32, $i4: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_gamir($p0: ref, $i1: i32, $i2: i64, $i3: i32, $i4: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} {:cexpr "gru_gamir:arg:exopc"} boogie_si_record_i32($i1);
    call {:si_unique_call 1081} {:cexpr "gru_gamir:arg:src"} boogie_si_record_i64($i2);
    call {:si_unique_call 1082} {:cexpr "gru_gamir:arg:xtype"} boogie_si_record_i32($i3);
    call {:si_unique_call 1083} {:cexpr "gru_gamir:arg:hints"} boogie_si_record_i64($i4);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $i2);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i1);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i3);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i8($i4);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 2);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i17 := __opdword(10, $i9, $i12, 0, 0, 0, $i16);
    call {:si_unique_call 1085} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} gru_start_instruction($p5, $i17);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    return;
}



const send_noop_message: ref;

axiom send_noop_message == $sub.ref(0, 535281);

procedure send_noop_message($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation send_noop_message($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $p49: ref;
  var $i50: i64;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $i35: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 2);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 1);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i10 := $M.1;
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 2);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p9);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 1090} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p13, $p14, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p9);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 1091} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p15, $p16, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p9);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i18 := gru_get_tri($p17);
    call {:si_unique_call 1093} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i18);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} gru_mesq($p0, $i20, $i21, 1, 1);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i22 := gru_wait($p0);
    call {:si_unique_call 1096} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i22;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p9);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p4);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 1114} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p62, $p63, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $r := $i61;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i24 := gru_get_cb_message_queue_substatus($p0);
    call {:si_unique_call 1098} {:cexpr "substatus"} boogie_si_record_i32($i24);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i24, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i24, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i24, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    call {:si_unique_call 1113} devirtbounce.6(0, .str.46, 634, 12);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    call send_noop_message_loop_$bb45();
    goto $bb45_last;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i45 := $M.1;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 2);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i48 := gru_get_amo_value_head($p0);
    call {:si_unique_call 1105} {:cexpr "tmp___0"} boogie_si_record_i32($i48);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i51 := $shl.i32($i48, 6);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i50, $i52);
    call {:si_unique_call 1106} {:cexpr "m"} boogie_si_record_i64($i53);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i54 := gru_get_tri($p2);
    call {:si_unique_call 1108} {:cexpr "tmp___1"} boogie_si_record_i32($i54);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} gru_vstore($p0, $i53, $i54, 6, 1, 1, 1);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i55 := gru_wait($p0);
    call {:si_unique_call 1111} {:cexpr "tmp___2"} boogie_si_record_i32($i55);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := 3;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i35 := $i57;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i61 := $i35;
    goto $bb46;

  $bb38:
    assume $i56 == 1;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 1);
    goto $bb40;

  $bb35:
    assume $i47 == 1;
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(576, 1)));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i42 := $M.1;
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 2);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i35 := 1;
    goto $bb25;

  $bb32:
    assume $i44 == 1;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(568, 1)));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i58 := $M.1;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 2);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i60 == 1;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(584, 1)));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb7:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i24, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i24, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i39 := $M.1;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 2);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb25;

  $bb29:
    assume $i41 == 1;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(560, 1)));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i36 := $M.1;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 2);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i35 := 1;
    goto $bb25;

  $bb26:
    assume $i38 == 1;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(552, 1)));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb16:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb15;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i32 := $M.1;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 2);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i35 := 3;
    goto $bb25;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(544, 1)));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(456, 1)));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb45_dummy:
    assume false;
    return;

  $bb45_last:
    assume {:verifier.code 0} true;
    goto $bb45_dummy;
}



const gru_gamer: ref;

axiom gru_gamer == $sub.ref(0, 536313);

procedure gru_gamer($p0: ref, $i1: i32, $i2: i64, $i3: i32, $i4: i64, $i5: i64, $i6: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_gamer($p0: ref, $i1: i32, $i2: i64, $i3: i32, $i4: i64, $i5: i64, $i6: i64)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i8;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} {:cexpr "gru_gamer:arg:exopc"} boogie_si_record_i32($i1);
    call {:si_unique_call 1116} {:cexpr "gru_gamer:arg:src"} boogie_si_record_i64($i2);
    call {:si_unique_call 1117} {:cexpr "gru_gamer:arg:xtype"} boogie_si_record_i32($i3);
    call {:si_unique_call 1118} {:cexpr "gru_gamer:arg:operand1"} boogie_si_record_i64($i4);
    call {:si_unique_call 1119} {:cexpr "gru_gamer:arg:operand2"} boogie_si_record_i64($i5);
    call {:si_unique_call 1120} {:cexpr "gru_gamer:arg:hints"} boogie_si_record_i64($i6);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i2);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i4);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i5);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i1);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i3);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i8($i6);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, 2);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i21 := __opdword(12, $i13, $i16, 0, 0, 0, $i20);
    call {:si_unique_call 1122} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} gru_start_instruction($p7, $i21);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    return;
}



const gru_wait_proc: ref;

axiom gru_wait_proc == $sub.ref(0, 537345);

procedure gru_wait_proc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.12, $M.16, $M.17, $CurrAddr;



implementation gru_wait_proc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $i2 := gru_wait_idle_or_exception($p1);
    call {:si_unique_call 1125} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} devirtbounce.1(0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i4 := gru_retry_exception($p0);
    call {:si_unique_call 1127} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const gru_wait_idle_or_exception: ref;

axiom gru_wait_idle_or_exception == $sub.ref(0, 538377);

procedure gru_wait_idle_or_exception($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gru_wait_idle_or_exception($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i8;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i64($i2, 56);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 3);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i8($i4);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 1);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i64($i15, 56);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 3);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i8($i17);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $i11, $i12, $i13 := gru_wait_idle_or_exception_loop_$bb4($p1, $i8, $i9, $i10, $i11, $i12, $i13);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} cpu_relax();
    call {:si_unique_call 1130} devirtbounce.1(0);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p1);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i64($i8, 56);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i9, 3);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i8($i10);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 1);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const gru_retry_exception: ref;

axiom gru_retry_exception == $sub.ref(0, 539409);

procedure gru_retry_exception($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.12, $M.16, $M.17, $CurrAddr;



implementation gru_retry_exception($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i6: i32;
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $p1 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i3 := gru_wait_idle_or_exception($p2);
    call {:si_unique_call 1133} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i5 := 3;
    goto $bb4;

  $bb4:
    call $i5, $i7, $i8, $p10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i23, $p24, $i25, $i26, vslice_dummy_var_113 := gru_retry_exception_loop_$bb4($p0, $p1, $p2, $i5, $i7, $i8, $p10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i23, $p24, $i25, $i26, vslice_dummy_var_113);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i7 := gru_get_cb_message_queue_substatus($p0);
    call {:si_unique_call 1135} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} vslice_dummy_var_113 := gru_get_cb_exception_detail($p0, $p1);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.12, $p10);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, $sub.i32(0, 414593));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i13 == 1);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.13, $p14);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 1);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i5, 1);
    call {:si_unique_call 1137} {:cexpr "retry"} boogie_si_record_i32($i18);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i5, 0);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, $sub.i64(0, 2));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i23 := $or.i64($i22, 1);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i23);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p2);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} gru_flush_cache($p24);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i25 := gru_wait_idle_or_exception($p2);
    call {:si_unique_call 1140} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb21;

  $bb21:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i18;
    goto $bb21_dummy;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb18:
    assume $i19 == 1;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb12;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb21_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const gru_get_cb_exception_detail: ref;

axiom gru_get_cb_exception_detail == $sub.ref(0, 540441);

procedure gru_get_cb_exception_detail($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.15, $M.12, $M.16, $M.17, $M.0;



implementation gru_get_cb_exception_detail($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p25: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i5: i32;
  var $p6: ref;
  var $p38: ref;
  var $p4: ref;
  var $p13: ref;
  var $i39: i64;
  var $i40: i1;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i56;
  var $i72: i56;
  var $i73: i56;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i2 := uv_num_possible_blades();
    call {:si_unique_call 1142} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p13 := $p4;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p13);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 1144} {:cexpr "tmp___0"} boogie_si_record_i64($i43);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $i45 := get_cb_number($p0);
    call {:si_unique_call 1151} {:cexpr "tmp___1"} boogie_si_record_i64($i45);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $i46 := get_cb_number($p0);
    call {:si_unique_call 1153} {:cexpr "tmp___2"} boogie_si_record_i64($i46);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i47 := $udiv.i64($i45, 2);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(281, 1)), $mul.ref($i47, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i51 := $sext.i8.i32($i50);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i52 := $mul.i32($i51, 2);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i46);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 1);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i52, $i54);
    call {:si_unique_call 1154} {:cexpr "cbrnum"} boogie_si_record_i32($i55);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p0);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, $sub.i64(0, 134217728));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $p59 := get_cbe($p58, $i55);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} gru_flush_cache($p60);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} sync_core();
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p59, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p64, $i63);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p59, $mul.ref(0, 64)), $mul.ref(3, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p68, $i67);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p59, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i71 := $load.i56($M.0, $p70);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i72 := $lshr.i56($i71, 32);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i73 := $and.i56($i72, 1048575);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i56.i32($i73);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p75, $i74);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p59, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, $p78, $i77);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p59, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.0, $p79);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i64.i32($i80);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p82, $i81);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p59);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} gru_flush_cache($p83);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb23:
    assume $i44 == 1;
    call {:si_unique_call 1149} devirtbounce.6(0, .str.46, 418, 12);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call gru_get_cb_exception_detail_loop_$bb25();
    goto $bb25_last;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i5, $p6 := 0, $0.ref;
    goto $bb4;

  $bb4:
    call $i7, $p8, $p9, $i10, $i11, $p12, $i14, $p15, $p16, $p17, $p18, $i19, $i20, $p21, $p22, $i23, $i24, $i26, $p27, $p28, $p29, $p30, $i31, $i32, $i33, $p34, $p25, $i35, $i36, $i37, $i5, $p6, $p38 := gru_get_cb_exception_detail_loop_$bb4($p0, $i7, $p8, $p9, $i10, $i11, $p12, $i14, $p15, $p16, $p17, $p18, $i19, $i20, $p21, $p22, $i23, $i24, $i26, $p27, $p28, $p29, $p30, $i31, $i32, $i33, $p34, $p25, $i35, $i36, $i37, $i5, $p6, $p38);
    goto $bb4_last;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i5);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i7, 8));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.4, $p8);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i14, 8));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.4, $p15);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i20 == 1);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p0);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64($i26, $i31);
    call {:si_unique_call 1148} {:cexpr "off"} boogie_si_record_i64($i32);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i33 := $ule.i64($i32, 134217727);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p34 := $p18;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p25 := $0.ref;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i5, 1);
    call {:si_unique_call 1145} {:cexpr "bid"} boogie_si_record_i32($i35);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $i36 := uv_num_possible_blades();
    call {:si_unique_call 1147} {:cexpr "tmp"} boogie_si_record_i32($i36);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i36, $i35);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p38 := $p25;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p4 := $p38;
    goto $bb3;

  $bb20:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i5, $p6 := $i35, $p25;
    goto $bb20_dummy;

  $bb17:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p13 := $p34;
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p25 := $p18;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb11;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb8;

  $bb25_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;
}



const uv_num_possible_blades: ref;

axiom uv_num_possible_blades == $sub.ref(0, 541473);

procedure uv_num_possible_blades() returns ($r: i32);
  free requires assertsPassed;



implementation uv_num_possible_blades() returns ($r: i32)
{
  var $i0: i16;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i0 := $load.i16($M.3, uv_possible_blades);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i1 := $sext.i16.i32($i0);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_cb_number: ref;

axiom get_cb_number == $sub.ref(0, 542505);

procedure get_cb_number($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_cb_number($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, 262143);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i3 := $udiv.i64($i2, 256);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const get_cbe: ref;

axiom get_cbe == $sub.ref(0, 543537);

procedure get_cbe($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_cbe($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} {:cexpr "get_cbe:arg:ctxnum"} boogie_si_record_i32($i1);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i1, 256);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 67174400);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p0, $mul.ref($i4, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const gru_lock_kernel_context: ref;

axiom gru_lock_kernel_context == $sub.ref(0, 544569);

procedure gru_lock_kernel_context($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.10, $M.9, assertsPassed, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_lock_kernel_context($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i14: i32;
  var $i15: i1;
  var $p18: ref;
  var $i16: i32;
  var $p17: ref;
  var $i12: i32;
  var $p13: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} {:cexpr "gru_lock_kernel_context:arg:blade_id"} boogie_si_record_i32($i0);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, 2);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i4, $i5, $i6, $i7, $p8, $p9, $p10, $i11, $i14, $i15, $p18, $i16, $p17, $i12, $p13 := gru_lock_kernel_context_loop_$bb4($i0, $i4, $i5, $i6, $i7, $p8, $p9, $p10, $i11, $i14, $i15, $p18, $i16, $p17, $i12, $p13);
    goto $bb4_last;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    call {:si_unique_call 1164} {:cexpr "gru_lock_kernel_context:arg:bid"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    $i6 := $i0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i7, 8));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.4, $p8);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} down_read($p10);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i0, 0);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i12, $p13 := $i6, $p9;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i19, $p20 := $i12, $p13;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i24 == 1);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $p31 := $p20;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $r := $p31;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} gru_load_kernel_context($p20, $i19);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $p31 := $p20;
    goto $bb19;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb15;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i14 := uv_numa_blade_id();
    call {:si_unique_call 1167} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, $i6);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i16, $p17 := $i6, $p9;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19, $p20 := $i16, $p17;
    goto $bb13;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} up_read($p18);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    goto corral_source_split_4073_dummy;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $i5 := uv_numa_blade_id();
    call {:si_unique_call 1163} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(96, 1)));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_4073_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 0);
    goto corral_source_split_4054;
}



const down_read: ref;

axiom down_read == $sub.ref(0, 545601);

procedure down_read($p0: ref);
  free requires assertsPassed;



implementation down_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    return;
}



const gru_load_kernel_context: ref;

axiom gru_load_kernel_context == $sub.ref(0, 546633);

procedure gru_load_kernel_context($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $CurrAddr, $M.10, $M.9, assertsPassed, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_load_kernel_context($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} {:cexpr "gru_load_kernel_context:arg:blade_id"} boogie_si_record_i32($i1);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} up_read($p2);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} down_write($p3);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} downgrade_write($p57);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i20 := $M.1;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 2);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i23 := uv_blade_nr_possible_cpus($i1);
    call {:si_unique_call 1176} {:cexpr "ncpus"} boogie_si_record_i32($i23);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1136)), $mul.ref(188, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, $i23);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i28 := $sdiv.i32($i27, 2);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p15, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i29);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i23, 256);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1136)), $mul.ref(184, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i31, $i33);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1023);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i36 := $sdiv.i32($i35, 1024);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, $i37);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $p39 := gru_assign_gru_context($p15);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} gru_load_context($p15);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p15, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    call {:si_unique_call 1182} {:cexpr "ctxnum"} boogie_si_record_i32($i52);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $p53 := get_gseg_base_address_cb($p50, $i52, 0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1136)), $mul.ref(0, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $p53);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p55 := get_gseg_base_address_ds($p50, $i52, 0);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1136)), $mul.ref(8, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p55);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call $p42, $i43, $i44 := gru_load_kernel_context_loop_$bb12($p15, $p42, $i43, $i44);
    goto $bb12_last;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} msleep(1);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} gru_steal_context($p15);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $p42 := gru_assign_gru_context($p15);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb14_dummy;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(88, 1)));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p8 := gru_alloc_gts($0.ref, 0, 0, 0, 0, 0);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p8);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i1);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 464)), $mul.ref(252, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i10);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const down_write: ref;

axiom down_write == $sub.ref(0, 547665);

procedure down_write($p0: ref);
  free requires assertsPassed;



implementation down_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    return;
}



const gru_alloc_gts: ref;

axiom gru_alloc_gts == $sub.ref(0, 548697);

procedure gru_alloc_gts($p0: ref, $i1: i32, $i2: i32, $i3: i8, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_alloc_gts($p0: ref, $i1: i32, $i2: i32, $i3: i8, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $p26: ref;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i1;
  var $i49: i8;
  var $i50: i1;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i64: i32;
  var $p69: ref;
  var $p70: ref;
  var $p18: ref;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1187} {:cexpr "gru_alloc_gts:arg:cbr_au_count"} boogie_si_record_i32($i1);
    call {:si_unique_call 1188} {:cexpr "gru_alloc_gts:arg:dsr_au_count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1189} {:cexpr "gru_alloc_gts:arg:tlb_preload_count"} boogie_si_record_i8($i3);
    call {:si_unique_call 1190} {:cexpr "gru_alloc_gts:arg:options"} boogie_si_record_i32($i4);
    call {:si_unique_call 1191} {:cexpr "gru_alloc_gts:arg:tsid"} boogie_si_record_i32($i5);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i2, 4);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, $i1);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i8, 256);
    call {:si_unique_call 1192} {:cexpr "bytes"} boogie_si_record_i32($i9);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 464);
    call {:si_unique_call 1193} {:cexpr "bytes"} boogie_si_record_i32($i10);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $p12 := kmalloc($i11, 208);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := $M.1;
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 2);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p13);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    call {:si_unique_call 1197} cmdloc_dummy_var_46 := $memset.i8(cmdloc_dummy_var_45, $p22, 0, 464, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_46;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(272, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} atomic_set($p23, 1);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} __mutex_init($p24, .str, $p6);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i1);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i25);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i2);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i27);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(208, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i3);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i4);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, $i30);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(252, 1));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $sub.i16(0, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(254, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $sub.i8(0, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(260, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i5);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $sub.i32(0, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $sub.i32(0, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(278, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $sub.i8(0, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, 1);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p0);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i52 := $M.1;
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 1);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p18 := $p12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb15:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i56 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} __bad_size_call_parameter();
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i64 := $u0;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} vslice_dummy_var_114 := printk.ref.i32.ref.ref(.str.1, $i64, .str.2, $p13);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb22:
    assume $i58 == 1;
    call {:si_unique_call 1206} $i67 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1207} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i67);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i64 := $i67;
    goto $bb34;

  $bb20:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i59 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb24;

  $bb25:
    assume $i59 == 1;
    call {:si_unique_call 1208} $i66 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1209} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i66);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i64 := $i66;
    goto $bb34;

  $bb18:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i60 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb24;

  $bb29:
    assume $i61 == 1;
    call {:si_unique_call 1210} $i65 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1211} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i65);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i64 := $i65;
    goto $bb34;

  $bb27:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i62 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb24;

  $bb31:
    assume $i62 == 1;
    call {:si_unique_call 1212} $i63 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1213} {:cexpr "pfo_ret__"} boogie_si_record_i32($i63);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb34;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $p41 := get_current();
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 11712)), $mul.ref(1968, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p43);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p0);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $p46 := gru_register_mmu_notifier();
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i48 := IS_ERR($p47);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i8($i48);
    call {:si_unique_call 1203} {:cexpr "tmp___2"} boogie_si_record_i8($i49);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i49);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p13, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p46);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i50 == 1;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} gts_drop($p13);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p46);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} $p70 := ERR_CAST($p69);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p18 := $p70;
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(16, 1)));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $p16 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p18 := $p16;
    goto $bb3;
}



const uv_blade_nr_possible_cpus: ref;

axiom uv_blade_nr_possible_cpus == $sub.ref(0, 549729);

procedure uv_blade_nr_possible_cpus($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uv_blade_nr_possible_cpus($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} {:cexpr "uv_blade_nr_possible_cpus:arg:bid"} boogie_si_record_i32($i0);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.3, uv_blade_info);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i0);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($i2, 88)), $mul.ref(0, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.3, $p4);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 550761);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    return;
}



const get_gseg_base_address_cb: ref;

axiom get_gseg_base_address_cb == $sub.ref(0, 551793);

procedure get_gseg_base_address_cb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_gseg_base_address_cb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} {:cexpr "get_gseg_base_address_cb:arg:ctxnum"} boogie_si_record_i32($i1);
    call {:si_unique_call 1219} {:cexpr "get_gseg_base_address_cb:arg:line"} boogie_si_record_i32($i2);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $p3 := get_gseg_base_address($p0, $i1);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i2, 256);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const get_gseg_base_address_ds: ref;

axiom get_gseg_base_address_ds == $sub.ref(0, 552825);

procedure get_gseg_base_address_ds($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_gseg_base_address_ds($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} {:cexpr "get_gseg_base_address_ds:arg:ctxnum"} boogie_si_record_i32($i1);
    call {:si_unique_call 1222} {:cexpr "get_gseg_base_address_ds:arg:line"} boogie_si_record_i32($i2);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} $p3 := get_gseg_base_address($p0, $i1);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i2, 64);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 131072);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p3, $mul.ref($i6, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const downgrade_write: ref;

axiom downgrade_write == $sub.ref(0, 553857);

procedure downgrade_write($p0: ref);
  free requires assertsPassed;



implementation downgrade_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    return;
}



const get_gseg_base_address: ref;

axiom get_gseg_base_address == $sub.ref(0, 554889);

procedure get_gseg_base_address($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_gseg_base_address($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} {:cexpr "get_gseg_base_address:arg:ctxnum"} boogie_si_record_i32($i1);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i1, 4194304);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref($i3, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 555921);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1226} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 556953);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 557985);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 559017);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    return;
}



const gru_register_mmu_notifier: ref;

axiom gru_register_mmu_notifier == $sub.ref(0, 560049);

procedure gru_register_mmu_notifier() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_register_mmu_notifier() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p10: ref;
  var $i33: i64;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i47: i32;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $p52: ref;
  var vslice_dummy_var_115: ref;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $p2 := get_current();
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 11712)), $mul.ref(1968, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $p5 := mmu_find_ops($p4, gru_mmuops);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $p11 := kzalloc(16840, 208);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p10 := $p11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i33 := $M.1;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i64.i32($i33);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 1);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p52 := $p10;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $r := $p52;
    return;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p10, $mul.ref(0, 25032)), $mul.ref(24, 1));
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $i38 := atomic_read($p37);
    call {:si_unique_call 1248} {:cexpr "tmp___2"} boogie_si_record_i32($i38);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i39 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} __bad_size_call_parameter();
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i47 := $u0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} vslice_dummy_var_116 := printk.ref.i32.ref.ref.i32(.str.41, $i47, .str.42, $p10, $i38);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb21:
    assume $i41 == 1;
    call {:si_unique_call 1249} $i50 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1250} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i50);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i47 := $i50;
    goto $bb33;

  $bb19:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i42 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb23;

  $bb24:
    assume $i42 == 1;
    call {:si_unique_call 1251} $i49 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1252} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i49);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i47 := $i49;
    goto $bb33;

  $bb17:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i43 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb23;

  $bb28:
    assume $i44 == 1;
    call {:si_unique_call 1253} $i48 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1254} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i48);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i47 := $i48;
    goto $bb33;

  $bb26:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb23;

  $bb30:
    assume $i45 == 1;
    call {:si_unique_call 1255} $i46 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1256} {:cexpr "pfo_ret__"} boogie_si_record_i32($i46);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb33;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i15 := $M.1;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 2);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 25032)), $mul.ref(32, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} vslice_dummy_var_115 := spinlock_check($p18);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 25032)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} __raw_spin_lock_init($p22, .str.39, $p0);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 25032)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, gru_mmuops);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p12, $mul.ref(0, 25032)), $mul.ref(24, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} atomic_set($p25, 1);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 25032)), $mul.ref(112, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} __init_waitqueue_head($p26, .str.40, $p1);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p27 := get_current();
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p12, $mul.ref(0, 25032)), $mul.ref(0, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p27, $mul.ref(0, 11712)), $mul.ref(1968, 1));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i31 := __mmu_notifier_register($p28, $p30);
    call {:si_unique_call 1244} {:cexpr "err"} boogie_si_record_i32($i31);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p12);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} kfree($p53);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i31);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $p55 := ERR_PTR($i54);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p52 := $p55;
    goto $bb39;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(32, 1)));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p5);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 25032)), $mul.ref(24, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} atomic_inc($p9);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p10 := $p5;
    goto $bb3;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 561081);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $i1 := ldv_is_err($p0);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1260} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ERR_CAST: ref;

axiom ERR_CAST == $sub.ref(0, 562113);

procedure ERR_CAST($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_CAST($p0: ref) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 563145);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mmu_find_ops: ref;

axiom mmu_find_ops == $sub.ref(0, 564177);

procedure mmu_find_ops($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation mmu_find_ops($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $i41: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p24: ref;
  var $p31: ref;
  var $p46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2296)), $mul.ref(1224, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $p46 := $0.ref;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $r := $p46;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} rcu_read_lock();
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2296)), $mul.ref(1224, 1));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} __read_once_size($p12, $p14, 8);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i17 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1266} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p16);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $p21 := $0.ref;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p31 := $0.ref;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} rcu_read_unlock();
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p46 := $p31;
    goto $bb21;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p24 := $p21;
    goto $bb9;

  $bb9:
    call $p25, $p26, $i27, $i28, $i29, $p30, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $p43, $i44, $i45, $p24 := mmu_find_ops_loop_$bb9($p1, $p3, $p25, $p26, $i27, $i28, $i29, $p30, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $p43, $i44, $i45, $p24);
    goto $bb9_last;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p1);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i27, $i28);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p30 := $p24;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p3);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} __read_once_size($p34, $p36, 8);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p3);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i39 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1270} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p38);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $p43 := $0.ref;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i45 == 1);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb18:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $p24 := $p43;
    goto $bb18_dummy;

  $bb15:
    assume $i41 == 1;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p43 := $p38;
    goto $bb17;

  $bb11:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p31 := $p30;
    goto $bb13;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p21 := $p16;
    goto $bb5;

  $bb18_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4443;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 565209);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1272} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 566241);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 567273);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 568305);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    return;
}



const __mmu_notifier_register: ref;

axiom __mmu_notifier_register == $sub.ref(0, 569337);

procedure __mmu_notifier_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __mmu_notifier_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1274} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1275} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 570369);

procedure rcu_read_lock();
  free requires assertsPassed;
  modifies $M.0;



implementation rcu_read_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} __rcu_read_lock();
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} rcu_lock_acquire(rcu_lock_map);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1279} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i3 := rcu_is_watching();
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1281} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} lockdep_rcu_suspicious(.str.113, 849, .str.114);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const __read_once_size: ref;

axiom __read_once_size == $sub.ref(0, 571401);

procedure __read_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;

  $bb0:
    call {:si_unique_call 1283} {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 1284} devirtbounce.1(0);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} memcpy_guard($p1, $p0, $i20);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i2);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 1286} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p1, $p0, $i21, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    call {:si_unique_call 1287} devirtbounce.1(0);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p0);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i10);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 572433);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1288} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1289} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 573465);

procedure rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.0;



implementation rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1291} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} __rcu_read_unlock();
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} rcu_lock_release(rcu_lock_map);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $i3 := rcu_is_watching();
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1293} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} lockdep_rcu_suspicious(.str.113, 900, .str.115);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const rcu_is_watching: ref;

axiom rcu_is_watching == $sub.ref(0, 574497);

procedure rcu_is_watching() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_is_watching() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1297} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1298} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 575529);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    return;
}



const __rcu_read_unlock: ref;

axiom __rcu_read_unlock == $sub.ref(0, 576561);

procedure __rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.0;



implementation __rcu_read_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} devirtbounce.1(0);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} __preempt_count_sub___0(1);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_release: ref;

axiom rcu_lock_release == $sub.ref(0, 577593);

procedure rcu_lock_release($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} lock_release($p0, 1, 0);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    return;
}



const lock_release: ref;

axiom lock_release == $sub.ref(0, 578625);

procedure lock_release($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation lock_release($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} {:cexpr "lock_release:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1304} {:cexpr "lock_release:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    return;
}



const __rcu_read_lock: ref;

axiom __rcu_read_lock == $sub.ref(0, 579657);

procedure __rcu_read_lock();
  free requires assertsPassed;
  modifies $M.0;



implementation __rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} __preempt_count_add___0(1);
    call {:si_unique_call 1306} devirtbounce.1(0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_acquire: ref;

axiom rcu_lock_acquire == $sub.ref(0, 580689);

procedure rcu_lock_acquire($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_acquire($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} lock_acquire($p0, 0, 0, 2, 0, $0.ref, 0);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    return;
}



const lock_acquire: ref;

axiom lock_acquire == $sub.ref(0, 581721);

procedure lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64);
  free requires assertsPassed;



implementation lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} {:cexpr "lock_acquire:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1309} {:cexpr "lock_acquire:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1310} {:cexpr "lock_acquire:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1311} {:cexpr "lock_acquire:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1312} {:cexpr "lock_acquire:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 582753);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 583785);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} {:cexpr "__kmalloc:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1315} {:cexpr "__kmalloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $p2 := external_alloc();
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 584817);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1317} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1318} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const gru_free_message: ref;

axiom gru_free_message == $sub.ref(0, 585849);

procedure gru_free_message($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_free_message($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;
  var $p26: ref;
  var $i27: i32;
  var $i39: i1;
  var $i40: i64;
  var $p42: ref;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    call {:si_unique_call 1319} {:cexpr "lines"} boogie_si_record_i32($i10);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i10, 64);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p15, $mul.ref($i17, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p18);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i21, $i22);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p15);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i64($i30, $i31);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p26, $i27 := $p18, $i38;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i39 := $sge.i32($i27, 0);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p26);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i27);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(16, 1)), $mul.ref($i40, 8));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, 1);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p18);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i37 := $ule.i64($i35, $i36);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb9;

  $bb10:
    assume $i37 == 1;
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb12;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p26, $i27 := $p25, 1;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p7);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} restore_present2($p12, 0);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_get_next_message: ref;

axiom gru_get_next_message == $sub.ref(0, 586881);

procedure gru_get_next_message($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_get_next_message($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p13: ref;
  var $p22: ref;
  var $i23: i32;
  var $p11: ref;
  var $i12: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i9 := $sext.i8.i32($i8);
    call {:si_unique_call 1321} {:cexpr "present"} boogie_si_record_i32($i9);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p5, $i9;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i12, 1);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i33 := $i12;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p11, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i41 := $sext.i8.i32($i40);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 2);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i47 := $M.1;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 2);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p38 := $p11;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $r := $p38;
    return;

  $bb28:
    assume $i49 == 1;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(424, 1)));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p11);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p11, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i46 := $sext.i8.i32($i45);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} restore_present2($p43, $i46);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i35 := $M.1;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 2);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p38 := $0.ref;
    goto $bb23;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(432, 1)));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p11, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i27 := $sext.i8.i32($i26);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb11;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p11);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i30 := get_present2($p29);
    call {:si_unique_call 1325} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i12;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb17;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb16;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p13 := $p5;
    goto $bb4;

  $bb4:
    call $p14, $p15, $p16, $p17, $p18, $i19, $i20, $i21, $p13, $p22, $i23 := gru_get_next_message_loop_$bb4($p0, $p3, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $i21, $p13, $p22, $i23);
    goto $bb4_last;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} gru_free_message($p0, $p14);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i20 := $sext.i8.i32($i19);
    call {:si_unique_call 1323} {:cexpr "present"} boogie_si_record_i32($i20);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p22, $i23 := $p16, $i20;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p22, $i23;
    goto $bb3;

  $bb6:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4674;
}



const gru_read_gpa: ref;

axiom gru_read_gpa == $sub.ref(0, 587913);

procedure gru_read_gpa($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.0, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation gru_read_gpa($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1331} {:cexpr "gru_read_gpa:arg:gpa"} boogie_si_record_i64($i1);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 2);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $i7 := gru_get_cpu_resources(256, $p2, $p3);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 1334} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $lshr.i64($i1, 62);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    call {:si_unique_call 1335} {:cexpr "iaa"} boogie_si_record_i32($i11);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.9, $p3);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $i13 := gru_get_tri($p12);
    call {:si_unique_call 1337} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.10, $p2);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} gru_vload_phys($p14, $i1, $i13, $i11, 1);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.10, $p2);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $i16 := gru_wait($p15);
    call {:si_unique_call 1340} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.10, $p2);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.9, $p3);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} gru_free_cpu_resources($p21, $p22);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.9, $p3);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p0, $i20);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i9 := 11;
    goto $bb6;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(416, 1)));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_vload_phys: ref;

axiom gru_vload_phys == $sub.ref(0, 588945);

procedure gru_vload_phys($p0: ref, $i1: i64, $i2: i32, $i3: i32, $i4: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_vload_phys($p0: ref, $i1: i64, $i2: i32, $i3: i32, $i4: i64)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i64;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} {:cexpr "gru_vload_phys:arg:gpa"} boogie_si_record_i64($i1);
    call {:si_unique_call 1343} {:cexpr "gru_vload_phys:arg:tri0"} boogie_si_record_i32($i2);
    call {:si_unique_call 1344} {:cexpr "gru_vload_phys:arg:iaa"} boogie_si_record_i32($i3);
    call {:si_unique_call 1345} {:cexpr "gru_vload_phys:arg:hints"} boogie_si_record_i64($i4);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i3);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i7 := $shl.i64($i6, 62);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i8 := $or.i64($i7, $i1);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i8);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, 1);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, 1);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i3);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i2);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i8($i4);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 2);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $i20 := __opdword(2, 0, 3, $i14, 0, $i15, $i19);
    call {:si_unique_call 1347} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} gru_start_instruction($p5, $i20);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    return;
}



const gru_copy_gpa: ref;

axiom gru_copy_gpa == $sub.ref(0, 589977);

procedure gru_copy_gpa($i0: i64, $i1: i64, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.0, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation gru_copy_gpa($i0: i64, $i1: i64, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1351} {:cexpr "gru_copy_gpa:arg:dest_gpa"} boogie_si_record_i64($i0);
    call {:si_unique_call 1352} {:cexpr "gru_copy_gpa:arg:src_gpa"} boogie_si_record_i64($i1);
    call {:si_unique_call 1353} {:cexpr "gru_copy_gpa:arg:bytes"} boogie_si_record_i32($i2);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 2);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $i8 := gru_get_cpu_resources(256, $p3, $p4);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 1356} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.9, $p4);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $i12 := gru_get_tri($p11);
    call {:si_unique_call 1358} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.10, $p3);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i2);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} gru_bcopy($p13, $i1, $i0, $i12, 0, $i14, 4, 1);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.10, $p3);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $i16 := gru_wait($p15);
    call {:si_unique_call 1361} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.10, $p3);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.9, $p4);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} gru_free_cpu_resources($p17, $p18);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i10 := $i16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i10 := 11;
    goto $bb6;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(408, 1)));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_bcopy: ref;

axiom gru_bcopy == $sub.ref(0, 591009);

procedure gru_bcopy($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i32, $i5: i64, $i6: i32, $i7: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_bcopy($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i32, $i5: i64, $i6: i32, $i7: i64)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $i17: i64;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $i22: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} {:cexpr "gru_bcopy:arg:src"} boogie_si_record_i64($i1);
    call {:si_unique_call 1364} {:cexpr "gru_bcopy:arg:dest"} boogie_si_record_i64($i2);
    call {:si_unique_call 1365} {:cexpr "gru_bcopy:arg:tri0"} boogie_si_record_i32($i3);
    call {:si_unique_call 1366} {:cexpr "gru_bcopy:arg:xtype"} boogie_si_record_i32($i4);
    call {:si_unique_call 1367} {:cexpr "gru_bcopy:arg:nelem"} boogie_si_record_i64($i5);
    call {:si_unique_call 1368} {:cexpr "gru_bcopy:arg:bufsize"} boogie_si_record_i32($i6);
    call {:si_unique_call 1369} {:cexpr "gru_bcopy:arg:hints"} boogie_si_record_i64($i7);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i1);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i2);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i5);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i6);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i12);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i4);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i3);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i8($i7);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 2);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i22 := __opdword(1, 0, $i16, 0, 0, $i17, $i21);
    call {:si_unique_call 1371} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} gru_start_instruction($p8, $i22);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    return;
}



const noop_llseek: ref;

axiom noop_llseek == $sub.ref(0, 592041);

procedure noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1373} {:cexpr "noop_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1374} {:cexpr "noop_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1375} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1376} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gru_file_unlocked_ioctl: ref;

axiom gru_file_unlocked_ioctl == $sub.ref(0, 593073);

procedure gru_file_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.10, $M.9, $M.23, $CurrAddr, $M.6, $M.24, $M.25, $M.8, $M.26, $M.27, assertsPassed, $M.11, $M.28, $M.14, $M.15, $M.12, $M.16, $M.17, $M.29, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.53, $M.51, $M.50, $M.48, $M.47, $M.46, $M.44, $M.42, $M.41, $M.52, $M.49, $M.45, $M.43;



implementation gru_file_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i15: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i64;
  var $i43: i32;
  var $i44: i32;
  var $i45: i64;
  var $i46: i32;
  var $i47: i32;
  var $i36: i32;
  var $i48: i64;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} {:cexpr "gru_file_unlocked_ioctl:arg:req"} boogie_si_record_i32($i1);
    call {:si_unique_call 1378} {:cexpr "gru_file_unlocked_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i1, $sub.i32(0, 1073199349));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i1, $sub.i32(0, 1073199310));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i1, $sub.i32(0, 1073199309));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i1, $sub.i32(0, 1073199308));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i1, $sub.i32(0, 1073199308));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 56);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i36);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb35:
    assume $i24 == 1;
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $i44 := gru_ktest($i2);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 1395} {:cexpr "err"} boogie_si_record_i32($i44);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i36 := $i44;
    goto $bb58;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i23 == 1;
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $i45 := gru_get_config_info($i2);
    call {:si_unique_call 1392} {:cexpr "tmp___0"} boogie_si_record_i64($i45);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    call {:si_unique_call 1393} {:cexpr "err"} boogie_si_record_i32($i46);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i36 := $i46;
    goto $bb58;

  $bb31:
    assume $i22 == 1;
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i40 := gru_user_flush_tlb($i2);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 1390} {:cexpr "err"} boogie_si_record_i32($i40);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i36 := $i40;
    goto $bb58;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i1, $sub.i32(0, 1073199348));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i1, $sub.i32(0, 1073199348));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb37;

  $bb40:
    assume $i26 == 1;
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $i42 := gru_get_gseg_statistics($i2);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 1399} {:cexpr "tmp"} boogie_si_record_i64($i42);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i42);
    call {:si_unique_call 1400} {:cexpr "err"} boogie_si_record_i32($i43);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i36 := $i43;
    goto $bb58;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i25 == 1;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $i47 := gru_dump_chiplet_request($i2);
    call {:si_unique_call 1397} {:cexpr "err"} boogie_si_record_i32($i47);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i36 := $i47;
    goto $bb58;

  $bb27:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i1, $sub.i32(0, 1073199354));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i1, $sub.i32(0, 1073199352));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i1, $sub.i32(0, 1073199351));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i1, $sub.i32(0, 1073199351));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb37;

  $bb48:
    assume $i30 == 1;
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $i39 := gru_user_unload_context($i2);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 1404} {:cexpr "err"} boogie_si_record_i32($i39);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i36 := $i39;
    goto $bb58;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i29 == 1;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $i41 := gru_handle_user_call_os($i2);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 1402} {:cexpr "err"} boogie_si_record_i32($i41);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i36 := $i41;
    goto $bb58;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i1, $sub.i32(0, 1073199354));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb37;

  $bb50:
    assume $i31 == 1;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i38 := gru_get_exception_detail($i2);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 1406} {:cexpr "err"} boogie_si_record_i32($i38);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i36 := $i38;
    goto $bb58;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i1, $sub.i32(0, 1073199356));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i1, $sub.i32(0, 1073199356));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb37;

  $bb54:
    assume $i33 == 1;
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $i37 := gru_set_context_option($i2);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 1408} {:cexpr "err"} boogie_si_record_i32($i37);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i36 := $i37;
    goto $bb58;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i1, $sub.i32(0, 1073199359));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb37;

  $bb56:
    assume $i34 == 1;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $i35 := gru_create_new_context($i2);
    call {:si_unique_call 1410} {:cexpr "err"} boogie_si_record_i32($i35);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb58;

  $bb1:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} __bad_size_call_parameter();
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i15 := $u0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} vslice_dummy_var_117 := printk.ref.i32.ref.ref.i32.i64(.str.76, $i15, .str.77, $p0, $i1, $i2);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i9 == 1;
    call {:si_unique_call 1379} $i18 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1380} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i18);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb20;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb11:
    assume $i10 == 1;
    call {:si_unique_call 1381} $i17 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1382} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i17);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i15 := $i17;
    goto $bb20;

  $bb4:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb15:
    assume $i12 == 1;
    call {:si_unique_call 1383} $i16 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1384} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i16);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb20;

  $bb13:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb17:
    assume $i13 == 1;
    call {:si_unique_call 1385} $i14 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1386} {:cexpr "pfo_ret__"} boogie_si_record_i32($i14);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb20;
}



const gru_file_mmap: ref;

axiom gru_file_mmap == $sub.ref(0, 594105);

procedure gru_file_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_file_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i64;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i44: i32;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i7: i32;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 10);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 10);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i9, 262143);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, 262143);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i18 := $or.i64($i17, 67527680);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $sub.i64(0, 9223372036854775769));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p2);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 1412} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p22, $p23, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, gru_vm_ops);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p25 := gru_alloc_vma_data($p1, 0);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p25);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := $M.1;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 1);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb14:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i36 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} __bad_size_call_parameter();
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i44 := $u0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} vslice_dummy_var_118 := printk.ref.i32.ref.ref.i64.ref.ref(.str.74, $i44, .str.75, $p0, $i49, $p1, $p51);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb21:
    assume $i38 == 1;
    call {:si_unique_call 1414} $i47 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1415} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i47);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i44 := $i47;
    goto $bb33;

  $bb19:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb23;

  $bb24:
    assume $i39 == 1;
    call {:si_unique_call 1416} $i46 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1417} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i46);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i44 := $i46;
    goto $bb33;

  $bb17:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i40 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb23;

  $bb28:
    assume $i41 == 1;
    call {:si_unique_call 1418} $i45 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1419} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i45);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i44 := $i45;
    goto $bb33;

  $bb26:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i42 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb23;

  $bb30:
    assume $i42 == 1;
    call {:si_unique_call 1420} $i43 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1421} {:cexpr "pfo_ret__"} boogie_si_record_i32($i43);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb33;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;
}



const gru_alloc_vma_data: ref;

axiom gru_alloc_vma_data == $sub.ref(0, 595137);

procedure gru_alloc_vma_data($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_alloc_vma_data($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i29: i32;
  var $p7: ref;
  var vslice_dummy_var_119: ref;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1425} {:cexpr "gru_alloc_vma_data:arg:tsid"} boogie_si_record_i32($i1);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $p3 := kmalloc(112, 208);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $M.1;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, 2);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} INIT_LIST_HEAD($p11);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} vslice_dummy_var_119 := spinlock_check($p12);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} __raw_spin_lock_init($p16, .str.3, $p2);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i17 := $M.1;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb8:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} __bad_size_call_parameter();
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i29 := $u0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} vslice_dummy_var_120 := printk.ref.i32.ref.ref(.str.4, $i29, .str.5, $p4);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb15:
    assume $i23 == 1;
    call {:si_unique_call 1431} $i32 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1432} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i32);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $i32;
    goto $bb27;

  $bb13:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb17;

  $bb18:
    assume $i24 == 1;
    call {:si_unique_call 1433} $i31 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1434} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i31);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i29 := $i31;
    goto $bb27;

  $bb11:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb17;

  $bb22:
    assume $i26 == 1;
    call {:si_unique_call 1435} $i30 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1436} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i30);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i29 := $i30;
    goto $bb27;

  $bb20:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb17;

  $bb24:
    assume $i27 == 1;
    call {:si_unique_call 1437} $i28 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1438} {:cexpr "pfo_ret__"} boogie_si_record_i32($i28);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb27;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} atomic_long_inc(gru_stats);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 596169);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    return;
}



const gru_create_new_context: ref;

axiom gru_create_new_context == $sub.ref(0, 597201);

procedure gru_create_new_context($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr;



implementation gru_create_new_context($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 1442} {:cexpr "gru_create_new_context:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i0);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i4 := copy_from_user($p2, $p3, 32);
    call {:si_unique_call 1444} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i9 := $M.20;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i8, $i9);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i13 := $M.21;
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i32($i12, $i13);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i14 == 1);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 3);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $p26 := get_current();
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 11712)), $mul.ref(1968, 1));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 2296)), $mul.ref(176, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} down_write($p29);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $p32 := gru_find_vma($i31);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 22);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $p56 := get_current();
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 11712)), $mul.ref(1968, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 2296)), $mul.ref(176, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} up_write($p59);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i6 := $i55;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p32, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p37, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $M.3 := $store.i64($M.3, $p41, $i40);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1023);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i45 := $udiv.i32($i44, 1024);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p37, $mul.ref(0, 112)), $mul.ref(100, 1));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p46, $i45);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i50 := $udiv.i32($i49, 2);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p37, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p51, $i50);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p37, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p54, $i53);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb19;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 2);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb9;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const gru_set_context_option: ref;

axiom gru_set_context_option == $sub.ref(0, 598233);

procedure gru_set_context_option($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, assertsPassed, $M.10, $M.9, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_set_context_option($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i22: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $i43: i8;
  var $i44: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p77: ref;
  var $i78: i64;
  var $i79: i16;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i8;
  var $p84: ref;
  var $i76: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i8;
  var $i93: i32;
  var $i94: i32;
  var $i95: i8;
  var $p96: ref;
  var $i85: i32;
  var $i9: i32;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 1451} {:cexpr "gru_set_context_option:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 2);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i0);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} $i7 := copy_from_user($p5, $p6, 24);
    call {:si_unique_call 1454} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $M.1;
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p35 := gru_find_lock_gts($i34);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $p48 := $p35;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i50, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i50, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32(0, 22);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} gru_unlock_gts($p48);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i9 := $i85;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i53 == 1;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, $sub.i32(0, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb49, $bb51;

  $bb51:
    assume !($i57 == 1);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i60 := $sgt.i32($i59, 1);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i60 == 1);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i63 := $slt.i64($i62, $sub.i64(0, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i63 == 1);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i66 := $sgt.i64($i65, 1023);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i66 == 1);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.0, $p67);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i69 := $sge.i64($i68, 0);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p77);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i64.i16($i78);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p48, $mul.ref(0, 464)), $mul.ref(252, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, $i79);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p48, $mul.ref(0, 464)), $mul.ref(254, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, $i83);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} gru_check_context_placement($p48);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i85 := $i76;
    goto $bb64;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i69 == 1;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i71, 8));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.4, $p72);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i74, 0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb60;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32(0, 22);
    goto $bb63;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb50;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb50;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb50;

  $bb42:
    assume $i52 == 1;
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i91 := $load.i64($M.0, $p90);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i64.i8($i91);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i93 := $sext.i8.i32($i92);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 3);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p48, $mul.ref(0, 464)), $mul.ref(278, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p96, $i95);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i85 := 0;
    goto $bb64;

  $bb40:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i50, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb46;

  $bb47:
    assume $i54 == 1;
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $p86 := get_current();
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 11712)), $mul.ref(2132, 1));
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p48, $mul.ref(0, 464)), $mul.ref(248, 1));
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i88);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i85 := 0;
    goto $bb64;

  $bb33:
    assume $i37 == 1;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $p40 := gru_alloc_locked_gts($i39);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $i42 := IS_ERR($p41);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i8($i42);
    call {:si_unique_call 1468} {:cexpr "tmp___1"} boogie_si_record_i8($i43);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i43);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p48 := $p40;
    goto $bb38;

  $bb35:
    assume $i44 == 1;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p40);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $i46 := PTR_ERR($p45);
    call {:si_unique_call 1470} {:cexpr "tmp___0"} boogie_si_record_i64($i46);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i9 := $i47;
    goto $bb6;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} __bad_size_call_parameter();
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i22 := $u0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} vslice_dummy_var_121 := printk.ref.i32.ref.i32.i64.i64(.str.31, $i22, .str.32, $i27, $i29, $i31);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb15:
    assume $i16 == 1;
    call {:si_unique_call 1455} $i25 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1456} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i25);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i22 := $i25;
    goto $bb27;

  $bb13:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb17;

  $bb18:
    assume $i17 == 1;
    call {:si_unique_call 1457} $i24 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1458} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i24);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i22 := $i24;
    goto $bb27;

  $bb11:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb17;

  $bb22:
    assume $i19 == 1;
    call {:si_unique_call 1459} $i23 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1460} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i23);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i22 := $i23;
    goto $bb27;

  $bb20:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb17;

  $bb24:
    assume $i20 == 1;
    call {:si_unique_call 1461} $i21 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1462} {:cexpr "pfo_ret__"} boogie_si_record_i32($i21);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb27;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(256, 1)));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_get_exception_detail: ref;

axiom gru_get_exception_detail == $sub.ref(0, 599265);

procedure gru_get_exception_detail($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, assertsPassed;



implementation gru_get_exception_detail($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i27: i32;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $i59: i32;
  var $i60: i64;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i56;
  var $i85: i56;
  var $i86: i56;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i56;
  var $i99: i56;
  var $i100: i8;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $p106: ref;
  var $i107: i32;
  var $i54: i32;
  var $i108: i64;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i120: i32;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $i127: i32;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $i131: i32;
  var $p132: ref;
  var $i133: i32;
  var $p134: ref;
  var $i135: i32;
  var $p136: ref;
  var $i137: i64;
  var $p138: ref;
  var $i139: i32;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $i146: i32;
  var $i147: i32;
  var $i9: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $p1 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    call {:si_unique_call 1475} {:cexpr "gru_get_exception_detail:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 2);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i0);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $i7 := copy_from_user($p5, $p6, 48);
    call {:si_unique_call 1478} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $p12 := gru_find_lock_gts($i11);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $M.1;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 1);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i45);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $i47 := get_cb_number($p46);
    call {:si_unique_call 1491} {:cexpr "tmp___0"} boogie_si_record_i64($i47);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i47);
    call {:si_unique_call 1492} {:cexpr "ucbnum"} boogie_si_record_i32($i48);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p12, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i52 := $mul.i32($i51, 2);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i53 := $sle.i32($i52, $i48);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i53 == 1);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p12, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i107 := $sub.i32(0, 11);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i54 := $i107;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} gru_unlock_gts($p12);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i108 := $M.1;
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i64.i32($i108);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 1);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i54, 0);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    $i147 := $i54;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i9 := $i147;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb70:
    assume $i141 == 1;
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p142 := $i2p.i64.ref($i0);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p1);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $i144 := copy_to_user($p142, $p143, 48);
    call {:si_unique_call 1510} {:cexpr "tmp___1"} boogie_si_record_i64($i144);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i144, 0);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    $i146 := $i54;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i147 := $i146;
    goto $bb75;

  $bb72:
    assume $i145 == 1;
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i146 := $sub.i32(0, 14);
    goto $bb74;

  $bb45:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i112 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} __bad_size_call_parameter();
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i120 := $u0;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.0, $p124);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i137 := $load.i64($M.0, $p136);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} vslice_dummy_var_123 := printk.ref.i32.ref.i64.i32.i32.i32.i32.i32.i64.i32(.str.26, $i120, .str.25, $i125, $i127, $i129, $i131, $i133, $i135, $i137, $i139);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb52:
    assume $i114 == 1;
    call {:si_unique_call 1499} $i123 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1500} {:cexpr "pfo_ret_____6"} boogie_si_record_i32($i123);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i120 := $i123;
    goto $bb64;

  $bb50:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i115 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb54;

  $bb55:
    assume $i115 == 1;
    call {:si_unique_call 1501} $i122 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1502} {:cexpr "pfo_ret_____5"} boogie_si_record_i32($i122);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i120 := $i122;
    goto $bb64;

  $bb48:
    assume $i112 == 1;
    assume {:verifier.code 0} true;
    $i116 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i117 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb54;

  $bb59:
    assume $i117 == 1;
    call {:si_unique_call 1503} $i121 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1504} {:cexpr "pfo_ret_____4"} boogie_si_record_i32($i121);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i120 := $i121;
    goto $bb64;

  $bb57:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i118 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb54;

  $bb61:
    assume $i118 == 1;
    call {:si_unique_call 1505} $i119 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1506} {:cexpr "pfo_ret_____3"} boogie_si_record_i32($i119);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i120 := $i119;
    goto $bb64;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i58 == 1;
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i59 := $sdiv.i32($i48, 2);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 464)), $mul.ref(281, 1)), $mul.ref($i60, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i64 := $sext.i8.i32($i63);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i65 := $mul.i32($i64, 2);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i66 := $srem.i32($i48, 2);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i65, $i66);
    call {:si_unique_call 1494} {:cexpr "cbrnum"} boogie_si_record_i32($i67);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p12, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $p72 := get_cbe($p71, $i67);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} gru_flush_cache($p73);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} sync_core();
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p72, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i76);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p72, $mul.ref(0, 64)), $mul.ref(3, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p72, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i84 := $load.i56($M.0, $p83);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i85 := $lshr.i56($i84, 32);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i86 := $and.i56($i85, 1048575);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i56.i32($i86);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i87);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p72, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p91, $i90);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p72, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i64.i32($i93);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i94);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p72, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i98 := $load.i56($M.0, $p97);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i99 := $lshr.i56($i98, 52);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i56.i8($i99);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i101);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p72, $mul.ref(0, 64)), $mul.ref(63, 1));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $i105);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} gru_flush_cache_cbe($p72);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i107 := 0;
    goto $bb44;

  $bb39:
    assume $i53 == 1;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 22);
    goto $bb41;

  $bb11:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} __bad_size_call_parameter();
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i27 := $u0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p12, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i36 == 1);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} vslice_dummy_var_122 := printk.ref.i32.ref.i64.i32.ref(.str.23, $i27, .str.25, $i32, $i42, $p12);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i36 == 1;
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p12, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb37;

  $bb18:
    assume $i21 == 1;
    call {:si_unique_call 1480} $i30 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1481} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i30);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i27 := $i30;
    goto $bb30;

  $bb16:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb20;

  $bb21:
    assume $i22 == 1;
    call {:si_unique_call 1482} $i29 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1483} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i29);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i27 := $i29;
    goto $bb30;

  $bb14:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb20;

  $bb25:
    assume $i24 == 1;
    call {:si_unique_call 1484} $i28 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1485} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i28);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i27 := $i28;
    goto $bb30;

  $bb23:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb20;

  $bb27:
    assume $i25 == 1;
    call {:si_unique_call 1486} $i26 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1487} {:cexpr "pfo_ret__"} boogie_si_record_i32($i26);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb30;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(248, 1)));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_user_unload_context: ref;

axiom gru_user_unload_context == $sub.ref(0, 600297);

procedure gru_user_unload_context($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.10, $M.9, assertsPassed, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_user_unload_context($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i22: i32;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i9: i32;
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1512} {:cexpr "gru_user_unload_context:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 2);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i0);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $i7 := copy_from_user($p5, $p6, 8);
    call {:si_unique_call 1515} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $M.1;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $p35 := gru_find_lock_gts($i34);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} gru_unlock_gts($p35);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i41 == 1;
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} gru_unload_context($p35, 1);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    goto $bb41;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i37 == 1;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i31 == 1;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} $i32 := gru_unload_all_contexts();
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 1527} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i9 := $i32;
    goto $bb6;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} __bad_size_call_parameter();
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i22 := $u0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} vslice_dummy_var_124 := printk.ref.i32.ref.i64(.str.27, $i22, .str.28, $i27);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb15:
    assume $i16 == 1;
    call {:si_unique_call 1516} $i25 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1517} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i25);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i22 := $i25;
    goto $bb27;

  $bb13:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb17;

  $bb18:
    assume $i17 == 1;
    call {:si_unique_call 1518} $i24 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1519} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i24);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i22 := $i24;
    goto $bb27;

  $bb11:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb17;

  $bb22:
    assume $i19 == 1;
    call {:si_unique_call 1520} $i23 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1521} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i23);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i22 := $i23;
    goto $bb27;

  $bb20:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb17;

  $bb24:
    assume $i20 == 1;
    call {:si_unique_call 1522} $i21 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1523} {:cexpr "pfo_ret__"} boogie_si_record_i32($i21);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb27;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(240, 1)));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_user_flush_tlb: ref;

axiom gru_user_flush_tlb == $sub.ref(0, 601329);

procedure gru_user_flush_tlb($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, assertsPassed;



implementation gru_user_flush_tlb($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i22: i32;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i9: i32;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 1532} {:cexpr "gru_user_flush_tlb:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 2);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i0);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $i7 := copy_from_user($p5, $p6, 24);
    call {:si_unique_call 1535} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $M.1;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} $p35 := gru_find_lock_gts($i34);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} gru_unlock_gts($p35);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} gru_flush_tlb_range($p39, $i41, $i43);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i37 == 1;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} __bad_size_call_parameter();
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i22 := $u0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} vslice_dummy_var_125 := printk.ref.i32.ref.i64.i64.i64(.str.29, $i22, .str.30, $i27, $i29, $i31);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb15:
    assume $i16 == 1;
    call {:si_unique_call 1536} $i25 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1537} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i25);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i22 := $i25;
    goto $bb27;

  $bb13:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb17;

  $bb18:
    assume $i17 == 1;
    call {:si_unique_call 1538} $i24 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1539} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i24);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i22 := $i24;
    goto $bb27;

  $bb11:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb17;

  $bb22:
    assume $i19 == 1;
    call {:si_unique_call 1540} $i23 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1541} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i23);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i22 := $i23;
    goto $bb27;

  $bb20:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb17;

  $bb24:
    assume $i20 == 1;
    call {:si_unique_call 1542} $i21 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1543} {:cexpr "pfo_ret__"} boogie_si_record_i32($i21);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb27;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(232, 1)));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_handle_user_call_os: ref;

axiom gru_handle_user_call_os == $sub.ref(0, 602361);

procedure gru_handle_user_call_os($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.26, $M.27, assertsPassed, $M.10, $M.9, $CurrAddr, $M.28, $M.3, $M.29, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.14, $M.15, $M.12, $M.16, $M.17, $M.53, $M.51, $M.50, $M.48, $M.47, $M.46, $M.44, $M.42, $M.41, $M.52, $M.49, $M.45, $M.43;



implementation gru_handle_user_call_os($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i26: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i57: i32;
  var $i58: i64;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i46: i32;
  var $i10: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} {:cexpr "gru_handle_user_call_os:arg:cb"} boogie_si_record_i64($i0);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, 2);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i0);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} $i5 := get_cb_number($p4);
    call {:si_unique_call 1552} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    call {:si_unique_call 1553} {:cexpr "ucbnum"} boogie_si_record_i32($i6);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i0, 255);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i8 == 1);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i6, 127);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $p11 := gru_find_lock_gts($i0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.1;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 1);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i44 := $mul.i32($i43, 2);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i45 := $sle.i32($i44, $i6);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} gru_check_context_placement($p11);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i57 := $sdiv.i32($i6, 2);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(281, 1)), $mul.ref($i58, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i62 := $sext.i8.i32($i61);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i63 := $mul.i32($i62, 2);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i64 := $srem.i32($i6, 2);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i63, $i64);
    call {:si_unique_call 1568} {:cexpr "cbrnum"} boogie_si_record_i32($i65);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i83 := $sub.i32(0, 11);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i46 := $i83;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} gru_unlock_gts($p11);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i10 := $i46;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i69 == 1;
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $p74 := get_tfh($p73, $i65);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $p81 := get_gseg_base_address_cb($p78, $i80, $i6);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} $i82 := gru_user_dropin($p11, $p74, $p81);
    call {:si_unique_call 1572} {:cexpr "ret"} boogie_si_record_i32($i82);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i83 := $i82;
    goto $bb54;

  $bb46:
    assume $i50 == 1;
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i53 := $sext.i8.i32($i52);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb48;

  $bb49:
    assume $i54 == 1;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 0);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_127 := gru_update_cch($p11);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i45 == 1;
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 22);
    goto $bb44;

  $bb14:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i18 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} __bad_size_call_parameter();
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i26 := $u0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i33 == 1);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} vslice_dummy_var_126 := printk.ref.i32.ref.i64.i32.ref(.str.23, $i26, .str.24, $i0, $i39, $p11);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i33 == 1;
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p11, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb40;

  $bb21:
    assume $i20 == 1;
    call {:si_unique_call 1555} $i29 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1556} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i29);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i26 := $i29;
    goto $bb33;

  $bb19:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb23;

  $bb24:
    assume $i21 == 1;
    call {:si_unique_call 1557} $i28 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1558} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i28);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i26 := $i28;
    goto $bb33;

  $bb17:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb23;

  $bb28:
    assume $i23 == 1;
    call {:si_unique_call 1559} $i27 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1560} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i27);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i26 := $i27;
    goto $bb33;

  $bb26:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb23;

  $bb30:
    assume $i24 == 1;
    call {:si_unique_call 1561} $i25 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1562} {:cexpr "pfo_ret__"} boogie_si_record_i32($i25);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb33;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb9;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(216, 1)));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_get_gseg_statistics: ref;

axiom gru_get_gseg_statistics == $sub.ref(0, 603393);

procedure gru_get_gseg_statistics($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, assertsPassed;



implementation gru_get_gseg_statistics($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i6: i64;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $p1 := $alloc($mul.ref(120, $zext.i32.i64(1)));
    call {:si_unique_call 1574} {:cexpr "gru_get_gseg_statistics:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} $i4 := copy_from_user($p2, $p3, 120);
    call {:si_unique_call 1576} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} $p9 := gru_find_lock_gts($i8);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    call {:si_unique_call 1581} cmdloc_dummy_var_57 := $memset.i8(cmdloc_dummy_var_56, $p21, 0, 112, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_57;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i0);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $i24 := copy_to_user($p22, $p23, 120);
    call {:si_unique_call 1583} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 14);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(352, 1));
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} memcpy_guard($p13, $p15, 112);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 464)), $mul.ref(352, 1));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 1579} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p17, $p19, 112, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} gru_unlock_gts($p9);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 14);
    goto $bb3;
}



const gru_ktest: ref;

axiom gru_ktest == $sub.ref(0, 604425);

procedure gru_ktest($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.24, $M.25, $M.8, $CurrAddr, $M.11, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation gru_ktest($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} {:cexpr "gru_ktest:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 255);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i64($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i64($i1, 99);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i1, 99);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $i14 := gru_free_kernel_contexts();
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 1588} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb17;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb11:
    assume $i6 == 1;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} $i13 := quicktest3($i0);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 1590} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb17;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} $i12 := quicktest2($i0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    call {:si_unique_call 1586} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb17;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i64($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $i11 := quicktest1($i0);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 1592} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb17;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb15:
    assume $i8 == 1;
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $i9 := quicktest0($i0);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 1594} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb17;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const gru_get_config_info: ref;

axiom gru_get_config_info == $sub.ref(0, 605457);

procedure gru_get_config_info($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.3, $CurrAddr;



implementation gru_get_config_info($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $p1 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    call {:si_unique_call 1596} {:cexpr "gru_get_config_info:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} $i2 := num_node_state(1);
    call {:si_unique_call 1598} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 1);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_58 := $M.3;
    call {:si_unique_call 1603} cmdloc_dummy_var_59 := $memset.i8(cmdloc_dummy_var_58, $p9, 0, 80, $zext.i32.i64(4), 0 == 1);
    $M.3 := cmdloc_dummy_var_59;
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.3, cpu_online_mask);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} $i11 := cpumask_weight($p10);
    call {:si_unique_call 1605} {:cexpr "tmp___2"} boogie_si_record_i32($i11);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p12, $i11);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} $i13 := num_node_state(1);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p14, $i13);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.3, $p15);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i17 := $sdiv.i32($i16, $i8);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p18, $i17);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.3, $p19);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i21 := $mul.i32($i20, 2);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p22, $i21);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i0);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $i25 := copy_to_user($p23, $p24, 80);
    call {:si_unique_call 1608} {:cexpr "tmp___3"} boogie_si_record_i64($i25);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i27 := $sub.i64(0, 14);
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $i4 := uv_node_to_blade_id(1);
    call {:si_unique_call 1600} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} $i5 := uv_node_to_blade_id(0);
    call {:si_unique_call 1602} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, $i5);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i7 := 2;
    goto $bb5;
}



const gru_dump_chiplet_request: ref;

axiom gru_dump_chiplet_request == $sub.ref(0, 606489);

procedure gru_dump_chiplet_request($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.3, $M.0, $CurrAddr;



implementation gru_dump_chiplet_request($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i8;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i8;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i64;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $i42: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $p1 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    call {:si_unique_call 1610} {:cexpr "gru_dump_chiplet_request:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i0);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $i4 := copy_from_user($p2, $p3, 56);
    call {:si_unique_call 1612} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i9 := $M.22;
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i10 := $uge.i32($i8, $i9);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i13 := $udiv.i32($i12, 2);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i14, 8));
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.4, $p15);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p32 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p36, $mul.ref($i38, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} $i40 := gru_dump_tfm($p32, $p34, $p39);
    call {:si_unique_call 1614} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i40);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p34, $mul.ref($i43, 1));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} $i45 := gru_dump_tgh($p32, $p44, $p39);
    call {:si_unique_call 1616} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i45);
    $i48 := $add.i64($i43, $i47);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p34, $mul.ref($i48, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i50, $p51, $i52 := 0, $p49, 0;
    goto $bb18;

  $bb18:
    call $p53, $i54, $i55, $p56, $i57, $i58, $p59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $i76, $p77, $i78, $i79, $i80, $i50, $p51, $i52, $i81 := gru_dump_chiplet_request_loop_$bb18($p1, $p32, $p39, $p53, $i54, $i55, $p56, $i57, $i58, $p59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $i76, $p77, $i78, $i79, $i80, $i50, $p51, $i52, $i81);
    goto $bb18_last;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, $i52);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i55 == 1);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $p77, $i78 := $p51, $i50;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i52, 1);
    call {:si_unique_call 1620} {:cexpr "ctxnum"} boogie_si_record_i32($i79);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i80 := $sle.i32($i79, 15);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i81 := $i78;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p82 := $i2p.i64.ref($i0);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p1);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $i84 := copy_to_user($p82, $p83, 56);
    call {:si_unique_call 1622} {:cexpr "tmp___0"} boogie_si_record_i64($i84);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i6 := $i81;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb32:
    assume $i85 == 1;
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb29:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i50, $p51, $i52 := $i78, $p77, $i79;
    goto $bb29_dummy;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i61 := $sext.i8.i32($i60);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(13, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i65 := $sext.i8.i32($i64);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(14, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i69 := $sext.i8.i32($i68);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $i71 := gru_dump_context($p32, $i52, $p51, $p39, $i62, $i66, $i70);
    call {:si_unique_call 1618} {:cexpr "ret"} boogie_si_record_i32($i71);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, 0);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i73 := $i71;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i71);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p51, $mul.ref($i74, 1));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i50, 1);
    call {:si_unique_call 1619} {:cexpr "cnt"} boogie_si_record_i32($i76);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p77, $i78 := $p75, $i76;
    goto $bb28;

  $bb25:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i42 := $i73;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i6 := $i42;
    goto $bb3;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb21;

  $bb15:
    assume $i46 == 1;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i42 := $i45;
    goto $bb13;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i21 := $udiv.i32($i20, 2);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i22, 8));
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.4, $p23);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p26, $mul.ref($i30, 424));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p32 := $p31;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5822;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 607521);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1625} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1626} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} __might_fault(.str.112, 697);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1629} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 1631} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const gru_dump_tfm: ref;

axiom gru_dump_tfm == $sub.ref(0, 608553);

procedure gru_dump_tfm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $CurrAddr;



implementation gru_dump_tfm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p3, $p1);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64(1024);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.23, $p3);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64($i5, $i7);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i64($i4, $i8);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} $p12 := get_tfm($p11, 0);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $i14 := gru_user_copy_handle($p3, $p13);
    call {:si_unique_call 1636} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} $p19 := get_tfm($p18, 1);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} $i21 := gru_user_copy_handle($p3, $p20);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} $p25 := get_tfm($p24, 2);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $i27 := gru_user_copy_handle($p3, $p26);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} $p31 := get_tfm($p30, 3);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $i33 := gru_user_copy_handle($p3, $p32);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} $p37 := get_tfm($p36, 4);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $i39 := gru_user_copy_handle($p3, $p38);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} $p43 := get_tfm($p42, 5);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $i45 := gru_user_copy_handle($p3, $p44);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} $p49 := get_tfm($p48, 6);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $i51 := gru_user_copy_handle($p3, $p50);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $p55 := get_tfm($p54, 7);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} $i57 := gru_user_copy_handle($p3, $p56);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $p61 := get_tfm($p60, 8);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} $i63 := gru_user_copy_handle($p3, $p62);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} $p67 := get_tfm($p66, 9);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} $i69 := gru_user_copy_handle($p3, $p68);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} $p73 := get_tfm($p72, 10);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $i75 := gru_user_copy_handle($p3, $p74);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $p79 := get_tfm($p78, 11);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $i81 := gru_user_copy_handle($p3, $p80);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} $p85 := get_tfm($p84, 12);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} $i87 := gru_user_copy_handle($p3, $p86);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} $p91 := get_tfm($p90, 13);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} $i93 := gru_user_copy_handle($p3, $p92);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} $p97 := get_tfm($p96, 14);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} $i99 := gru_user_copy_handle($p3, $p98);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} $p103 := get_tfm($p102, 15);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} $i105 := gru_user_copy_handle($p3, $p104);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := 1024;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 14);
    goto $bb13;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb7;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb7;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb7;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb7;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb7;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb7;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb7;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb7;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb7;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb7;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb7;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb7;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb7;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_dump_tgh: ref;

axiom gru_dump_tgh == $sub.ref(0, 609585);

procedure gru_dump_tgh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $CurrAddr;



implementation gru_dump_tgh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p3, $p1);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64(1536);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.23, $p3);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64($i5, $i7);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i64($i4, $i8);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} $p12 := get_tgh($p11, 0);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $i14 := gru_user_copy_handle($p3, $p13);
    call {:si_unique_call 1670} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} $p19 := get_tgh($p18, 1);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} $i21 := gru_user_copy_handle($p3, $p20);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} $p25 := get_tgh($p24, 2);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} $i27 := gru_user_copy_handle($p3, $p26);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} $p31 := get_tgh($p30, 3);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $i33 := gru_user_copy_handle($p3, $p32);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $p37 := get_tgh($p36, 4);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $i39 := gru_user_copy_handle($p3, $p38);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} $p43 := get_tgh($p42, 5);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} $i45 := gru_user_copy_handle($p3, $p44);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} $p49 := get_tgh($p48, 6);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $i51 := gru_user_copy_handle($p3, $p50);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} $p55 := get_tgh($p54, 7);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} $i57 := gru_user_copy_handle($p3, $p56);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} $p61 := get_tgh($p60, 8);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} $i63 := gru_user_copy_handle($p3, $p62);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $p67 := get_tgh($p66, 9);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} $i69 := gru_user_copy_handle($p3, $p68);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $p73 := get_tgh($p72, 10);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} $i75 := gru_user_copy_handle($p3, $p74);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} $p79 := get_tgh($p78, 11);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} $i81 := gru_user_copy_handle($p3, $p80);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} $p85 := get_tgh($p84, 12);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} $i87 := gru_user_copy_handle($p3, $p86);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} $p91 := get_tgh($p90, 13);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} $i93 := gru_user_copy_handle($p3, $p92);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} $p97 := get_tgh($p96, 14);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} $i99 := gru_user_copy_handle($p3, $p98);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} $p103 := get_tgh($p102, 15);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} $i105 := gru_user_copy_handle($p3, $p104);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} $p109 := get_tgh($p108, 16);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} $i111 := gru_user_copy_handle($p3, $p110);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} $p115 := get_tgh($p114, 17);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} $i117 := gru_user_copy_handle($p3, $p116);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} $p121 := get_tgh($p120, 18);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} $i123 := gru_user_copy_handle($p3, $p122);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} $p127 := get_tgh($p126, 19);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} $i129 := gru_user_copy_handle($p3, $p128);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} $p133 := get_tgh($p132, 20);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $i135 := gru_user_copy_handle($p3, $p134);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} $p139 := get_tgh($p138, 21);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} $i141 := gru_user_copy_handle($p3, $p140);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} $p145 := get_tgh($p144, 22);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} $i147 := gru_user_copy_handle($p3, $p146);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} $p151 := get_tgh($p150, 23);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} $i153 := gru_user_copy_handle($p3, $p152);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := 1536;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i154 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 14);
    goto $bb13;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb7;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb7;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb7;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb7;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb7;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb7;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb7;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb7;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb7;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb7;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb7;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb7;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb7;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb7;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb7;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb7;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb7;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb7;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb7;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb7;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb7;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_dump_context: ref;

axiom gru_dump_context == $sub.ref(0, 610617);

procedure gru_dump_context($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i8, $i5: i8, $i6: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.3, $M.0, $CurrAddr;



implementation gru_dump_context($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i8, $i5: i8, $i6: i8) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i20: i32;
  var $i21: i1;
  var $i15: i32;
  var $i22: i32;
  var $i19: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i8;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i86: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i98: i16;
  var $i99: i32;
  var $p100: ref;
  var $i101: i8;
  var $p102: ref;
  var $i103: i8;
  var $p104: ref;
  var $i105: i8;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $i31: i32;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} $p8 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 1719} {:cexpr "gru_dump_context:arg:ctxnum"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p7, $p2);
    call {:si_unique_call 1720} {:cexpr "gru_dump_context:arg:data_opt"} boogie_si_record_i8($i4);
    call {:si_unique_call 1721} {:cexpr "gru_dump_context:arg:lock_cch"} boogie_si_record_i8($i5);
    call {:si_unique_call 1722} {:cexpr "gru_dump_context:arg:flush_cbrs"} boogie_si_record_i8($i6);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.23, $p7);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p8);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.3;
    call {:si_unique_call 1723} cmdloc_dummy_var_61 := $memset.i8(cmdloc_dummy_var_60, $p11, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.3 := cmdloc_dummy_var_61;
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} $p14 := get_cch($p13, $i1);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb1;

  $bb1:
    call $i16, $i17, $i18, $i20, $i21, $i15, $i22 := gru_dump_context_loop_$bb1($p14, $i16, $i17, $i18, $i20, $i21, $i15, $i22);
    goto $bb1_last;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} $i16 := trylock_cch_handle($p14);
    call {:si_unique_call 1726} {:cexpr "cch_locked"} boogie_si_record_i32($i16);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} msleep(1);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i15, 1);
    call {:si_unique_call 1730} {:cexpr "try"} boogie_si_record_i32($i20);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i21 := $sle.i32($i20, 9);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i22 := $i16;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $i22;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.23, $p7);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(32, 1));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p7, $p24);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.23, $p7);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p14);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} $i28 := gru_user_copy_handle($p7, $p27);
    call {:si_unique_call 1728} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i19, 0);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i19, 0);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i36 == 1);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i37 := $sext.i8.i32($i5);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i90, $i91, $i92, $i93 := 0, 0, 96, 0;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i19, 0);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i93, 0);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p96, 880061292);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i98 := $load.i16($M.0, $p97);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i98);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p100, $i99);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i1);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p102, $i101);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i90);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(9, 1));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p104, $i103);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i8($i91);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(10, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p106, $i105);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p107, $i19);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p10);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p8);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} $i110 := copy_to_user($p108, $p109, 32);
    call {:si_unique_call 1743} {:cexpr "tmp___2"} boogie_si_record_i64($i110);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, 0);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i31 := $i92;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb47:
    assume $i111 == 1;
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 14);
    goto $bb15;

  $bb44:
    assume $i95 == 1;
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i31 := $i93;
    goto $bb15;

  $bb41:
    assume $i94 == 1;
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} unlock_cch_handle($p14);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i1);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref($i39, 8));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p14);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(2, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i74, $i75 := 0, 0;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i76 := $mul.i32($i74, 3);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i76, $i75);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i78 := $mul.i32($i77, 64);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 96);
    call {:si_unique_call 1738} {:cexpr "bytes"} boogie_si_record_i32($i79);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i79);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p3);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.23, $p7);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i84 := $sub.i64($i81, $i83);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i85 := $sgt.i64($i80, $i84);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i85 == 1);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.23, $p7);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i88 := $sext.i8.i32($i6);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} $i89 := gru_dump_context_data($p13, $p14, $p87, $i1, $i75, $i88);
    call {:si_unique_call 1740} {:cexpr "ret"} boogie_si_record_i32($i89);
    assume {:verifier.code 0} true;
    $i86 := $i89;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i90, $i91, $i92, $i93 := $i74, $i75, $i79, $i86;
    goto $bb40;

  $bb37:
    assume $i85 == 1;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32(0, 27);
    goto $bb39;

  $bb31:
    assume $i61 == 1;
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p14, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} $i64 := __arch_hweight64($i63);
    call {:si_unique_call 1733} {:cexpr "tmp___0"} boogie_si_record_i64($i64);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i66 := $mul.i32($i65, 2);
    call {:si_unique_call 1734} {:cexpr "cbrcnt"} boogie_si_record_i32($i66);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i67 := $sext.i8.i32($i4);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i73 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i74, $i75 := $i66, $i73;
    goto $bb36;

  $bb33:
    assume $i68 == 1;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p14, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} $i71 := __arch_hweight32($i70);
    call {:si_unique_call 1736} {:cexpr "tmp___1"} boogie_si_record_i32($i71);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i72 := $mul.i32($i71, 16);
    call {:si_unique_call 1737} {:cexpr "dsrcnt"} boogie_si_record_i32($i72);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb35;

  $bb25:
    assume $i44 == 1;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p42, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb27;

  $bb28:
    assume $i48 == 1;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p42, $mul.ref(0, 464)), $mul.ref(248, 1));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p51, $i50);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p42, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $M.3 := $store.i64($M.3, $p56, $i55);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb21;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p26);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i35 := $and.i8($i34, $sub.i8(0, 3));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i35);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i19, 0);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 14);
    goto $bb15;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} unlock_cch_handle($p14);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i20;
    goto $bb7_dummy;

  $bb3:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb5;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6203;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 611649);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1746} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1747} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} __might_fault(.str.112, 732);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1750} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 1752} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 612681);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 613713);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 614745);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1755} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1756} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1757} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 615777);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    return;
}



const trylock_cch_handle: ref;

axiom trylock_cch_handle == $sub.ref(0, 616809);

procedure trylock_cch_handle($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation trylock_cch_handle($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} $i2 := __trylock_handle($p1);
    call {:si_unique_call 1759} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gru_user_copy_handle: ref;

axiom gru_user_copy_handle == $sub.ref(0, 617841);

procedure gru_user_copy_handle($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23;



implementation gru_user_copy_handle($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.23, $p0);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} $i3 := copy_to_user($p2, $p1, 64);
    call {:si_unique_call 1761} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.23, $p0);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(64, 1));
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p0, $p7);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb3;
}



const __arch_hweight32: ref;

axiom __arch_hweight32 == $sub.ref(0, 618873);

procedure __arch_hweight32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_hweight32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} {:cexpr "__arch_hweight32:arg:w"} boogie_si_record_i32($i0);
    call {:si_unique_call 1763} $i1 := devirtbounce.13(0, $i0);
    call {:si_unique_call 1764} {:cexpr "res"} boogie_si_record_i32($i1);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gru_dump_context_data: ref;

axiom gru_dump_context_data == $sub.ref(0, 619905);

procedure gru_dump_context_data($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.0, $CurrAddr;



implementation gru_dump_context_data($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $i15: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $p22: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i32;
  var $i45: i1;
  var $i16: i32;
  var $p17: ref;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i64;
  var $p74: ref;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p6, $p2);
    call {:si_unique_call 1766} {:cexpr "gru_dump_context_data:arg:ctxnum"} boogie_si_record_i32($i3);
    call {:si_unique_call 1767} {:cexpr "gru_dump_context_data:arg:dsrcnt"} boogie_si_record_i32($i4);
    call {:si_unique_call 1768} {:cexpr "gru_dump_context_data:arg:flush_cbrs"} boogie_si_record_i32($i5);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i3, 4194304);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p0, $mul.ref($i8, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $i13 := find_first_bit($p12, 64);
    call {:si_unique_call 1770} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 1771} {:cexpr "scr"} boogie_si_record_i32($i14);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i15 := $sle.i32($i14, 63);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i4, 0);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $r := $i57;
    return;

  $bb32:
    assume $i46 == 1;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.23, $p6);
    $i48 := $add.i64($i8, 131072);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p0, $mul.ref($i48, 1));
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i50 := $mul.i32($i4, 256);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} memcpy_guard($p47, $p49, $i51);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.23, $p6);
    $i53 := $add.i64($i8, 131072);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p0, $mul.ref($i53, 1));
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i55 := $mul.i32($i4, 256);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    cmdloc_dummy_var_63 := $M.0;
    call {:si_unique_call 1785} cmdloc_dummy_var_64 := $memcpy.i8(cmdloc_dummy_var_62, cmdloc_dummy_var_63, $p52, $p54, $i56, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_64;
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i16, $p17 := $i14, $p9;
    goto $bb4;

  $bb4:
    call $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $p35, $i36, $i37, $p38, $i39, $p22, $p40, $i41, $i42, $i43, $i44, $i45, $i16, $p17, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $p74 := gru_dump_context_data_loop_$bb4($p0, $p1, $i5, $p6, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $i34, $p35, $i36, $i37, $p38, $i39, $p22, $p40, $i41, $i42, $i43, $i44, $i45, $i16, $p17, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $p74);
    goto $bb4_last;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i16, 2);
    call {:si_unique_call 1772} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i16, 1);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32($i19, 2);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i32($i20, $i18);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p22 := $p17;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i16, 1);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} $i43 := find_next_bit($p40, 64, $i42);
    call {:si_unique_call 1782} {:cexpr "tmp___3"} boogie_si_record_i64($i43);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i64.i32($i43);
    call {:si_unique_call 1783} {:cexpr "scr"} boogie_si_record_i32($i44);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i45 := $sle.i32($i44, 63);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i45 == 1);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb29:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i16, $p17 := $i44, $p22;
    goto $bb29_dummy;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i5, 0);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} $i24 := gru_user_copy_handle($p6, $p17);
    call {:si_unique_call 1775} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i18, 256);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    $i28 := $add.i64(67207168, $i27);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p0, $mul.ref($i28, 1));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} $i30 := gru_user_copy_handle($p6, $p29);
    call {:si_unique_call 1777} {:cexpr "tmp___1"} boogie_si_record_i32($i30);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i18, 256);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    $i34 := $add.i64(67174400, $i33);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p0, $mul.ref($i34, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} $i36 := gru_user_copy_handle($p6, $p35);
    call {:si_unique_call 1779} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p17, $mul.ref(256, 1));
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i18, 1);
    call {:si_unique_call 1780} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i5, 0);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} $i59 := gru_user_copy_handle($p6, $p38);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i61 := $mul.i32($i39, 256);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    $i63 := $add.i64(67207168, $i62);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p0, $mul.ref($i63, 1));
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} $i65 := gru_user_copy_handle($p6, $p64);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i67 := $mul.i32($i39, 256);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    $i69 := $add.i64(67174400, $i68);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p0, $mul.ref($i69, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} $i71 := gru_user_copy_handle($p6, $p70);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    $i73 := $add.i64(256, 256);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p17, $mul.ref($i73, 1));
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p22 := $p74;
    goto $bb8;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 14);
    goto $bb35;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb36:
    assume $i58 == 1;
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} gru_flush_cache($p38);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb20;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb15;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} gru_flush_cache($p17);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb29_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6412;
}



const __trylock_handle: ref;

axiom __trylock_handle == $sub.ref(0, 620937);

procedure __trylock_handle($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __trylock_handle($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} $i2 := test_and_set_bit(1, $p1);
    call {:si_unique_call 1791} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const get_tfm: ref;

axiom get_tfm == $sub.ref(0, 621969);

procedure get_tfm($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_tfm($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} {:cexpr "get_tfm:arg:ctxnum"} boogie_si_record_i32($i1);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i1, 256);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 67108864);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p0, $mul.ref($i4, 1));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 623001);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1793} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1794} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1795} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 624033);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    return;
}



const num_node_state: ref;

axiom num_node_state == $sub.ref(0, 625065);

procedure num_node_state($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation num_node_state($i0: i32) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} {:cexpr "num_node_state:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    $p2 := $add.ref($add.ref(node_states, $mul.ref(0, 640)), $mul.ref($i1, 128));
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} $i3 := __nodes_weight($p2, 1024);
    call {:si_unique_call 1798} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const uv_node_to_blade_id: ref;

axiom uv_node_to_blade_id == $sub.ref(0, 626097);

procedure uv_node_to_blade_id($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uv_node_to_blade_id($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} {:cexpr "uv_node_to_blade_id:arg:nid"} boogie_si_record_i32($i0);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.3, uv_node_to_blade);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i0);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 2));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.3, $p3);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i5 := $sext.i16.i32($i4);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const cpumask_weight: ref;

axiom cpumask_weight == $sub.ref(0, 627129);

procedure cpumask_weight($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_weight($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.3, nr_cpu_ids);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} $i4 := bitmap_weight($p2, $i3);
    call {:si_unique_call 1801} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const bitmap_weight: ref;

axiom bitmap_weight == $sub.ref(0, 628161);

procedure bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} {:cexpr "bitmap_weight:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} $i2 := __bitmap_weight($p0, $i1);
    call {:si_unique_call 1804} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __bitmap_weight: ref;

axiom __bitmap_weight == $sub.ref(0, 629193);

procedure __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1805} {:cexpr "__bitmap_weight:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1806} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1807} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __nodes_weight: ref;

axiom __nodes_weight == $sub.ref(0, 630225);

procedure __nodes_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __nodes_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} {:cexpr "__nodes_weight:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $i4 := bitmap_weight($p3, $i1);
    call {:si_unique_call 1810} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const quicktest0: ref;

axiom quicktest0 == $sub.ref(0, 631257);

procedure quicktest0($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.0, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation quicktest0($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i26: i32;
  var $i32: i64;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i42: i32;
  var $i46: i64;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i64: i32;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $i72: i64;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i82: i32;
  var $i86: i64;
  var $i31: i32;
  var $p88: ref;
  var $p89: ref;
  var $i7: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1815} {:cexpr "quicktest0:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} $i5 := gru_get_cpu_resources(64, $p3, $p4);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 1817} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.9, $p4);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, 1311768467139281697);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, 0);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.9, $p4);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} $i11 := gru_get_tri($p10);
    call {:si_unique_call 1819} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} $i13 := uv_gpa($p12);
    call {:si_unique_call 1821} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.10, $p3);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} gru_vload($p14, $i13, $i11, 3, 1, 1, 1);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.10, $p3);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} $i16 := gru_wait($p15);
    call {:si_unique_call 1824} {:cexpr "tmp___2"} boogie_si_record_i32($i16);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p9);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 1311768467139281697);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.9, $p4);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} $i49 := gru_get_tri($p48);
    call {:si_unique_call 1847} {:cexpr "tmp___3"} boogie_si_record_i32($i49);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p2);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} $i51 := uv_gpa($p50);
    call {:si_unique_call 1849} {:cexpr "tmp___4"} boogie_si_record_i64($i51);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.10, $p3);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} gru_vstore($p52, $i51, $i49, 3, 1, 1, 1);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.10, $p3);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} $i54 := gru_wait($p53);
    call {:si_unique_call 1852} {:cexpr "tmp___5"} boogie_si_record_i32($i54);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p1);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p2);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i69, $i70);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb83;

  $bb83:
    assume !($i71 == 1);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p2);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 1311768467139281697);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.10, $p3);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.9, $p4);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} gru_free_cpu_resources($p88, $p89);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i7 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i74 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} __bad_size_call_parameter();
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i82 := $u0;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p2);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} vslice_dummy_var_131 := printk.ref.i32.i64.i64(.str.249, $i82, $i86, 1311768467139281697);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 5);
    goto $bb29;

  $bb91:
    assume $i76 == 1;
    call {:si_unique_call 1863} $i85 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1864} {:cexpr "pfo_ret_____14"} boogie_si_record_i32($i85);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i82 := $i85;
    goto $bb103;

  $bb89:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i77 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb93;

  $bb94:
    assume $i77 == 1;
    call {:si_unique_call 1865} $i84 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1866} {:cexpr "pfo_ret_____13"} boogie_si_record_i32($i84);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i82 := $i84;
    goto $bb103;

  $bb87:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i78 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb93;

  $bb98:
    assume $i79 == 1;
    call {:si_unique_call 1867} $i83 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1868} {:cexpr "pfo_ret_____12"} boogie_si_record_i32($i83);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i82 := $i83;
    goto $bb103;

  $bb96:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i80 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb93;

  $bb100:
    assume $i80 == 1;
    call {:si_unique_call 1869} $i81 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1870} {:cexpr "pfo_ret_____11"} boogie_si_record_i32($i81);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb103;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb82;

  $bb56:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i56 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} __bad_size_call_parameter();
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i64 := $u0;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} vslice_dummy_var_130 := printk.ref.i32(.str.248, $i64);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 5);
    goto $bb29;

  $bb63:
    assume $i58 == 1;
    call {:si_unique_call 1853} $i67 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1854} {:cexpr "pfo_ret_____10"} boogie_si_record_i32($i67);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i64 := $i67;
    goto $bb75;

  $bb61:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i59 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb65;

  $bb66:
    assume $i59 == 1;
    call {:si_unique_call 1855} $i66 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1856} {:cexpr "pfo_ret_____9"} boogie_si_record_i32($i66);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i64 := $i66;
    goto $bb75;

  $bb59:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i60 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb65;

  $bb70:
    assume $i61 == 1;
    call {:si_unique_call 1857} $i65 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1858} {:cexpr "pfo_ret_____8"} boogie_si_record_i32($i65);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i64 := $i65;
    goto $bb75;

  $bb68:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i62 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb65;

  $bb72:
    assume $i62 == 1;
    call {:si_unique_call 1859} $i63 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1860} {:cexpr "pfo_ret_____7"} boogie_si_record_i32($i63);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb75;

  $bb31:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i34 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} __bad_size_call_parameter();
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i42 := $u0;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p9);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} vslice_dummy_var_129 := printk.ref.i32.i64(.str.247, $i42, $i46);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 5);
    goto $bb29;

  $bb38:
    assume $i36 == 1;
    call {:si_unique_call 1836} $i45 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1837} {:cexpr "pfo_ret_____6"} boogie_si_record_i32($i45);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i42 := $i45;
    goto $bb50;

  $bb36:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb40;

  $bb41:
    assume $i37 == 1;
    call {:si_unique_call 1838} $i44 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1839} {:cexpr "pfo_ret_____5"} boogie_si_record_i32($i44);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i42 := $i44;
    goto $bb50;

  $bb34:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb40;

  $bb45:
    assume $i39 == 1;
    call {:si_unique_call 1840} $i43 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1841} {:cexpr "pfo_ret_____4"} boogie_si_record_i32($i43);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i42 := $i43;
    goto $bb50;

  $bb43:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb40;

  $bb47:
    assume $i40 == 1;
    call {:si_unique_call 1842} $i41 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1843} {:cexpr "pfo_ret_____3"} boogie_si_record_i32($i41);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb50;

  $bb5:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} __bad_size_call_parameter();
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i26 := $u0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} vslice_dummy_var_128 := printk.ref.i32(.str.246, $i26);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 5);
    goto $bb29;

  $bb12:
    assume $i20 == 1;
    call {:si_unique_call 1825} $i29 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1826} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i29);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i26 := $i29;
    goto $bb24;

  $bb10:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb14;

  $bb15:
    assume $i21 == 1;
    call {:si_unique_call 1827} $i28 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1828} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i28);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i26 := $i28;
    goto $bb24;

  $bb8:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb14;

  $bb19:
    assume $i23 == 1;
    call {:si_unique_call 1829} $i27 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1830} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i27);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i26 := $i27;
    goto $bb24;

  $bb17:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb14;

  $bb21:
    assume $i24 == 1;
    call {:si_unique_call 1831} $i25 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1832} {:cexpr "pfo_ret__"} boogie_si_record_i32($i25);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb24;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i7 := 11;
    goto $bb3;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const quicktest1: ref;

axiom quicktest1 == $sub.ref(0, 632289);

procedure quicktest1($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.10, $M.9, $CurrAddr, $M.11, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation quicktest1($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i34: i32;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i43: i32;
  var $p44: ref;
  var $i49: i32;
  var $p50: ref;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i61: i32;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i39: i32;
  var $i6: i32;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i1;
  var $p51: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $i23: i32;
  var $i134: i1;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 1875} {:cexpr "quicktest1:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} $p3 := kmalloc(4096, 0);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p3);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 1023);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, $sub.i64(0, 1024));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.0;
    call {:si_unique_call 1877} cmdloc_dummy_var_66 := $memset.i8(cmdloc_dummy_var_65, $p11, $sub.i8(0, 18), 64, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_66;
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} vslice_dummy_var_132 := gru_create_message_queue($p1, $p10, 512, 0, 0, 0);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p14, $i15, $i16, $i17 := quicktest1_loop_$bb7($p1, $p2, $p14, $i15, $i16, $i17);
    goto $bb7_last;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} $i15 := gru_send_message_gpa($p1, $p14, 64);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 1880} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i19, $i20 := 0, $i17;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, 1);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    call $p107, $i108, $i109, $i110 := quicktest1_loop_$bb115($p1, $p2, $p107, $i108, $i109, $i110);
    goto $bb115_last;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} $i108 := gru_send_message_gpa($p1, $p107, 64);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 1);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i110 := $i108;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i19, $i20 := 1, $i110;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, 2);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    call $p113, $i114, $i115, $i116 := quicktest1_loop_$bb123($p1, $p2, $p113, $i114, $i115, $i116);
    goto $bb123_last;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} $i114 := gru_send_message_gpa($p1, $p113, 64);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 1);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i116 := $i114;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i19, $i20 := 2, $i116;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, 3);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    call $p119, $i120, $i121, $i122 := quicktest1_loop_$bb131($p1, $p2, $p119, $i120, $i121, $i122);
    goto $bb131_last;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} $i120 := gru_send_message_gpa($p1, $p119, 64);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 1);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i122 := $i120;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i19, $i20 := 3, $i122;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p124, 4);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    call $p125, $i126, $i127, $i128 := quicktest1_loop_$bb139($p1, $p2, $p125, $i126, $i127, $i128);
    goto $bb139_last;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} $i126 := gru_send_message_gpa($p1, $p125, 64);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 1);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i128 := $i126;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i19, $i20 := 4, $i128;
    assume {:branchcond $i129} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, 5);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    call $p131, $i132, $i133, $i23 := quicktest1_loop_$bb147($p1, $p2, $p131, $i132, $i133, $i23);
    goto $bb147_last;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $i132 := gru_send_message_gpa($p1, $p131, 64);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 1);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i23 := $i132;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i23, 0);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i19, $i20 := 5, $i23;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i21, $i22 := 6, $i23;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i22, 2);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i24 == 1);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i21, 4);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} $p40 := gru_get_next_message($p1);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i43, $p44 := 0, $p40;
    assume true;
    goto $bb49, $bb51;

  $bb51:
    assume !($i42 == 1);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p40, $mul.ref(8, 1));
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i47 := $sext.i8.i32($i46);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i43, $p44 := 0, $p40;
    assume {:branchcond $i48} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} gru_free_message($p1, $p40);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} $p72 := gru_get_next_message($p1);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i43, $p44 := 1, $p72;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i74 == 1);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p72, $mul.ref(8, 1));
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i77 := $sext.i8.i32($i76);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 1);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i43, $p44 := 1, $p72;
    assume {:branchcond $i78} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} gru_free_message($p1, $p72);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} $p79 := gru_get_next_message($p1);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i43, $p44 := 2, $p79;
    assume {:branchcond $i81} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i81 == 1);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p79, $mul.ref(8, 1));
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i84 := $sext.i8.i32($i83);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 2);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i43, $p44 := 2, $p79;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} gru_free_message($p1, $p79);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} $p86 := gru_get_next_message($p1);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i43, $p44 := 3, $p86;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i88 == 1);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p86, $mul.ref(8, 1));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i91 := $sext.i8.i32($i90);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 3);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i43, $p44 := 3, $p86;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} gru_free_message($p1, $p86);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} $p93 := gru_get_next_message($p1);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i95 := $eq.i64($i94, 0);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i43, $p44 := 4, $p93;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i95 == 1);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p93, $mul.ref(8, 1));
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i98 := $sext.i8.i32($i97);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 4);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i43, $p44 := 4, $p93;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} gru_free_message($p1, $p93);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} $p51 := gru_get_next_message($p1);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p51);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i101 := $eq.i64($i100, 0);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i43, $p44 := 5, $p51;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i101 == 1);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p51, $mul.ref(8, 1));
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i104 := $sext.i8.i32($i103);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 5);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i43, $p44 := 5, $p51;
    assume {:branchcond $i105} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} gru_free_message($p1, $p51);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i49, $p50 := 6, $p51;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i49, 4);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} kfree($p3);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i6 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb58:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i53 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} __bad_size_call_parameter();
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i61 := $u0;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p50);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i66 == 1);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32(0, 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} vslice_dummy_var_134 := printk.ref.i32.i32.ref.i32(.str.251, $i61, $i49, $p50, $i70);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i39 := $i22;
    goto $bb45;

  $bb82:
    assume $i66 == 1;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p50, $mul.ref(8, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i69 := $sext.i8.i32($i68);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb84;

  $bb65:
    assume $i55 == 1;
    call {:si_unique_call 1895} $i64 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1896} {:cexpr "pfo_ret_____6"} boogie_si_record_i32($i64);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i61 := $i64;
    goto $bb77;

  $bb63:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i56 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb67;

  $bb68:
    assume $i56 == 1;
    call {:si_unique_call 1897} $i63 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1898} {:cexpr "pfo_ret_____5"} boogie_si_record_i32($i63);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i61 := $i63;
    goto $bb77;

  $bb61:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i57 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb67;

  $bb72:
    assume $i58 == 1;
    call {:si_unique_call 1899} $i62 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1900} {:cexpr "pfo_ret_____4"} boogie_si_record_i32($i62);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i61 := $i62;
    goto $bb77;

  $bb70:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i59 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb67;

  $bb74:
    assume $i59 == 1;
    call {:si_unique_call 1901} $i60 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1902} {:cexpr "pfo_ret_____3"} boogie_si_record_i32($i60);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb77;

  $bb112:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i49, $p50 := $i43, $p44;
    goto $bb54;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i101 == 1;
    goto $bb50;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb50;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb50;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb50;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb50;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb50;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb50;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb50;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb50;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb50;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i26 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} __bad_size_call_parameter();
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i34 := $u0;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} vslice_dummy_var_133 := printk.ref.i32.i32.i32(.str.250, $i34, $i22, $i21);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i39 := $i22;
    goto $bb45;

  $bb28:
    assume $i28 == 1;
    call {:si_unique_call 1881} $i37 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1882} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i37);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i34 := $i37;
    goto $bb40;

  $bb26:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb30;

  $bb31:
    assume $i29 == 1;
    call {:si_unique_call 1883} $i36 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1884} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i36);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i34 := $i36;
    goto $bb40;

  $bb24:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb30;

  $bb35:
    assume $i31 == 1;
    call {:si_unique_call 1885} $i35 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1886} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i35);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i34 := $i35;
    goto $bb40;

  $bb33:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb30;

  $bb37:
    assume $i32 == 1;
    call {:si_unique_call 1887} $i33 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1888} {:cexpr "pfo_ret__"} boogie_si_record_i32($i33);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb40;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb19;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i19, $i20;
    goto $bb14;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb148_dummy;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i129 == 1;
    goto $bb12;

  $bb140:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb140_dummy;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb12;

  $bb132:
    assume {:verifier.code 0} true;
    assume $i121 == 1;
    goto $bb132_dummy;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb12;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb124_dummy;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb12;

  $bb116:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb116_dummy;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb12;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb8_dummy;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb148_dummy:
    assume false;
    return;

  $bb147_last:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p2);
    goto corral_source_split_6828;

  $bb140_dummy:
    assume false;
    return;

  $bb139_last:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p2);
    goto corral_source_split_6819;

  $bb132_dummy:
    assume false;
    return;

  $bb131_last:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p2);
    goto corral_source_split_6810;

  $bb124_dummy:
    assume false;
    return;

  $bb123_last:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p2);
    goto corral_source_split_6801;

  $bb116_dummy:
    assume false;
    return;

  $bb115_last:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p2);
    goto corral_source_split_6792;

  $bb8_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_6660;
}



const quicktest2: ref;

axiom quicktest2 == $sub.ref(0, 633321);

procedure quicktest2($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.25, $CurrAddr, $M.10, $M.9, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation quicktest2($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $p41: ref;
  var $p42: ref;
  var $p45: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p68: ref;
  var $p70: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $i81: i64;
  var $i82: i1;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $p94: ref;
  var $i95: i32;
  var $i96: i64;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $i100: i1;
  var $i101: i32;
  var $p102: ref;
  var $i103: i32;
  var $i107: i32;
  var $i108: i1;
  var $i93: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i104: i32;
  var $p105: ref;
  var $i106: i32;
  var $i112: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i126: i32;
  var $i134: i32;
  var $i135: i64;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $i139: i32;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $i143: i64;
  var $i144: i1;
  var $i145: i32;
  var $i146: i64;
  var $i147: i64;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $i151: i32;
  var $i152: i64;
  var $i153: i64;
  var $p154: ref;
  var $i155: i64;
  var $i156: i1;
  var $i157: i1;
  var $i158: i1;
  var $i159: i1;
  var $i160: i1;
  var $i161: i1;
  var $i162: i1;
  var $i163: i1;
  var $i164: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var $i165: i32;
  var $i169: i32;
  var $i170: i64;
  var $p171: ref;
  var $i172: i64;
  var $i173: i32;
  var $i174: i64;
  var $i175: i64;
  var $p176: ref;
  var $i177: i64;
  var $i178: i32;
  var $i179: i64;
  var $i180: i64;
  var $p181: ref;
  var $i182: i64;
  var $i183: i32;
  var $i184: i64;
  var $i185: i64;
  var $p186: ref;
  var $i187: i64;
  var $i189: i32;
  var $i190: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $i191: i32;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $i195: i64;
  var $i196: i64;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i197: i1;
  var $i198: i32;
  var $p199: ref;
  var $i200: i32;
  var $i201: i1;
  var $i202: i32;
  var $i203: i64;
  var $i204: i64;
  var $i205: i1;
  var $i83: i32;
  var $p206: ref;
  var $i80: i32;
  var $p207: ref;
  var $p208: ref;
  var $i209: i64;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i64;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $p220: ref;
  var $p221: ref;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} $p1 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1921} {:cexpr "quicktest2:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $sub.i32(0, 559067475));
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $sub.i32(0, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $0.ref);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p35, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $0.ref);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $0.ref);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p49, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, .str.252);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 0);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p61, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, 0);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1));
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p65);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1));
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $p70);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i74 := $mul.i32(4, 32);
    call {:si_unique_call 1922} {:cexpr "bytes"} boogie_si_record_i32($i74);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} $p76 := kmalloc($i75, 208);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} $i81 := gru_reserve_async_resources(0, 4, 0, $p1);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 1925} {:cexpr "han"} boogie_si_record_i64($i81);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i82 := $eq.i64($i81, 0);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} gru_lock_async_resource($i81, $p2, $0.ref);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p77);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i74);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_67 := $M.0;
    call {:si_unique_call 1928} cmdloc_dummy_var_68 := $memset.i8(cmdloc_dummy_var_67, $p84, $sub.i8(0, 18), $i85, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_68;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p77);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} $i87 := uv_gpa($p86);
    call {:si_unique_call 1930} {:cexpr "tmp___0"} boogie_si_record_i64($i87);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.24, $p2);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} gru_vset($p88, $i87, 0, 3, 4, 1, 4);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p77);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($p207, $mul.ref(4, 1));
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} $i209 := uv_gpa($p208);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.24, $p2);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p210, $mul.ref(256, 1));
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} gru_vset($p211, $i209, 0, 3, 4, 1, 4);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p77);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($p212, $mul.ref(8, 1));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} $i214 := uv_gpa($p213);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.24, $p2);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($p215, $mul.ref(512, 1));
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} gru_vset($p216, $i214, 0, 3, 4, 1, 4);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p77);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($p217, $mul.ref(12, 1));
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} $i219 := uv_gpa($p218);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.24, $p2);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p220, $mul.ref(768, 1));
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} gru_vset($p221, $i219, 0, 3, 4, 1, 4);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i89, $i90, $i91, $i92 := 0, 4, $u0, $u0;
    goto $bb13;

  $bb13:
    call $i89, $i90, $i91, $i92, $p94, $i95, $i96, $p97, $i98, $i99, $i100, $i101, $p102, $i103, $i107, $i108, $i93, $p109, $i110, $i111, $i104, $p105, $i106, $i112, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i127, $i128, $i129, $i126, $i134, $i135, $p136, $i137, $i138, $i139, $i140, $i141, $p142, $i143, $i144, $i145, $i146, $i147, $p148, $i149, $i150, $i151, $i152, $i153, $p154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i166, $i167, $i168, $i165, $i169, $i170, $p171, $i172, $i173, $i174, $i175, $p176, $i177, $i178, $i179, $i180, $p181, $i182, $i183, $i184, $i185, $p186, $i187, $i189, $i190, $i131, $i132, $i133, $i191, $p192, $p193, $i194, $i195, $i196, $i113, $i114, $i115, $i116, $i197, $i198, vslice_dummy_var_135, vslice_dummy_var_136 := quicktest2_loop_$bb13($p2, $p77, $i81, $i89, $i90, $i91, $i92, $p94, $i95, $i96, $p97, $i98, $i99, $i100, $i101, $p102, $i103, $i107, $i108, $i93, $p109, $i110, $i111, $i104, $p105, $i106, $i112, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i127, $i128, $i129, $i126, $i134, $i135, $p136, $i137, $i138, $i139, $i140, $i141, $p142, $i143, $i144, $i145, $i146, $i147, $p148, $i149, $i150, $i151, $i152, $i153, $p154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i166, $i167, $i168, $i165, $i169, $i170, $p171, $i172, $i173, $i174, $i175, $p176, $i177, $i178, $i179, $i180, $p181, $i182, $i183, $i184, $i185, $p186, $i187, $i189, $i190, $i131, $i132, $i133, $i191, $p192, $p193, $i194, $i195, $i196, $i113, $i114, $i115, $i116, $i197, $i198, vslice_dummy_var_135, vslice_dummy_var_136);
    goto $bb13_last;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} gru_wait_async_cbr($i81);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i93 := 0;
    goto $bb14;

  $bb14:
    call $p94, $i95, $i96, $p97, $i98, $i99, $i100, $i101, $p102, $i103, $i107, $i108, $i93, $p109, $i110, $i111 := quicktest2_loop_$bb14($p2, $p94, $i95, $i96, $p97, $i98, $i99, $i100, $i101, $p102, $i103, $i107, $i108, $i93, $p109, $i110, $i111);
    goto $bb14_last;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.24, $p2);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i95 := $mul.i32($i93, 256);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i95);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p94, $mul.ref($i96, 1));
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} $i98 := gru_check_status($p97);
    call {:si_unique_call 1936} {:cexpr "istatus"} boogie_si_record_i32($i98);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 2);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i93, 1);
    call {:si_unique_call 1937} {:cexpr "i"} boogie_si_record_i32($i107);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i107, 4);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p109, $i110, $i111 := $p97, $i107, $i98;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i104, $p105, $i106 := $i110, $p109, $i111;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i104, 4);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i106, 0);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i117 == 1);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i134 := $mul.i32($i104, 4);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64($i134);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p77, $mul.ref($i135, 8));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i137 := $load.i64($M.0, $p136);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i138 := $ne.i64($i137, 0);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb57;

  $bb57:
    assume !($i138 == 1);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i139 := $mul.i32($i104, 4);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i139);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i141 := $add.i64($i140, 1);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p77, $mul.ref($i141, 8));
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $i143 := $load.i64($M.0, $p142);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i144 == 1);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i145 := $mul.i32($i104, 4);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i146 := $sext.i32.i64($i145);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i147 := $add.i64($i146, 2);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p77, $mul.ref($i147, 8));
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i149 := $load.i64($M.0, $p148);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i150 := $ne.i64($i149, 0);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i150 == 1);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i151 := $mul.i32($i104, 4);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i151);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i153 := $add.i64($i152, 3);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p77, $mul.ref($i153, 8));
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i155 := $load.i64($M.0, $p154);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i156 := $ne.i64($i155, 0);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    $i189, $i190 := $i89, $i92;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i131, $i132, $i133 := $i189, $i91, $i190;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i191 := $sub.i32($i90, 1);
    call {:si_unique_call 1948} {:cexpr "k"} boogie_si_record_i32($i191);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p105);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i194 := $load.i64($M.0, $p193);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i195 := $and.i64($i194, $sub.i64(0, 216172782113783809));
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i196 := $or.i64($i195, 216172782113783808);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p193, $i196);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i113, $i114, $i115, $i116 := $i131, $i191, $i132, $i133;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i114, 0);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i198 := $i113;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i202 := $zext.i1.i32($i201);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i203 := $sext.i32.i64($i202);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} $i204 := ldv__builtin_expect($i203, 0);
    call {:si_unique_call 1960} {:cexpr "tmp___1"} boogie_si_record_i64($i204);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i205 := $ne.i64($i204, 0);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} gru_unlock_async_resource($i81);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} gru_release_async_resources($i81);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i83 := $i198;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref($p77);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} kfree($p206);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i80 := $i83;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $r := $i80;
    return;

  $bb90:
    assume $i205 == 1;
    call {:si_unique_call 1961} devirtbounce.6(0, .str.46, 1098, 12);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    call quicktest2_loop_$bb92();
    goto $bb92_last;

  $bb87:
    assume $i197 == 1;
    assume {:verifier.code 0} true;
    $i89, $i90, $i91, $i92 := $i113, $i114, $i115, $i116;
    goto $bb87_dummy;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i157 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    $i158 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    $i159 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} __bad_size_call_parameter();
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i165 := $i92;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i169 := $mul.i32($i104, 4);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i170 := $sext.i32.i64($i169);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p77, $mul.ref($i170, 8));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i172 := $load.i64($M.0, $p171);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i173 := $mul.i32($i104, 4);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i174 := $sext.i32.i64($i173);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i175 := $add.i64($i174, 1);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p77, $mul.ref($i175, 8));
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i177 := $load.i64($M.0, $p176);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i178 := $mul.i32($i104, 4);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i179 := $sext.i32.i64($i178);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i180 := $add.i64($i179, 2);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p77, $mul.ref($i180, 8));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i182 := $load.i64($M.0, $p181);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i183 := $mul.i32($i104, 4);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i184 := $sext.i32.i64($i183);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i185 := $add.i64($i184, 3);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p77, $mul.ref($i185, 8));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i187 := $load.i64($M.0, $p186);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} vslice_dummy_var_136 := printk.ref.i32.i32.i64.i64.i64.i64(.str.254, $i165, $i104, $i172, $i177, $i182, $i187);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i189, $i190 := $sub.i32(0, 5), $i165;
    goto $bb86;

  $bb69:
    assume $i159 == 1;
    call {:si_unique_call 1949} $i168 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1950} {:cexpr "pfo_ret_____6"} boogie_si_record_i32($i168);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i165 := $i168;
    goto $bb81;

  $bb67:
    assume $i158 == 1;
    assume {:verifier.code 0} true;
    $i160 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb71;

  $bb72:
    assume $i160 == 1;
    call {:si_unique_call 1951} $i167 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1952} {:cexpr "pfo_ret_____5"} boogie_si_record_i32($i167);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i165 := $i167;
    goto $bb81;

  $bb65:
    assume $i157 == 1;
    assume {:verifier.code 0} true;
    $i161 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    $i162 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb71;

  $bb76:
    assume $i162 == 1;
    call {:si_unique_call 1953} $i166 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1954} {:cexpr "pfo_ret_____4"} boogie_si_record_i32($i166);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i165 := $i166;
    goto $bb81;

  $bb74:
    assume $i161 == 1;
    assume {:verifier.code 0} true;
    $i163 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb71;

  $bb78:
    assume $i163 == 1;
    call {:si_unique_call 1955} $i164 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1956} {:cexpr "pfo_ret_____3"} boogie_si_record_i32($i164);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i165 := $i164;
    goto $bb81;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb56;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb56;

  $bb30:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i118 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    $i119 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    $i120 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} __bad_size_call_parameter();
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i126 := $i91;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} vslice_dummy_var_135 := printk.ref.i32.i32(.str.253, $i126, $i104);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i131, $i132, $i133 := $sub.i32(0, 14), $i126, $i92;
    goto $bb54;

  $bb37:
    assume $i120 == 1;
    call {:si_unique_call 1938} $i129 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1939} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i129);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i126 := $i129;
    goto $bb49;

  $bb35:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    $i121 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb39;

  $bb40:
    assume $i121 == 1;
    call {:si_unique_call 1940} $i128 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1941} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i128);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i126 := $i128;
    goto $bb49;

  $bb33:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    $i122 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb39;

  $bb44:
    assume $i123 == 1;
    call {:si_unique_call 1942} $i127 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1943} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i127);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i126 := $i127;
    goto $bb49;

  $bb42:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $i124 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb39;

  $bb46:
    assume $i124 == 1;
    call {:si_unique_call 1944} $i125 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1945} {:cexpr "pfo_ret__"} boogie_si_record_i32($i125);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i126 := $i125;
    goto $bb49;

  $bb26:
    assume $i112 == 1;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i113, $i114, $i115, $i116 := $i89, $i90, $i91, $i92;
    goto $bb28;

  $bb23:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $i93 := $i107;
    goto $bb23_dummy;

  $bb16:
    assume $i99 == 1;
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i98, 3);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i101, $p102, $i103 := $i93, $p97, $i98;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb18;

  $bb19:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i104, $p105, $i106 := $i101, $p102, $i103;
    goto $bb21;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i82 == 1;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i83 := $sub.i32(0, 16);
    goto $bb7;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i79 == 1;
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32(0, 12);
    goto $bb3;

  $bb92_dummy:
    assume false;
    return;

  $bb92_last:
    assume {:verifier.code 0} true;
    goto $bb92_dummy;

  $bb23_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6923;

  $bb87_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6920;
}



const quicktest3: ref;

axiom quicktest3 == $sub.ref(0, 634353);

procedure quicktest3($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation quicktest3($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i26: i32;
  var $i31: i32;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} $p1 := $alloc($mul.ref(200, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} $p2 := $alloc($mul.ref(200, $zext.i32.i64(1)));
    call {:si_unique_call 1970} {:cexpr "quicktest3:arg:arg"} boogie_si_record_i64($i0);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.0;
    call {:si_unique_call 1971} cmdloc_dummy_var_70 := $memset.i8(cmdloc_dummy_var_69, $p3, 0, 200, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_70;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} $i4 := get_cycles___0();
    call {:si_unique_call 1973} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i4);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 255);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_71 := $M.0;
    call {:si_unique_call 1974} cmdloc_dummy_var_72 := $memset.i8(cmdloc_dummy_var_71, $p5, $i8, 200, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_72;
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} $i10 := uv_gpa($p9);
    call {:si_unique_call 1976} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} $i12 := uv_gpa($p11);
    call {:si_unique_call 1978} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} vslice_dummy_var_137 := gru_copy_gpa($i12, $i10, 200);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} $i16 := memcmp($p14, $p15, 200);
    call {:si_unique_call 1981} {:cexpr "tmp___2"} boogie_si_record_i32($i16);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb1:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i18 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} __bad_size_call_parameter();
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i26 := $u0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} vslice_dummy_var_138 := printk.ref.i32(.str.255, $i26);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 5);
    goto $bb25;

  $bb8:
    assume $i20 == 1;
    call {:si_unique_call 1982} $i29 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1983} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i29);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i26 := $i29;
    goto $bb20;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb11:
    assume $i21 == 1;
    call {:si_unique_call 1984} $i28 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1985} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i28);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i26 := $i28;
    goto $bb20;

  $bb4:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb15:
    assume $i23 == 1;
    call {:si_unique_call 1986} $i27 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1987} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i27);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i26 := $i27;
    goto $bb20;

  $bb13:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb17:
    assume $i24 == 1;
    call {:si_unique_call 1988} $i25 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1989} {:cexpr "pfo_ret__"} boogie_si_record_i32($i25);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb20;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const gru_free_kernel_contexts: ref;

axiom gru_free_kernel_contexts == $sub.ref(0, 635385);

procedure gru_free_kernel_contexts() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation gru_free_kernel_contexts() returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i23: i32;
  var $i22: i32;
  var $i7: i32;
  var $i24: i32;
  var $i25: i1;
  var $i0: i32;
  var $i1: i32;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i0, $i1 := 0, 0;
    goto $bb1;

  $bb1:
    call $i2, $p3, $p4, $i5, $i6, $p8, $i9, $i10, $p11, $p12, $i13, $i14, $p15, $p16, $i17, $i18, $p19, $p20, $p21, $i23, $i22, $i7, $i24, $i25, $i0, $i1, $i26 := gru_free_kernel_contexts_loop_$bb1($i2, $p3, $p4, $i5, $i6, $p8, $i9, $i10, $p11, $p12, $i13, $i14, $p15, $p16, $i17, $i18, $p19, $p20, $p21, $i23, $i22, $i7, $i24, $i25, $i0, $i1, $i26);
    goto $bb1_last;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i2, 8));
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.4, $p3);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} $i9 := down_write_trylock($p8);
    call {:si_unique_call 1994} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i0, 1);
    call {:si_unique_call 1995} {:cexpr "ret"} boogie_si_record_i32($i23);
    assume {:verifier.code 0} true;
    $i22 := $i23;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i7 := $i22;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i1, 1);
    call {:si_unique_call 1992} {:cexpr "bid"} boogie_si_record_i32($i24);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i25 := $sle.i32($i24, 1023);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i26 := $i7;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb16:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i0, $i1 := $i7, $i24;
    goto $bb16_dummy;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} up_write($p20);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p12);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} kfree($p21);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i22 := $i0;
    goto $bb15;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb11;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} gru_unload_context($p12, 0);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i7 := $i0;
    goto $bb5;

  $bb16_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7097;
}



const get_cycles___0: ref;

axiom get_cycles___0 == $sub.ref(0, 636417);

procedure get_cycles___0() returns ($r: i64);
  free requires assertsPassed;



implementation get_cycles___0() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} $i0 := paravirt_read_tsc___0();
    call {:si_unique_call 2000} {:cexpr "ret"} boogie_si_record_i64($i0);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 637449);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const paravirt_read_tsc___0: ref;

axiom paravirt_read_tsc___0 == $sub.ref(0, 638481);

procedure paravirt_read_tsc___0() returns ($r: i64);
  free requires assertsPassed;



implementation paravirt_read_tsc___0() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.3, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 312)), $mul.ref(240, 1)));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2002} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 2004} $p7 := devirtbounce.9(0, 34, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 312)), $mul.ref(240, 1)), 511);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i8 := $extractvalue($p7, 4);
    call {:si_unique_call 2005} {:cexpr "__eax"} boogie_si_record_i64($i8);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 2003} devirtbounce.6(0, .str.108, 179, 12);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call paravirt_read_tsc___0_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const gru_reserve_async_resources: ref;

axiom gru_reserve_async_resources == $sub.ref(0, 639513);

procedure gru_reserve_async_resources($i0: i32, $i1: i32, $i2: i32, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation gru_reserve_async_resources($i0: i32, $i1: i32, $i2: i32, $p3: ref) returns ($r: i64)
{
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i14: i32;
  var $p27: ref;
  var $i28: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} {:cexpr "gru_reserve_async_resources:arg:blade_id"} boogie_si_record_i32($i0);
    call {:si_unique_call 2007} {:cexpr "gru_reserve_async_resources:arg:cbrs"} boogie_si_record_i32($i1);
    call {:si_unique_call 2008} {:cexpr "gru_reserve_async_resources:arg:dsr_bytes"} boogie_si_record_i32($i2);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i0);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i4, 8));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.4, $p5);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} down_write($p7);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 1136)), $mul.ref(184, 1));
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 1136)), $mul.ref(188, 1));
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i9, $i11);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 1136)), $mul.ref(184, 1));
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i2);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 1136)), $mul.ref(188, 1));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i1);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 1136)), $mul.ref(192, 1));
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p3);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i0, 1);
    call {:si_unique_call 2012} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i14 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} up_write($p27);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i14);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb7;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} gru_unload_context($p19, 0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;
}



const gru_lock_async_resource: ref;

axiom gru_lock_async_resource == $sub.ref(0, 640545);

procedure gru_lock_async_resource($i0: i64, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.0, $M.6, $CurrAddr, $M.10, $M.9, assertsPassed, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_lock_async_resource($i0: i64, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var vslice_dummy_var_139: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} {:cexpr "gru_lock_async_resource:arg:han"} boogie_si_record_i64($i0);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i3 := $sub.i64($i0, 1);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i3, 8));
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.4, $p4);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i0);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 1);
    call {:si_unique_call 2014} {:cexpr "blade_id"} boogie_si_record_i32($i7);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} vslice_dummy_var_139 := gru_lock_kernel_context($i7);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} $i9 := uv_blade_nr_possible_cpus($i7);
    call {:si_unique_call 2017} {:cexpr "ncpus"} boogie_si_record_i32($i9);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p2);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 1136)), $mul.ref(8, 1));
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i21 := $mul.i32($i9, 256);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p20, $mul.ref($i22, 1));
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p2, $p23);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 1136)), $mul.ref(0, 1));
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i9, 256);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p13, $mul.ref($i15, 1));
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p16);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const gru_wait_async_cbr: ref;

axiom gru_wait_async_cbr == $sub.ref(0, 641577);

procedure gru_wait_async_cbr($i0: i64);
  free requires assertsPassed;



implementation gru_wait_async_cbr($i0: i64)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} {:cexpr "gru_wait_async_cbr:arg:han"} boogie_si_record_i64($i0);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 1);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i1, 8));
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.4, $p2);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1136)), $mul.ref(192, 1));
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} wait_for_completion($p5);
    call {:si_unique_call 2020} devirtbounce.1(0);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    return;
}



const gru_check_status: ref;

axiom gru_check_status == $sub.ref(0, 642609);

procedure gru_check_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.12, $M.16, $M.17, $CurrAddr;



implementation gru_check_status($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i64($i3, 56);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 3);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i8($i5);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 2021} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 2);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} $i9 := gru_check_status_proc($p0);
    call {:si_unique_call 2023} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const gru_unlock_async_resource: ref;

axiom gru_unlock_async_resource == $sub.ref(0, 643641);

procedure gru_unlock_async_resource($i0: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_unlock_async_resource($i0: i64)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} {:cexpr "gru_unlock_async_resource:arg:han"} boogie_si_record_i64($i0);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i64.i32($i0);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32($i1, 1);
    call {:si_unique_call 2025} {:cexpr "blade_id"} boogie_si_record_i32($i2);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} gru_unlock_kernel_context($i2);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    return;
}



const gru_release_async_resources: ref;

axiom gru_release_async_resources == $sub.ref(0, 644673);

procedure gru_release_async_resources($i0: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_release_async_resources($i0: i64)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} {:cexpr "gru_release_async_resources:arg:han"} boogie_si_record_i64($i0);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 1);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i1, 8));
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.4, $p2);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} down_write($p4);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 1136)), $mul.ref(184, 1));
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 1136)), $mul.ref(188, 1));
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1136)), $mul.ref(192, 1));
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} up_write($p8);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    return;
}



const gru_check_status_proc: ref;

axiom gru_check_status_proc == $sub.ref(0, 645705);

procedure gru_check_status_proc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.12, $M.16, $M.17, $CurrAddr;



implementation gru_check_status_proc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i64($i3, 56);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 3);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i8($i5);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 2030} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} devirtbounce.1(0);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} $i9 := gru_retry_exception($p0);
    call {:si_unique_call 2032} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 646737);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    return;
}



const gru_vload: ref;

axiom gru_vload == $sub.ref(0, 647769);

procedure gru_vload($p0: ref, $i1: i64, $i2: i32, $i3: i8, $i4: i64, $i5: i64, $i6: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_vload($p0: ref, $i1: i64, $i2: i32, $i3: i8, $i4: i64, $i5: i64, $i6: i64)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i8;
  var $i13: i64;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} {:cexpr "gru_vload:arg:mem_addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 2035} {:cexpr "gru_vload:arg:tri0"} boogie_si_record_i32($i2);
    call {:si_unique_call 2036} {:cexpr "gru_vload:arg:xtype"} boogie_si_record_i8($i3);
    call {:si_unique_call 2037} {:cexpr "gru_vload:arg:nelem"} boogie_si_record_i64($i4);
    call {:si_unique_call 2038} {:cexpr "gru_vload:arg:stride"} boogie_si_record_i64($i5);
    call {:si_unique_call 2039} {:cexpr "gru_vload:arg:hints"} boogie_si_record_i64($i6);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i1);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i4);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i5);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i3);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i2);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i8($i6);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 2);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} $i18 := __opdword(2, 0, $i12, 0, 0, $i13, $i17);
    call {:si_unique_call 2041} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} gru_start_instruction($p7, $i18);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    return;
}



const gru_find_lock_gts: ref;

axiom gru_find_lock_gts == $sub.ref(0, 648801);

procedure gru_find_lock_gts($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, assertsPassed;



implementation gru_find_lock_gts($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} {:cexpr "gru_find_lock_gts:arg:vaddr"} boogie_si_record_i64($i0);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} $p1 := get_current();
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 11712)), $mul.ref(1968, 1));
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2296)), $mul.ref(176, 1));
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} down_read($p4);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} $p5 := gru_find_vma($i0);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 2296)), $mul.ref(176, 1));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} up_read($p18);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} ldv_mutex_lock_68($p17);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64($i0, $i9);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i11 := $udiv.i64($i10, 262144);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} $p13 := gru_find_thread_state($p5, $i12);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb3;
}



const gru_unlock_gts: ref;

axiom gru_unlock_gts == $sub.ref(0, 649833);

procedure gru_unlock_gts($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, assertsPassed;



implementation gru_unlock_gts($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} ldv_mutex_unlock_70($p1);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} $p2 := get_current();
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 11712)), $mul.ref(1968, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2296)), $mul.ref(176, 1));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} up_read($p5);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_70: ref;

axiom ldv_mutex_unlock_70 == $sub.ref(0, 650865);

procedure ldv_mutex_unlock_70($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_70($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} ldv_mutex_unlock_ts_ctxlock_of_gru_thread_state($p0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} mutex_unlock($p0);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const gru_find_vma: ref;

axiom gru_find_vma == $sub.ref(0, 651897);

procedure gru_find_vma($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_find_vma($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} {:cexpr "gru_find_vma:arg:vaddr"} boogie_si_record_i64($i0);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} $p1 := get_current();
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 11712)), $mul.ref(1968, 1));
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} $p4 := find_vma($p3, $i0);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i9 := $ule.i64($i8, $i0);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, $p2i.ref.i64(gru_vm_ops));
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $p14 := $p4;
    goto $bb8;
}



const ldv_mutex_lock_68: ref;

axiom ldv_mutex_lock_68 == $sub.ref(0, 652929);

procedure ldv_mutex_lock_68($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_68($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} ldv_mutex_lock_ts_ctxlock_of_gru_thread_state($p0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} mutex_lock($p0);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const find_vma: ref;

axiom find_vma == $sub.ref(0, 653961);

procedure find_vma($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation find_vma($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} {:cexpr "find_vma:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $p2 := external_alloc();
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const get_tfh: ref;

axiom get_tfh == $sub.ref(0, 654993);

procedure get_tfh($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_tfh($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} {:cexpr "get_tfh:arg:ctxnum"} boogie_si_record_i32($i1);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i1, 256);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 67207168);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p0, $mul.ref($i4, 1));
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const gru_user_dropin: ref;

axiom gru_user_dropin == $sub.ref(0, 656025);

procedure gru_user_dropin($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.27, $CurrAddr, $M.28, $M.3, $M.29, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.53, $M.51, $M.50, $M.48, $M.47, $M.46, $M.44, $M.42, $M.41, $M.52, $M.49, $M.45, $M.43;



implementation gru_user_dropin($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(352, 1)), $mul.ref(8, 1));
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 1);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(352, 1)), $mul.ref(8, 1));
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i9);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p12, $i13, $i14, $p15, $p16, $p17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $i35 := gru_user_dropin_loop_$bb1($p0, $p1, $p2, $p3, $p5, $p12, $i13, $i14, $p15, $p16, $p17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $i35);
    goto $bb1_last;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 25032)), $mul.ref(104, 1));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} $i13 := atomic_read($p12);
    call {:si_unique_call 2066} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} INIT_LIST_HEAD($p15);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 25032)), $mul.ref(112, 1));
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} $i18 := prepare_to_wait_event($p17, $p3, 2);
    call {:si_unique_call 2072} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 25032)), $mul.ref(104, 1));
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} $i20 := atomic_read($p19);
    call {:si_unique_call 2074} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i21 == 1);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call $i22, $i23, $i24 := gru_user_dropin_loop_$bb9($p3, $p17, $p19, $i22, $i23, $i24);
    goto $bb9_last;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} schedule();
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} $i22 := prepare_to_wait_event($p17, $p3, 2);
    call {:si_unique_call 2078} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} $i23 := atomic_read($p19);
    call {:si_unique_call 2080} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13_dummy;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 25032)), $mul.ref(112, 1));
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} finish_wait($p25, $p3);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} prefetchw($p26);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} $i30 := gru_try_dropin($p28, $p0, $p1, $p29);
    call {:si_unique_call 2069} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i31 := $sle.i32($i30, 0);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i33 := $M.1;
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 2);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(224, 1)));
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb7;

  $bb2:
    assume $i14 == 1;
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb13_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} __might_sleep(.str.111, 632, 0);
    goto corral_source_split_7397;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 657057);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2083} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 658089);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2084} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2085} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 2086} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 659121);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 660153);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    return;
}



const gru_try_dropin: ref;

axiom gru_try_dropin == $sub.ref(0, 661185);

procedure gru_try_dropin($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.27, $M.0, $M.28, $CurrAddr, $M.3, $M.29, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.53, $M.51, $M.50, $M.48, $M.47, $M.46, $M.44, $M.42, $M.41, $M.52, $M.49, $M.45, $M.43;



implementation gru_try_dropin($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i24;
  var $i60: i32;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i16;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $p76: ref;
  var $i77: i16;
  var $i78: i64;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i64;
  var $i86: i64;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i64;
  var $i92: i64;
  var $i87: i64;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $i106: i16;
  var $i107: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i64;
  var $i113: i64;
  var $i114: i16;
  var $i115: i32;
  var $i108: i32;
  var $i116: i32;
  var $i117: i16;
  var $p118: ref;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $i126: i32;
  var $i127: i64;
  var $i128: i64;
  var $i129: i1;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i8;
  var $p135: ref;
  var $i136: i64;
  var $i137: i64;
  var $p139: ref;
  var $i140: i64;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $i147: i32;
  var $i151: i64;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $i155: i1;
  var $i156: i1;
  var $i157: i1;
  var $i158: i1;
  var $i159: i1;
  var $i160: i1;
  var $i161: i1;
  var $i162: i32;
  var $i164: i32;
  var $i165: i32;
  var $i166: i32;
  var $i163: i32;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $i170: i16;
  var $i171: i32;
  var $i172: i32;
  var $i173: i64;
  var $i175: i64;
  var $i176: i64;
  var $i177: i1;
  var $i179: i64;
  var $i180: i64;
  var $i181: i1;
  var $i182: i64;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $i186: i1;
  var $i187: i1;
  var $i188: i1;
  var $i189: i1;
  var $i190: i1;
  var $i191: i1;
  var $i192: i1;
  var $i193: i32;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $i194: i32;
  var $i199: i64;
  var $i200: i1;
  var $p201: ref;
  var $i202: i64;
  var $i203: i64;
  var $i204: i1;
  var $i205: i64;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $i209: i1;
  var $i210: i1;
  var $i211: i1;
  var $i212: i1;
  var $i213: i1;
  var $i214: i1;
  var $i215: i1;
  var $i216: i32;
  var $i218: i32;
  var $i219: i32;
  var $i220: i32;
  var $i217: i32;
  var $p222: ref;
  var $i223: i64;
  var $i224: i64;
  var $i225: i1;
  var $i226: i64;
  var $i227: i32;
  var $i228: i32;
  var $i229: i1;
  var $i230: i1;
  var $i231: i1;
  var $i232: i1;
  var $i233: i1;
  var $i234: i1;
  var $i235: i1;
  var $i236: i1;
  var $i237: i32;
  var $i239: i32;
  var $i240: i32;
  var $i241: i32;
  var $i238: i32;
  var $p242: ref;
  var $i243: i64;
  var $i244: i64;
  var $i245: i64;
  var $i246: i8;
  var $i247: i32;
  var $p249: ref;
  var $i250: i64;
  var $i251: i1;
  var $p252: ref;
  var $i253: i64;
  var $i254: i64;
  var $i255: i1;
  var $i256: i64;
  var $i257: i32;
  var $i258: i32;
  var $i259: i1;
  var $i260: i1;
  var $i261: i1;
  var $i262: i1;
  var $i263: i1;
  var $i264: i1;
  var $i265: i1;
  var $i266: i1;
  var $i267: i32;
  var $i269: i32;
  var $i270: i32;
  var $i271: i32;
  var $i268: i32;
  var $p272: ref;
  var $i273: i64;
  var $i274: i64;
  var $i275: i64;
  var $i276: i8;
  var $i277: i32;
  var $p278: ref;
  var $i279: i64;
  var $i280: i64;
  var $i281: i64;
  var $i282: i8;
  var $i283: i32;
  var $p285: ref;
  var $i286: i64;
  var $i287: i1;
  var $p288: ref;
  var $i289: i64;
  var $i290: i64;
  var $i291: i1;
  var $i292: i64;
  var $i293: i32;
  var $i294: i32;
  var $i295: i1;
  var $i296: i1;
  var $i297: i1;
  var $i298: i1;
  var $i299: i1;
  var $i300: i1;
  var $i301: i1;
  var $i302: i1;
  var $i303: i32;
  var $i305: i32;
  var $i306: i32;
  var $i307: i32;
  var $i304: i32;
  var $p308: ref;
  var $i309: i64;
  var $i310: i64;
  var $i311: i64;
  var $i312: i8;
  var $i313: i32;
  var $i315: i64;
  var $i316: i64;
  var $i317: i1;
  var $i318: i64;
  var $i319: i32;
  var $i320: i32;
  var $i321: i1;
  var $i322: i1;
  var $i323: i1;
  var $i324: i1;
  var $i325: i1;
  var $i326: i1;
  var $i327: i1;
  var $i328: i1;
  var $i329: i32;
  var $i331: i32;
  var $i332: i32;
  var $i333: i32;
  var $i330: i32;
  var $i335: i64;
  var $i336: i1;
  var $p337: ref;
  var $i338: i64;
  var $i339: i64;
  var $i340: i1;
  var $i341: i64;
  var $i342: i32;
  var $i343: i32;
  var $i344: i1;
  var $i345: i1;
  var $i346: i1;
  var $i347: i1;
  var $i348: i1;
  var $i349: i1;
  var $i350: i1;
  var $i351: i1;
  var $i352: i32;
  var $i354: i32;
  var $i355: i32;
  var $i356: i32;
  var $i353: i32;
  var $i178: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(208, 1));
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    call {:si_unique_call 2089} {:cexpr "tlb_preload_count"} boogie_si_record_i8($i7);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p4, 0);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p3);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 2090} {:cexpr "atomic"} boogie_si_record_i32($i10);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p5, 0);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i7);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 2092} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(2, 1));
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 1);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p2);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(2, 1));
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 16);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p2);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(2, 1));
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 48);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p2);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i48 := $lshr.i64($i47, 24);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 63);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i64.i8($i49);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 2);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    call {:si_unique_call 2104} {:cexpr "write"} boogie_si_record_i32($i54);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    call {:si_unique_call 2105} {:cexpr "vaddr"} boogie_si_record_i64($i56);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i59 := $load.i24($M.0, $p58);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i60 := $zext.i24.i32($i59);
    call {:si_unique_call 2106} {:cexpr "asid"} boogie_si_record_i32($i60);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p2);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i63 := $lshr.i64($i62, 32);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i64 := $and.i64($i63, 4095);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i16($i64);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    call {:si_unique_call 2107} {:cexpr "indexway"} boogie_si_record_i32($i66);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i60, 0);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call {:si_unique_call 2108} devirtbounce.1(0);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 25032)), $mul.ref(104, 1));
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} $i71 := atomic_read($p70);
    call {:si_unique_call 2110} {:cexpr "tmp___0"} boogie_si_record_i32($i71);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} $i73 := gru_vtop($p1, $i56, $i54, $i10, $p5, $p4);
    call {:si_unique_call 2112} {:cexpr "ret"} boogie_si_record_i32($i73);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, $sub.i32(0, 1));
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i73, $sub.i32(0, 2));
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.0, $p76);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i64($i77);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.26, $p4);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i80 := $sgt.i32($i79, 20);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i80 == 1);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.26, $p4);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i89 := $ashr.i32($i88, 1);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, $sub.i32(0, 6));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i91 := $zext.i32.i64($i90);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i92 := $shl.i64(1, $i91);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i87 := $i92;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i78, $i87);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i94 := $eq.i64($i93, 0);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p19);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, 0);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i126 := $zext.i1.i32($i125);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i126);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} $i128 := ldv__builtin_expect($i127, 0);
    call {:si_unique_call 2120} {:cexpr "tmp___2"} boogie_si_record_i64($i128);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} gru_cb_set_istatus_active($p3);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(352, 1)), $mul.ref(16, 1));
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i136 := $load.i64($M.0, $p135);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i137 := $add.i64($i136, 1);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(352, 1)), $mul.ref(16, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p139, $i137);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i140 := $load.i64($M.27, $p5);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.26, $p4);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i142 := $sgt.i32($i141, 20);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i142 == 1);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.26, $p4);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i149 := $ashr.i32($i148, 1);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i149, $sub.i32(0, 6));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i147 := $i150;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} tfh_write_restart($p2, $i140, 0, $i56, $i60, $i54, $i147);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i151 := $M.1;
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i64.i32($i151);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i152, 1);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i175 := $M.1;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i176 := $and.i64($i175, 2);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, 0);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i178 := 0;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $r := $i178;
    return;

  $bb90:
    assume $i177 == 1;
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(280, 1)));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb65:
    assume $i154 == 1;
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i155 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    $i156 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    $i157 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} __bad_size_call_parameter();
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i163 := $u0;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i10, 0);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p168 := (if $i167 == 1 then .str.99 else .str.100);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i170 := $load.i16($M.0, $p169);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i171 := $zext.i16.i32($i170);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.26, $p4);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i173 := $load.i64($M.27, $p5);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} vslice_dummy_var_140 := printk.ref.i32.ref.ref.i32.ref.ref.i64.i32.i32.i32.i32.i64(.str.97, $i163, .str.98, $p168, $i171, $p1, $p2, $i56, $i60, $i66, $i54, $i172, $i173);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb72:
    assume $i157 == 1;
    call {:si_unique_call 2125} $i166 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2126} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i166);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i163 := $i166;
    goto $bb84;

  $bb70:
    assume $i156 == 1;
    assume {:verifier.code 0} true;
    $i158 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i158 == 1);
    goto $bb74;

  $bb75:
    assume $i158 == 1;
    call {:si_unique_call 2127} $i165 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2128} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i165);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i163 := $i165;
    goto $bb84;

  $bb68:
    assume $i155 == 1;
    assume {:verifier.code 0} true;
    $i159 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    $i160 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb74;

  $bb79:
    assume $i160 == 1;
    call {:si_unique_call 2129} $i164 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2130} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i164);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i163 := $i164;
    goto $bb84;

  $bb77:
    assume $i159 == 1;
    assume {:verifier.code 0} true;
    $i161 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb74;

  $bb81:
    assume $i161 == 1;
    call {:si_unique_call 2131} $i162 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2132} {:cexpr "pfo_ret__"} boogie_si_record_i32($i162);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i163 := $i162;
    goto $bb84;

  $bb62:
    assume $i142 == 1;
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.26, $p4);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i143, 2);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $i145 := $ashr.i32($i144, 1);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i146 := $add.i32($i145, $sub.i32(0, 6));
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i147 := $i146;
    goto $bb64;

  $bb56:
    assume $i129 == 1;
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.26, $p4);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 12);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb58;

  $bb59:
    assume $i131 == 1;
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i7);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i8($i132);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} gru_preload_tlb($p0, $p1, $i10, $i56, $i60, $i54, $i133, $p2, $p19);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} gru_flush_cache_cbe($p19);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb44:
    assume $i94 == 1;
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.0, $p95);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.26, $p4);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i99 := $sgt.i32($i98, 20);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i99 == 1);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.26, $p4);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i110 := $ashr.i32($i109, 1);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i110, $sub.i32(0, 6));
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i112 := $zext.i32.i64($i111);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i113 := $shl.i64(1, $i112);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i64.i16($i113);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i108 := $i115;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i116 := $or.i32($i97, $i108);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(256, 1));
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p118, $i117);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i10, 0);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i119 == 1);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} $i121 := gru_update_cch($p1);
    call {:si_unique_call 2118} {:cexpr "tmp___1"} boogie_si_record_i32($i121);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 0);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb51:
    assume $i122 == 1;
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, 1);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} tfh_user_polling_mode($p2);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} gru_flush_cache_cbe($p19);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i202 := $M.1;
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i203 := $and.i64($i202, 2);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i204 := $ne.i64($i203, 0);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i205 := $M.1;
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i206 := $trunc.i64.i32($i205);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i207 := $and.i32($i206, 1);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i208 := $ne.i32($i207, 0);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i178 := 1;
    goto $bb93;

  $bb128:
    assume $i208 == 1;
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i209 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    $i210 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    $i211 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb135, $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} __bad_size_call_parameter();
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i217 := $u0;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} vslice_dummy_var_142 := printk.ref.i32.ref.ref.i64(.str.102, $i217, .str.98, $p2, $i56);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb135:
    assume $i211 == 1;
    call {:si_unique_call 2151} $i220 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2152} {:cexpr "pfo_ret_____10"} boogie_si_record_i32($i220);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i217 := $i220;
    goto $bb147;

  $bb133:
    assume $i210 == 1;
    assume {:verifier.code 0} true;
    $i212 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i212 == 1);
    goto $bb137;

  $bb138:
    assume $i212 == 1;
    call {:si_unique_call 2153} $i219 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2154} {:cexpr "pfo_ret_____9"} boogie_si_record_i32($i219);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i217 := $i219;
    goto $bb147;

  $bb131:
    assume $i209 == 1;
    assume {:verifier.code 0} true;
    $i213 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    $i214 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb142, $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    assume !($i214 == 1);
    goto $bb137;

  $bb142:
    assume $i214 == 1;
    call {:si_unique_call 2155} $i218 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2156} {:cexpr "pfo_ret_____8"} boogie_si_record_i32($i218);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i217 := $i218;
    goto $bb147;

  $bb140:
    assume $i213 == 1;
    assume {:verifier.code 0} true;
    $i215 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb144, $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb137;

  $bb144:
    assume $i215 == 1;
    call {:si_unique_call 2157} $i216 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2158} {:cexpr "pfo_ret_____7"} boogie_si_record_i32($i216);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i217 := $i216;
    goto $bb147;

  $bb125:
    assume $i204 == 1;
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(304, 1)));
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb49:
    assume $i119 == 1;
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, 1);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb46:
    assume $i99 == 1;
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.26, $p4);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, 2);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i102 := $ashr.i32($i101, 1);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i102, $sub.i32(0, 6));
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i104 := $zext.i32.i64($i103);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i105 := $shl.i64(1, $i104);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i64.i16($i105);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i108 := $i107;
    goto $bb48;

  $bb41:
    assume $i80 == 1;
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.26, $p4);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i81, 2);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $i83 := $ashr.i32($i82, 1);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, $sub.i32(0, 6));
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i85 := $zext.i32.i64($i84);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i86 := $shl.i64(1, $i85);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i87 := $i86;
    goto $bb43;

  $bb37:
    assume $i75 == 1;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb33:
    assume $i74 == 1;
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} tfh_exception($p2);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} gru_flush_cache_cbe($p19);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i315 := $M.1;
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i316 := $and.i64($i315, 2);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i317 := $ne.i64($i316, 0);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $i318 := $M.1;
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i319 := $trunc.i64.i32($i318);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i320 := $and.i32($i319, 1);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $i178 := $sub.i32(0, 14);
    goto $bb93;

  $bb246:
    assume $i321 == 1;
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $i322 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    $i323 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    $i324 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb253, $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    assume !($i324 == 1);
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} __bad_size_call_parameter();
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i330 := $u0;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} vslice_dummy_var_146 := printk.ref.i32.ref.ref.i64(.str.106, $i330, .str.98, $p2, $i56);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb253:
    assume $i324 == 1;
    call {:si_unique_call 2197} $i333 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2198} {:cexpr "pfo_ret_____26"} boogie_si_record_i32($i333);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $i330 := $i333;
    goto $bb265;

  $bb251:
    assume $i323 == 1;
    assume {:verifier.code 0} true;
    $i325 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i325} true;
    goto $bb256, $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    assume !($i325 == 1);
    goto $bb255;

  $bb256:
    assume $i325 == 1;
    call {:si_unique_call 2199} $i332 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2200} {:cexpr "pfo_ret_____25"} boogie_si_record_i32($i332);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $i330 := $i332;
    goto $bb265;

  $bb249:
    assume $i322 == 1;
    assume {:verifier.code 0} true;
    $i326 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    $i327 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb260, $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    assume !($i327 == 1);
    goto $bb255;

  $bb260:
    assume $i327 == 1;
    call {:si_unique_call 2201} $i331 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2202} {:cexpr "pfo_ret_____24"} boogie_si_record_i32($i331);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $i330 := $i331;
    goto $bb265;

  $bb258:
    assume $i326 == 1;
    assume {:verifier.code 0} true;
    $i328 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb262, $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    assume !($i328 == 1);
    goto $bb255;

  $bb262:
    assume $i328 == 1;
    call {:si_unique_call 2203} $i329 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2204} {:cexpr "pfo_ret_____23"} boogie_si_record_i32($i329);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $i330 := $i329;
    goto $bb265;

  $bb243:
    assume $i317 == 1;
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(312, 1)));
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb29:
    assume $i72 == 1;
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i335 := $p2i.ref.i64($p3);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i336 := $eq.i64($i335, 0);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i336 == 1);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p337 := $bitcast.ref.ref($p2);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} gru_flush_cache($p337);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} gru_flush_cache_cbe($p19);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i338 := $M.1;
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i339 := $and.i64($i338, 2);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i340 := $ne.i64($i339, 0);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $i341 := $M.1;
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i342 := $trunc.i64.i32($i341);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i343 := $and.i32($i342, 1);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i344 := $ne.i32($i343, 0);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    $i178 := 1;
    goto $bb93;

  $bb277:
    assume $i344 == 1;
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $i345 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    $i346 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    $i347 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i347} true;
    goto $bb284, $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    assume !($i347 == 1);
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} __bad_size_call_parameter();
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i353 := $u0;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} vslice_dummy_var_147 := printk.ref.i32.ref.ref.i64(.str.107, $i353, .str.98, $p2, $i56);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb284:
    assume $i347 == 1;
    call {:si_unique_call 2211} $i356 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2212} {:cexpr "pfo_ret_____30"} boogie_si_record_i32($i356);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $i353 := $i356;
    goto $bb296;

  $bb282:
    assume $i346 == 1;
    assume {:verifier.code 0} true;
    $i348 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb287, $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    assume !($i348 == 1);
    goto $bb286;

  $bb287:
    assume $i348 == 1;
    call {:si_unique_call 2213} $i355 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2214} {:cexpr "pfo_ret_____29"} boogie_si_record_i32($i355);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $i353 := $i355;
    goto $bb296;

  $bb280:
    assume $i345 == 1;
    assume {:verifier.code 0} true;
    $i349 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i349} true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    $i350 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb291, $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    assume !($i350 == 1);
    goto $bb286;

  $bb291:
    assume $i350 == 1;
    call {:si_unique_call 2215} $i354 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2216} {:cexpr "pfo_ret_____28"} boogie_si_record_i32($i354);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $i353 := $i354;
    goto $bb296;

  $bb289:
    assume $i349 == 1;
    assume {:verifier.code 0} true;
    $i351 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb293, $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    assume !($i351 == 1);
    goto $bb286;

  $bb293:
    assume $i351 == 1;
    call {:si_unique_call 2217} $i352 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2218} {:cexpr "pfo_ret_____27"} boogie_si_record_i32($i352);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $i353 := $i352;
    goto $bb296;

  $bb274:
    assume $i340 == 1;
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(320, 1)));
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb271:
    assume $i336 == 1;
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} tfh_user_polling_mode($p2);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb25:
    assume $i67 == 1;
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i179 := $M.1;
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i180 := $and.i64($i179, 2);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, 0);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i182 := $M.1;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i183 := $trunc.i64.i32($i182);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $i184 := $and.i32($i183, 1);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i199 := $p2i.ref.i64($p3);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i200 := $eq.i64($i199, 0);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i200 == 1);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p2);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} gru_flush_cache($p201);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} gru_flush_cache_cbe($p19);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i178 := $sub.i32(0, 11);
    goto $bb93;

  $bb122:
    assume $i200 == 1;
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} tfh_user_polling_mode($p2);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb97:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i186 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    $i187 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    $i188 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} __bad_size_call_parameter();
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i194 := $u0;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} vslice_dummy_var_141 := printk.ref.i32.ref.ref.i64(.str.101, $i194, .str.98, $p2, $i56);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb104:
    assume $i188 == 1;
    call {:si_unique_call 2137} $i197 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2138} {:cexpr "pfo_ret_____6"} boogie_si_record_i32($i197);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i194 := $i197;
    goto $bb116;

  $bb102:
    assume $i187 == 1;
    assume {:verifier.code 0} true;
    $i189 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i189 == 1);
    goto $bb106;

  $bb107:
    assume $i189 == 1;
    call {:si_unique_call 2139} $i196 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2140} {:cexpr "pfo_ret_____5"} boogie_si_record_i32($i196);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i194 := $i196;
    goto $bb116;

  $bb100:
    assume $i186 == 1;
    assume {:verifier.code 0} true;
    $i190 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    $i191 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb106;

  $bb111:
    assume $i191 == 1;
    call {:si_unique_call 2141} $i195 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2142} {:cexpr "pfo_ret_____4"} boogie_si_record_i32($i195);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i194 := $i195;
    goto $bb116;

  $bb109:
    assume $i190 == 1;
    assume {:verifier.code 0} true;
    $i192 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb106;

  $bb113:
    assume $i192 == 1;
    call {:si_unique_call 2143} $i193 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2144} {:cexpr "pfo_ret_____3"} boogie_si_record_i32($i193);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i194 := $i193;
    goto $bb116;

  $bb94:
    assume $i181 == 1;
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(296, 1)));
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb18:
    assume $i43 == 1;
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p3);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb20;

  $bb21:
    assume $i45 == 1;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p222 := $bitcast.ref.ref($p2);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} gru_flush_cache($p222);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} gru_flush_cache_cbe($p19);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i223 := $M.1;
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i224 := $and.i64($i223, 2);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i225 := $ne.i64($i224, 0);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i226 := $M.1;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i227 := $trunc.i64.i32($i226);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i228 := $and.i32($i227, 1);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i178 := 0;
    goto $bb93;

  $bb156:
    assume $i229 == 1;
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i230 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    $i231 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    $i232 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb163, $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume !($i232 == 1);
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} __bad_size_call_parameter();
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i238 := $u0;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $p242 := $bitcast.ref.ref($p2);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i243 := $load.i64($M.0, $p242);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i244 := $lshr.i64($i243, 20);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i245 := $and.i64($i244, 7);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i246 := $trunc.i64.i8($i245);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i247 := $zext.i8.i32($i246);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} vslice_dummy_var_143 := printk.ref.i32.ref.ref.i32(.str.103, $i238, .str.98, $p2, $i247);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb163:
    assume $i232 == 1;
    call {:si_unique_call 2162} $i241 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2163} {:cexpr "pfo_ret_____14"} boogie_si_record_i32($i241);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $i238 := $i241;
    goto $bb175;

  $bb161:
    assume $i231 == 1;
    assume {:verifier.code 0} true;
    $i233 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i233 == 1);
    goto $bb165;

  $bb166:
    assume $i233 == 1;
    call {:si_unique_call 2164} $i240 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2165} {:cexpr "pfo_ret_____13"} boogie_si_record_i32($i240);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $i238 := $i240;
    goto $bb175;

  $bb159:
    assume $i230 == 1;
    assume {:verifier.code 0} true;
    $i234 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    $i235 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb170, $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    assume !($i235 == 1);
    goto $bb165;

  $bb170:
    assume $i235 == 1;
    call {:si_unique_call 2166} $i239 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2167} {:cexpr "pfo_ret_____12"} boogie_si_record_i32($i239);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $i238 := $i239;
    goto $bb175;

  $bb168:
    assume $i234 == 1;
    assume {:verifier.code 0} true;
    $i236 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb172, $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume !($i236 == 1);
    goto $bb165;

  $bb172:
    assume $i236 == 1;
    call {:si_unique_call 2168} $i237 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2169} {:cexpr "pfo_ret_____11"} boogie_si_record_i32($i237);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i238 := $i237;
    goto $bb175;

  $bb153:
    assume $i225 == 1;
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(336, 1)));
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p285 := $bitcast.ref.ref($p2);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} gru_flush_cache($p285);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} gru_flush_cache_cbe($p19);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i286 := $p2i.ref.i64($p3);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i287 := $ne.i64($i286, 0);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $i289 := $M.1;
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i290 := $and.i64($i289, 2);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i291 := $ne.i64($i290, 0);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $i292 := $M.1;
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i293 := $trunc.i64.i32($i292);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i294 := $and.i32($i293, 1);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i295 := $ne.i32($i294, 0);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $i178 := 0;
    goto $bb93;

  $bb218:
    assume $i295 == 1;
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $i296 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    $i297 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    $i298 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb225, $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    assume !($i298 == 1);
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} __bad_size_call_parameter();
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i304 := $u0;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $p308 := $bitcast.ref.ref($p2);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i309 := $load.i64($M.0, $p308);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i310 := $lshr.i64($i309, 20);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i311 := $and.i64($i310, 7);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i312 := $trunc.i64.i8($i311);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i313 := $zext.i8.i32($i312);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} vslice_dummy_var_145 := printk.ref.i32.ref.ref.i32(.str.105, $i304, .str.98, $p2, $i313);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb225:
    assume $i298 == 1;
    call {:si_unique_call 2186} $i307 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2187} {:cexpr "pfo_ret_____22"} boogie_si_record_i32($i307);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $i304 := $i307;
    goto $bb237;

  $bb223:
    assume $i297 == 1;
    assume {:verifier.code 0} true;
    $i299 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb228, $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    assume !($i299 == 1);
    goto $bb227;

  $bb228:
    assume $i299 == 1;
    call {:si_unique_call 2188} $i306 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2189} {:cexpr "pfo_ret_____21"} boogie_si_record_i32($i306);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i304 := $i306;
    goto $bb237;

  $bb221:
    assume $i296 == 1;
    assume {:verifier.code 0} true;
    $i300 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    $i301 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb232, $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume !($i301 == 1);
    goto $bb227;

  $bb232:
    assume $i301 == 1;
    call {:si_unique_call 2190} $i305 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2191} {:cexpr "pfo_ret_____20"} boogie_si_record_i32($i305);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $i304 := $i305;
    goto $bb237;

  $bb230:
    assume $i300 == 1;
    assume {:verifier.code 0} true;
    $i302 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb234, $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    assume !($i302 == 1);
    goto $bb227;

  $bb234:
    assume $i302 == 1;
    call {:si_unique_call 2192} $i303 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2193} {:cexpr "pfo_ret_____19"} boogie_si_record_i32($i303);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i304 := $i303;
    goto $bb237;

  $bb215:
    assume $i291 == 1;
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(328, 1)));
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb212:
    assume $i287 == 1;
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p288 := $bitcast.ref.ref($p3);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} gru_flush_cache($p288);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} gru_flush_cache($p25);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} sync_core();
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p2);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(2, 1));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 1);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $M.1;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 2);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(352, 1)));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p249 := $bitcast.ref.ref($p2);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} gru_flush_cache($p249);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} gru_flush_cache_cbe($p19);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i250 := $p2i.ref.i64($p3);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i251 := $ne.i64($i250, 0);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $i253 := $M.1;
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i254 := $and.i64($i253, 2);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i255 := $ne.i64($i254, 0);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $i256 := $M.1;
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i64.i32($i256);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i258 := $and.i32($i257, 1);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i259 := $ne.i32($i258, 0);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i178 := 0;
    goto $bb93;

  $bb187:
    assume $i259 == 1;
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i260 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    $i261 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    $i262 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !($i262 == 1);
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} __bad_size_call_parameter();
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i268 := $u0;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $p272 := $bitcast.ref.ref($p2);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i273 := $load.i64($M.0, $p272);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $i274 := $lshr.i64($i273, 16);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $i275 := $and.i64($i274, 3);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $i276 := $trunc.i64.i8($i275);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $p278 := $bitcast.ref.ref($p2);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i279 := $load.i64($M.0, $p278);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i280 := $lshr.i64($i279, 20);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i281 := $and.i64($i280, 7);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i282 := $trunc.i64.i8($i281);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i283 := $zext.i8.i32($i282);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} vslice_dummy_var_144 := printk.ref.i32.ref.ref.i32.i32(.str.104, $i268, .str.98, $p2, $i277, $i283);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb194:
    assume $i262 == 1;
    call {:si_unique_call 2174} $i271 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2175} {:cexpr "pfo_ret_____18"} boogie_si_record_i32($i271);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $i268 := $i271;
    goto $bb206;

  $bb192:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    $i263 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb197, $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb196;

  $bb197:
    assume $i263 == 1;
    call {:si_unique_call 2176} $i270 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2177} {:cexpr "pfo_ret_____17"} boogie_si_record_i32($i270);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $i268 := $i270;
    goto $bb206;

  $bb190:
    assume $i260 == 1;
    assume {:verifier.code 0} true;
    $i264 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    $i265 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb201, $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    assume !($i265 == 1);
    goto $bb196;

  $bb201:
    assume $i265 == 1;
    call {:si_unique_call 2178} $i269 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2179} {:cexpr "pfo_ret_____16"} boogie_si_record_i32($i269);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $i268 := $i269;
    goto $bb206;

  $bb199:
    assume $i264 == 1;
    assume {:verifier.code 0} true;
    $i266 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb203, $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    assume !($i266 == 1);
    goto $bb196;

  $bb203:
    assume $i266 == 1;
    call {:si_unique_call 2180} $i267 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2181} {:cexpr "pfo_ret_____15"} boogie_si_record_i32($i267);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i268 := $i267;
    goto $bb206;

  $bb184:
    assume $i255 == 1;
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(344, 1)));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb181:
    assume $i251 == 1;
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p3);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} gru_flush_cache($p252);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} $p17 := gru_tfh_to_cbe($p2);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} prefetchw($p18);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p19 := $p17;
    goto $bb3;
}



const gru_tfh_to_cbe: ref;

axiom gru_tfh_to_cbe == $sub.ref(0, 662217);

procedure gru_tfh_to_cbe($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation gru_tfh_to_cbe($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64($i1, 32768);
    call {:si_unique_call 2221} {:cexpr "cbe"} boogie_si_record_i64($i2);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const gru_vtop: ref;

axiom gru_vtop == $sub.ref(0, 663249);

procedure gru_vtop($p0: ref, $i1: i64, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.27, $M.26, $M.3, $M.29, $CurrAddr, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.53, $M.51, $M.50, $M.48, $M.47, $M.46, $M.44, $M.42, $M.41, $M.52, $M.49, $M.45, $M.43;



implementation gru_vtop($p0: ref, $i1: i64, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i32;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 2224} {:cexpr "gru_vtop:arg:vaddr"} boogie_si_record_i64($i1);
    call {:si_unique_call 2225} {:cexpr "gru_vtop:arg:write"} boogie_si_record_i32($i2);
    call {:si_unique_call 2226} {:cexpr "gru_vtop:arg:atomic"} boogie_si_record_i32($i3);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} $p10 := find_vma($p9, $i1);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 2228} devirtbounce.1(0);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} $i13 := atomic_pte_lookup($p10, $i1, $i2, $p6, $p7);
    call {:si_unique_call 2230} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.28, $p6);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} $i19 := is_gru_paddr($i18);
    call {:si_unique_call 2234} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.29, $p7);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i23 := $shl.i64(1, $i22);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i24 := $sub.i64(0, $i23);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.28, $p6);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i24, $i25);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $M.28 := $store.i64($M.28, $p6, $i26);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.28, $p6);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} $i28 := uv_soc_phys_ram_to_gpa($i27);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p4, $i28);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.29, $p7);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p5, $i29);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb15:
    assume $i20 == 1;
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 1);
    goto $bb18;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i3, 0);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} $i16 := non_atomic_pte_lookup($p10, $i1, $i2, $p6, $p7);
    call {:si_unique_call 2232} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 2);
    goto $bb18;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_preload_tlb: ref;

axiom gru_preload_tlb == $sub.ref(0, 664281);

procedure gru_preload_tlb($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i32, $i5: i32, $i6: i8, $p7: ref, $p8: ref);
  free requires assertsPassed;
  modifies $M.28, $M.27, $M.26, $M.3, $M.29, $M.0, $CurrAddr, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.53, $M.51, $M.50, $M.48, $M.47, $M.46, $M.44, $M.42, $M.41, $M.52, $M.49, $M.45, $M.43;



implementation gru_preload_tlb($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i32, $i5: i32, $i6: i8, $p7: ref, $p8: ref)
{
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i16;
  var $i29: i16;
  var $i30: i16;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i23: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i47: i64;
  var $i48: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i64;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i60: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i64;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i78: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $i87: i32;
  var $i88: i64;
  var $i90: i32;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $i95: i1;
  var $i49: i32;
  var $i50: i64;
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 2238} {:cexpr "gru_preload_tlb:arg:atomic"} boogie_si_record_i32($i2);
    call {:si_unique_call 2239} {:cexpr "gru_preload_tlb:arg:fault_vaddr"} boogie_si_record_i64($i3);
    call {:si_unique_call 2240} {:cexpr "gru_preload_tlb:arg:asid"} boogie_si_record_i32($i4);
    call {:si_unique_call 2241} {:cexpr "gru_preload_tlb:arg:write"} boogie_si_record_i32($i5);
    call {:si_unique_call 2242} {:cexpr "gru_preload_tlb:arg:tlb_preload_count"} boogie_si_record_i8($i6);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, $i3);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, $i3);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i23 := $i40;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i3, $sub.i64(0, 4096));
    call {:si_unique_call 2244} {:cexpr "fault_vaddr"} boogie_si_record_i64($i41);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i23, $sub.i64(0, 4096));
    call {:si_unique_call 2245} {:cexpr "vaddr"} boogie_si_record_i64($i42);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i6);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i44 := $mul.i64($i43, 4096);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, $i41);
    call {:si_unique_call 2246} {:cexpr "_min2"} boogie_si_record_i64($i45);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i46 := $ult.i64($i42, $i45);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i48 := $ugt.i64($i47, $i41);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i49, $i50 := $u0, $i47;
    goto $bb17;

  $bb17:
    call $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i61, $i62, $i63, $i60, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i79, $i80, $i81, $i78, $i82, $p83, $p84, $i85, $i86, $i87, $i88, $i90, $i91, $i92, $i93, $i94, $i95, $i49, $i50, vslice_dummy_var_148 := gru_preload_tlb_loop_$bb17($p0, $p1, $i2, $i4, $i5, $p7, $p9, $p10, $i41, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i61, $i62, $i63, $i60, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i79, $i80, $i81, $i78, $i82, $p83, $p84, $i85, $i86, $i87, $i88, $i90, $i91, $i92, $i93, $i94, $i95, $i49, $i50, vslice_dummy_var_148);
    goto $bb17_last;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} $i51 := gru_vtop($p1, $i50, $i5, $i2, $p9, $p10);
    call {:si_unique_call 2249} {:cexpr "ret"} boogie_si_record_i32($i51);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i52 == 1);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.27, $p9);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.26, $p10);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i54, 20);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i55 == 1);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.26, $p10);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i62 := $ashr.i32($i61, 1);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, $sub.i32(0, 6));
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i60 := $i63;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} $i64 := tfh_write_only($p7, $i53, 0, $i50, $i4, $i5, $i60);
    call {:si_unique_call 2251} {:cexpr "tmp"} boogie_si_record_i32($i64);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i66 := $M.1;
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i64.i32($i66);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 1);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i90 := $i49;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i91 := $sub.i64($i50, 4096);
    call {:si_unique_call 2262} {:cexpr "vaddr"} boogie_si_record_i64($i91);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i92 := $M.1;
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i92, 2);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i64($i91, $i41);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i95 == 1);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb56:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i49, $i50 := $i90, $i91;
    goto $bb56_dummy;

  $bb53:
    assume $i94 == 1;
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(288, 1)));
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb28:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i70 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} __bad_size_call_parameter();
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i78 := $i49;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i2, 0);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $p83 := (if $i82 == 1 then .str.99 else .str.100);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.0, $p84);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.26, $p10);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.27, $p9);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} vslice_dummy_var_148 := printk.ref.i32.ref.ref.i32.ref.ref.i64.i32.i32.i32.i64(.str.109, $i78, .str.110, $p83, $i86, $p1, $p7, $i50, $i4, $i5, $i87, $i88);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i90 := $i78;
    goto $bb52;

  $bb35:
    assume $i72 == 1;
    call {:si_unique_call 2252} $i81 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2253} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i81);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i78 := $i81;
    goto $bb47;

  $bb33:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i73 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb37;

  $bb38:
    assume $i73 == 1;
    call {:si_unique_call 2254} $i80 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2255} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i80);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i78 := $i80;
    goto $bb47;

  $bb31:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i74 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb37;

  $bb42:
    assume $i75 == 1;
    call {:si_unique_call 2256} $i79 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2257} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i79);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i78 := $i79;
    goto $bb47;

  $bb40:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i76 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb37;

  $bb44:
    assume $i76 == 1;
    call {:si_unique_call 2258} $i77 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2259} {:cexpr "pfo_ret__"} boogie_si_record_i32($i77);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb47;

  $bb24:
    assume $i65 == 1;
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb21:
    assume $i55 == 1;
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.26, $p10);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 2);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i58 := $ashr.i32($i57, 1);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, $sub.i32(0, 6));
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i60 := $i59;
    goto $bb23;

  $bb19:
    assume $i52 == 1;
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i46 == 1;
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i47 := $i42;
    goto $bb13;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p8);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i29 := $lshr.i16($i28, 8);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i30 := $and.i16($i29, 7);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i16.i8($i30);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32(1, $i32);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i37 := $mul.i64($i34, $i36);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, $i3);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i39 := $sub.i64($i38, 1);
    call {:si_unique_call 2247} {:cexpr "vaddr"} boogie_si_record_i64($i39);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb10;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i20 := $mul.i64($i19, 64);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, $i3);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64($i21, 1);
    call {:si_unique_call 2243} {:cexpr "vaddr"} boogie_si_record_i64($i22);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb56_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8057;
}



const gru_flush_cache_cbe: ref;

axiom gru_flush_cache_cbe == $sub.ref(0, 665313);

procedure gru_flush_cache_cbe($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_flush_cache_cbe($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2265} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(63, 1));
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} gru_flush_cache($p8);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_cb_set_istatus_active: ref;

axiom gru_cb_set_istatus_active == $sub.ref(0, 666345);

procedure gru_cb_set_istatus_active($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_cb_set_istatus_active($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, $sub.i32(0, 50331649));
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 33554432);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i6);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tfh_write_restart: ref;

axiom tfh_write_restart == $sub.ref(0, 667377);

procedure tfh_write_restart($p0: ref, $i1: i64, $i2: i32, $i3: i64, $i4: i32, $i5: i32, $i6: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tfh_write_restart($p0: ref, $i1: i64, $i2: i32, $i3: i64, $i4: i32, $i5: i32, $i6: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $i9: i96;
  var $i10: i96;
  var $i11: i96;
  var $i12: i96;
  var $i13: i96;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i96;
  var $i19: i96;
  var $i20: i96;
  var $i21: i96;
  var $i22: i96;
  var $i23: i96;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $i27: i96;
  var $i28: i96;
  var $i29: i96;
  var $i30: i96;
  var $i31: i96;
  var $i32: i96;
  var $i33: i8;
  var $p34: ref;
  var $p35: ref;
  var $i36: i96;
  var $i37: i96;
  var $i38: i96;
  var $i39: i96;
  var $i40: i96;
  var $i41: i96;
  var $i42: i8;
  var $p43: ref;
  var $p44: ref;
  var $i45: i96;
  var $i46: i96;
  var $i47: i96;
  var $i48: i96;
  var $i49: i96;
  var $i50: i96;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} {:cexpr "tfh_write_restart:arg:paddr"} boogie_si_record_i64($i1);
    call {:si_unique_call 2268} {:cexpr "tfh_write_restart:arg:gaa"} boogie_si_record_i32($i2);
    call {:si_unique_call 2269} {:cexpr "tfh_write_restart:arg:vaddr"} boogie_si_record_i64($i3);
    call {:si_unique_call 2270} {:cexpr "tfh_write_restart:arg:asid"} boogie_si_record_i32($i4);
    call {:si_unique_call 2271} {:cexpr "tfh_write_restart:arg:dirty"} boogie_si_record_i32($i5);
    call {:si_unique_call 2272} {:cexpr "tfh_write_restart:arg:pagesize"} boogie_si_record_i32($i6);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i96($i4);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i10 := $load.i96($M.0, $p8);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i11 := $and.i96($i9, 16777215);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i12 := $and.i96($i10, $sub.i96(0, 16777216));
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i13 := $or.i96($i12, $i11);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p8, $i13);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i3);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i64($i1, 12);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i18 := $zext.i64.i96($i15);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i19 := $load.i96($M.0, $p17);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i20 := $and.i96($i18, 2199023255551);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i21 := $shl.i96($i20, 32);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i22 := $and.i96($i19, $sub.i96(0, 9444732965734995460097));
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i23 := $or.i96($i22, $i21);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p17, $i23);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i2);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i96($i24);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i28 := $load.i96($M.0, $p26);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i29 := $and.i96($i27, 3);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i30 := $shl.i96($i29, 25);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i31 := $and.i96($i28, $sub.i96(0, 100663297));
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $i32 := $or.i96($i31, $i30);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p26, $i32);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i5);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i96($i33);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i37 := $load.i96($M.0, $p35);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $i38 := $and.i96($i36, 1);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $i39 := $shl.i96($i38, 24);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i40 := $and.i96($i37, $sub.i96(0, 16777217));
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i41 := $or.i96($i40, $i39);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p35, $i41);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i6);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i96($i42);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i46 := $load.i96($M.0, $p44);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i47 := $and.i96($i45, 31);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i48 := $shl.i96($i47, 80);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i49 := $and.i96($i46, $sub.i96(0, 37476700408053504415891457));
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i50 := $or.i96($i49, $i48);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p44, $i50);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p0);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, $sub.i64(0, 113));
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i54 := $or.i64($i53, 48);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, $i54);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p0);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} start_instruction($p55);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    return;
}



const tfh_user_polling_mode: ref;

axiom tfh_user_polling_mode == $sub.ref(0, 668409);

procedure tfh_user_polling_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation tfh_user_polling_mode($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, $sub.i64(0, 113));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i4 := $or.i64($i3, 112);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, $i4);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} start_instruction($p5);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    return;
}



const tfh_exception: ref;

axiom tfh_exception == $sub.ref(0, 669441);

procedure tfh_exception($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation tfh_exception($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, $sub.i64(0, 113));
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i4 := $or.i64($i3, 64);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, $i4);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} start_instruction($p5);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    return;
}



const tfh_write_only: ref;

axiom tfh_write_only == $sub.ref(0, 670473);

procedure tfh_write_only($p0: ref, $i1: i64, $i2: i32, $i3: i64, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation tfh_write_only($p0: ref, $i1: i64, $i2: i32, $i3: i64, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $i9: i96;
  var $i10: i96;
  var $i11: i96;
  var $i12: i96;
  var $i13: i96;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i96;
  var $i19: i96;
  var $i20: i96;
  var $i21: i96;
  var $i22: i96;
  var $i23: i96;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $i27: i96;
  var $i28: i96;
  var $i29: i96;
  var $i30: i96;
  var $i31: i96;
  var $i32: i96;
  var $i33: i8;
  var $p34: ref;
  var $p35: ref;
  var $i36: i96;
  var $i37: i96;
  var $i38: i96;
  var $i39: i96;
  var $i40: i96;
  var $i41: i96;
  var $i42: i8;
  var $p43: ref;
  var $p44: ref;
  var $i45: i96;
  var $i46: i96;
  var $i47: i96;
  var $i48: i96;
  var $i49: i96;
  var $i50: i96;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} {:cexpr "tfh_write_only:arg:paddr"} boogie_si_record_i64($i1);
    call {:si_unique_call 2277} {:cexpr "tfh_write_only:arg:gaa"} boogie_si_record_i32($i2);
    call {:si_unique_call 2278} {:cexpr "tfh_write_only:arg:vaddr"} boogie_si_record_i64($i3);
    call {:si_unique_call 2279} {:cexpr "tfh_write_only:arg:asid"} boogie_si_record_i32($i4);
    call {:si_unique_call 2280} {:cexpr "tfh_write_only:arg:dirty"} boogie_si_record_i32($i5);
    call {:si_unique_call 2281} {:cexpr "tfh_write_only:arg:pagesize"} boogie_si_record_i32($i6);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i96($i4);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i10 := $load.i96($M.0, $p8);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i11 := $and.i96($i9, 16777215);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i12 := $and.i96($i10, $sub.i96(0, 16777216));
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i13 := $or.i96($i12, $i11);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p8, $i13);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i3);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i64($i1, 12);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i18 := $zext.i64.i96($i15);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i19 := $load.i96($M.0, $p17);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i20 := $and.i96($i18, 2199023255551);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i21 := $shl.i96($i20, 32);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i22 := $and.i96($i19, $sub.i96(0, 9444732965734995460097));
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i23 := $or.i96($i22, $i21);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p17, $i23);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i2);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i96($i24);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i28 := $load.i96($M.0, $p26);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i29 := $and.i96($i27, 3);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i30 := $shl.i96($i29, 25);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i31 := $and.i96($i28, $sub.i96(0, 100663297));
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i32 := $or.i96($i31, $i30);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p26, $i32);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i5);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i96($i33);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i37 := $load.i96($M.0, $p35);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i38 := $and.i96($i36, 1);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i39 := $shl.i96($i38, 24);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i40 := $and.i96($i37, $sub.i96(0, 16777217));
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i41 := $or.i96($i40, $i39);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p35, $i41);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i6);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i96($i42);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i46 := $load.i96($M.0, $p44);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i47 := $and.i96($i45, 31);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i48 := $shl.i96($i47, 80);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i49 := $and.i96($i46, $sub.i96(0, 37476700408053504415891457));
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i50 := $or.i96($i49, $i48);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i96($M.0, $p44, $i50);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p0);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, $sub.i64(0, 113));
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i54 := $or.i64($i53, 32);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, $i54);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p0);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} start_instruction($p55);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p0);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} $i57 := wait_instruction_complete($p56, 5);
    call {:si_unique_call 2284} {:cexpr "tmp"} boogie_si_record_i32($i57);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $r := $i57;
    return;
}



const atomic_pte_lookup: ref;

axiom atomic_pte_lookup == $sub.ref(0, 671505);

procedure atomic_pte_lookup($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.28, $M.29, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr, $M.53, $M.51, $M.50, $M.48, $M.47, $M.46, $M.44, $M.42, $M.41, $M.52, $M.49, $M.45, $M.43;



implementation atomic_pte_lookup($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i64;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i32;
  var $i56: i1;
  var $i58: i1;
  var $p59: ref;
  var $i60: i64;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i63: i32;
  var $i69: i32;
  var $i57: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i73: i32;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2286} {:cexpr "atomic_pte_lookup:arg:vaddr"} boogie_si_record_i64($i1);
    call {:si_unique_call 2287} {:cexpr "atomic_pte_lookup:arg:write"} boogie_si_record_i32($i2);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.3, $p6);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2296)), $mul.ref(64, 1));
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.3, $p8);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i10 := $lshr.i64($i1, 39);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 511);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p9, $mul.ref($i11, 8));
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref($i11, 8)), $mul.ref(0, 1));
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.3, $p13);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} $i15 := pgd_none($i14);
    call {:si_unique_call 2289} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 2291} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} $p21 := pud_offset($p12, $i1);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.3, $p22);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} $i24 := pud_none($i23);
    call {:si_unique_call 2294} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 2296} {:cexpr "tmp___2"} boogie_si_record_i64($i28);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} $p30 := pmd_offset($p21, $i1);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.3, $p31);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} $i33 := pmd_none($i32);
    call {:si_unique_call 2299} {:cexpr "tmp___3"} boogie_si_record_i32($i33);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 2301} {:cexpr "tmp___4"} boogie_si_record_i64($i37);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p30, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.3, $p39);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} $i41 := pmd_large($i40);
    call {:si_unique_call 2303} {:cexpr "tmp___6"} boogie_si_record_i32($i41);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 2305} {:cexpr "tmp___7"} boogie_si_record_i64($i45);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} $p50 := pte_offset_kernel($p30, $i1);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p5);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p50);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_76 := $M.3;
    cmdloc_dummy_var_77 := $M.3;
    call {:si_unique_call 2308} cmdloc_dummy_var_78 := $memcpy.i8(cmdloc_dummy_var_76, cmdloc_dummy_var_77, $p51, $p52, 8, $zext.i32.i64(8), 0 == 1);
    $M.3 := cmdloc_dummy_var_78;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.3, $p53);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} $i55 := pte_present($i54);
    call {:si_unique_call 2310} {:cexpr "tmp___8"} boogie_si_record_i32($i55);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i56 == 1);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i2, 0);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i57 := $i69;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i57);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 2312} {:cexpr "tmp___12"} boogie_si_record_i64($i71);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.3, $p74);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} $i76 := pte_pfn($i75);
    call {:si_unique_call 2318} {:cexpr "tmp___13"} boogie_si_record_i64($i76);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i77 := $shl.i64($i76, 12);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $M.28 := $store.i64($M.28, $p3, $i77);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} $i78 := is_vm_hugetlb_page($p0);
    call {:si_unique_call 2320} {:cexpr "tmp___14"} boogie_si_record_i32($i78);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i80 := (if $i79 == 1 then 21 else 12);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p4, $i80);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i73 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $r := $i73;
    return;

  $bb26:
    assume $i72 == 1;
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i73 := 1;
    goto $bb28;

  $bb17:
    assume $i58 == 1;
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.3, $p59);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} $i61 := pte_write($i60);
    call {:si_unique_call 2314} {:cexpr "tmp___9"} boogie_si_record_i32($i61);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i62 == 1);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.3, $p64);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} $i66 := pte_dirty($i65);
    call {:si_unique_call 2316} {:cexpr "tmp___10"} boogie_si_record_i32($i66);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i63 := $i68;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i69 := $i63;
    goto $bb25;

  $bb22:
    assume $i67 == 1;
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i68 := 1;
    goto $bb24;

  $bb19:
    assume $i62 == 1;
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i63 := 1;
    goto $bb21;

  $bb14:
    assume $i56 == 1;
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i57 := 1;
    goto $bb16;

  $bb11:
    assume $i46 == 1;
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p30);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p5);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p47);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_73 := $M.3;
    cmdloc_dummy_var_74 := $M.3;
    call {:si_unique_call 2306} cmdloc_dummy_var_75 := $memcpy.i8(cmdloc_dummy_var_73, cmdloc_dummy_var_74, $p48, $p49, 8, $zext.i32.i64(8), 0 == 1);
    $M.3 := cmdloc_dummy_var_75;
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i73 := 1;
    goto $bb28;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const non_atomic_pte_lookup: ref;

axiom non_atomic_pte_lookup == $sub.ref(0, 672537);

procedure non_atomic_pte_lookup($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.28, $M.0, $CurrAddr;



implementation non_atomic_pte_lookup($p0: ref, $i1: i64, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2322} {:cexpr "non_atomic_pte_lookup:arg:vaddr"} boogie_si_record_i64($i1);
    call {:si_unique_call 2323} {:cexpr "non_atomic_pte_lookup:arg:write"} boogie_si_record_i32($i2);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} $i6 := is_vm_hugetlb_page($p0);
    call {:si_unique_call 2325} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then 21 else 12);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p4, $i8);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} $p9 := get_current();
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} $p10 := get_current();
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 11712)), $mul.ref(1968, 1));
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} $i13 := get_user_pages($p10, $p12, $i1, 1, $i2, 0, $p5, $0.ref);
    call {:si_unique_call 2329} {:cexpr "tmp___2"} boogie_si_record_i64($i13);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i14 := $sle.i64($i13, 0);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.30, $p5);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 24189255811072);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i19 := $sdiv.i64($i18, 64);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i20 := $shl.i64($i19, 12);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $M.28 := $store.i64($M.28, $p3, $i20);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.30, $p5);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} put_page($p21);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 14);
    goto $bb3;
}



const is_gru_paddr: ref;

axiom is_gru_paddr == $sub.ref(0, 673569);

procedure is_gru_paddr($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation is_gru_paddr($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i4: i64;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} {:cexpr "is_gru_paddr:arg:paddr"} boogie_si_record_i64($i0);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i1 := $M.31;
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i2 := $uge.i64($i0, $i1);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i4 := $M.32;
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i0, $i4);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const is_vm_hugetlb_page: ref;

axiom is_vm_hugetlb_page == $sub.ref(0, 674601);

procedure is_vm_hugetlb_page($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_vm_hugetlb_page($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.3, $p1);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 4194304);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const get_user_pages: ref;

axiom get_user_pages == $sub.ref(0, 675633);

procedure get_user_pages($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i32, $p6: ref, $p7: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_user_pages($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i32, $p6: ref, $p7: ref) returns ($r: i64)
{
  var $i8: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2332} {:cexpr "get_user_pages:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2333} {:cexpr "get_user_pages:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 2334} {:cexpr "get_user_pages:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 2335} {:cexpr "get_user_pages:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2336} $i8 := __VERIFIER_nondet_long();
    call {:si_unique_call 2337} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i8);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const put_page: ref;

axiom put_page == $sub.ref(0, 676665);

procedure put_page($p0: ref);
  free requires assertsPassed;



implementation put_page($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    return;
}



const pgd_none: ref;

axiom pgd_none == $sub.ref(0, 677697);

procedure pgd_none($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.53, $CurrAddr;



implementation pgd_none($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, $p2, $i0);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.33, $p3);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} $i5 := native_pgd_val($i4);
    call {:si_unique_call 2340} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pud_offset: ref;

axiom pud_offset == $sub.ref(0, 678729);

procedure pud_offset($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.51, $M.52, $CurrAddr;



implementation pud_offset($p0: ref, $i1: i64) returns ($r: ref)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} {:cexpr "pud_offset:arg:address"} boogie_si_record_i64($i1);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} $i2 := pud_index($i1);
    call {:si_unique_call 2343} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.3, $p3);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} $i5 := pgd_page_vaddr($i4);
    call {:si_unique_call 2345} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i2, $i5);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const pud_none: ref;

axiom pud_none == $sub.ref(0, 679761);

procedure pud_none($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.50, $CurrAddr;



implementation pud_none($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p2, $i0);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.34, $p3);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} $i5 := native_pud_val($i4);
    call {:si_unique_call 2348} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pmd_offset: ref;

axiom pmd_offset == $sub.ref(0, 680793);

procedure pmd_offset($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.48, $M.49, $CurrAddr;



implementation pmd_offset($p0: ref, $i1: i64) returns ($r: ref)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} {:cexpr "pmd_offset:arg:address"} boogie_si_record_i64($i1);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} $i2 := pmd_index($i1);
    call {:si_unique_call 2351} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.3, $p3);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} $i5 := pud_page_vaddr($i4);
    call {:si_unique_call 2353} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i2, $i5);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const pmd_none: ref;

axiom pmd_none == $sub.ref(0, 681825);

procedure pmd_none($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.47, $CurrAddr;



implementation pmd_none($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, $p2, $i0);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.35, $p3);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} $i5 := native_pmd_val($i4);
    call {:si_unique_call 2356} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pmd_large: ref;

axiom pmd_large == $sub.ref(0, 682857);

procedure pmd_large($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36, $M.46, $CurrAddr, $M.47;



implementation pmd_large($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.36 := $store.i64($M.36, $p2, $i0);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.36, $p3);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} $i5 := pmd_flags($i4);
    call {:si_unique_call 2359} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 128);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pte_offset_kernel: ref;

axiom pte_offset_kernel == $sub.ref(0, 683889);

procedure pte_offset_kernel($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.44, $M.45, $CurrAddr;



implementation pte_offset_kernel($p0: ref, $i1: i64) returns ($r: ref)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} {:cexpr "pte_offset_kernel:arg:address"} boogie_si_record_i64($i1);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} $i2 := pte_index($i1);
    call {:si_unique_call 2362} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.3, $p3);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} $i5 := pmd_page_vaddr($i4);
    call {:si_unique_call 2364} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i2, $i5);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const pte_present: ref;

axiom pte_present == $sub.ref(0, 684921);

procedure pte_present($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.37, $M.42, $CurrAddr, $M.43;



implementation pte_present($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.37 := $store.i64($M.37, $p2, $i0);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.37, $p3);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} $i5 := pte_flags($i4);
    call {:si_unique_call 2367} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 257);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pte_write: ref;

axiom pte_write == $sub.ref(0, 685953);

procedure pte_write($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.42, $CurrAddr, $M.43;



implementation pte_write($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.38 := $store.i64($M.38, $p2, $i0);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.38, $p3);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} $i5 := pte_flags($i4);
    call {:si_unique_call 2370} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 2);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pte_dirty: ref;

axiom pte_dirty == $sub.ref(0, 686985);

procedure pte_dirty($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.42, $CurrAddr, $M.43;



implementation pte_dirty($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.39 := $store.i64($M.39, $p2, $i0);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.39, $p3);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} $i5 := pte_flags($i4);
    call {:si_unique_call 2373} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 64);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pte_pfn: ref;

axiom pte_pfn == $sub.ref(0, 688017);

procedure pte_pfn($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.40, $M.41, $CurrAddr;



implementation pte_pfn($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.40 := $store.i64($M.40, $p2, $i0);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.40, $p3);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} $i5 := pte_val($i4);
    call {:si_unique_call 2376} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 70368744173568);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i64($i6, 12);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pte_val: ref;

axiom pte_val == $sub.ref(0, 689049);

procedure pte_val($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.41, $CurrAddr;



implementation pte_val($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.41 := $store.i64($M.41, $p2, $i0);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(0 == 1);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.3, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(232, 1)), $mul.ref(0, 1)));
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 2381} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.41, $p24);
    call {:si_unique_call 2386} $i26 := devirtbounce.20(0, 80, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(232, 1)), $mul.ref(0, 1)), 1, $i25);
    call {:si_unique_call 2387} {:cexpr "__eax___0"} boogie_si_record_i64($i26);
    assume {:verifier.code 0} true;
    $i16 := $i26;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume $i23 == 1;
    call {:si_unique_call 2385} devirtbounce.6(0, .str.108, 451, 12);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call pte_val_loop_$bb10();
    goto $bb10_last;

  $bb1:
    assume 0 == 1;
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.3, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(232, 1)), $mul.ref(0, 1)));
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 2379} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.41, $p10);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.41, $p12);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i64($i13, 32);
    call {:si_unique_call 2383} $i15 := devirtbounce.19(0, 80, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(232, 1)), $mul.ref(0, 1)), 1, $i11, $i14);
    call {:si_unique_call 2384} {:cexpr "__eax"} boogie_si_record_i64($i15);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 2382} devirtbounce.6(0, .str.108, 448, 12);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call pte_val_loop_$bb5();
    goto $bb5_last;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto $bb5_dummy;
}



const pte_flags: ref;

axiom pte_flags == $sub.ref(0, 690081);

procedure pte_flags($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.42, $M.43, $CurrAddr;



implementation pte_flags($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, $p2, $i0);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.42, $p3);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} $i5 := native_pte_val($i4);
    call {:si_unique_call 2390} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, $sub.i64(0, 70368744173569));
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const native_pte_val: ref;

axiom native_pte_val == $sub.ref(0, 691113);

procedure native_pte_val($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.43, $CurrAddr;



implementation native_pte_val($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.43 := $store.i64($M.43, $p2, $i0);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.43, $p3);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pte_index: ref;

axiom pte_index == $sub.ref(0, 692145);

procedure pte_index($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation pte_index($i0: i64) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} {:cexpr "pte_index:arg:address"} boogie_si_record_i64($i0);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i64($i0, 12);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, 511);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pmd_page_vaddr: ref;

axiom pmd_page_vaddr == $sub.ref(0, 693177);

procedure pmd_page_vaddr($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.44, $M.45, $CurrAddr;



implementation pmd_page_vaddr($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.44 := $store.i64($M.44, $p2, $i0);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.44, $p3);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} $i5 := pmd_val($i4);
    call {:si_unique_call 2395} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 70368744173568);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, $sub.i64(0, 131941395333120));
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pmd_val: ref;

axiom pmd_val == $sub.ref(0, 694209);

procedure pmd_val($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.45, $CurrAddr;



implementation pmd_val($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.45 := $store.i64($M.45, $p2, $i0);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(0 == 1);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.3, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(272, 1)), $mul.ref(0, 1)));
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 2400} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.45, $p24);
    call {:si_unique_call 2405} $i26 := devirtbounce.20(0, 85, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(272, 1)), $mul.ref(0, 1)), 1, $i25);
    call {:si_unique_call 2406} {:cexpr "__eax___0"} boogie_si_record_i64($i26);
    assume {:verifier.code 0} true;
    $i16 := $i26;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume $i23 == 1;
    call {:si_unique_call 2404} devirtbounce.6(0, .str.108, 572, 12);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call pmd_val_loop_$bb10();
    goto $bb10_last;

  $bb1:
    assume 0 == 1;
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.3, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(272, 1)), $mul.ref(0, 1)));
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 2398} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.45, $p10);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.45, $p12);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i64($i13, 32);
    call {:si_unique_call 2402} $i15 := devirtbounce.19(0, 85, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(272, 1)), $mul.ref(0, 1)), 1, $i11, $i14);
    call {:si_unique_call 2403} {:cexpr "__eax"} boogie_si_record_i64($i15);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 2401} devirtbounce.6(0, .str.108, 569, 12);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call pmd_val_loop_$bb5();
    goto $bb5_last;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto $bb5_dummy;
}



const pmd_flags: ref;

axiom pmd_flags == $sub.ref(0, 695241);

procedure pmd_flags($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.46, $M.47, $CurrAddr;



implementation pmd_flags($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.46 := $store.i64($M.46, $p2, $i0);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.46, $p3);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} $i5 := native_pmd_val($i4);
    call {:si_unique_call 2409} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, $sub.i64(0, 70368744173569));
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const native_pmd_val: ref;

axiom native_pmd_val == $sub.ref(0, 696273);

procedure native_pmd_val($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.47, $CurrAddr;



implementation native_pmd_val($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.47 := $store.i64($M.47, $p2, $i0);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.47, $p3);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pmd_index: ref;

axiom pmd_index == $sub.ref(0, 697305);

procedure pmd_index($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation pmd_index($i0: i64) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} {:cexpr "pmd_index:arg:address"} boogie_si_record_i64($i0);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i64($i0, 21);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, 511);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pud_page_vaddr: ref;

axiom pud_page_vaddr == $sub.ref(0, 698337);

procedure pud_page_vaddr($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.48, $M.49, $CurrAddr;



implementation pud_page_vaddr($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.48 := $store.i64($M.48, $p2, $i0);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.48, $p3);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} $i5 := pud_val($i4);
    call {:si_unique_call 2414} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 70368744173568);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, $sub.i64(0, 131941395333120));
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pud_val: ref;

axiom pud_val == $sub.ref(0, 699369);

procedure pud_val($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.49, $CurrAddr;



implementation pud_val($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.49 := $store.i64($M.49, $p2, $i0);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(0 == 1);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.3, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(288, 1)), $mul.ref(0, 1)));
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 2419} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.49, $p24);
    call {:si_unique_call 2424} $i26 := devirtbounce.20(0, 87, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(288, 1)), $mul.ref(0, 1)), 1, $i25);
    call {:si_unique_call 2425} {:cexpr "__eax___0"} boogie_si_record_i64($i26);
    assume {:verifier.code 0} true;
    $i16 := $i26;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume $i23 == 1;
    call {:si_unique_call 2423} devirtbounce.6(0, .str.108, 612, 12);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call pud_val_loop_$bb10();
    goto $bb10_last;

  $bb1:
    assume 0 == 1;
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.3, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(288, 1)), $mul.ref(0, 1)));
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 2417} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.49, $p10);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.49, $p12);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i64($i13, 32);
    call {:si_unique_call 2421} $i15 := devirtbounce.19(0, 87, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(288, 1)), $mul.ref(0, 1)), 1, $i11, $i14);
    call {:si_unique_call 2422} {:cexpr "__eax"} boogie_si_record_i64($i15);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 2420} devirtbounce.6(0, .str.108, 609, 12);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call pud_val_loop_$bb5();
    goto $bb5_last;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto $bb5_dummy;
}



const native_pud_val: ref;

axiom native_pud_val == $sub.ref(0, 700401);

procedure native_pud_val($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.50, $CurrAddr;



implementation native_pud_val($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p2, $i0);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.50, $p3);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pud_index: ref;

axiom pud_index == $sub.ref(0, 701433);

procedure pud_index($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation pud_index($i0: i64) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} {:cexpr "pud_index:arg:address"} boogie_si_record_i64($i0);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i64($i0, 30);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, 511);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pgd_page_vaddr: ref;

axiom pgd_page_vaddr == $sub.ref(0, 702465);

procedure pgd_page_vaddr($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.51, $M.52, $CurrAddr;



implementation pgd_page_vaddr($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.51 := $store.i64($M.51, $p2, $i0);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.51, $p3);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} $i5 := pgd_val($i4);
    call {:si_unique_call 2430} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 70368744173568);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, $sub.i64(0, 131941395333120));
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pgd_val: ref;

axiom pgd_val == $sub.ref(0, 703497);

procedure pgd_val($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.52, $CurrAddr;



implementation pgd_val($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.52 := $store.i64($M.52, $p2, $i0);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(0 == 1);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.3, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(248, 1)), $mul.ref(0, 1)));
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 2435} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.52, $p24);
    call {:si_unique_call 2440} $i26 := devirtbounce.20(0, 82, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(248, 1)), $mul.ref(0, 1)), 1, $i25);
    call {:si_unique_call 2441} {:cexpr "__eax___0"} boogie_si_record_i64($i26);
    assume {:verifier.code 0} true;
    $i16 := $i26;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume $i23 == 1;
    call {:si_unique_call 2439} devirtbounce.6(0, .str.108, 479, 12);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call pgd_val_loop_$bb10();
    goto $bb10_last;

  $bb1:
    assume 0 == 1;
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.3, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(248, 1)), $mul.ref(0, 1)));
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 2433} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.52, $p10);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.52, $p12);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i64($i13, 32);
    call {:si_unique_call 2437} $i15 := devirtbounce.19(0, 82, $add.ref($add.ref($add.ref(pv_mmu_ops, $mul.ref(0, 344)), $mul.ref(248, 1)), $mul.ref(0, 1)), 1, $i11, $i14);
    call {:si_unique_call 2438} {:cexpr "__eax"} boogie_si_record_i64($i15);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 2436} devirtbounce.6(0, .str.108, 476, 12);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call pgd_val_loop_$bb5();
    goto $bb5_last;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto $bb5_dummy;
}



const native_pgd_val: ref;

axiom native_pgd_val == $sub.ref(0, 704529);

procedure native_pgd_val($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.53, $CurrAddr;



implementation native_pgd_val($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.53 := $store.i64($M.53, $p2, $i0);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.53, $p3);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const gru_flush_tlb_range: ref;

axiom gru_flush_tlb_range == $sub.ref(0, 705561);

procedure gru_flush_tlb_range($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_flush_tlb_range($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i11: i32;
  var $i12: i32;
  var $i10: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i64;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i35: i32;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i32;
  var $i48: i1;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i1;
  var $i83: i1;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $i87: i64;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i64;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i103: i32;
  var $p107: ref;
  var $i108: i16;
  var $i109: i32;
  var $i111: i32;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $i116: i16;
  var $i117: i32;
  var $i118: i16;
  var $i123: i64;
  var $i124: i64;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $p130: ref;
  var $i131: i16;
  var $i132: i64;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $i147: i32;
  var $p151: ref;
  var $i152: i16;
  var $i153: i32;
  var $p155: ref;
  var $i156: i64;
  var $i158: i32;
  var $i159: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i64;
  var $i164: i64;
  var $i165: i32;
  var $i166: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $p167: ref;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} {:cexpr "gru_flush_tlb_range:arg:start"} boogie_si_record_i64($i1);
    call {:si_unique_call 2444} {:cexpr "gru_flush_tlb_range:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64(12);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64(1, $i3);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 2445} {:cexpr "pagesize"} boogie_si_record_i32($i5);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32(12, 20);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32(12, 1);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $sub.i32(0, 6));
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i5);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, $i2);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64($i14, 1);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64(12);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i15, $i16);
    call {:si_unique_call 2446} {:cexpr "_min1"} boogie_si_record_i64($i17);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i18 := $ult.i64($i17, 1024);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i19 := 1024;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i20 := $M.1;
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 2);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $M.1;
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 1);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 25032)), $mul.ref(32, 1));
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} spin_lock($p43);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 25032)), $mul.ref(200, 1));
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} $i46 := find_first_bit($p45, 2048);
    call {:si_unique_call 2460} {:cexpr "tmp"} boogie_si_record_i64($i46);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    call {:si_unique_call 2461} {:cexpr "gid"} boogie_si_record_i32($i47);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i48 := $sle.i32($i47, 2047);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 25032)), $mul.ref(32, 1));
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} spin_unlock($p167);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    return;

  $bb35:
    assume $i48 == 1;
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i49, $i50, $i51 := $u0, $u0, $i47;
    goto $bb38;

  $bb38:
    call $i52, $i53, $i54, $i55, $i56, $p57, $p58, $i59, $i60, $i61, $i62, $p63, $p64, $p65, $p66, $i67, $i68, $p69, $p70, $p71, $p72, $i73, $p75, $p76, $i77, $i78, $p79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i104, $i105, $i106, $i103, $p107, $i108, $i109, $i111, $p112, $i113, $i114, $p115, $i116, $i117, $i118, $i123, $i124, $i125, $p126, $p127, $i128, $i129, $p130, $i131, $i132, $p133, $p134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i148, $i149, $i150, $i147, $p151, $i152, $i153, $p155, $i156, $i158, $i159, $i120, $i121, $i122, $p160, $p161, $i162, $i163, $i164, $i165, $i166, $i49, $i50, $i51, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152 := gru_flush_tlb_range_loop_$bb38($p0, $i1, $i10, $i19, $i52, $i53, $i54, $i55, $i56, $p57, $p58, $i59, $i60, $i61, $i62, $p63, $p64, $p65, $p66, $i67, $i68, $p69, $p70, $p71, $p72, $i73, $p75, $p76, $i77, $i78, $p79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i104, $i105, $i106, $i103, $p107, $i108, $i109, $i111, $p112, $i113, $i114, $p115, $i116, $i117, $i118, $i123, $i124, $i125, $p126, $p127, $i128, $i129, $p130, $i131, $i132, $p133, $p134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i148, $i149, $i150, $i147, $p151, $i152, $i153, $p155, $i156, $i158, $i159, $i120, $i121, $i122, $p160, $p161, $i162, $i163, $i164, $i165, $i166, $i49, $i50, $i51, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152);
    goto $bb38_last;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i52 := $M.1;
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 2);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i55 := $sdiv.i32($i51, 2);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i56, 8));
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.4, $p57);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i60 == 1);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $p70 := $0.ref;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 25032)), $mul.ref(456, 1));
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i51);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p72, $mul.ref($i73, 12)), $mul.ref(4, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i77, 16777215);
    call {:si_unique_call 2463} {:cexpr "asid"} boogie_si_record_i32($i78);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p72, $mul.ref($i73, 12)), $mul.ref(8, 1));
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i123 := $M.1;
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $i124 := $and.i64($i123, 2);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, 0);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p72, $mul.ref($i73, 12)), $mul.ref(4, 1));
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, $sub.i32(0, 16777216));
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, $i129);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p70, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i131 := $load.i16($M.0, $p130);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i64($i131);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 25032)), $mul.ref(200, 1));
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} __clear_bit($i132, $p134);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i135 := $M.1;
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i64.i32($i135);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 1);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    $i158, $i159 := $i51, $i49;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i120, $i121, $i122 := $i158, $i50, $i159;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 25032)), $mul.ref(200, 1));
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i120, 1);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i163 := $sext.i32.i64($i162);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} $i164 := find_next_bit($p161, 2048, $i163);
    call {:si_unique_call 2480} {:cexpr "tmp___0"} boogie_si_record_i64($i164);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i64.i32($i164);
    call {:si_unique_call 2481} {:cexpr "gid"} boogie_si_record_i32($i165);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i166 := $sle.i32($i165, 2047);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i166 == 1);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb108:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    $i49, $i50, $i51 := $i122, $i121, $i165;
    goto $bb108_dummy;

  $bb83:
    assume $i138 == 1;
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i139 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    $i140 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    $i141 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} __bad_size_call_parameter();
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $i147 := $i49;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p72, $mul.ref($i73, 12)), $mul.ref(8, 1));
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i152 := $load.i16($M.0, $p151);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i153 := $zext.i16.i32($i152);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 25032)), $mul.ref(200, 1)), $mul.ref(0, 8));
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i156 := $load.i64($M.0, $p155);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2492} vslice_dummy_var_152 := printk.ref.i32.ref.i32.i32.i32.i64(.str.36, $i147, .str.34, $i51, $i78, $i153, $i156);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $i158, $i159 := $i51, $i147;
    goto $bb107;

  $bb90:
    assume $i141 == 1;
    call {:si_unique_call 2484} $i150 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2485} {:cexpr "pfo_ret_____10"} boogie_si_record_i32($i150);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i147 := $i150;
    goto $bb102;

  $bb88:
    assume $i140 == 1;
    assume {:verifier.code 0} true;
    $i142 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb92;

  $bb93:
    assume $i142 == 1;
    call {:si_unique_call 2486} $i149 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2487} {:cexpr "pfo_ret_____9"} boogie_si_record_i32($i149);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i147 := $i149;
    goto $bb102;

  $bb86:
    assume $i139 == 1;
    assume {:verifier.code 0} true;
    $i143 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    $i144 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb92;

  $bb97:
    assume $i144 == 1;
    call {:si_unique_call 2488} $i148 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2489} {:cexpr "pfo_ret_____8"} boogie_si_record_i32($i148);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i147 := $i148;
    goto $bb102;

  $bb95:
    assume $i143 == 1;
    assume {:verifier.code 0} true;
    $i145 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb92;

  $bb99:
    assume $i145 == 1;
    call {:si_unique_call 2490} $i146 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2491} {:cexpr "pfo_ret_____7"} boogie_si_record_i32($i146);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i147 := $i146;
    goto $bb102;

  $bb80:
    assume $i125 == 1;
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(400, 1)));
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb46:
    assume $i82 == 1;
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i78, 0);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb48;

  $bb49:
    assume $i83 == 1;
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i84 := $M.1;
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, 2);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i87 := $lshr.i64($i1, 61);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i64.i32($i87);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 3);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, $i78);
    call {:si_unique_call 2465} {:cexpr "asid"} boogie_si_record_i32($i90);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i91 := $M.1;
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i64.i32($i91);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 1);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i111 := $i50;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} $p112 := get_lock_tgh_handle($p70);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i64.i32($i19);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $i114 := $sub.i32($i113, 1);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p72, $mul.ref($i73, 12)), $mul.ref(8, 1));
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $i116 := $load.i16($M.0, $p115);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i116);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i16($i117);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} vslice_dummy_var_151 := tgh_invalidate($p112, $i1, $sub.i64(0, 1), $i90, $i10, 0, $i114, $i118);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} get_unlock_tgh_handle($p112);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $i120, $i121, $i122 := $i51, $i111, $i49;
    goto $bb79;

  $bb54:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i95 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} __bad_size_call_parameter();
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $i103 := $i50;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p72, $mul.ref($i73, 12)), $mul.ref(8, 1));
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p107);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} vslice_dummy_var_150 := printk.ref.i32.ref.i32.i32.i64.i32.i64.i32(.str.35, $i103, .str.34, $i51, $i90, $i1, $i10, $i19, $i109);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $i111 := $i103;
    goto $bb78;

  $bb61:
    assume $i97 == 1;
    call {:si_unique_call 2466} $i106 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2467} {:cexpr "pfo_ret_____6"} boogie_si_record_i32($i106);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i103 := $i106;
    goto $bb73;

  $bb59:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i98 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb63;

  $bb64:
    assume $i98 == 1;
    call {:si_unique_call 2468} $i105 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2469} {:cexpr "pfo_ret_____5"} boogie_si_record_i32($i105);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i103 := $i105;
    goto $bb73;

  $bb57:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i99 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb63;

  $bb68:
    assume $i100 == 1;
    call {:si_unique_call 2470} $i104 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2471} {:cexpr "pfo_ret_____4"} boogie_si_record_i32($i104);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i103 := $i104;
    goto $bb73;

  $bb66:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i101 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb63;

  $bb70:
    assume $i101 == 1;
    call {:si_unique_call 2472} $i102 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2473} {:cexpr "pfo_ret_____3"} boogie_si_record_i32($i102);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i103 := $i102;
    goto $bb73;

  $bb51:
    assume $i86 == 1;
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(392, 1)));
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb43:
    assume $i60 == 1;
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i61 := $sdiv.i32($i51, 2);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i62, 8));
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.4, $p63);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $i67 := $srem.i32($i51, 2);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p66, $mul.ref($i68, 424));
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $p70 := $p69;
    goto $bb45;

  $bb40:
    assume $i54 == 1;
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(384, 1)));
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i27 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} __bad_size_call_parameter();
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i35 := $u0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 25032)), $mul.ref(200, 1)), $mul.ref(0, 8));
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} vslice_dummy_var_149 := printk.ref.i32.ref.ref.i64.i64.i64(.str.33, $i35, .str.34, $p0, $i1, $i2, $i41);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb17:
    assume $i29 == 1;
    call {:si_unique_call 2448} $i38 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2449} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i38);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i35 := $i38;
    goto $bb29;

  $bb15:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb19;

  $bb20:
    assume $i30 == 1;
    call {:si_unique_call 2450} $i37 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2451} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i37);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i35 := $i37;
    goto $bb29;

  $bb13:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb19;

  $bb24:
    assume $i32 == 1;
    call {:si_unique_call 2452} $i36 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2453} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i36);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i35 := $i36;
    goto $bb29;

  $bb22:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb19;

  $bb26:
    assume $i33 == 1;
    call {:si_unique_call 2454} $i34 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2455} {:cexpr "pfo_ret__"} boogie_si_record_i32($i34);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb29;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(376, 1)));
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i7 := $add.i32(12, 2);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i8 := $ashr.i32($i7, 1);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $sub.i32(0, 6));
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;

  $bb108_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8786;
}



const gru_unload_all_contexts: ref;

axiom gru_unload_all_contexts == $sub.ref(0, 706593);

procedure gru_unload_all_contexts() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, assertsPassed, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_unload_all_contexts() returns ($r: i32)
{
  var $i0: i1;
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i26: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i8: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} $i0 := capable(21);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $i1 := $zext.i1.i8($i0);
    call {:si_unique_call 2496} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.22;
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32(0, $i6);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb11;

  $bb11:
    call $i9, $i10, $p11, $p12, $i13, $i14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i27, $p29, $p30, $i31, $i32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40, $i26, $p41, $i42, $i43, $i44, $i8 := gru_unload_all_contexts_loop_$bb11($i9, $i10, $p11, $p12, $i13, $i14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i27, $p29, $p30, $i31, $i32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40, $i26, $p41, $i42, $i43, $i44, $i8);
    goto $bb11_last;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $sdiv.i32($i8, 2);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i10, 8));
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.4, $p11);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i14 == 1);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} spin_lock($p25);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb16;

  $bb16:
    call $i27, $p29, $p30, $i31, $i32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40, $i26 := gru_unload_all_contexts_loop_$bb16($p24, $i27, $p29, $p30, $i31, $i32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40, $i26);
    goto $bb16_last;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref($i27, 8));
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i26, 1);
    call {:si_unique_call 2504} {:cexpr "ctxnum"} boogie_si_record_i32($i39);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $i40 := $sle.i32($i39, 15);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p24, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} spin_unlock($p41);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i8, 1);
    call {:si_unique_call 2506} {:cexpr "gid"} boogie_si_record_i32($i42);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i43 := $M.22;
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i44 := $ult.i32($i42, $i43);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i44 == 1);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb27:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i42;
    goto $bb27_dummy;

  $bb24:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i26 := $i39;
    goto $bb24_dummy;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} $i34 := ldv_mutex_trylock_71($p33);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 2499} {:cexpr "tmp___1"} boogie_si_record_i32($i34);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p24, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} spin_unlock($p36);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} gru_unload_context($p30, 1);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} ldv_mutex_unlock_72($p37);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p24, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} spin_lock($p38);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $i15 := $sdiv.i32($i8, 2);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i16, 8));
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.4, $p17);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i21 := $srem.i32($i8, 2);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p20, $mul.ref($i22, 424));
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $p24 := $p23;
    goto $bb15;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb24_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8976;

  $bb27_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8950;
}



const capable: ref;

axiom capable == $sub.ref(0, 707625);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2507} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2508} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 2509} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_trylock_71: ref;

axiom ldv_mutex_trylock_71 == $sub.ref(0, 708657);

procedure ldv_mutex_trylock_71($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_trylock_71($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} $i1 := mutex_trylock($p0);
    call {:si_unique_call 2511} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} $i2 := ldv_mutex_trylock_ts_ctxlock_of_gru_thread_state($p0);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    call {:si_unique_call 2513} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_72: ref;

axiom ldv_mutex_unlock_72 == $sub.ref(0, 709689);

procedure ldv_mutex_unlock_72($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_72($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} ldv_mutex_unlock_ts_ctxlock_of_gru_thread_state($p0);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} mutex_unlock($p0);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const gru_alloc_locked_gts: ref;

axiom gru_alloc_locked_gts == $sub.ref(0, 710721);

procedure gru_alloc_locked_gts($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, assertsPassed, $CurrAddr;



implementation gru_alloc_locked_gts($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p10: ref;
  var $p24: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} {:cexpr "gru_alloc_locked_gts:arg:vaddr"} boogie_si_record_i64($i0);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} $p1 := get_current();
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 11712)), $mul.ref(1968, 1));
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} $p4 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2296)), $mul.ref(176, 1));
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} down_write($p6);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} $p7 := gru_find_vma($i0);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64($i0, $i12);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i64($i13, 262144);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} $p16 := gru_alloc_thread_state($p7, $i15);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} $i18 := IS_ERR($p17);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 2524} {:cexpr "tmp___1"} boogie_si_record_i8($i19);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} ldv_mutex_lock_69($p21);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 2296)), $mul.ref(176, 1));
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} downgrade_write($p22);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $p23 := $p16;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p10 := $p16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 2296)), $mul.ref(176, 1));
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} up_write($p24);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $p23 := $p10;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $p10 := $p4;
    goto $bb3;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 711753);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 2528} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 712785);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gru_alloc_thread_state: ref;

axiom gru_alloc_thread_state == $sub.ref(0, 713817);

procedure gru_alloc_thread_state($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_alloc_thread_state($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p29: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i45: i32;
  var $p21: ref;
  var vslice_dummy_var_153: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} {:cexpr "gru_alloc_thread_state:arg:tsid"} boogie_si_record_i32($i1);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(100, 1));
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} $p16 := gru_alloc_gts($p0, $i6, $i8, $i12, $i15, $i1);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} $i18 := IS_ERR($p17);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 2532} {:cexpr "tmp"} boogie_si_record_i8($i19);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} spin_lock($p22);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} $p23 := gru_find_current_gts_nolock($p4, $i1);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p16, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} list_add($p30, $p31);
    assume {:verifier.code 0} true;
    $p29 := $p16;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} spin_unlock($p32);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $i33 := $M.1;
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i64.i32($i33);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 1);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p21 := $p29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $r := $p21;
    return;

  $bb11:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i37 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} __bad_size_call_parameter();
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i45 := $u0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} vslice_dummy_var_153 := printk.ref.i32.ref.ref.ref(.str.6, $i45, .str.8, $p0, $p29);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb18:
    assume $i39 == 1;
    call {:si_unique_call 2539} $i48 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2540} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i48);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i45 := $i48;
    goto $bb30;

  $bb16:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb20;

  $bb21:
    assume $i40 == 1;
    call {:si_unique_call 2541} $i47 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2542} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i47);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i45 := $i47;
    goto $bb30;

  $bb14:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i41 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb20;

  $bb25:
    assume $i42 == 1;
    call {:si_unique_call 2543} $i46 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2544} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i46);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i45 := $i46;
    goto $bb30;

  $bb23:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i43 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb20;

  $bb27:
    assume $i43 == 1;
    call {:si_unique_call 2545} $i44 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2546} {:cexpr "pfo_ret__"} boogie_si_record_i32($i44);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb30;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} gts_drop($p16);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i26 := $M.1;
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 2);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $p23;
    goto $bb10;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(48, 1)));
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $p21 := $p16;
    goto $bb3;
}



const ldv_mutex_lock_69: ref;

axiom ldv_mutex_lock_69 == $sub.ref(0, 714849);

procedure ldv_mutex_lock_69($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_69($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} ldv_mutex_lock_ts_ctxlock_of_gru_thread_state($p0);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} mutex_lock($p0);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 715881);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} __list_add($p0, $p1, $p3);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 716913);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    return;
}



const gru_release: ref;

axiom gru_release == $sub.ref(0, 717945);

procedure gru_release($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_release($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i16: i32;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 25032)), $mul.ref(108, 1));
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 1);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i8 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} __bad_size_call_parameter();
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i16 := $u0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} vslice_dummy_var_154 := printk.ref.i32.ref.ref(.str.116, $i16, .str.117, $p2);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i10 == 1;
    call {:si_unique_call 2552} $i19 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2553} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i19);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i16 := $i19;
    goto $bb20;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb11:
    assume $i11 == 1;
    call {:si_unique_call 2554} $i18 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2555} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i18);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i16 := $i18;
    goto $bb20;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb15:
    assume $i13 == 1;
    call {:si_unique_call 2556} $i17 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2557} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i17);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i16 := $i17;
    goto $bb20;

  $bb13:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb17:
    assume $i14 == 1;
    call {:si_unique_call 2558} $i15 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2559} {:cexpr "pfo_ret__"} boogie_si_record_i32($i15);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb20;
}



const gru_invalidate_page: ref;

axiom gru_invalidate_page == $sub.ref(0, 718977);

procedure gru_invalidate_page($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_invalidate_page($p0: ref, $p1: ref, $i2: i64)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i19: i32;
  var vslice_dummy_var_155: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} {:cexpr "gru_invalidate_page:arg:address"} boogie_si_record_i64($i2);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 2);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} gru_flush_tlb_range($p3, $i2, 4096);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $i7 := $M.1;
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} __bad_size_call_parameter();
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i19 := $u0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} vslice_dummy_var_155 := printk.ref.i32.ref.ref.i64(.str.122, $i19, .str.123, $p3, $i2);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb11:
    assume $i13 == 1;
    call {:si_unique_call 2565} $i22 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2566} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i22);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i19 := $i22;
    goto $bb23;

  $bb9:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb13;

  $bb14:
    assume $i14 == 1;
    call {:si_unique_call 2567} $i21 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2568} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i21);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i19 := $i21;
    goto $bb23;

  $bb7:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb13;

  $bb18:
    assume $i16 == 1;
    call {:si_unique_call 2569} $i20 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2570} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i20);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb23;

  $bb16:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb13;

  $bb20:
    assume $i17 == 1;
    call {:si_unique_call 2571} $i18 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2572} {:cexpr "pfo_ret__"} boogie_si_record_i32($i18);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb23;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(368, 1)));
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_invalidate_range_start: ref;

axiom gru_invalidate_range_start == $sub.ref(0, 720009);

procedure gru_invalidate_range_start($p0: ref, $p1: ref, $i2: i64, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gru_invalidate_range_start($p0: ref, $p1: ref, $i2: i64, $i3: i64)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i23: i32;
  var $i28: i64;
  var vslice_dummy_var_156: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} {:cexpr "gru_invalidate_range_start:arg:start"} boogie_si_record_i64($i2);
    call {:si_unique_call 2576} {:cexpr "gru_invalidate_range_start:arg:end"} boogie_si_record_i64($i3);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 2);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 25032)), $mul.ref(104, 1));
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} atomic_inc($p8);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i9 := $M.1;
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64($i3, $i2);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} gru_flush_tlb_range($p4, $i2, $i28);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 25032)), $mul.ref(104, 1));
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} $i14 := atomic_read($p13);
    call {:si_unique_call 2580} {:cexpr "tmp"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i15 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} __bad_size_call_parameter();
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i23 := $u0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} vslice_dummy_var_156 := printk.ref.i32.ref.ref.i64.i64.i32(.str.118, $i23, .str.119, $p4, $i2, $i3, $i14);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb11:
    assume $i17 == 1;
    call {:si_unique_call 2581} $i26 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2582} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i26);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i23 := $i26;
    goto $bb23;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb14:
    assume $i18 == 1;
    call {:si_unique_call 2583} $i25 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2584} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i25);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i23 := $i25;
    goto $bb23;

  $bb7:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb13;

  $bb18:
    assume $i20 == 1;
    call {:si_unique_call 2585} $i24 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2586} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i24);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i23 := $i24;
    goto $bb23;

  $bb16:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb13;

  $bb20:
    assume $i21 == 1;
    call {:si_unique_call 2587} $i22 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2588} {:cexpr "pfo_ret__"} boogie_si_record_i32($i22);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb23;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(360, 1)));
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_invalidate_range_end: ref;

axiom gru_invalidate_range_end == $sub.ref(0, 721041);

procedure gru_invalidate_range_end($p0: ref, $p1: ref, $i2: i64, $i3: i64);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation gru_invalidate_range_end($p0: ref, $p1: ref, $i2: i64, $i3: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i20: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} {:cexpr "gru_invalidate_range_end:arg:start"} boogie_si_record_i64($i2);
    call {:si_unique_call 2593} {:cexpr "gru_invalidate_range_end:arg:end"} boogie_si_record_i64($i3);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 25032)), $mul.ref(104, 1));
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} vslice_dummy_var_157 := atomic_dec_and_test($p5);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 25032)), $mul.ref(112, 1));
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} __wake_up($p7, 3, 0, $0.ref);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i8 := $M.1;
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} __bad_size_call_parameter();
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i20 := $u0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} vslice_dummy_var_158 := printk.ref.i32.ref.ref.i64.i64(.str.120, $i20, .str.121, $p4, $i2, $i3);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i14 == 1;
    call {:si_unique_call 2596} $i23 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2597} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i23);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb20;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb11:
    assume $i15 == 1;
    call {:si_unique_call 2598} $i22 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2599} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i22);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb20;

  $bb4:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb15:
    assume $i17 == 1;
    call {:si_unique_call 2600} $i21 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2601} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i21);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb20;

  $bb13:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb17:
    assume $i18 == 1;
    call {:si_unique_call 2602} $i19 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2603} {:cexpr "pfo_ret__"} boogie_si_record_i32($i19);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb20;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 722073);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 2607} devirtbounce.21(0, $p2, $p1, $p2);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.54, $p1);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 723105);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2609} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    return;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 724137);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2610} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2611} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2612} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 2613} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 725169);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2614} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2615} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 2616} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const statistics_write: ref;

axiom statistics_write == $sub.ref(0, 726201);

procedure statistics_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation statistics_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} {:cexpr "statistics_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_79 := $M.0;
    call {:si_unique_call 2618} cmdloc_dummy_var_80 := $memset.i8(cmdloc_dummy_var_79, gru_stats, 0, 592, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_80;
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const statistics_open: ref;

axiom statistics_open == $sub.ref(0, 727233);

procedure statistics_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation statistics_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} $i2 := single_open($p1, statistics_show, $0.ref);
    call {:si_unique_call 2620} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 728265);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2621} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2622} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const statistics_show: ref;

axiom statistics_show == $sub.ref(0, 729297);

procedure statistics_show($p0: ref, $p1: ref) returns ($r: i32);



const single_open: ref;

axiom single_open == $sub.ref(0, 730329);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2623} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2624} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const printstat_val: ref;

axiom printstat_val == $sub.ref(0, 731361);

procedure printstat_val($p0: ref, $p1: ref, $p2: ref);



const atomic_long_read: ref;

axiom atomic_long_read == $sub.ref(0, 732393);

procedure atomic_long_read($p0: ref) returns ($r: i64);



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 733425);

procedure seq_printf.ref.ref.ref.i64.i64.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i64, p.5: i64) returns ($r: i32);



procedure seq_printf.ref.ref.i32.i32.i32.i32.i32.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32.i32.i32.i32.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2625} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2626} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: ref, p.7: ref, p.8: ref, p.9: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: ref, p.7: ref, p.8: ref, p.9: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2627} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.i32.i64.i64.i64.i64.i64.i64($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i64, p.5: i64, p.6: i64, p.7: i64, p.8: i64, p.9: i64) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32.i64.i64.i64.i64.i64.i64($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i64, p.5: i64, p.6: i64, p.7: i64, p.8: i64, p.9: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2629} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2630} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);



procedure seq_printf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



procedure seq_printf.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: i32);



procedure seq_printf.ref.ref.i64.ref($p0: ref, $p1: ref, p.2: i64, p.3: ref) returns ($r: i32);



const atomic64_read: ref;

axiom atomic64_read == $sub.ref(0, 734457);

procedure atomic64_read($p0: ref) returns ($r: i64);



const mcs_statistics_write: ref;

axiom mcs_statistics_write == $sub.ref(0, 735489);

procedure mcs_statistics_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation mcs_statistics_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} {:cexpr "mcs_statistics_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_81 := $M.0;
    call {:si_unique_call 2632} cmdloc_dummy_var_82 := $memset.i8(cmdloc_dummy_var_81, mcs_op_statistics, 0, 192, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_82;
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mcs_statistics_open: ref;

axiom mcs_statistics_open == $sub.ref(0, 736521);

procedure mcs_statistics_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mcs_statistics_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} $i2 := single_open($p1, mcs_statistics_show, $0.ref);
    call {:si_unique_call 2634} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mcs_statistics_show: ref;

axiom mcs_statistics_show == $sub.ref(0, 737553);

procedure mcs_statistics_show($p0: ref, $p1: ref) returns ($r: i32);



const options_write: ref;

axiom options_write == $sub.ref(0, 738585);

procedure options_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation options_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} {:cexpr "options_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} $i4 := kstrtoul_from_user($p1, $i2, 0, gru_options);
    call {:si_unique_call 2637} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const options_open: ref;

axiom options_open == $sub.ref(0, 739617);

procedure options_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation options_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} $i2 := single_open($p1, options_show, $0.ref);
    call {:si_unique_call 2639} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const options_show: ref;

axiom options_show == $sub.ref(0, 740649);

procedure options_show($p0: ref, $p1: ref) returns ($r: i32);



const kstrtoul_from_user: ref;

axiom kstrtoul_from_user == $sub.ref(0, 741681);

procedure kstrtoul_from_user($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoul_from_user($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2640} {:cexpr "kstrtoul_from_user:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2641} {:cexpr "kstrtoul_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2642} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2643} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const cch_open: ref;

axiom cch_open == $sub.ref(0, 742713);

procedure cch_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.56, $M.57, $M.0, $CurrAddr;



implementation cch_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} $i2 := ldv_seq_open_114($p1, cch_seq_ops);
    call {:si_unique_call 2645} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_release: ref;

axiom seq_release == $sub.ref(0, 743745);

procedure seq_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2646} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2647} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_seq_open_114: ref;

axiom ldv_seq_open_114 == $sub.ref(0, 744777);

procedure ldv_seq_open_114($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.56, $M.57, $M.0, $CurrAddr;



implementation ldv_seq_open_114($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} $i2 := seq_open($p0, $p1);
    call {:si_unique_call 2649} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2650} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} ldv_seq_operations_6();
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const seq_open: ref;

axiom seq_open == $sub.ref(0, 745809);

procedure seq_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2652} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2653} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_seq_operations_6: ref;

axiom ldv_seq_operations_6 == $sub.ref(0, 746841);

procedure ldv_seq_operations_6();
  free requires assertsPassed;
  modifies $M.57, $M.0, $CurrAddr;



implementation ldv_seq_operations_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} $p0 := ldv_init_zalloc(256);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $M.57 := $p0;
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 747873);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} $p1 := calloc(1, $i0);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2657} __VERIFIER_assume($i4);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const gru_open: ref;

axiom gru_open == $sub.ref(0, 748905);

procedure gru_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.56, $M.57, $M.0, $CurrAddr;



implementation gru_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} $i2 := ldv_seq_open_115($p1, gru_seq_ops);
    call {:si_unique_call 2659} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_seq_open_115: ref;

axiom ldv_seq_open_115 == $sub.ref(0, 749937);

procedure ldv_seq_open_115($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.56, $M.57, $M.0, $CurrAddr;



implementation ldv_seq_open_115($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} $i2 := seq_open($p0, $p1);
    call {:si_unique_call 2661} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2662} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} ldv_seq_operations_6();
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const seq_start: ref;

axiom seq_start == $sub.ref(0, 750969);

procedure seq_start($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation seq_start($p0: ref, $p1: ref) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i32;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.58, $p1);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $i3 := $M.22;
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i5 := $slt.i64($i2, $i4);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $p7 := $p1;
    goto $bb3;
}



const seq_stop: ref;

axiom seq_stop == $sub.ref(0, 752001);

procedure seq_stop($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation seq_stop($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    return;
}



const seq_next: ref;

axiom seq_next == $sub.ref(0, 753033);

procedure seq_next($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.58;



implementation seq_next($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.58, $p2);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 1);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, $p2, $i4);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.58, $p2);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $i6 := $M.22;
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $i8 := $slt.i64($i5, $i7);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $p10 := $p2;
    goto $bb3;
}



const gru_seq_show: ref;

axiom gru_seq_show == $sub.ref(0, 754065);

procedure gru_seq_show($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gru_seq_show($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.58, $p2);
    call {:si_unique_call 2664} {:cexpr "gid"} boogie_si_record_i64($i3);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i4 := $sdiv.i64($i3, 2);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i4, 8));
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.4, $p5);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i3, 0);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p16);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p16, $mul.ref(0, 424)), $mul.ref(224, 1));
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(16, $i24);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    call {:si_unique_call 2667} {:cexpr "ctxfree"} boogie_si_record_i64($i26);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref(0, 424)), $mul.ref(200, 1));
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} $i29 := __arch_hweight64($i28);
    call {:si_unique_call 2669} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $i30 := $mul.i64($i29, 2);
    call {:si_unique_call 2670} {:cexpr "cbrfree"} boogie_si_record_i64($i30);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p16, $mul.ref(0, 424)), $mul.ref(208, 1));
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} $i33 := __arch_hweight64($i32);
    call {:si_unique_call 2672} {:cexpr "tmp___0"} boogie_si_record_i64($i33);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i34 := $mul.i64($i33, 1024);
    call {:si_unique_call 2673} {:cexpr "dsrfree"} boogie_si_record_i64($i34);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p16, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p16, $mul.ref(0, 424)), $mul.ref(26, 1));
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i41 := $sub.i64(16, $i26);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $i42 := $sub.i64(128, $i30);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $i43 := $sub.i64(32768, $i34);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} vslice_dummy_var_161 := seq_printf.ref.ref.i32.i32.i64.i64.i64.i64.i64.i64($p0, .str.142, $i37, $i40, $i41, $i42, $i43, $i26, $i30, $i34);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} vslice_dummy_var_159 := seq_printf.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0, .str.134, .str.135, .str.136, .str.137, .str.138, .str.139, .str.137, .str.138, .str.139);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} vslice_dummy_var_160 := seq_printf.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0, .str.134, .str.20, .str.20, .str.140, .str.140, .str.140, .str.141, .str.141, .str.141);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $i9 := $sdiv.i64($i3, 2);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i9, 8));
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.4, $p10);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $i14 := $srem.i64($i3, 2);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 424));
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $p16 := $p15;
    goto $bb3;
}



const cch_seq_show: ref;

axiom cch_seq_show == $sub.ref(0, 755097);

procedure cch_seq_show($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.59, $CurrAddr;



implementation cch_seq_show($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i24: i64;
  var $i25: i1;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $i33: i32;
  var $i70: i32;
  var $i71: i1;
  var $i26: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.58, $p3);
    call {:si_unique_call 2676} {:cexpr "gid"} boogie_si_record_i64($i4);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $i5 := $sdiv.i64($i4, 2);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i5, 8));
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.4, $p6);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $M.59 := $store.ref($M.59, $p18, .str.159);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 8));
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $M.59 := $store.ref($M.59, $p19, .str.160);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 8));
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $M.59 := $store.ref($M.59, $p20, .str.161);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 8));
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $M.59 := $store.ref($M.59, $p21, .str.162);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i4, 0);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p17);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb9;

  $bb9:
    call $i27, $p29, $p30, $i31, $i32, $i34, $i35, $p36, $i37, $i38, $p39, $i40, $i41, $i42, $p43, $p44, $p47, $p48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $p56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $p64, $i65, $i66, $p67, $p68, $i33, $i70, $i71, $i26, vslice_dummy_var_163 := cch_seq_show_loop_$bb9($p0, $p2, $i4, $p17, $i27, $p29, $p30, $i31, $i32, $i34, $i35, $p36, $i37, $i38, $p39, $i40, $i41, $i42, $p43, $p44, $p47, $p48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $p56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $p64, $i65, $i66, $p67, $p68, $i33, $i70, $i71, $i26, vslice_dummy_var_163);
    goto $bb9_last;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref($i27, 8));
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} $i34 := is_kernel_context($p30);
    call {:si_unique_call 2680} {:cexpr "tmp"} boogie_si_record_i32($i34);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} $i35 := is_kernel_context($p30);
    call {:si_unique_call 2682} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p17, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p17, $mul.ref(0, 424)), $mul.ref(26, 1));
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i35, 0);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i34, 0);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i52 == 1);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i58, 2);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i63 := $mul.i32($i62, 1024);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 3);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i66, 8));
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.59, $p67);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} vslice_dummy_var_163 := seq_printf.ref.ref.i32.i32.i32.i32.i32.i32.i32.ref($p0, .str.171, $i38, $i41, $i26, $i51, $i55, $i59, $i63, $p68);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i33 := $i26;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i33, 1);
    call {:si_unique_call 2678} {:cexpr "i"} boogie_si_record_i32($i70);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i71 := $sle.i32($i70, 15);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i26 := $i70;
    goto $bb21_dummy;

  $bb18:
    assume $i52 == 1;
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(248, 1));
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb20;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p30, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p44, $mul.ref(0, 25032)), $mul.ref(456, 1)), $mul.ref($i4, 12)), $mul.ref(4, 1));
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 16777215);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb17;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i33 := $i26;
    goto $bb13;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} vslice_dummy_var_162 := seq_printf.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0, .str.163, .str.135, .str.164, .str.165, .str.166, .str.167, .str.168, .str.169, .str.170);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i10 := $sdiv.i64($i4, 2);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i10, 8));
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.4, $p11);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $i15 := $srem.i64($i4, 2);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p14, $mul.ref($i15, 424));
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $p17 := $p16;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9468;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 756129);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_12: ref;

axiom ldv_mutex_lock_12 == $sub.ref(0, 757161);

procedure ldv_mutex_lock_12($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} ldv_mutex_lock_ts_ctxlock_of_gru_thread_state($p0);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} mutex_lock($p0);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_13: ref;

axiom ldv_mutex_unlock_13 == $sub.ref(0, 758193);

procedure ldv_mutex_unlock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} ldv_mutex_unlock_ts_ctxlock_of_gru_thread_state($p0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} mutex_unlock($p0);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 759225);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 2688} $r := $malloc($i0);
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 760257);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.60;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 2690} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_83 := $M.60;
    call {:si_unique_call 2691} cmdloc_dummy_var_84 := $memset.i8(cmdloc_dummy_var_83, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.60 := cmdloc_dummy_var_84;
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_initialize_vm_operations_struct_9: ref;

axiom ldv_initialize_vm_operations_struct_9 == $sub.ref(0, 761289);

procedure ldv_initialize_vm_operations_struct_9();
  free requires assertsPassed;
  modifies $M.61, $M.0, $CurrAddr;



implementation ldv_initialize_vm_operations_struct_9()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} $p0 := ldv_init_zalloc(184);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $M.61 := $p0;
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 762321);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.60, $M.56, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.0, $M.2, $M.73, $M.61, $M.75, $M.6, $M.104, $M.103, $M.102, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.106, $M.110, $M.111, $M.107, $M.151, $M.20, $M.21, $M.97, $M.87, $M.94, $M.77, $M.85, $M.90, $M.79, $M.82, $M.101, $M.105, $M.1, $M.22, $M.98, $M.32, $M.31, $M.4, $M.91, $M.99, $M.81, $M.76, $M.83, $M.84, $M.57, $M.80, $M.100, $M.74, $M.96, $M.88, $M.86, $M.89, $M.92, $M.78, $M.95, $M.93, $M.202, $M.203, $M.204, $CurrAddr, $M.58, $M.59, $M.5, $M.3, assertsPassed, $M.10, $M.9, $M.23, $M.24, $M.25, $M.8, $M.26, $M.27, $M.108, $M.11, $M.28, $M.14, $M.15, $M.12, $M.16, $M.17, $M.29, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.53, $M.51, $M.50, $M.48, $M.47, $M.46, $M.44, $M.42, $M.41, $M.52, $M.49, $M.45, $M.43;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i103: i64;
  var $i104: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i32;
  var $i110: i64;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var vslice_dummy_var_164: ref;
  var vslice_dummy_var_165: ref;
  var vslice_dummy_var_166: ref;
  var vslice_dummy_var_167: ref;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i64;
  var vslice_dummy_var_174: i64;
  var vslice_dummy_var_175: i32;

  $bb0:
    call {:si_unique_call 2693} $initialize();
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 2695} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} $p4 := ldv_init_zalloc(56);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} $p6 := ldv_init_zalloc(184);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} ldv_initialize();
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} vslice_dummy_var_164 := ldv_memset($p8, 0, 8);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} vslice_dummy_var_165 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} vslice_dummy_var_166 := ldv_memset($p12, 0, 4);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} vslice_dummy_var_167 := ldv_memset($p14, 0, 4);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $M.56 := 0;
    call {:si_unique_call 2706} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $M.62 := 0;
    call {:si_unique_call 2707} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $M.63 := 0;
    call {:si_unique_call 2708} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $M.64 := 0;
    call {:si_unique_call 2709} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $M.65 := 0;
    call {:si_unique_call 2710} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $M.66 := 0;
    call {:si_unique_call 2711} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 2712} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $M.68 := 0;
    call {:si_unique_call 2713} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 2714} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 2715} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $M.71 := 0;
    call {:si_unique_call 2716} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $M.72 := 0;
    call {:si_unique_call 2717} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i46, $i47, $p48, $i50, $i51, $p52, $i53, $i54, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $p94, $i96, $i97, $p98, $i100, $i101, $p102, $i103, $i104, $i106, $i107, $p108, $i109, $i110, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i122, $i123, $i124, $i125, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175 := main_loop_$bb1($p0, $p1, $p2, $p3, $p5, $p7, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i46, $i47, $p48, $i50, $i51, $p52, $i53, $i54, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $p94, $i96, $i97, $p98, $i100, $i101, $p102, $i103, $i104, $i106, $i107, $p108, $i109, $i110, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i122, $i123, $i124, $i125, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i16, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i16, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i16, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i16, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} ldv_stop();
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $i124 := $M.72;
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb149:
    assume $i125 == 1;
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} ldv_main_exported_5();
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i83 := $M.71;
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb108:
    assume $i84 == 1;
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2756} $i85 := __VERIFIER_nondet_int();
    call {:si_unique_call 2757} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i85);
    call {:si_unique_call 2758} {:cexpr "tmp___4"} boogie_si_record_i32($i85);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i85, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i85, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i85, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} ldv_stop();
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb117:
    assume $i89 == 1;
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $i119 := $M.71;
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 2);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb143:
    assume $i120 == 1;
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} vslice_dummy_var_175 := ldv_release_10();
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 2772} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $i122 := $M.69;
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $i123 := $sub.i32($i122, 1);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $M.69 := $i123;
    call {:si_unique_call 2773} {:cexpr "ref_cnt"} boogie_si_record_i32($i123);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb115:
    assume $i88 == 1;
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i112 := $M.71;
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 1);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb137:
    assume $i113 == 1;
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} $i114 := ldv_open_10();
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $M.75 := $i114;
    call {:si_unique_call 2768} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i114);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $i115 := $M.75;
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 0);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb139:
    assume $i116 == 1;
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 2769} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $i117 := $M.69;
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i117, 1);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $M.69 := $i118;
    call {:si_unique_call 2770} {:cexpr "ref_cnt"} boogie_si_record_i32($i118);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb113:
    assume $i87 == 1;
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $i106 := $M.71;
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 2);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb134:
    assume $i107 == 1;
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $p108 := $M.74;
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.60, $p3);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.60, $p1);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2765} vslice_dummy_var_174 := gru_file_unlocked_ioctl($p108, $i109, $i110);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 2766} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    goto $bb136;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb111:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i85, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i90 == 1);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $i100 := $M.71;
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 2);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb131:
    assume $i101 == 1;
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $p102 := $M.74;
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $i103 := $load.i64($M.60, $p0);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.60, $p2);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} vslice_dummy_var_173 := noop_llseek($p102, $i103, $i104);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 2764} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb120:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i85, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb119;

  $bb122:
    assume $i91 == 1;
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $i92 := $M.71;
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 1);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i96 := $M.71;
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 2);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb127:
    assume $i97 == 1;
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p98 := $M.74;
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} vslice_dummy_var_172 := gru_file_mmap($p98, $p7);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 2762} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb124:
    assume $i93 == 1;
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $p94 := $M.74;
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} vslice_dummy_var_171 := gru_file_mmap($p94, $p7);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 2760} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $i66 := $M.70;
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb78:
    assume $i67 == 1;
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2741} $i68 := __VERIFIER_nondet_int();
    call {:si_unique_call 2742} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i68);
    call {:si_unique_call 2743} {:cexpr "tmp___3"} boogie_si_record_i32($i68);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i68, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} ldv_stop();
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb83:
    assume $i70 == 1;
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $i76 := $M.70;
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 1);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb96:
    assume $i77 == 1;
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} $i78 := gru_init();
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $M.73 := $i78;
    call {:si_unique_call 2748} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i78);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $i79 := $M.73;
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i81 := $M.73;
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb101:
    assume $i82 == 1;
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 2750} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 2751} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} ldv_initialize_vm_operations_struct_9();
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 2753} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} ldv_initialize_mmu_notifier_ops_8();
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb98:
    assume $i80 == 1;
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 2749} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2746} ldv_check_final_state();
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb81:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i68, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb85;

  $bb86:
    assume $i71 == 1;
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $i72 := $M.70;
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 2);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb88:
    assume $i73 == 1;
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $i74 := $M.69;
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb90;

  $bb91:
    assume $i75 == 1;
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} gru_exit();
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 2745} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    goto $bb93;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i16, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i16, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i23 == 1);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $i64 := $M.68;
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb75:
    assume $i65 == 1;
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} ldv_main_exported_4();
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $i62 := $M.67;
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb72:
    assume $i63 == 1;
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} ldv_main_exported_1();
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $i60 := $M.66;
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb69:
    assume $i61 == 1;
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} ldv_main_exported_8();
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb3:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i16, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i16, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i16, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i26 == 1);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $i58 := $M.65;
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb66:
    assume $i59 == 1;
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} ldv_main_exported_2();
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb22:
    assume $i26 == 1;
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i35 := $M.64;
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb38:
    assume $i36 == 1;
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2724} $i37 := __VERIFIER_nondet_int();
    call {:si_unique_call 2725} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i37);
    call {:si_unique_call 2726} {:cexpr "tmp___2"} boogie_si_record_i32($i37);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} ldv_stop();
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb45:
    assume $i40 == 1;
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $i53 := $M.64;
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb60:
    assume $i54 == 1;
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} vslice_dummy_var_170 := ldv_open_9();
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 2734} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $i56 := $M.69;
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 1);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $M.69 := $i57;
    call {:si_unique_call 2735} {:cexpr "ref_cnt"} boogie_si_record_i32($i57);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb43:
    assume $i39 == 1;
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i50 := $M.64;
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 2);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb57:
    assume $i51 == 1;
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $p52 := $M.61;
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} gru_vma_close($p52);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 2732} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb47;

  $bb48:
    assume $i41 == 1;
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $i42 := $M.64;
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i46 := $M.64;
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 2);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i47 == 1;
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $p48 := $M.61;
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} vslice_dummy_var_169 := gru_fault($p48, $p5);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 2730} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i43 == 1;
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $p44 := $M.61;
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} vslice_dummy_var_168 := gru_fault($p44, $p5);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 2728} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $i33 := $M.63;
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35:
    assume $i34 == 1;
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} ldv_main_exported_7();
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb18:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i16, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i27 == 1);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $i31 := $M.62;
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32:
    assume $i32 == 1;
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} ldv_main_exported_3();
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb24:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i16, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb13;

  $bb26:
    assume $i28 == 1;
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $i29 := $M.56;
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i30 == 1;
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} ldv_main_exported_6();
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2718} $i16 := __VERIFIER_nondet_int();
    call {:si_unique_call 2719} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i16);
    call {:si_unique_call 2720} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 763353);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_6: ref;

axiom ldv_main_exported_6 == $sub.ref(0, 764385);

procedure ldv_main_exported_6();
  free requires assertsPassed;
  modifies $M.77, $M.56, $M.69, $M.58, $M.79;



implementation ldv_main_exported_6()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var vslice_dummy_var_176: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2777} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2778} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2779} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2798} ldv_stop();
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $i39 := $M.56;
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 3);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb32:
    assume $i40 == 1;
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $p41 := $M.57;
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $p42 := $M.78;
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $p43 := $M.76;
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} $p44 := seq_next($p41, $p42, $p43);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $M.79 := $p44;
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $p45 := $M.79;
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p50 := $M.79;
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i52 == 1;
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 2796} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $i53 := $M.69;
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 1);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $M.69 := $i54;
    call {:si_unique_call 2797} {:cexpr "ref_cnt"} boogie_si_record_i32($i54);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i47 == 1;
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $M.56 := 3;
    call {:si_unique_call 2794} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $i48 := $M.69;
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $M.69 := $i49;
    call {:si_unique_call 2795} {:cexpr "ref_cnt"} boogie_si_record_i32($i49);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $i33 := $M.56;
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 3);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i34 == 1;
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $p35 := $M.57;
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $p36 := $M.76;
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} vslice_dummy_var_176 := gru_seq_show($p35, $p37);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $M.56 := 3;
    call {:si_unique_call 2792} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $i21 := $M.56;
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 3);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i27 := $M.56;
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i28 == 1;
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $p29 := $M.57;
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $p30 := $M.78;
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} seq_stop($p29, $p30);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2789} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $i31 := $M.69;
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, 1);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $M.69 := $i32;
    call {:si_unique_call 2790} {:cexpr "ref_cnt"} boogie_si_record_i32($i32);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i22 == 1;
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $p23 := $M.57;
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $p24 := $M.78;
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} seq_stop($p23, $p24);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 2786} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i25 := $M.69;
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i25, 1);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $M.69 := $i26;
    call {:si_unique_call 2787} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $i6 := $M.56;
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $p8 := $M.57;
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $p9 := $M.76;
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2780} $p10 := seq_start($p8, $p9);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $M.77 := $p10;
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $p11 := $M.77;
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p16 := $M.77;
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i18 == 1;
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 2783} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $i19 := $M.69;
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $M.69 := $i20;
    call {:si_unique_call 2784} {:cexpr "ref_cnt"} boogie_si_record_i32($i20);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i13 == 1;
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $M.56 := 3;
    call {:si_unique_call 2781} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $i14 := $M.69;
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $M.69 := $i15;
    call {:si_unique_call 2782} {:cexpr "ref_cnt"} boogie_si_record_i32($i15);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 765417);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.60, $M.62, $M.69, $M.82, $M.0, $CurrAddr;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var vslice_dummy_var_177: ref;
  var vslice_dummy_var_178: ref;
  var vslice_dummy_var_179: ref;
  var vslice_dummy_var_180: ref;
  var vslice_dummy_var_181: i64;
  var vslice_dummy_var_182: i64;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i64;
  var vslice_dummy_var_185: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} $p6 := ldv_init_zalloc(1);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} $p7 := ldv_init_zalloc(8);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} $p9 := ldv_init_zalloc(1);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} vslice_dummy_var_177 := ldv_memset($p10, 0, 8);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} vslice_dummy_var_178 := ldv_memset($p12, 0, 8);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} vslice_dummy_var_179 := ldv_memset($p14, 0, 4);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} vslice_dummy_var_180 := ldv_memset($p16, 0, 8);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2811} $i18 := __VERIFIER_nondet_int();
    call {:si_unique_call 2812} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i18);
    call {:si_unique_call 2813} {:cexpr "tmp___3"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i18, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i18, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i18, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2829} ldv_stop();
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $i53 := $M.62;
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb31:
    assume $i54 == 1;
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $p55 := $M.81;
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $p56 := $M.80;
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} $i57 := options_open($p55, $p56);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $M.82 := $i57;
    call {:si_unique_call 2826} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i57);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $i58 := $M.82;
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i59 == 1;
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 2827} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $i60 := $M.69;
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $M.69 := $i61;
    call {:si_unique_call 2828} {:cexpr "ref_cnt"} boogie_si_record_i32($i61);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $i47 := $M.62;
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 2);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume $i48 == 1;
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $p49 := $M.80;
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.60, $p0);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.60, $p2);
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} vslice_dummy_var_185 := seq_lseek($p49, $i50, $i51);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 2824} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $i42 := $M.62;
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25:
    assume $i43 == 1;
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $p44 := $M.80;
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.60, $p3);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} vslice_dummy_var_184 := seq_read($p44, $p6, $i45, $p5);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 2822} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb2:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i35 := $M.62;
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 2);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume $i36 == 1;
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p37 := $M.81;
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $p38 := $M.80;
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} vslice_dummy_var_183 := single_release($p37, $p38);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 2819} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i40 := $M.69;
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 1);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $M.69 := $i41;
    call {:si_unique_call 2820} {:cexpr "ref_cnt"} boogie_si_record_i32($i41);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i18, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $i25 := $M.62;
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i30 := $M.62;
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 2);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $p32 := $M.80;
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.60, $p1);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} vslice_dummy_var_182 := options_write($p32, $p9, $i33, $p8);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 2817} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $p27 := $M.80;
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.60, $p1);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} vslice_dummy_var_181 := options_write($p27, $p9, $i28, $p8);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 2815} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_7: ref;

axiom ldv_main_exported_7 == $sub.ref(0, 766449);

procedure ldv_main_exported_7();
  free requires assertsPassed;
  modifies $M.85, $M.63, $M.69, $M.59, $M.58, $M.87, $CurrAddr;



implementation ldv_main_exported_7()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var vslice_dummy_var_186: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2830} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2831} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2832} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} ldv_stop();
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $i39 := $M.63;
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 3);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb32:
    assume $i40 == 1;
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $p41 := $M.83;
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $p42 := $M.86;
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $p43 := $M.84;
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} $p44 := seq_next($p41, $p42, $p43);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $M.87 := $p44;
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $p45 := $M.87;
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p50 := $M.87;
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i52 == 1;
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 2849} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $i53 := $M.69;
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 1);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $M.69 := $i54;
    call {:si_unique_call 2850} {:cexpr "ref_cnt"} boogie_si_record_i32($i54);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i47 == 1;
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 2847} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $i48 := $M.69;
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $M.69 := $i49;
    call {:si_unique_call 2848} {:cexpr "ref_cnt"} boogie_si_record_i32($i49);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $i33 := $M.63;
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 3);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i34 == 1;
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $p35 := $M.83;
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $p36 := $M.84;
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} vslice_dummy_var_186 := cch_seq_show($p35, $p37);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 2845} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $i21 := $M.63;
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 3);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i27 := $M.63;
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i28 == 1;
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $p29 := $M.83;
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $p30 := $M.86;
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} seq_stop($p29, $p30);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 2842} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i31 := $M.69;
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, 1);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $M.69 := $i32;
    call {:si_unique_call 2843} {:cexpr "ref_cnt"} boogie_si_record_i32($i32);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i22 == 1;
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $p23 := $M.83;
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $p24 := $M.86;
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2838} seq_stop($p23, $p24);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 2839} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $i25 := $M.69;
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i25, 1);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $M.69 := $i26;
    call {:si_unique_call 2840} {:cexpr "ref_cnt"} boogie_si_record_i32($i26);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $i6 := $M.63;
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $p8 := $M.83;
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $p9 := $M.84;
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} $p10 := seq_start($p8, $p9);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $M.85 := $p10;
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $p11 := $M.85;
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p16 := $M.85;
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i18 == 1;
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 2836} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $i19 := $M.69;
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $M.69 := $i20;
    call {:si_unique_call 2837} {:cexpr "ref_cnt"} boogie_si_record_i32($i20);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i13 == 1;
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 2834} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $i14 := $M.69;
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $M.69 := $i15;
    call {:si_unique_call 2835} {:cexpr "ref_cnt"} boogie_si_record_i32($i15);
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_open_9: ref;

axiom ldv_open_9 == $sub.ref(0, 767481);

procedure ldv_open_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_open_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2852} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2853} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 768513);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_2: ref;

axiom ldv_main_exported_2 == $sub.ref(0, 769545);

procedure ldv_main_exported_2();
  free requires assertsPassed;
  modifies $M.60, $M.65, $M.69, $M.90, $M.0, $M.56, $CurrAddr, $M.57;



implementation ldv_main_exported_2()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var vslice_dummy_var_187: ref;
  var vslice_dummy_var_188: ref;
  var vslice_dummy_var_189: ref;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i64;
  var vslice_dummy_var_192: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} vslice_dummy_var_187 := ldv_memset($p6, 0, 4);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} vslice_dummy_var_188 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} vslice_dummy_var_189 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2862} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2863} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2864} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} ldv_stop();
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $i36 := $M.65;
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $p38 := $M.88;
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $p39 := $M.89;
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} $i40 := cch_open($p38, $p39);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $M.90 := $i40;
    call {:si_unique_call 2873} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i40);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $i41 := $M.90;
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 2874} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $i43 := $M.69;
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $M.69 := $i44;
    call {:si_unique_call 2875} {:cexpr "ref_cnt"} boogie_si_record_i32($i44);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i30 := $M.65;
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 2);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $p32 := $M.89;
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.60, $p2);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.60, $p0);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} vslice_dummy_var_192 := seq_lseek($p32, $i33, $i34);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 2871} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $i25 := $M.65;
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $p27 := $M.89;
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.60, $p1);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2868} vslice_dummy_var_191 := seq_read($p27, $p3, $i28, $p5);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 2869} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $i18 := $M.65;
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $p20 := $M.88;
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $p21 := $M.89;
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} vslice_dummy_var_190 := ldv_seq_release_117($p20, $p21);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 2866} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $i23 := $M.69;
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i23, 1);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $M.69 := $i24;
    call {:si_unique_call 2867} {:cexpr "ref_cnt"} boogie_si_record_i32($i24);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_main_exported_8: ref;

axiom ldv_main_exported_8 == $sub.ref(0, 770577);

procedure ldv_main_exported_8();
  free requires assertsPassed;
  modifies $M.60, $M.0, $M.66, $M.69, $CurrAddr;



implementation ldv_main_exported_8()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $i63: i1;
  var $i65: i32;
  var $i66: i32;
  var vslice_dummy_var_193: ref;
  var vslice_dummy_var_194: ref;
  var vslice_dummy_var_195: ref;
  var vslice_dummy_var_196: ref;
  var vslice_dummy_var_197: ref;
  var vslice_dummy_var_198: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2879} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2882} vslice_dummy_var_193 := ldv_memset($p5, 0, 8);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2883} vslice_dummy_var_194 := ldv_memset($p7, 0, 8);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} vslice_dummy_var_195 := ldv_memset($p9, 0, 8);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} vslice_dummy_var_196 := ldv_memset($p11, 0, 8);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} vslice_dummy_var_197 := ldv_memset($p13, 0, 8);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2887} $i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 2888} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
    call {:si_unique_call 2889} {:cexpr "tmp"} boogie_si_record_i32($i15);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i15, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2908} ldv_stop();
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $i62 := $M.66;
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 1);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb37:
    assume $i63 == 1;
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2905} vslice_dummy_var_198 := ldv_probe_8();
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $M.66 := 2;
    call {:si_unique_call 2906} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $i65 := $M.69;
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, 1);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $M.69 := $i66;
    call {:si_unique_call 2907} {:cexpr "ref_cnt"} boogie_si_record_i32($i66);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $i52 := $M.66;
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i57 := $M.66;
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 2);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb34:
    assume $i58 == 1;
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $p59 := $M.91;
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $p60 := $M.92;
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.60, $p2);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2903} gru_invalidate_page($p59, $p60, $i61);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $M.66 := 2;
    call {:si_unique_call 2904} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i53 == 1;
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $p54 := $M.91;
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $p55 := $M.92;
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.60, $p2);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2901} gru_invalidate_page($p54, $p55, $i56);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 2902} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $i40 := $M.66;
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i46 := $M.66;
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 2);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28:
    assume $i47 == 1;
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $p48 := $M.91;
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $p49 := $M.92;
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.60, $p1);
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.60, $p0);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} gru_invalidate_range_end($p48, $p49, $i50, $i51);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $M.66 := 2;
    call {:si_unique_call 2900} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i41 == 1;
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $p42 := $M.91;
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $p43 := $M.92;
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.60, $p1);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.60, $p0);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} gru_invalidate_range_end($p42, $p43, $i44, $i45);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 2898} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb2:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $i28 := $M.66;
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i34 := $M.66;
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22:
    assume $i35 == 1;
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $p36 := $M.91;
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $p37 := $M.92;
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.60, $p4);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.60, $p3);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} gru_invalidate_range_start($p36, $p37, $i38, $i39);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $M.66 := 2;
    call {:si_unique_call 2896} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $p30 := $M.91;
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $p31 := $M.92;
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.60, $p4);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.60, $p3);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} gru_invalidate_range_start($p30, $p31, $i32, $i33);
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 2894} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $i22 := $M.66;
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $p24 := $M.91;
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $p25 := $M.92;
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2890} gru_release($p24, $p25);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 2891} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $i26 := $M.69;
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i26, 1);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $M.69 := $i27;
    call {:si_unique_call 2892} {:cexpr "ref_cnt"} boogie_si_record_i32($i27);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_1: ref;

axiom ldv_main_exported_1 == $sub.ref(0, 771609);

procedure ldv_main_exported_1();
  free requires assertsPassed;
  modifies $M.60, $M.67, $M.69, $M.94, $M.0, $M.56, $M.57, $CurrAddr;



implementation ldv_main_exported_1()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var vslice_dummy_var_199: ref;
  var vslice_dummy_var_200: ref;
  var vslice_dummy_var_201: ref;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i64;
  var vslice_dummy_var_204: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2909} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2911} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2914} vslice_dummy_var_199 := ldv_memset($p6, 0, 4);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} vslice_dummy_var_200 := ldv_memset($p8, 0, 8);
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2916} vslice_dummy_var_201 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2917} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2918} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2919} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} ldv_stop();
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $i36 := $M.67;
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $p38 := $M.93;
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $p39 := $M.74;
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} $i40 := gru_open($p38, $p39);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $M.94 := $i40;
    call {:si_unique_call 2928} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i40);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $i41 := $M.94;
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 2929} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $i43 := $M.69;
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $M.69 := $i44;
    call {:si_unique_call 2930} {:cexpr "ref_cnt"} boogie_si_record_i32($i44);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $i30 := $M.67;
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 2);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $p32 := $M.74;
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.60, $p2);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.60, $p0);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2925} vslice_dummy_var_204 := seq_lseek($p32, $i33, $i34);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 2926} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $i25 := $M.67;
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $p27 := $M.74;
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.60, $p1);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} vslice_dummy_var_203 := seq_read($p27, $p3, $i28, $p5);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 2924} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $i18 := $M.67;
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $p20 := $M.93;
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $p21 := $M.74;
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} vslice_dummy_var_202 := ldv_seq_release_116($p20, $p21);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2921} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $i23 := $M.69;
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i23, 1);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $M.69 := $i24;
    call {:si_unique_call 2922} {:cexpr "ref_cnt"} boogie_si_record_i32($i24);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 772641);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.60, $M.0, $M.68, $M.69, $M.97, $CurrAddr;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var vslice_dummy_var_205: ref;
  var vslice_dummy_var_206: ref;
  var vslice_dummy_var_207: ref;
  var vslice_dummy_var_208: ref;
  var vslice_dummy_var_209: i64;
  var vslice_dummy_var_210: i64;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i64;
  var vslice_dummy_var_213: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2937} $p5 := ldv_init_zalloc(8);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} $p7 := ldv_init_zalloc(1);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} $p8 := ldv_init_zalloc(8);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} vslice_dummy_var_205 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} vslice_dummy_var_206 := ldv_memset($p12, 0, 8);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} vslice_dummy_var_207 := ldv_memset($p14, 0, 8);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} vslice_dummy_var_208 := ldv_memset($p16, 0, 4);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2944} $i18 := __VERIFIER_nondet_int();
    call {:si_unique_call 2945} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i18);
    call {:si_unique_call 2946} {:cexpr "tmp___3"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i18, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i18, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i18, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} ldv_stop();
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $i53 := $M.68;
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb31:
    assume $i54 == 1;
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $p55 := $M.96;
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $p56 := $M.95;
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} $i57 := mcs_statistics_open($p55, $p56);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $M.97 := $i57;
    call {:si_unique_call 2959} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i57);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $i58 := $M.97;
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i59 == 1;
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $M.68 := 2;
    call {:si_unique_call 2960} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $i60 := $M.69;
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $M.69 := $i61;
    call {:si_unique_call 2961} {:cexpr "ref_cnt"} boogie_si_record_i32($i61);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $i47 := $M.68;
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 2);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume $i48 == 1;
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $p49 := $M.95;
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.60, $p0);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.60, $p3);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} vslice_dummy_var_213 := seq_lseek($p49, $i50, $i51);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $M.68 := 2;
    call {:si_unique_call 2957} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $i42 := $M.68;
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25:
    assume $i43 == 1;
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $p44 := $M.95;
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.60, $p2);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} vslice_dummy_var_212 := seq_read($p44, $p4, $i45, $p9);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $M.68 := 2;
    call {:si_unique_call 2955} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb2:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $i35 := $M.68;
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 2);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume $i36 == 1;
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $p37 := $M.96;
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $p38 := $M.95;
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2951} vslice_dummy_var_211 := single_release($p37, $p38);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 2952} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $i40 := $M.69;
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 1);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $M.69 := $i41;
    call {:si_unique_call 2953} {:cexpr "ref_cnt"} boogie_si_record_i32($i41);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i18, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $i25 := $M.68;
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i30 := $M.68;
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 2);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $p32 := $M.95;
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.60, $p1);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2949} vslice_dummy_var_210 := mcs_statistics_write($p32, $p7, $i33, $p6);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $M.68 := 2;
    call {:si_unique_call 2950} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $p27 := $M.95;
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.60, $p1);
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2947} vslice_dummy_var_209 := mcs_statistics_write($p27, $p7, $i28, $p6);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 2948} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const gru_exit: ref;

axiom gru_exit == $sub.ref(0, 773673);

procedure gru_exit();
  free requires assertsPassed;
  modifies $M.0, $M.62, $M.108, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation gru_exit()
{
  var $i0: i32;
  var $i1: i1;
  var vslice_dummy_var_214: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2963} $i0 := gru_supported();
    call {:si_unique_call 2964} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2965} gru_teardown_tlb_irqs();
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2966} gru_kservices_exit();
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2967} gru_free_tables();
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2968} vslice_dummy_var_214 := ldv_misc_deregister_16(gru_miscdev);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2969} gru_proc_exit();
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_init: ref;

axiom gru_init == $sub.ref(0, 774705);

procedure gru_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $M.98, $M.32, $M.62, $M.105, $M.21, $M.20, $M.4, $M.0, $M.81, $M.80, $M.107, $M.22, $CurrAddr, $M.108;



implementation gru_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i13: i32;
  var $i14: i1;
  var $i17: i32;
  var $i18: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i27: i32;
  var $i28: i1;
  var $i26: i32;
  var $i20: i32;
  var $i16: i32;
  var $i2: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2970} $i0 := gru_supported();
    call {:si_unique_call 2971} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2972} $i3 := uv_read_local_mmr(23068688);
    call {:si_unique_call 2973} {:cexpr "tmp___0"} boogie_si_record_i64($i3);
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 140737488355327);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $M.31 := $i4;
    call {:si_unique_call 2974} {:cexpr "gru_start_paddr"} boogie_si_record_i64($i4);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $i5 := $M.31;
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, $sub.i64(0, 131941395333120));
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $M.98 := $p7;
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $i8 := $M.31;
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 137438953472);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $M.32 := $i9;
    call {:si_unique_call 2975} {:cexpr "gru_end_paddr"} boogie_si_record_i64($i9);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $i10 := $M.31;
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $i11 := $M.32;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2976} vslice_dummy_var_215 := printk.ref.i64.i64(.str.57, $i10, $i11);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2977} $i13 := ldv_misc_register_14(gru_miscdev);
    call {:si_unique_call 2978} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} $i17 := gru_proc_init();
    call {:si_unique_call 2981} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i21 := $M.31;
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $p22 := $M.98;
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2984} $i23 := gru_init_tables($i21, $p22);
    call {:si_unique_call 2985} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2988} $i27 := gru_setup_tlb_irqs();
    call {:si_unique_call 2989} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2991} vslice_dummy_var_220 := gru_kservices_init();
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} vslice_dummy_var_221 := printk.ref.ref.ref(.str.62, .str.59, .str.63);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} gru_free_tables();
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $i26 := $i27;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2987} gru_proc_exit();
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $i20 := $i26;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2983} vslice_dummy_var_218 := ldv_misc_deregister_15(gru_miscdev);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $i16 := $i20;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $i2 := $i16;
    goto $bb3;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2986} vslice_dummy_var_219 := printk.ref.ref(.str.61, .str.59);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $i26 := $i23;
    goto $bb15;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2982} vslice_dummy_var_217 := printk.ref.ref(.str.60, .str.59);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb11;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} vslice_dummy_var_216 := printk.ref.ref(.str.58, .str.59);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $i16 := $i13;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;
}



const ldv_initialize_mmu_notifier_ops_8: ref;

axiom ldv_initialize_mmu_notifier_ops_8 == $sub.ref(0, 775737);

procedure ldv_initialize_mmu_notifier_ops_8();
  free requires assertsPassed;
  modifies $M.91, $M.92, $M.0, $CurrAddr;



implementation ldv_initialize_mmu_notifier_ops_8()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} $p0 := ldv_init_zalloc(24);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $M.91 := $p0;
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} $p2 := ldv_init_zalloc(2296);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $M.92 := $p2;
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    return;
}



const ldv_open_10: ref;

axiom ldv_open_10 == $sub.ref(0, 776769);

procedure ldv_open_10() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_open_10() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2995} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2996} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_10: ref;

axiom ldv_release_10 == $sub.ref(0, 777801);

procedure ldv_release_10() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_10() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2997} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2998} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_5: ref;

axiom ldv_main_exported_5 == $sub.ref(0, 778833);

procedure ldv_main_exported_5();
  free requires assertsPassed;
  modifies $M.60, $M.0, $M.72, $M.69, $M.101, $CurrAddr;



implementation ldv_main_exported_5()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var vslice_dummy_var_222: ref;
  var vslice_dummy_var_223: ref;
  var vslice_dummy_var_224: ref;
  var vslice_dummy_var_225: ref;
  var vslice_dummy_var_226: i64;
  var vslice_dummy_var_227: i64;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i64;
  var vslice_dummy_var_230: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2999} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3000} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3002} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3003} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} $p5 := ldv_init_zalloc(8);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3005} $p7 := ldv_init_zalloc(1);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3006} $p8 := ldv_init_zalloc(8);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3007} vslice_dummy_var_222 := ldv_memset($p10, 0, 8);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3008} vslice_dummy_var_223 := ldv_memset($p12, 0, 4);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3009} vslice_dummy_var_224 := ldv_memset($p14, 0, 8);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3010} vslice_dummy_var_225 := ldv_memset($p16, 0, 8);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3011} $i18 := __VERIFIER_nondet_int();
    call {:si_unique_call 3012} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i18);
    call {:si_unique_call 3013} {:cexpr "tmp___3"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i18, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i18, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i18, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3029} ldv_stop();
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $i53 := $M.72;
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb31:
    assume $i54 == 1;
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $p55 := $M.100;
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $p56 := $M.99;
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3025} $i57 := statistics_open($p55, $p56);
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $M.101 := $i57;
    call {:si_unique_call 3026} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i57);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $i58 := $M.101;
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i59 == 1;
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 3027} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $i60 := $M.69;
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $M.69 := $i61;
    call {:si_unique_call 3028} {:cexpr "ref_cnt"} boogie_si_record_i32($i61);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $i47 := $M.72;
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 2);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume $i48 == 1;
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $p49 := $M.99;
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.60, $p2);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.60, $p1);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3023} vslice_dummy_var_230 := seq_lseek($p49, $i50, $i51);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 3024} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $i42 := $M.72;
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25:
    assume $i43 == 1;
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $p44 := $M.99;
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.60, $p0);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3021} vslice_dummy_var_229 := seq_read($p44, $p7, $i45, $p9);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 3022} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb2:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $i35 := $M.72;
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 2);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume $i36 == 1;
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $p37 := $M.100;
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $p38 := $M.99;
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3018} vslice_dummy_var_228 := single_release($p37, $p38);
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 3019} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $i40 := $M.69;
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 1);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $M.69 := $i41;
    call {:si_unique_call 3020} {:cexpr "ref_cnt"} boogie_si_record_i32($i41);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i18, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i25 := $M.72;
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i30 := $M.72;
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 2);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $p32 := $M.99;
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.60, $p3);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3016} vslice_dummy_var_227 := statistics_write($p32, $p4, $i33, $p6);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 3017} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $p27 := $M.99;
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.60, $p3);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3014} vslice_dummy_var_226 := statistics_write($p27, $p4, $i28, $p6);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 3015} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 779865);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $i0 := $M.102;
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.103;
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.104;
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.6;
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3033} ldv_error();
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} ldv_error();
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3031} ldv_error();
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3030} ldv_error();
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const gru_supported: ref;

axiom gru_supported == $sub.ref(0, 780897);

procedure gru_supported() returns ($r: i32);
  free requires assertsPassed;



implementation gru_supported() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3034} $i0 := is_uv_system();
    call {:si_unique_call 3035} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 3036} $i2 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 3037} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i2);
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 232)), $mul.ref(20, 1));
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.3, $p4);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i6, 4);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb6;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb5;
}



const uv_read_local_mmr: ref;

axiom uv_read_local_mmr == $sub.ref(0, 781929);

procedure uv_read_local_mmr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation uv_read_local_mmr($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3038} {:cexpr "uv_read_local_mmr:arg:offset"} boogie_si_record_i64($i0);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3039} $p1 := uv_local_mmr_address($i0);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3040} $i3 := readq($p2);
    call {:si_unique_call 3041} {:cexpr "tmp___0"} boogie_si_record_i64($i3);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_misc_register_14: ref;

axiom ldv_misc_register_14 == $sub.ref(0, 782961);

procedure ldv_misc_register_14($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.62, $M.81, $M.80, $M.0, $CurrAddr;



implementation ldv_misc_register_14($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3042} $i1 := misc_register($p0);
    call {:si_unique_call 3043} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 3044} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3045} ldv_file_operations_3();
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gru_proc_init: ref;

axiom gru_proc_init == $sub.ref(0, 783993);

procedure gru_proc_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.105, $M.107;



implementation gru_proc_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p4: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3046} $p0 := proc_mkdir(.str.45, $0.ref);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $M.105 := $p0;
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.106, proc_files);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $p4 := proc_files;
    goto $bb4;

  $bb4:
    call $i5, $i6, $p7, $p8, $p9, $i10, $i11, $p4 := gru_proc_init_loop_$bb4($i5, $i6, $p7, $p8, $p9, $i10, $i11, $p4);
    goto $bb4_last;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3047} $i5 := create_proc_file($p4);
    call {:si_unique_call 3048} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p4, $mul.ref(1, 32));
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(1, 32)), $mul.ref(0, 1));
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.106, $p8);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p7;
    goto $bb10_dummy;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3049} delete_proc_files();
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb13;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10649;
}



const gru_init_tables: ref;

axiom gru_init_tables == $sub.ref(0, 785025);

procedure gru_init_tables($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.20, $M.4, $M.0, $M.22, $CurrAddr;



implementation gru_init_tables($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $i72: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i6: i32;
  var $i85: i32;
  var $i86: i1;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i32;
  var $i93: i1;
  var $i87: i32;
  var $i84: i32;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var vslice_dummy_var_231: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3050} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3051} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 3052} {:cexpr "gru_init_tables:arg:gru_base_paddr"} boogie_si_record_i64($i0);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $M.21 := 128;
    call {:si_unique_call 3053} {:cexpr "max_user_cbrs"} boogie_si_record_i32(128);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $M.20 := 32768;
    call {:si_unique_call 3054} {:cexpr "max_user_dsr_bytes"} boogie_si_record_i32(32768);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3055} $i4 := uv_num_possible_blades();
    call {:si_unique_call 3056} {:cexpr "tmp___2"} boogie_si_record_i32($i4);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $r := $i84;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $i7, $i8, $p9, $i10, $i11, $i12, $p13, $i15, $p16, $i17, $p18, $p19, $p20, $i21, $p22, $p23, $p24, $i26, $p27, $p28, $p29, $i30, $p31, $p32, $p33, $i35, $p36, $p37, $p39, $p40, $i41, $p42, $p43, $p44, $i45, $p46, $p47, $p48, $i54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $p71, $i72, $p50, $i51, $i52, $i53, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i6, cmdloc_dummy_var_85, cmdloc_dummy_var_86, vslice_dummy_var_231 := gru_init_tables_loop_$bb4($i0, $p1, $p2, $p3, $i7, $i8, $p9, $i10, $i11, $i12, $p13, $i15, $p16, $i17, $p18, $p19, $p20, $i21, $p22, $p23, $p24, $i26, $p27, $p28, $p29, $i30, $p31, $p32, $p33, $i35, $p36, $p37, $p39, $p40, $i41, $p42, $p43, $p44, $i45, $p46, $p47, $p48, $i54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $p71, $i72, $p50, $i51, $i52, $i53, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i6, cmdloc_dummy_var_85, cmdloc_dummy_var_86, vslice_dummy_var_231);
    goto $bb4_last;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3057} $i7 := uv_blade_to_pnode($i6);
    call {:si_unique_call 3058} {:cexpr "pnode"} boogie_si_record_i32($i7);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3059} $i8 := uv_blade_to_memory_nid($i6);
    call {:si_unique_call 3060} {:cexpr "nid"} boogie_si_record_i32($i8);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3061} $p9 := alloc_pages_node($i8, 208, 0);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $i12 := $i6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3063} $p13 := lowmem_page_address($p9);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i6);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i15, 8));
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, $p13);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i6);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i17, 8));
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.4, $p18);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_85 := $M.0;
    call {:si_unique_call 3064} cmdloc_dummy_var_86 := $memset.i8(cmdloc_dummy_var_85, $p20, 0, 1136, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_86;
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i6);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i21, 8));
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.4, $p22);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i6);
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i26, 8));
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.4, $p27);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1136)), $mul.ref(280, 1));
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p24);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i6);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i30, 8));
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.4, $p31);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1136)), $mul.ref(200, 1));
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} vslice_dummy_var_231 := spinlock_check($p33);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i6);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i35, 8));
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.4, $p36);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 1136)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3066} __raw_spin_lock_init($p40, .str.64, $p2);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i6);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i41, 8));
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.4, $p42);
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3067} __init_rwsem($p44, .str.65, $p3);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i6);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i45, 8));
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.4, $p46);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $p50, $i51, $i52, $i53 := $p48, 0, 0, 0;
    goto $bb10;

  $bb10:
    call $i54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $p71, $i72, $p50, $i51, $i52, $i53, $i73, $i74 := gru_init_tables_loop_$bb10($i0, $p1, $i7, $i54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $p71, $i72, $p50, $i51, $i52, $i53, $i73, $i74, $i6);
    goto $bb10_last;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3068} $i54 := gru_chiplet_paddr($i0, $i7, $i53);
    call {:si_unique_call 3069} {:cexpr "paddr"} boogie_si_record_i64($i54);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3070} $p55 := gru_chiplet_vaddr($p1, $i7, $i53);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3071} gru_init_chiplet($p50, $i54, $p55, $i6, $i53);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p50, $mul.ref(0, 424)), $mul.ref(200, 1));
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3072} $i58 := __arch_hweight64($i57);
    call {:si_unique_call 3073} {:cexpr "tmp___0"} boogie_si_record_i64($i58);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i60 := $mul.i32($i59, 2);
    call {:si_unique_call 3074} {:cexpr "n"} boogie_si_record_i32($i60);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $i61 := $sgt.i32($i52, $i60);
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i61 == 1);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $i62 := $i60;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p50, $mul.ref(0, 424)), $mul.ref(208, 1));
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3075} $i65 := __arch_hweight64($i64);
    call {:si_unique_call 3076} {:cexpr "tmp___1"} boogie_si_record_i64($i65);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $i67 := $mul.i32($i66, 1024);
    call {:si_unique_call 3077} {:cexpr "n"} boogie_si_record_i32($i67);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i51, $i67);
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i68 == 1);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $i69 := $i67;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i53, 1);
    call {:si_unique_call 3078} {:cexpr "chip"} boogie_si_record_i32($i70);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p50, $mul.ref(1, 424));
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i72 := $sle.i32($i70, 1);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $i73, $i74 := $i62, $i69;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i75 := $M.21;
    call {:si_unique_call 3079} {:cexpr "_min1"} boogie_si_record_i32($i75);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i75, $i73);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i76 == 1);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $i77 := $i73;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $M.21 := $i77;
    call {:si_unique_call 3080} {:cexpr "max_user_cbrs"} boogie_si_record_i32($i77);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $i78 := $M.20;
    call {:si_unique_call 3081} {:cexpr "_min1___0"} boogie_si_record_i32($i78);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, $i74);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i79 == 1);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $i80 := $i74;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $M.20 := $i80;
    call {:si_unique_call 3082} {:cexpr "max_user_dsr_bytes"} boogie_si_record_i32($i80);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i6, 1);
    call {:si_unique_call 3083} {:cexpr "bid"} boogie_si_record_i32($i81);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3084} $i82 := uv_num_possible_blades();
    call {:si_unique_call 3085} {:cexpr "tmp___2"} boogie_si_record_i32($i82);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $i83 := $sgt.i32($i82, $i81);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i83 == 1);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb27:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i81;
    goto $bb27_dummy;

  $bb24:
    assume $i79 == 1;
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    goto $bb26;

  $bb21:
    assume $i76 == 1;
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $i77 := $i75;
    goto $bb23;

  $bb18:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $p50, $i51, $i52, $i53 := $p71, $i69, $i62, $i70;
    goto $bb18_dummy;

  $bb15:
    assume $i68 == 1;
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    $i69 := $i51;
    goto $bb17;

  $bb12:
    assume $i61 == 1;
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $i62 := $i52;
    goto $bb14;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32($i12, 1);
    call {:si_unique_call 3062} {:cexpr "bid"} boogie_si_record_i32($i85);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $i86 := $sge.i32($i85, 0);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32(0, 12);
    goto $bb30;

  $bb31:
    assume $i86 == 1;
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    $i87 := $i85;
    goto $bb34;

  $bb34:
    call $i88, $p89, $p90, $i91, $i92, $i93, $i87 := gru_init_tables_loop_$bb34($i88, $p89, $p90, $i91, $i92, $i93, $i87);
    goto $bb34_last;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i87);
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i88, 8));
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.4, $p89);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3086} free_pages($i91, 0);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32($i87, 1);
    call {:si_unique_call 3087} {:cexpr "bid"} boogie_si_record_i32($i92);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $i93 := $sge.i32($i92, 0);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i93 == 1);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb36:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i87 := $i92;
    goto $bb36_dummy;

  $bb18_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10731;

  $bb36_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10792;

  $bb27_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10676;
}



const gru_setup_tlb_irqs: ref;

axiom gru_setup_tlb_irqs == $sub.ref(0, 786057);

procedure gru_setup_tlb_irqs() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.108, $CurrAddr;



implementation gru_setup_tlb_irqs() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i4: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i19: i32;
  var $i9: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.3, cpu_online_mask);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3088} $i1 := cpumask_next($sub.i32(0, 1), $p0);
    call {:si_unique_call 3089} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.3, nr_cpu_ids);
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, $i2);
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3099} $i17 := uv_num_possible_blades();
    call {:si_unique_call 3100} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 0);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb19;

  $bb19:
    call $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i19 := gru_setup_tlb_irqs_loop_$bb19($i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i19);
    goto $bb19_last;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3101} $i20 := uv_blade_nr_possible_cpus($i19);
    call {:si_unique_call 3102} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3106} $i22 := gru_chiplet_setup_tlb_irq(0, .str.70, gru_intr_mblade, 0, $i19);
    call {:si_unique_call 3107} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3108} $i25 := gru_chiplet_setup_tlb_irq(1, .str.71, gru_intr_mblade, 0, $i19);
    call {:si_unique_call 3109} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i19, 1);
    call {:si_unique_call 3103} {:cexpr "blade"} boogie_si_record_i32($i28);
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3104} $i29 := uv_num_possible_blades();
    call {:si_unique_call 3105} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, $i28);
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i30 == 1);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb31:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i28;
    goto $bb31_dummy;

  $bb28:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $i9 := $i27;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3094} gru_teardown_tlb_irqs();
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $i31 := $i9;
    goto $bb34;

  $bb25:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $i9 := $i24;
    goto $bb8;

  $bb21:
    assume $i21 == 1;
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $i4 := $i1;
    goto $bb4;

  $bb4:
    call $i5, $i6, $i7, $i8, $i10, $i11, $i12, $p13, $i14, $i15, $i16, $i4 := gru_setup_tlb_irqs_loop_$bb4($i5, $i6, $i7, $i8, $i10, $i11, $i12, $p13, $i14, $i15, $i16, $i4);
    goto $bb4_last;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3090} $i5 := uv_cpu_to_blade_id($i4);
    call {:si_unique_call 3091} {:cexpr "blade"} boogie_si_record_i32($i5);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3092} $i6 := gru_chiplet_setup_tlb_irq(0, .str.70, gru0_intr, $i4, $i5);
    call {:si_unique_call 3093} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3095} $i10 := gru_chiplet_setup_tlb_irq(1, .str.71, gru1_intr, $i4, $i5);
    call {:si_unique_call 3096} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.3, cpu_online_mask);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3097} $i14 := cpumask_next($i4, $p13);
    call {:si_unique_call 3098} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.3, nr_cpu_ids);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i14, $i15);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i14;
    goto $bb13_dummy;

  $bb10:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb8;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb8;

  $bb31_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10840;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10812;
}



const gru_kservices_init: ref;

axiom gru_kservices_init == $sub.ref(0, 787089);

procedure gru_kservices_init() returns ($r: i32);
  free requires assertsPassed;



implementation gru_kservices_init() returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const gru_free_tables: ref;

axiom gru_free_tables == $sub.ref(0, 788121);

procedure gru_free_tables();
  free requires assertsPassed;



implementation gru_free_tables()
{
  var $p0: ref;
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $i95: i64;
  var $p96: ref;
  var $i97: i64;
  var $p98: ref;
  var $i99: i64;
  var $p100: ref;
  var $i101: i64;
  var $p102: ref;
  var $i103: i64;
  var $p104: ref;
  var $i105: i64;
  var $p106: ref;
  var $i107: i64;
  var $p108: ref;
  var $i109: i64;
  var $p110: ref;
  var $i111: i64;
  var $p112: ref;
  var $i113: i64;
  var $p114: ref;
  var $i115: i64;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $i119: i64;
  var $p120: ref;
  var $i121: i64;
  var $p122: ref;
  var $i123: i64;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $i127: i64;
  var $p128: ref;
  var $i129: i64;
  var $p130: ref;
  var $i131: i64;
  var $p132: ref;
  var $i133: i64;
  var $p134: ref;
  var $i135: i64;
  var $p136: ref;
  var $i137: i64;
  var $p138: ref;
  var $i139: i64;
  var $p140: ref;
  var $i141: i64;
  var $p142: ref;
  var $i143: i64;
  var $p144: ref;
  var $i145: i64;
  var $p146: ref;
  var $i147: i64;
  var $p148: ref;
  var $i149: i64;
  var $p150: ref;
  var $i151: i64;
  var $p152: ref;
  var $i153: i64;
  var $p154: ref;
  var $i155: i64;
  var $p156: ref;
  var $i157: i64;
  var $p158: ref;
  var $i159: i64;
  var $p160: ref;
  var $i161: i64;
  var $p162: ref;
  var $i163: i64;
  var $p164: ref;
  var $i165: i64;
  var $p166: ref;
  var $i167: i64;
  var $p168: ref;
  var $i169: i64;
  var $p170: ref;
  var $i171: i64;
  var $p172: ref;
  var $i173: i64;
  var $p174: ref;
  var $i175: i64;
  var $p176: ref;
  var $i177: i64;
  var $p178: ref;
  var $i179: i64;
  var $p180: ref;
  var $i181: i64;
  var $p182: ref;
  var $i183: i64;
  var $p184: ref;
  var $i185: i64;
  var $p186: ref;
  var $i187: i64;
  var $p188: ref;
  var $i189: i64;
  var $p190: ref;
  var $i191: i64;
  var $p192: ref;
  var $i193: i64;
  var $p194: ref;
  var $i195: i64;
  var $p196: ref;
  var $i197: i64;
  var $p198: ref;
  var $i199: i64;
  var $p200: ref;
  var $i201: i64;
  var $p202: ref;
  var $i203: i64;
  var $p204: ref;
  var $i205: i64;
  var $p206: ref;
  var $i207: i64;
  var $p208: ref;
  var $i209: i64;
  var $p210: ref;
  var $i211: i64;
  var $p212: ref;
  var $i213: i64;
  var $p214: ref;
  var $i215: i64;
  var $p216: ref;
  var $i217: i64;
  var $p218: ref;
  var $i219: i64;
  var $p220: ref;
  var $i221: i64;
  var $p222: ref;
  var $i223: i64;
  var $p224: ref;
  var $i225: i64;
  var $p226: ref;
  var $i227: i64;
  var $p228: ref;
  var $i229: i64;
  var $p230: ref;
  var $i231: i64;
  var $p232: ref;
  var $i233: i64;
  var $p234: ref;
  var $i235: i64;
  var $p236: ref;
  var $i237: i64;
  var $p238: ref;
  var $i239: i64;
  var $p240: ref;
  var $i241: i64;
  var $p242: ref;
  var $i243: i64;
  var $p244: ref;
  var $i245: i64;
  var $p246: ref;
  var $i247: i64;
  var $p248: ref;
  var $i249: i64;
  var $p250: ref;
  var $i251: i64;
  var $p252: ref;
  var $i253: i64;
  var $p254: ref;
  var $i255: i64;
  var $p256: ref;
  var $i257: i64;
  var $p258: ref;
  var $i259: i64;
  var $p260: ref;
  var $i261: i64;
  var $p262: ref;
  var $i263: i64;
  var $p264: ref;
  var $i265: i64;
  var $p266: ref;
  var $i267: i64;
  var $p268: ref;
  var $i269: i64;
  var $p270: ref;
  var $i271: i64;
  var $p272: ref;
  var $i273: i64;
  var $p274: ref;
  var $i275: i64;
  var $p276: ref;
  var $i277: i64;
  var $p278: ref;
  var $i279: i64;
  var $p280: ref;
  var $i281: i64;
  var $p282: ref;
  var $i283: i64;
  var $p284: ref;
  var $i285: i64;
  var $p286: ref;
  var $i287: i64;
  var $p288: ref;
  var $i289: i64;
  var $p290: ref;
  var $i291: i64;
  var $p292: ref;
  var $i293: i64;
  var $p294: ref;
  var $i295: i64;
  var $p296: ref;
  var $i297: i64;
  var $p298: ref;
  var $i299: i64;
  var $p300: ref;
  var $i301: i64;
  var $p302: ref;
  var $i303: i64;
  var $p304: ref;
  var $i305: i64;
  var $p306: ref;
  var $i307: i64;
  var $p308: ref;
  var $i309: i64;
  var $p310: ref;
  var $i311: i64;
  var $p312: ref;
  var $i313: i64;
  var $p314: ref;
  var $i315: i64;
  var $p316: ref;
  var $i317: i64;
  var $p318: ref;
  var $i319: i64;
  var $p320: ref;
  var $i321: i64;
  var $p322: ref;
  var $i323: i64;
  var $p324: ref;
  var $i325: i64;
  var $p326: ref;
  var $i327: i64;
  var $p328: ref;
  var $i329: i64;
  var $p330: ref;
  var $i331: i64;
  var $p332: ref;
  var $i333: i64;
  var $p334: ref;
  var $i335: i64;
  var $p336: ref;
  var $i337: i64;
  var $p338: ref;
  var $i339: i64;
  var $p340: ref;
  var $i341: i64;
  var $p342: ref;
  var $i343: i64;
  var $p344: ref;
  var $i345: i64;
  var $p346: ref;
  var $i347: i64;
  var $p348: ref;
  var $i349: i64;
  var $p350: ref;
  var $i351: i64;
  var $p352: ref;
  var $i353: i64;
  var $p354: ref;
  var $i355: i64;
  var $p356: ref;
  var $i357: i64;
  var $p358: ref;
  var $i359: i64;
  var $p360: ref;
  var $i361: i64;
  var $p362: ref;
  var $i363: i64;
  var $p364: ref;
  var $i365: i64;
  var $p366: ref;
  var $i367: i64;
  var $p368: ref;
  var $i369: i64;
  var $p370: ref;
  var $i371: i64;
  var $p372: ref;
  var $i373: i64;
  var $p374: ref;
  var $i375: i64;
  var $p376: ref;
  var $i377: i64;
  var $p378: ref;
  var $i379: i64;
  var $p380: ref;
  var $i381: i64;
  var $p382: ref;
  var $i383: i64;
  var $p384: ref;
  var $i385: i64;
  var $p386: ref;
  var $i387: i64;
  var $p388: ref;
  var $i389: i64;
  var $p390: ref;
  var $i391: i64;
  var $p392: ref;
  var $i393: i64;
  var $p394: ref;
  var $i395: i64;
  var $p396: ref;
  var $i397: i64;
  var $p398: ref;
  var $i399: i64;
  var $p400: ref;
  var $i401: i64;
  var $p402: ref;
  var $i403: i64;
  var $p404: ref;
  var $i405: i64;
  var $p406: ref;
  var $i407: i64;
  var $p408: ref;
  var $i409: i64;
  var $p410: ref;
  var $i411: i64;
  var $p412: ref;
  var $i413: i64;
  var $p414: ref;
  var $i415: i64;
  var $p416: ref;
  var $i417: i64;
  var $p418: ref;
  var $i419: i64;
  var $p420: ref;
  var $i421: i64;
  var $p422: ref;
  var $i423: i64;
  var $p424: ref;
  var $i425: i64;
  var $p426: ref;
  var $i427: i64;
  var $p428: ref;
  var $i429: i64;
  var $p430: ref;
  var $i431: i64;
  var $p432: ref;
  var $i433: i64;
  var $p434: ref;
  var $i435: i64;
  var $p436: ref;
  var $i437: i64;
  var $p438: ref;
  var $i439: i64;
  var $p440: ref;
  var $i441: i64;
  var $p442: ref;
  var $i443: i64;
  var $p444: ref;
  var $i445: i64;
  var $p446: ref;
  var $i447: i64;
  var $p448: ref;
  var $i449: i64;
  var $p450: ref;
  var $i451: i64;
  var $p452: ref;
  var $i453: i64;
  var $p454: ref;
  var $i455: i64;
  var $p456: ref;
  var $i457: i64;
  var $p458: ref;
  var $i459: i64;
  var $p460: ref;
  var $i461: i64;
  var $p462: ref;
  var $i463: i64;
  var $p464: ref;
  var $i465: i64;
  var $p466: ref;
  var $i467: i64;
  var $p468: ref;
  var $i469: i64;
  var $p470: ref;
  var $i471: i64;
  var $p472: ref;
  var $i473: i64;
  var $p474: ref;
  var $i475: i64;
  var $p476: ref;
  var $i477: i64;
  var $p478: ref;
  var $i479: i64;
  var $p480: ref;
  var $i481: i64;
  var $p482: ref;
  var $i483: i64;
  var $p484: ref;
  var $i485: i64;
  var $p486: ref;
  var $i487: i64;
  var $p488: ref;
  var $i489: i64;
  var $p490: ref;
  var $i491: i64;
  var $p492: ref;
  var $i493: i64;
  var $p494: ref;
  var $i495: i64;
  var $p496: ref;
  var $i497: i64;
  var $p498: ref;
  var $i499: i64;
  var $p500: ref;
  var $i501: i64;
  var $p502: ref;
  var $i503: i64;
  var $p504: ref;
  var $i505: i64;
  var $p506: ref;
  var $i507: i64;
  var $p508: ref;
  var $i509: i64;
  var $p510: ref;
  var $i511: i64;
  var $p512: ref;
  var $i513: i64;
  var $p514: ref;
  var $i515: i64;
  var $p516: ref;
  var $i517: i64;
  var $p518: ref;
  var $i519: i64;
  var $p520: ref;
  var $i521: i64;
  var $p522: ref;
  var $i523: i64;
  var $p524: ref;
  var $i525: i64;
  var $p526: ref;
  var $i527: i64;
  var $p528: ref;
  var $i529: i64;
  var $p530: ref;
  var $i531: i64;
  var $p532: ref;
  var $i533: i64;
  var $p534: ref;
  var $i535: i64;
  var $p536: ref;
  var $i537: i64;
  var $p538: ref;
  var $i539: i64;
  var $p540: ref;
  var $i541: i64;
  var $p542: ref;
  var $i543: i64;
  var $p544: ref;
  var $i545: i64;
  var $p546: ref;
  var $i547: i64;
  var $p548: ref;
  var $i549: i64;
  var $p550: ref;
  var $i551: i64;
  var $p552: ref;
  var $i553: i64;
  var $p554: ref;
  var $i555: i64;
  var $p556: ref;
  var $i557: i64;
  var $p558: ref;
  var $i559: i64;
  var $p560: ref;
  var $i561: i64;
  var $p562: ref;
  var $i563: i64;
  var $p564: ref;
  var $i565: i64;
  var $p566: ref;
  var $i567: i64;
  var $p568: ref;
  var $i569: i64;
  var $p570: ref;
  var $i571: i64;
  var $p572: ref;
  var $i573: i64;
  var $p574: ref;
  var $i575: i64;
  var $p576: ref;
  var $i577: i64;
  var $p578: ref;
  var $i579: i64;
  var $p580: ref;
  var $i581: i64;
  var $p582: ref;
  var $i583: i64;
  var $p584: ref;
  var $i585: i64;
  var $p586: ref;
  var $i587: i64;
  var $p588: ref;
  var $i589: i64;
  var $p590: ref;
  var $i591: i64;
  var $p592: ref;
  var $i593: i64;
  var $p594: ref;
  var $i595: i64;
  var $p596: ref;
  var $i597: i64;
  var $p598: ref;
  var $i599: i64;
  var $p600: ref;
  var $i601: i64;
  var $p602: ref;
  var $i603: i64;
  var $p604: ref;
  var $i605: i64;
  var $p606: ref;
  var $i607: i64;
  var $p608: ref;
  var $i609: i64;
  var $p610: ref;
  var $i611: i64;
  var $p612: ref;
  var $i613: i64;
  var $p614: ref;
  var $i615: i64;
  var $p616: ref;
  var $i617: i64;
  var $p618: ref;
  var $i619: i64;
  var $p620: ref;
  var $i621: i64;
  var $p622: ref;
  var $i623: i64;
  var $p624: ref;
  var $i625: i64;
  var $p626: ref;
  var $i627: i64;
  var $p628: ref;
  var $i629: i64;
  var $p630: ref;
  var $i631: i64;
  var $p632: ref;
  var $i633: i64;
  var $p634: ref;
  var $i635: i64;
  var $p636: ref;
  var $i637: i64;
  var $p638: ref;
  var $i639: i64;
  var $p640: ref;
  var $i641: i64;
  var $p642: ref;
  var $i643: i64;
  var $p644: ref;
  var $i645: i64;
  var $p646: ref;
  var $i647: i64;
  var $p648: ref;
  var $i649: i64;
  var $p650: ref;
  var $i651: i64;
  var $p652: ref;
  var $i653: i64;
  var $p654: ref;
  var $i655: i64;
  var $p656: ref;
  var $i657: i64;
  var $p658: ref;
  var $i659: i64;
  var $p660: ref;
  var $i661: i64;
  var $p662: ref;
  var $i663: i64;
  var $p664: ref;
  var $i665: i64;
  var $p666: ref;
  var $i667: i64;
  var $p668: ref;
  var $i669: i64;
  var $p670: ref;
  var $i671: i64;
  var $p672: ref;
  var $i673: i64;
  var $p674: ref;
  var $i675: i64;
  var $p676: ref;
  var $i677: i64;
  var $p678: ref;
  var $i679: i64;
  var $p680: ref;
  var $i681: i64;
  var $p682: ref;
  var $i683: i64;
  var $p684: ref;
  var $i685: i64;
  var $p686: ref;
  var $i687: i64;
  var $p688: ref;
  var $i689: i64;
  var $p690: ref;
  var $i691: i64;
  var $p692: ref;
  var $i693: i64;
  var $p694: ref;
  var $i695: i64;
  var $p696: ref;
  var $i697: i64;
  var $p698: ref;
  var $i699: i64;
  var $p700: ref;
  var $i701: i64;
  var $p702: ref;
  var $i703: i64;
  var $p704: ref;
  var $i705: i64;
  var $p706: ref;
  var $i707: i64;
  var $p708: ref;
  var $i709: i64;
  var $p710: ref;
  var $i711: i64;
  var $p712: ref;
  var $i713: i64;
  var $p714: ref;
  var $i715: i64;
  var $p716: ref;
  var $i717: i64;
  var $p718: ref;
  var $i719: i64;
  var $p720: ref;
  var $i721: i64;
  var $p722: ref;
  var $i723: i64;
  var $p724: ref;
  var $i725: i64;
  var $p726: ref;
  var $i727: i64;
  var $p728: ref;
  var $i729: i64;
  var $p730: ref;
  var $i731: i64;
  var $p732: ref;
  var $i733: i64;
  var $p734: ref;
  var $i735: i64;
  var $p736: ref;
  var $i737: i64;
  var $p738: ref;
  var $i739: i64;
  var $p740: ref;
  var $i741: i64;
  var $p742: ref;
  var $i743: i64;
  var $p744: ref;
  var $i745: i64;
  var $p746: ref;
  var $i747: i64;
  var $p748: ref;
  var $i749: i64;
  var $p750: ref;
  var $i751: i64;
  var $p752: ref;
  var $i753: i64;
  var $p754: ref;
  var $i755: i64;
  var $p756: ref;
  var $i757: i64;
  var $p758: ref;
  var $i759: i64;
  var $p760: ref;
  var $i761: i64;
  var $p762: ref;
  var $i763: i64;
  var $p764: ref;
  var $i765: i64;
  var $p766: ref;
  var $i767: i64;
  var $p768: ref;
  var $i769: i64;
  var $p770: ref;
  var $i771: i64;
  var $p772: ref;
  var $i773: i64;
  var $p774: ref;
  var $i775: i64;
  var $p776: ref;
  var $i777: i64;
  var $p778: ref;
  var $i779: i64;
  var $p780: ref;
  var $i781: i64;
  var $p782: ref;
  var $i783: i64;
  var $p784: ref;
  var $i785: i64;
  var $p786: ref;
  var $i787: i64;
  var $p788: ref;
  var $i789: i64;
  var $p790: ref;
  var $i791: i64;
  var $p792: ref;
  var $i793: i64;
  var $p794: ref;
  var $i795: i64;
  var $p796: ref;
  var $i797: i64;
  var $p798: ref;
  var $i799: i64;
  var $p800: ref;
  var $i801: i64;
  var $p802: ref;
  var $i803: i64;
  var $p804: ref;
  var $i805: i64;
  var $p806: ref;
  var $i807: i64;
  var $p808: ref;
  var $i809: i64;
  var $p810: ref;
  var $i811: i64;
  var $p812: ref;
  var $i813: i64;
  var $p814: ref;
  var $i815: i64;
  var $p816: ref;
  var $i817: i64;
  var $p818: ref;
  var $i819: i64;
  var $p820: ref;
  var $i821: i64;
  var $p822: ref;
  var $i823: i64;
  var $p824: ref;
  var $i825: i64;
  var $p826: ref;
  var $i827: i64;
  var $p828: ref;
  var $i829: i64;
  var $p830: ref;
  var $i831: i64;
  var $p832: ref;
  var $i833: i64;
  var $p834: ref;
  var $i835: i64;
  var $p836: ref;
  var $i837: i64;
  var $p838: ref;
  var $i839: i64;
  var $p840: ref;
  var $i841: i64;
  var $p842: ref;
  var $i843: i64;
  var $p844: ref;
  var $i845: i64;
  var $p846: ref;
  var $i847: i64;
  var $p848: ref;
  var $i849: i64;
  var $p850: ref;
  var $i851: i64;
  var $p852: ref;
  var $i853: i64;
  var $p854: ref;
  var $i855: i64;
  var $p856: ref;
  var $i857: i64;
  var $p858: ref;
  var $i859: i64;
  var $p860: ref;
  var $i861: i64;
  var $p862: ref;
  var $i863: i64;
  var $p864: ref;
  var $i865: i64;
  var $p866: ref;
  var $i867: i64;
  var $p868: ref;
  var $i869: i64;
  var $p870: ref;
  var $i871: i64;
  var $p872: ref;
  var $i873: i64;
  var $p874: ref;
  var $i875: i64;
  var $p876: ref;
  var $i877: i64;
  var $p878: ref;
  var $i879: i64;
  var $p880: ref;
  var $i881: i64;
  var $p882: ref;
  var $i883: i64;
  var $p884: ref;
  var $i885: i64;
  var $p886: ref;
  var $i887: i64;
  var $p888: ref;
  var $i889: i64;
  var $p890: ref;
  var $i891: i64;
  var $p892: ref;
  var $i893: i64;
  var $p894: ref;
  var $i895: i64;
  var $p896: ref;
  var $i897: i64;
  var $p898: ref;
  var $i899: i64;
  var $p900: ref;
  var $i901: i64;
  var $p902: ref;
  var $i903: i64;
  var $p904: ref;
  var $i905: i64;
  var $p906: ref;
  var $i907: i64;
  var $p908: ref;
  var $i909: i64;
  var $p910: ref;
  var $i911: i64;
  var $p912: ref;
  var $i913: i64;
  var $p914: ref;
  var $i915: i64;
  var $p916: ref;
  var $i917: i64;
  var $p918: ref;
  var $i919: i64;
  var $p920: ref;
  var $i921: i64;
  var $p922: ref;
  var $i923: i64;
  var $p924: ref;
  var $i925: i64;
  var $p926: ref;
  var $i927: i64;
  var $p928: ref;
  var $i929: i64;
  var $p930: ref;
  var $i931: i64;
  var $p932: ref;
  var $i933: i64;
  var $p934: ref;
  var $i935: i64;
  var $p936: ref;
  var $i937: i64;
  var $p938: ref;
  var $i939: i64;
  var $p940: ref;
  var $i941: i64;
  var $p942: ref;
  var $i943: i64;
  var $p944: ref;
  var $i945: i64;
  var $p946: ref;
  var $i947: i64;
  var $p948: ref;
  var $i949: i64;
  var $p950: ref;
  var $i951: i64;
  var $p952: ref;
  var $i953: i64;
  var $p954: ref;
  var $i955: i64;
  var $p956: ref;
  var $i957: i64;
  var $p958: ref;
  var $i959: i64;
  var $p960: ref;
  var $i961: i64;
  var $p962: ref;
  var $i963: i64;
  var $p964: ref;
  var $i965: i64;
  var $p966: ref;
  var $i967: i64;
  var $p968: ref;
  var $i969: i64;
  var $p970: ref;
  var $i971: i64;
  var $p972: ref;
  var $i973: i64;
  var $p974: ref;
  var $i975: i64;
  var $p976: ref;
  var $i977: i64;
  var $p978: ref;
  var $i979: i64;
  var $p980: ref;
  var $i981: i64;
  var $p982: ref;
  var $i983: i64;
  var $p984: ref;
  var $i985: i64;
  var $p986: ref;
  var $i987: i64;
  var $p988: ref;
  var $i989: i64;
  var $p990: ref;
  var $i991: i64;
  var $p992: ref;
  var $i993: i64;
  var $p994: ref;
  var $i995: i64;
  var $p996: ref;
  var $i997: i64;
  var $p998: ref;
  var $i999: i64;
  var $p1000: ref;
  var $i1001: i64;
  var $p1002: ref;
  var $i1003: i64;
  var $p1004: ref;
  var $i1005: i64;
  var $p1006: ref;
  var $i1007: i64;
  var $p1008: ref;
  var $i1009: i64;
  var $p1010: ref;
  var $i1011: i64;
  var $p1012: ref;
  var $i1013: i64;
  var $p1014: ref;
  var $i1015: i64;
  var $p1016: ref;
  var $i1017: i64;
  var $p1018: ref;
  var $i1019: i64;
  var $p1020: ref;
  var $i1021: i64;
  var $p1022: ref;
  var $i1023: i64;
  var $p1024: ref;
  var $i1025: i64;
  var $p1026: ref;
  var $i1027: i64;
  var $p1028: ref;
  var $i1029: i64;
  var $p1030: ref;
  var $i1031: i64;
  var $p1032: ref;
  var $i1033: i64;
  var $p1034: ref;
  var $i1035: i64;
  var $p1036: ref;
  var $i1037: i64;
  var $p1038: ref;
  var $i1039: i64;
  var $p1040: ref;
  var $i1041: i64;
  var $p1042: ref;
  var $i1043: i64;
  var $p1044: ref;
  var $i1045: i64;
  var $p1046: ref;
  var $i1047: i64;
  var $p1048: ref;
  var $i1049: i64;
  var $p1050: ref;
  var $i1051: i64;
  var $p1052: ref;
  var $i1053: i64;
  var $p1054: ref;
  var $i1055: i64;
  var $p1056: ref;
  var $i1057: i64;
  var $p1058: ref;
  var $i1059: i64;
  var $p1060: ref;
  var $i1061: i64;
  var $p1062: ref;
  var $i1063: i64;
  var $p1064: ref;
  var $i1065: i64;
  var $p1066: ref;
  var $i1067: i64;
  var $p1068: ref;
  var $i1069: i64;
  var $p1070: ref;
  var $i1071: i64;
  var $p1072: ref;
  var $i1073: i64;
  var $p1074: ref;
  var $i1075: i64;
  var $p1076: ref;
  var $i1077: i64;
  var $p1078: ref;
  var $i1079: i64;
  var $p1080: ref;
  var $i1081: i64;
  var $p1082: ref;
  var $i1083: i64;
  var $p1084: ref;
  var $i1085: i64;
  var $p1086: ref;
  var $i1087: i64;
  var $p1088: ref;
  var $i1089: i64;
  var $p1090: ref;
  var $i1091: i64;
  var $p1092: ref;
  var $i1093: i64;
  var $p1094: ref;
  var $i1095: i64;
  var $p1096: ref;
  var $i1097: i64;
  var $p1098: ref;
  var $i1099: i64;
  var $p1100: ref;
  var $i1101: i64;
  var $p1102: ref;
  var $i1103: i64;
  var $p1104: ref;
  var $i1105: i64;
  var $p1106: ref;
  var $i1107: i64;
  var $p1108: ref;
  var $i1109: i64;
  var $p1110: ref;
  var $i1111: i64;
  var $p1112: ref;
  var $i1113: i64;
  var $p1114: ref;
  var $i1115: i64;
  var $p1116: ref;
  var $i1117: i64;
  var $p1118: ref;
  var $i1119: i64;
  var $p1120: ref;
  var $i1121: i64;
  var $p1122: ref;
  var $i1123: i64;
  var $p1124: ref;
  var $i1125: i64;
  var $p1126: ref;
  var $i1127: i64;
  var $p1128: ref;
  var $i1129: i64;
  var $p1130: ref;
  var $i1131: i64;
  var $p1132: ref;
  var $i1133: i64;
  var $p1134: ref;
  var $i1135: i64;
  var $p1136: ref;
  var $i1137: i64;
  var $p1138: ref;
  var $i1139: i64;
  var $p1140: ref;
  var $i1141: i64;
  var $p1142: ref;
  var $i1143: i64;
  var $p1144: ref;
  var $i1145: i64;
  var $p1146: ref;
  var $i1147: i64;
  var $p1148: ref;
  var $i1149: i64;
  var $p1150: ref;
  var $i1151: i64;
  var $p1152: ref;
  var $i1153: i64;
  var $p1154: ref;
  var $i1155: i64;
  var $p1156: ref;
  var $i1157: i64;
  var $p1158: ref;
  var $i1159: i64;
  var $p1160: ref;
  var $i1161: i64;
  var $p1162: ref;
  var $i1163: i64;
  var $p1164: ref;
  var $i1165: i64;
  var $p1166: ref;
  var $i1167: i64;
  var $p1168: ref;
  var $i1169: i64;
  var $p1170: ref;
  var $i1171: i64;
  var $p1172: ref;
  var $i1173: i64;
  var $p1174: ref;
  var $i1175: i64;
  var $p1176: ref;
  var $i1177: i64;
  var $p1178: ref;
  var $i1179: i64;
  var $p1180: ref;
  var $i1181: i64;
  var $p1182: ref;
  var $i1183: i64;
  var $p1184: ref;
  var $i1185: i64;
  var $p1186: ref;
  var $i1187: i64;
  var $p1188: ref;
  var $i1189: i64;
  var $p1190: ref;
  var $i1191: i64;
  var $p1192: ref;
  var $i1193: i64;
  var $p1194: ref;
  var $i1195: i64;
  var $p1196: ref;
  var $i1197: i64;
  var $p1198: ref;
  var $i1199: i64;
  var $p1200: ref;
  var $i1201: i64;
  var $p1202: ref;
  var $i1203: i64;
  var $p1204: ref;
  var $i1205: i64;
  var $p1206: ref;
  var $i1207: i64;
  var $p1208: ref;
  var $i1209: i64;
  var $p1210: ref;
  var $i1211: i64;
  var $p1212: ref;
  var $i1213: i64;
  var $p1214: ref;
  var $i1215: i64;
  var $p1216: ref;
  var $i1217: i64;
  var $p1218: ref;
  var $i1219: i64;
  var $p1220: ref;
  var $i1221: i64;
  var $p1222: ref;
  var $i1223: i64;
  var $p1224: ref;
  var $i1225: i64;
  var $p1226: ref;
  var $i1227: i64;
  var $p1228: ref;
  var $i1229: i64;
  var $p1230: ref;
  var $i1231: i64;
  var $p1232: ref;
  var $i1233: i64;
  var $p1234: ref;
  var $i1235: i64;
  var $p1236: ref;
  var $i1237: i64;
  var $p1238: ref;
  var $i1239: i64;
  var $p1240: ref;
  var $i1241: i64;
  var $p1242: ref;
  var $i1243: i64;
  var $p1244: ref;
  var $i1245: i64;
  var $p1246: ref;
  var $i1247: i64;
  var $p1248: ref;
  var $i1249: i64;
  var $p1250: ref;
  var $i1251: i64;
  var $p1252: ref;
  var $i1253: i64;
  var $p1254: ref;
  var $i1255: i64;
  var $p1256: ref;
  var $i1257: i64;
  var $p1258: ref;
  var $i1259: i64;
  var $p1260: ref;
  var $i1261: i64;
  var $p1262: ref;
  var $i1263: i64;
  var $p1264: ref;
  var $i1265: i64;
  var $p1266: ref;
  var $i1267: i64;
  var $p1268: ref;
  var $i1269: i64;
  var $p1270: ref;
  var $i1271: i64;
  var $p1272: ref;
  var $i1273: i64;
  var $p1274: ref;
  var $i1275: i64;
  var $p1276: ref;
  var $i1277: i64;
  var $p1278: ref;
  var $i1279: i64;
  var $p1280: ref;
  var $i1281: i64;
  var $p1282: ref;
  var $i1283: i64;
  var $p1284: ref;
  var $i1285: i64;
  var $p1286: ref;
  var $i1287: i64;
  var $p1288: ref;
  var $i1289: i64;
  var $p1290: ref;
  var $i1291: i64;
  var $p1292: ref;
  var $i1293: i64;
  var $p1294: ref;
  var $i1295: i64;
  var $p1296: ref;
  var $i1297: i64;
  var $p1298: ref;
  var $i1299: i64;
  var $p1300: ref;
  var $i1301: i64;
  var $p1302: ref;
  var $i1303: i64;
  var $p1304: ref;
  var $i1305: i64;
  var $p1306: ref;
  var $i1307: i64;
  var $p1308: ref;
  var $i1309: i64;
  var $p1310: ref;
  var $i1311: i64;
  var $p1312: ref;
  var $i1313: i64;
  var $p1314: ref;
  var $i1315: i64;
  var $p1316: ref;
  var $i1317: i64;
  var $p1318: ref;
  var $i1319: i64;
  var $p1320: ref;
  var $i1321: i64;
  var $p1322: ref;
  var $i1323: i64;
  var $p1324: ref;
  var $i1325: i64;
  var $p1326: ref;
  var $i1327: i64;
  var $p1328: ref;
  var $i1329: i64;
  var $p1330: ref;
  var $i1331: i64;
  var $p1332: ref;
  var $i1333: i64;
  var $p1334: ref;
  var $i1335: i64;
  var $p1336: ref;
  var $i1337: i64;
  var $p1338: ref;
  var $i1339: i64;
  var $p1340: ref;
  var $i1341: i64;
  var $p1342: ref;
  var $i1343: i64;
  var $p1344: ref;
  var $i1345: i64;
  var $p1346: ref;
  var $i1347: i64;
  var $p1348: ref;
  var $i1349: i64;
  var $p1350: ref;
  var $i1351: i64;
  var $p1352: ref;
  var $i1353: i64;
  var $p1354: ref;
  var $i1355: i64;
  var $p1356: ref;
  var $i1357: i64;
  var $p1358: ref;
  var $i1359: i64;
  var $p1360: ref;
  var $i1361: i64;
  var $p1362: ref;
  var $i1363: i64;
  var $p1364: ref;
  var $i1365: i64;
  var $p1366: ref;
  var $i1367: i64;
  var $p1368: ref;
  var $i1369: i64;
  var $p1370: ref;
  var $i1371: i64;
  var $p1372: ref;
  var $i1373: i64;
  var $p1374: ref;
  var $i1375: i64;
  var $p1376: ref;
  var $i1377: i64;
  var $p1378: ref;
  var $i1379: i64;
  var $p1380: ref;
  var $i1381: i64;
  var $p1382: ref;
  var $i1383: i64;
  var $p1384: ref;
  var $i1385: i64;
  var $p1386: ref;
  var $i1387: i64;
  var $p1388: ref;
  var $i1389: i64;
  var $p1390: ref;
  var $i1391: i64;
  var $p1392: ref;
  var $i1393: i64;
  var $p1394: ref;
  var $i1395: i64;
  var $p1396: ref;
  var $i1397: i64;
  var $p1398: ref;
  var $i1399: i64;
  var $p1400: ref;
  var $i1401: i64;
  var $p1402: ref;
  var $i1403: i64;
  var $p1404: ref;
  var $i1405: i64;
  var $p1406: ref;
  var $i1407: i64;
  var $p1408: ref;
  var $i1409: i64;
  var $p1410: ref;
  var $i1411: i64;
  var $p1412: ref;
  var $i1413: i64;
  var $p1414: ref;
  var $i1415: i64;
  var $p1416: ref;
  var $i1417: i64;
  var $p1418: ref;
  var $i1419: i64;
  var $p1420: ref;
  var $i1421: i64;
  var $p1422: ref;
  var $i1423: i64;
  var $p1424: ref;
  var $i1425: i64;
  var $p1426: ref;
  var $i1427: i64;
  var $p1428: ref;
  var $i1429: i64;
  var $p1430: ref;
  var $i1431: i64;
  var $p1432: ref;
  var $i1433: i64;
  var $p1434: ref;
  var $i1435: i64;
  var $p1436: ref;
  var $i1437: i64;
  var $p1438: ref;
  var $i1439: i64;
  var $p1440: ref;
  var $i1441: i64;
  var $p1442: ref;
  var $i1443: i64;
  var $p1444: ref;
  var $i1445: i64;
  var $p1446: ref;
  var $i1447: i64;
  var $p1448: ref;
  var $i1449: i64;
  var $p1450: ref;
  var $i1451: i64;
  var $p1452: ref;
  var $i1453: i64;
  var $p1454: ref;
  var $i1455: i64;
  var $p1456: ref;
  var $i1457: i64;
  var $p1458: ref;
  var $i1459: i64;
  var $p1460: ref;
  var $i1461: i64;
  var $p1462: ref;
  var $i1463: i64;
  var $p1464: ref;
  var $i1465: i64;
  var $p1466: ref;
  var $i1467: i64;
  var $p1468: ref;
  var $i1469: i64;
  var $p1470: ref;
  var $i1471: i64;
  var $p1472: ref;
  var $i1473: i64;
  var $p1474: ref;
  var $i1475: i64;
  var $p1476: ref;
  var $i1477: i64;
  var $p1478: ref;
  var $i1479: i64;
  var $p1480: ref;
  var $i1481: i64;
  var $p1482: ref;
  var $i1483: i64;
  var $p1484: ref;
  var $i1485: i64;
  var $p1486: ref;
  var $i1487: i64;
  var $p1488: ref;
  var $i1489: i64;
  var $p1490: ref;
  var $i1491: i64;
  var $p1492: ref;
  var $i1493: i64;
  var $p1494: ref;
  var $i1495: i64;
  var $p1496: ref;
  var $i1497: i64;
  var $p1498: ref;
  var $i1499: i64;
  var $p1500: ref;
  var $i1501: i64;
  var $p1502: ref;
  var $i1503: i64;
  var $p1504: ref;
  var $i1505: i64;
  var $p1506: ref;
  var $i1507: i64;
  var $p1508: ref;
  var $i1509: i64;
  var $p1510: ref;
  var $i1511: i64;
  var $p1512: ref;
  var $i1513: i64;
  var $p1514: ref;
  var $i1515: i64;
  var $p1516: ref;
  var $i1517: i64;
  var $p1518: ref;
  var $i1519: i64;
  var $p1520: ref;
  var $i1521: i64;
  var $p1522: ref;
  var $i1523: i64;
  var $p1524: ref;
  var $i1525: i64;
  var $p1526: ref;
  var $i1527: i64;
  var $p1528: ref;
  var $i1529: i64;
  var $p1530: ref;
  var $i1531: i64;
  var $p1532: ref;
  var $i1533: i64;
  var $p1534: ref;
  var $i1535: i64;
  var $p1536: ref;
  var $i1537: i64;
  var $p1538: ref;
  var $i1539: i64;
  var $p1540: ref;
  var $i1541: i64;
  var $p1542: ref;
  var $i1543: i64;
  var $p1544: ref;
  var $i1545: i64;
  var $p1546: ref;
  var $i1547: i64;
  var $p1548: ref;
  var $i1549: i64;
  var $p1550: ref;
  var $i1551: i64;
  var $p1552: ref;
  var $i1553: i64;
  var $p1554: ref;
  var $i1555: i64;
  var $p1556: ref;
  var $i1557: i64;
  var $p1558: ref;
  var $i1559: i64;
  var $p1560: ref;
  var $i1561: i64;
  var $p1562: ref;
  var $i1563: i64;
  var $p1564: ref;
  var $i1565: i64;
  var $p1566: ref;
  var $i1567: i64;
  var $p1568: ref;
  var $i1569: i64;
  var $p1570: ref;
  var $i1571: i64;
  var $p1572: ref;
  var $i1573: i64;
  var $p1574: ref;
  var $i1575: i64;
  var $p1576: ref;
  var $i1577: i64;
  var $p1578: ref;
  var $i1579: i64;
  var $p1580: ref;
  var $i1581: i64;
  var $p1582: ref;
  var $i1583: i64;
  var $p1584: ref;
  var $i1585: i64;
  var $p1586: ref;
  var $i1587: i64;
  var $p1588: ref;
  var $i1589: i64;
  var $p1590: ref;
  var $i1591: i64;
  var $p1592: ref;
  var $i1593: i64;
  var $p1594: ref;
  var $i1595: i64;
  var $p1596: ref;
  var $i1597: i64;
  var $p1598: ref;
  var $i1599: i64;
  var $p1600: ref;
  var $i1601: i64;
  var $p1602: ref;
  var $i1603: i64;
  var $p1604: ref;
  var $i1605: i64;
  var $p1606: ref;
  var $i1607: i64;
  var $p1608: ref;
  var $i1609: i64;
  var $p1610: ref;
  var $i1611: i64;
  var $p1612: ref;
  var $i1613: i64;
  var $p1614: ref;
  var $i1615: i64;
  var $p1616: ref;
  var $i1617: i64;
  var $p1618: ref;
  var $i1619: i64;
  var $p1620: ref;
  var $i1621: i64;
  var $p1622: ref;
  var $i1623: i64;
  var $p1624: ref;
  var $i1625: i64;
  var $p1626: ref;
  var $i1627: i64;
  var $p1628: ref;
  var $i1629: i64;
  var $p1630: ref;
  var $i1631: i64;
  var $p1632: ref;
  var $i1633: i64;
  var $p1634: ref;
  var $i1635: i64;
  var $p1636: ref;
  var $i1637: i64;
  var $p1638: ref;
  var $i1639: i64;
  var $p1640: ref;
  var $i1641: i64;
  var $p1642: ref;
  var $i1643: i64;
  var $p1644: ref;
  var $i1645: i64;
  var $p1646: ref;
  var $i1647: i64;
  var $p1648: ref;
  var $i1649: i64;
  var $p1650: ref;
  var $i1651: i64;
  var $p1652: ref;
  var $i1653: i64;
  var $p1654: ref;
  var $i1655: i64;
  var $p1656: ref;
  var $i1657: i64;
  var $p1658: ref;
  var $i1659: i64;
  var $p1660: ref;
  var $i1661: i64;
  var $p1662: ref;
  var $i1663: i64;
  var $p1664: ref;
  var $i1665: i64;
  var $p1666: ref;
  var $i1667: i64;
  var $p1668: ref;
  var $i1669: i64;
  var $p1670: ref;
  var $i1671: i64;
  var $p1672: ref;
  var $i1673: i64;
  var $p1674: ref;
  var $i1675: i64;
  var $p1676: ref;
  var $i1677: i64;
  var $p1678: ref;
  var $i1679: i64;
  var $p1680: ref;
  var $i1681: i64;
  var $p1682: ref;
  var $i1683: i64;
  var $p1684: ref;
  var $i1685: i64;
  var $p1686: ref;
  var $i1687: i64;
  var $p1688: ref;
  var $i1689: i64;
  var $p1690: ref;
  var $i1691: i64;
  var $p1692: ref;
  var $i1693: i64;
  var $p1694: ref;
  var $i1695: i64;
  var $p1696: ref;
  var $i1697: i64;
  var $p1698: ref;
  var $i1699: i64;
  var $p1700: ref;
  var $i1701: i64;
  var $p1702: ref;
  var $i1703: i64;
  var $p1704: ref;
  var $i1705: i64;
  var $p1706: ref;
  var $i1707: i64;
  var $p1708: ref;
  var $i1709: i64;
  var $p1710: ref;
  var $i1711: i64;
  var $p1712: ref;
  var $i1713: i64;
  var $p1714: ref;
  var $i1715: i64;
  var $p1716: ref;
  var $i1717: i64;
  var $p1718: ref;
  var $i1719: i64;
  var $p1720: ref;
  var $i1721: i64;
  var $p1722: ref;
  var $i1723: i64;
  var $p1724: ref;
  var $i1725: i64;
  var $p1726: ref;
  var $i1727: i64;
  var $p1728: ref;
  var $i1729: i64;
  var $p1730: ref;
  var $i1731: i64;
  var $p1732: ref;
  var $i1733: i64;
  var $p1734: ref;
  var $i1735: i64;
  var $p1736: ref;
  var $i1737: i64;
  var $p1738: ref;
  var $i1739: i64;
  var $p1740: ref;
  var $i1741: i64;
  var $p1742: ref;
  var $i1743: i64;
  var $p1744: ref;
  var $i1745: i64;
  var $p1746: ref;
  var $i1747: i64;
  var $p1748: ref;
  var $i1749: i64;
  var $p1750: ref;
  var $i1751: i64;
  var $p1752: ref;
  var $i1753: i64;
  var $p1754: ref;
  var $i1755: i64;
  var $p1756: ref;
  var $i1757: i64;
  var $p1758: ref;
  var $i1759: i64;
  var $p1760: ref;
  var $i1761: i64;
  var $p1762: ref;
  var $i1763: i64;
  var $p1764: ref;
  var $i1765: i64;
  var $p1766: ref;
  var $i1767: i64;
  var $p1768: ref;
  var $i1769: i64;
  var $p1770: ref;
  var $i1771: i64;
  var $p1772: ref;
  var $i1773: i64;
  var $p1774: ref;
  var $i1775: i64;
  var $p1776: ref;
  var $i1777: i64;
  var $p1778: ref;
  var $i1779: i64;
  var $p1780: ref;
  var $i1781: i64;
  var $p1782: ref;
  var $i1783: i64;
  var $p1784: ref;
  var $i1785: i64;
  var $p1786: ref;
  var $i1787: i64;
  var $p1788: ref;
  var $i1789: i64;
  var $p1790: ref;
  var $i1791: i64;
  var $p1792: ref;
  var $i1793: i64;
  var $p1794: ref;
  var $i1795: i64;
  var $p1796: ref;
  var $i1797: i64;
  var $p1798: ref;
  var $i1799: i64;
  var $p1800: ref;
  var $i1801: i64;
  var $p1802: ref;
  var $i1803: i64;
  var $p1804: ref;
  var $i1805: i64;
  var $p1806: ref;
  var $i1807: i64;
  var $p1808: ref;
  var $i1809: i64;
  var $p1810: ref;
  var $i1811: i64;
  var $p1812: ref;
  var $i1813: i64;
  var $p1814: ref;
  var $i1815: i64;
  var $p1816: ref;
  var $i1817: i64;
  var $p1818: ref;
  var $i1819: i64;
  var $p1820: ref;
  var $i1821: i64;
  var $p1822: ref;
  var $i1823: i64;
  var $p1824: ref;
  var $i1825: i64;
  var $p1826: ref;
  var $i1827: i64;
  var $p1828: ref;
  var $i1829: i64;
  var $p1830: ref;
  var $i1831: i64;
  var $p1832: ref;
  var $i1833: i64;
  var $p1834: ref;
  var $i1835: i64;
  var $p1836: ref;
  var $i1837: i64;
  var $p1838: ref;
  var $i1839: i64;
  var $p1840: ref;
  var $i1841: i64;
  var $p1842: ref;
  var $i1843: i64;
  var $p1844: ref;
  var $i1845: i64;
  var $p1846: ref;
  var $i1847: i64;
  var $p1848: ref;
  var $i1849: i64;
  var $p1850: ref;
  var $i1851: i64;
  var $p1852: ref;
  var $i1853: i64;
  var $p1854: ref;
  var $i1855: i64;
  var $p1856: ref;
  var $i1857: i64;
  var $p1858: ref;
  var $i1859: i64;
  var $p1860: ref;
  var $i1861: i64;
  var $p1862: ref;
  var $i1863: i64;
  var $p1864: ref;
  var $i1865: i64;
  var $p1866: ref;
  var $i1867: i64;
  var $p1868: ref;
  var $i1869: i64;
  var $p1870: ref;
  var $i1871: i64;
  var $p1872: ref;
  var $i1873: i64;
  var $p1874: ref;
  var $i1875: i64;
  var $p1876: ref;
  var $i1877: i64;
  var $p1878: ref;
  var $i1879: i64;
  var $p1880: ref;
  var $i1881: i64;
  var $p1882: ref;
  var $i1883: i64;
  var $p1884: ref;
  var $i1885: i64;
  var $p1886: ref;
  var $i1887: i64;
  var $p1888: ref;
  var $i1889: i64;
  var $p1890: ref;
  var $i1891: i64;
  var $p1892: ref;
  var $i1893: i64;
  var $p1894: ref;
  var $i1895: i64;
  var $p1896: ref;
  var $i1897: i64;
  var $p1898: ref;
  var $i1899: i64;
  var $p1900: ref;
  var $i1901: i64;
  var $p1902: ref;
  var $i1903: i64;
  var $p1904: ref;
  var $i1905: i64;
  var $p1906: ref;
  var $i1907: i64;
  var $p1908: ref;
  var $i1909: i64;
  var $p1910: ref;
  var $i1911: i64;
  var $p1912: ref;
  var $i1913: i64;
  var $p1914: ref;
  var $i1915: i64;
  var $p1916: ref;
  var $i1917: i64;
  var $p1918: ref;
  var $i1919: i64;
  var $p1920: ref;
  var $i1921: i64;
  var $p1922: ref;
  var $i1923: i64;
  var $p1924: ref;
  var $i1925: i64;
  var $p1926: ref;
  var $i1927: i64;
  var $p1928: ref;
  var $i1929: i64;
  var $p1930: ref;
  var $i1931: i64;
  var $p1932: ref;
  var $i1933: i64;
  var $p1934: ref;
  var $i1935: i64;
  var $p1936: ref;
  var $i1937: i64;
  var $p1938: ref;
  var $i1939: i64;
  var $p1940: ref;
  var $i1941: i64;
  var $p1942: ref;
  var $i1943: i64;
  var $p1944: ref;
  var $i1945: i64;
  var $p1946: ref;
  var $i1947: i64;
  var $p1948: ref;
  var $i1949: i64;
  var $p1950: ref;
  var $i1951: i64;
  var $p1952: ref;
  var $i1953: i64;
  var $p1954: ref;
  var $i1955: i64;
  var $p1956: ref;
  var $i1957: i64;
  var $p1958: ref;
  var $i1959: i64;
  var $p1960: ref;
  var $i1961: i64;
  var $p1962: ref;
  var $i1963: i64;
  var $p1964: ref;
  var $i1965: i64;
  var $p1966: ref;
  var $i1967: i64;
  var $p1968: ref;
  var $i1969: i64;
  var $p1970: ref;
  var $i1971: i64;
  var $p1972: ref;
  var $i1973: i64;
  var $p1974: ref;
  var $i1975: i64;
  var $p1976: ref;
  var $i1977: i64;
  var $p1978: ref;
  var $i1979: i64;
  var $p1980: ref;
  var $i1981: i64;
  var $p1982: ref;
  var $i1983: i64;
  var $p1984: ref;
  var $i1985: i64;
  var $p1986: ref;
  var $i1987: i64;
  var $p1988: ref;
  var $i1989: i64;
  var $p1990: ref;
  var $i1991: i64;
  var $p1992: ref;
  var $i1993: i64;
  var $p1994: ref;
  var $i1995: i64;
  var $p1996: ref;
  var $i1997: i64;
  var $p1998: ref;
  var $i1999: i64;
  var $p2000: ref;
  var $i2001: i64;
  var $p2002: ref;
  var $i2003: i64;
  var $p2004: ref;
  var $i2005: i64;
  var $p2006: ref;
  var $i2007: i64;
  var $p2008: ref;
  var $i2009: i64;
  var $p2010: ref;
  var $i2011: i64;
  var $p2012: ref;
  var $i2013: i64;
  var $p2014: ref;
  var $i2015: i64;
  var $p2016: ref;
  var $i2017: i64;
  var $p2018: ref;
  var $i2019: i64;
  var $p2020: ref;
  var $i2021: i64;
  var $p2022: ref;
  var $i2023: i64;
  var $p2024: ref;
  var $i2025: i64;
  var $p2026: ref;
  var $i2027: i64;
  var $p2028: ref;
  var $i2029: i64;
  var $p2030: ref;
  var $i2031: i64;
  var $p2032: ref;
  var $i2033: i64;
  var $p2034: ref;
  var $i2035: i64;
  var $p2036: ref;
  var $i2037: i64;
  var $p2038: ref;
  var $i2039: i64;
  var $p2040: ref;
  var $i2041: i64;
  var $p2042: ref;
  var $i2043: i64;
  var $p2044: ref;
  var $i2045: i64;
  var $p2046: ref;
  var $i2047: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.4, gru_base);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3110} free_pages($i1, 0);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1, 8)));
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3111} free_pages($i3, 0);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(2, 8)));
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3112} free_pages($i5, 0);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(3, 8)));
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3113} free_pages($i7, 0);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(4, 8)));
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3114} free_pages($i9, 0);
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(5, 8)));
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3115} free_pages($i11, 0);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(6, 8)));
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3116} free_pages($i13, 0);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(7, 8)));
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3117} free_pages($i15, 0);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(8, 8)));
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3118} free_pages($i17, 0);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(9, 8)));
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3119} free_pages($i19, 0);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(10, 8)));
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3120} free_pages($i21, 0);
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(11, 8)));
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3121} free_pages($i23, 0);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(12, 8)));
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3122} free_pages($i25, 0);
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(13, 8)));
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3123} free_pages($i27, 0);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(14, 8)));
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3124} free_pages($i29, 0);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(15, 8)));
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3125} free_pages($i31, 0);
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(16, 8)));
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3126} free_pages($i33, 0);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(17, 8)));
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3127} free_pages($i35, 0);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(18, 8)));
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3128} free_pages($i37, 0);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(19, 8)));
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3129} free_pages($i39, 0);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(20, 8)));
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3130} free_pages($i41, 0);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(21, 8)));
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3131} free_pages($i43, 0);
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(22, 8)));
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3132} free_pages($i45, 0);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(23, 8)));
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3133} free_pages($i47, 0);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(24, 8)));
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3134} free_pages($i49, 0);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(25, 8)));
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3135} free_pages($i51, 0);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(26, 8)));
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3136} free_pages($i53, 0);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(27, 8)));
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3137} free_pages($i55, 0);
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(28, 8)));
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3138} free_pages($i57, 0);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(29, 8)));
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3139} free_pages($i59, 0);
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(30, 8)));
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3140} free_pages($i61, 0);
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(31, 8)));
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3141} free_pages($i63, 0);
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(32, 8)));
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3142} free_pages($i65, 0);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(33, 8)));
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3143} free_pages($i67, 0);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(34, 8)));
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3144} free_pages($i69, 0);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(35, 8)));
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3145} free_pages($i71, 0);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(36, 8)));
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3146} free_pages($i73, 0);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(37, 8)));
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3147} free_pages($i75, 0);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(38, 8)));
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3148} free_pages($i77, 0);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(39, 8)));
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3149} free_pages($i79, 0);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(40, 8)));
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3150} free_pages($i81, 0);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(41, 8)));
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3151} free_pages($i83, 0);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(42, 8)));
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3152} free_pages($i85, 0);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(43, 8)));
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3153} free_pages($i87, 0);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(44, 8)));
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3154} free_pages($i89, 0);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(45, 8)));
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3155} free_pages($i91, 0);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(46, 8)));
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3156} free_pages($i93, 0);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(47, 8)));
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3157} free_pages($i95, 0);
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(48, 8)));
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3158} free_pages($i97, 0);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(49, 8)));
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3159} free_pages($i99, 0);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(50, 8)));
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3160} free_pages($i101, 0);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(51, 8)));
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p102);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3161} free_pages($i103, 0);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(52, 8)));
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3162} free_pages($i105, 0);
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(53, 8)));
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3163} free_pages($i107, 0);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(54, 8)));
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3164} free_pages($i109, 0);
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(55, 8)));
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3165} free_pages($i111, 0);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(56, 8)));
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3166} free_pages($i113, 0);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(57, 8)));
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3167} free_pages($i115, 0);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(58, 8)));
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3168} free_pages($i117, 0);
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(59, 8)));
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3169} free_pages($i119, 0);
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(60, 8)));
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3170} free_pages($i121, 0);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(61, 8)));
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p122);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3171} free_pages($i123, 0);
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(62, 8)));
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3172} free_pages($i125, 0);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(63, 8)));
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3173} free_pages($i127, 0);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(64, 8)));
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3174} free_pages($i129, 0);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(65, 8)));
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p130);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3175} free_pages($i131, 0);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(66, 8)));
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3176} free_pages($i133, 0);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(67, 8)));
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3177} free_pages($i135, 0);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(68, 8)));
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3178} free_pages($i137, 0);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(69, 8)));
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p138);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3179} free_pages($i139, 0);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(70, 8)));
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3180} free_pages($i141, 0);
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(71, 8)));
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $i143 := $p2i.ref.i64($p142);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3181} free_pages($i143, 0);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(72, 8)));
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p144);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3182} free_pages($i145, 0);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(73, 8)));
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3183} free_pages($i147, 0);
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(74, 8)));
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p148);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3184} free_pages($i149, 0);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(75, 8)));
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p150);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3185} free_pages($i151, 0);
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(76, 8)));
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $i153 := $p2i.ref.i64($p152);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3186} free_pages($i153, 0);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(77, 8)));
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i155 := $p2i.ref.i64($p154);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3187} free_pages($i155, 0);
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(78, 8)));
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3188} free_pages($i157, 0);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(79, 8)));
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3189} free_pages($i159, 0);
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(80, 8)));
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $i161 := $p2i.ref.i64($p160);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3190} free_pages($i161, 0);
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(81, 8)));
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p162);
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3191} free_pages($i163, 0);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(82, 8)));
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p164);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3192} free_pages($i165, 0);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(83, 8)));
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3193} free_pages($i167, 0);
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(84, 8)));
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p168);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} free_pages($i169, 0);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(85, 8)));
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p170);
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3195} free_pages($i171, 0);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(86, 8)));
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p172);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3196} free_pages($i173, 0);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(87, 8)));
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p174);
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3197} free_pages($i175, 0);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(88, 8)));
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p176);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3198} free_pages($i177, 0);
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(89, 8)));
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p178);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3199} free_pages($i179, 0);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(90, 8)));
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p180);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3200} free_pages($i181, 0);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(91, 8)));
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $i183 := $p2i.ref.i64($p182);
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3201} free_pages($i183, 0);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(92, 8)));
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    $i185 := $p2i.ref.i64($p184);
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3202} free_pages($i185, 0);
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(93, 8)));
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p186);
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3203} free_pages($i187, 0);
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(94, 8)));
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $i189 := $p2i.ref.i64($p188);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3204} free_pages($i189, 0);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(95, 8)));
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    $i191 := $p2i.ref.i64($p190);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3205} free_pages($i191, 0);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(96, 8)));
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p192);
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3206} free_pages($i193, 0);
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(97, 8)));
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $i195 := $p2i.ref.i64($p194);
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3207} free_pages($i195, 0);
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(98, 8)));
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $i197 := $p2i.ref.i64($p196);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3208} free_pages($i197, 0);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(99, 8)));
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    $i199 := $p2i.ref.i64($p198);
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3209} free_pages($i199, 0);
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(100, 8)));
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p200);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3210} free_pages($i201, 0);
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(101, 8)));
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $i203 := $p2i.ref.i64($p202);
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3211} free_pages($i203, 0);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(102, 8)));
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p204);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3212} free_pages($i205, 0);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(103, 8)));
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $i207 := $p2i.ref.i64($p206);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3213} free_pages($i207, 0);
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(104, 8)));
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $i209 := $p2i.ref.i64($p208);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3214} free_pages($i209, 0);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(105, 8)));
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $i211 := $p2i.ref.i64($p210);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3215} free_pages($i211, 0);
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(106, 8)));
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p212);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3216} free_pages($i213, 0);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(107, 8)));
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $i215 := $p2i.ref.i64($p214);
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3217} free_pages($i215, 0);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(108, 8)));
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $i217 := $p2i.ref.i64($p216);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3218} free_pages($i217, 0);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(109, 8)));
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3219} free_pages($i219, 0);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(110, 8)));
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $i221 := $p2i.ref.i64($p220);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3220} free_pages($i221, 0);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(111, 8)));
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $i223 := $p2i.ref.i64($p222);
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3221} free_pages($i223, 0);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(112, 8)));
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $i225 := $p2i.ref.i64($p224);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3222} free_pages($i225, 0);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(113, 8)));
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $i227 := $p2i.ref.i64($p226);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3223} free_pages($i227, 0);
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(114, 8)));
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $i229 := $p2i.ref.i64($p228);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3224} free_pages($i229, 0);
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(115, 8)));
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $i231 := $p2i.ref.i64($p230);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3225} free_pages($i231, 0);
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(116, 8)));
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p232);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3226} free_pages($i233, 0);
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(117, 8)));
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    $i235 := $p2i.ref.i64($p234);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3227} free_pages($i235, 0);
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(118, 8)));
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $i237 := $p2i.ref.i64($p236);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3228} free_pages($i237, 0);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(119, 8)));
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $i239 := $p2i.ref.i64($p238);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3229} free_pages($i239, 0);
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(120, 8)));
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $i241 := $p2i.ref.i64($p240);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3230} free_pages($i241, 0);
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(121, 8)));
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $i243 := $p2i.ref.i64($p242);
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3231} free_pages($i243, 0);
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(122, 8)));
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $i245 := $p2i.ref.i64($p244);
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3232} free_pages($i245, 0);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(123, 8)));
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    $i247 := $p2i.ref.i64($p246);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3233} free_pages($i247, 0);
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(124, 8)));
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $i249 := $p2i.ref.i64($p248);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3234} free_pages($i249, 0);
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(125, 8)));
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $i251 := $p2i.ref.i64($p250);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3235} free_pages($i251, 0);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p252 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(126, 8)));
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $i253 := $p2i.ref.i64($p252);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3236} free_pages($i253, 0);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(127, 8)));
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    $i255 := $p2i.ref.i64($p254);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3237} free_pages($i255, 0);
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p256 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(128, 8)));
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $i257 := $p2i.ref.i64($p256);
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3238} free_pages($i257, 0);
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(129, 8)));
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $i259 := $p2i.ref.i64($p258);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3239} free_pages($i259, 0);
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(130, 8)));
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $i261 := $p2i.ref.i64($p260);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3240} free_pages($i261, 0);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(131, 8)));
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $i263 := $p2i.ref.i64($p262);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3241} free_pages($i263, 0);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p264 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(132, 8)));
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $i265 := $p2i.ref.i64($p264);
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3242} free_pages($i265, 0);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p266 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(133, 8)));
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $i267 := $p2i.ref.i64($p266);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3243} free_pages($i267, 0);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(134, 8)));
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $i269 := $p2i.ref.i64($p268);
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3244} free_pages($i269, 0);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(135, 8)));
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    $i271 := $p2i.ref.i64($p270);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3245} free_pages($i271, 0);
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(136, 8)));
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $i273 := $p2i.ref.i64($p272);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3246} free_pages($i273, 0);
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(137, 8)));
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    $i275 := $p2i.ref.i64($p274);
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3247} free_pages($i275, 0);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p276 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(138, 8)));
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    $i277 := $p2i.ref.i64($p276);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3248} free_pages($i277, 0);
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(139, 8)));
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    $i279 := $p2i.ref.i64($p278);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3249} free_pages($i279, 0);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(140, 8)));
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $i281 := $p2i.ref.i64($p280);
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3250} free_pages($i281, 0);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(141, 8)));
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    $i283 := $p2i.ref.i64($p282);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3251} free_pages($i283, 0);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(142, 8)));
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $i285 := $p2i.ref.i64($p284);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3252} free_pages($i285, 0);
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p286 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(143, 8)));
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $i287 := $p2i.ref.i64($p286);
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3253} free_pages($i287, 0);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(144, 8)));
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $i289 := $p2i.ref.i64($p288);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3254} free_pages($i289, 0);
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(145, 8)));
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    $i291 := $p2i.ref.i64($p290);
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3255} free_pages($i291, 0);
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(146, 8)));
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $i293 := $p2i.ref.i64($p292);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3256} free_pages($i293, 0);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(147, 8)));
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    $i295 := $p2i.ref.i64($p294);
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} free_pages($i295, 0);
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p296 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(148, 8)));
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $i297 := $p2i.ref.i64($p296);
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3258} free_pages($i297, 0);
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p298 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(149, 8)));
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $i299 := $p2i.ref.i64($p298);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} free_pages($i299, 0);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p300 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(150, 8)));
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    $i301 := $p2i.ref.i64($p300);
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3260} free_pages($i301, 0);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(151, 8)));
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    $i303 := $p2i.ref.i64($p302);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3261} free_pages($i303, 0);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(152, 8)));
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    $i305 := $p2i.ref.i64($p304);
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3262} free_pages($i305, 0);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p306 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(153, 8)));
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $i307 := $p2i.ref.i64($p306);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3263} free_pages($i307, 0);
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p308 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(154, 8)));
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    $i309 := $p2i.ref.i64($p308);
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3264} free_pages($i309, 0);
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p310 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(155, 8)));
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $i311 := $p2i.ref.i64($p310);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3265} free_pages($i311, 0);
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(156, 8)));
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $i313 := $p2i.ref.i64($p312);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3266} free_pages($i313, 0);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p314 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(157, 8)));
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $i315 := $p2i.ref.i64($p314);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3267} free_pages($i315, 0);
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p316 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(158, 8)));
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $i317 := $p2i.ref.i64($p316);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} free_pages($i317, 0);
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p318 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(159, 8)));
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    $i319 := $p2i.ref.i64($p318);
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3269} free_pages($i319, 0);
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(160, 8)));
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $i321 := $p2i.ref.i64($p320);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3270} free_pages($i321, 0);
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(161, 8)));
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $i323 := $p2i.ref.i64($p322);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3271} free_pages($i323, 0);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p324 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(162, 8)));
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $i325 := $p2i.ref.i64($p324);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3272} free_pages($i325, 0);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p326 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(163, 8)));
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    $i327 := $p2i.ref.i64($p326);
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3273} free_pages($i327, 0);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(164, 8)));
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    $i329 := $p2i.ref.i64($p328);
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3274} free_pages($i329, 0);
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p330 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(165, 8)));
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    $i331 := $p2i.ref.i64($p330);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3275} free_pages($i331, 0);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p332 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(166, 8)));
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $i333 := $p2i.ref.i64($p332);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3276} free_pages($i333, 0);
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $p334 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(167, 8)));
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $i335 := $p2i.ref.i64($p334);
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3277} free_pages($i335, 0);
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $p336 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(168, 8)));
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $i337 := $p2i.ref.i64($p336);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3278} free_pages($i337, 0);
    goto corral_source_split_11543;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p338 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(169, 8)));
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    $i339 := $p2i.ref.i64($p338);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3279} free_pages($i339, 0);
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $p340 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(170, 8)));
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $i341 := $p2i.ref.i64($p340);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3280} free_pages($i341, 0);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p342 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(171, 8)));
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    $i343 := $p2i.ref.i64($p342);
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3281} free_pages($i343, 0);
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p344 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(172, 8)));
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $i345 := $p2i.ref.i64($p344);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3282} free_pages($i345, 0);
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p346 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(173, 8)));
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $i347 := $p2i.ref.i64($p346);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3283} free_pages($i347, 0);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $p348 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(174, 8)));
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $i349 := $p2i.ref.i64($p348);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3284} free_pages($i349, 0);
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(175, 8)));
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    $i351 := $p2i.ref.i64($p350);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3285} free_pages($i351, 0);
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(176, 8)));
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $i353 := $p2i.ref.i64($p352);
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3286} free_pages($i353, 0);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p354 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(177, 8)));
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    $i355 := $p2i.ref.i64($p354);
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3287} free_pages($i355, 0);
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p356 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(178, 8)));
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $i357 := $p2i.ref.i64($p356);
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3288} free_pages($i357, 0);
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p358 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(179, 8)));
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    $i359 := $p2i.ref.i64($p358);
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3289} free_pages($i359, 0);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(180, 8)));
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    $i361 := $p2i.ref.i64($p360);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3290} free_pages($i361, 0);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(181, 8)));
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $i363 := $p2i.ref.i64($p362);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3291} free_pages($i363, 0);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p364 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(182, 8)));
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $i365 := $p2i.ref.i64($p364);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3292} free_pages($i365, 0);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p366 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(183, 8)));
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    $i367 := $p2i.ref.i64($p366);
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3293} free_pages($i367, 0);
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p368 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(184, 8)));
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    $i369 := $p2i.ref.i64($p368);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3294} free_pages($i369, 0);
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p370 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(185, 8)));
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    $i371 := $p2i.ref.i64($p370);
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3295} free_pages($i371, 0);
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(186, 8)));
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    $i373 := $p2i.ref.i64($p372);
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3296} free_pages($i373, 0);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p374 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(187, 8)));
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    $i375 := $p2i.ref.i64($p374);
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3297} free_pages($i375, 0);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(188, 8)));
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $i377 := $p2i.ref.i64($p376);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3298} free_pages($i377, 0);
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p378 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(189, 8)));
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $i379 := $p2i.ref.i64($p378);
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3299} free_pages($i379, 0);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p380 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(190, 8)));
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $i381 := $p2i.ref.i64($p380);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3300} free_pages($i381, 0);
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p382 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(191, 8)));
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    $i383 := $p2i.ref.i64($p382);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3301} free_pages($i383, 0);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p384 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(192, 8)));
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $i385 := $p2i.ref.i64($p384);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3302} free_pages($i385, 0);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p386 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(193, 8)));
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $i387 := $p2i.ref.i64($p386);
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3303} free_pages($i387, 0);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p388 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(194, 8)));
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $i389 := $p2i.ref.i64($p388);
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3304} free_pages($i389, 0);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p390 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(195, 8)));
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    $i391 := $p2i.ref.i64($p390);
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3305} free_pages($i391, 0);
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p392 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(196, 8)));
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    $i393 := $p2i.ref.i64($p392);
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3306} free_pages($i393, 0);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p394 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(197, 8)));
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $i395 := $p2i.ref.i64($p394);
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3307} free_pages($i395, 0);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p396 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(198, 8)));
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    $i397 := $p2i.ref.i64($p396);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3308} free_pages($i397, 0);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p398 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(199, 8)));
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    $i399 := $p2i.ref.i64($p398);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3309} free_pages($i399, 0);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p400 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(200, 8)));
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $i401 := $p2i.ref.i64($p400);
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3310} free_pages($i401, 0);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(201, 8)));
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    $i403 := $p2i.ref.i64($p402);
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3311} free_pages($i403, 0);
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $p404 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(202, 8)));
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    $i405 := $p2i.ref.i64($p404);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3312} free_pages($i405, 0);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(203, 8)));
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    $i407 := $p2i.ref.i64($p406);
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3313} free_pages($i407, 0);
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p408 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(204, 8)));
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $i409 := $p2i.ref.i64($p408);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3314} free_pages($i409, 0);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $p410 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(205, 8)));
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $i411 := $p2i.ref.i64($p410);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3315} free_pages($i411, 0);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p412 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(206, 8)));
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $i413 := $p2i.ref.i64($p412);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3316} free_pages($i413, 0);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(207, 8)));
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $i415 := $p2i.ref.i64($p414);
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3317} free_pages($i415, 0);
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(208, 8)));
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $i417 := $p2i.ref.i64($p416);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3318} free_pages($i417, 0);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p418 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(209, 8)));
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $i419 := $p2i.ref.i64($p418);
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3319} free_pages($i419, 0);
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p420 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(210, 8)));
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $i421 := $p2i.ref.i64($p420);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3320} free_pages($i421, 0);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p422 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(211, 8)));
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    $i423 := $p2i.ref.i64($p422);
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3321} free_pages($i423, 0);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $p424 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(212, 8)));
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $i425 := $p2i.ref.i64($p424);
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3322} free_pages($i425, 0);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p426 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(213, 8)));
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    $i427 := $p2i.ref.i64($p426);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3323} free_pages($i427, 0);
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p428 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(214, 8)));
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    $i429 := $p2i.ref.i64($p428);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3324} free_pages($i429, 0);
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p430 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(215, 8)));
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    $i431 := $p2i.ref.i64($p430);
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3325} free_pages($i431, 0);
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p432 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(216, 8)));
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    $i433 := $p2i.ref.i64($p432);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3326} free_pages($i433, 0);
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p434 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(217, 8)));
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    $i435 := $p2i.ref.i64($p434);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3327} free_pages($i435, 0);
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p436 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(218, 8)));
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    $i437 := $p2i.ref.i64($p436);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3328} free_pages($i437, 0);
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p438 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(219, 8)));
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    $i439 := $p2i.ref.i64($p438);
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3329} free_pages($i439, 0);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p440 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(220, 8)));
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $i441 := $p2i.ref.i64($p440);
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3330} free_pages($i441, 0);
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p442 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(221, 8)));
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    $i443 := $p2i.ref.i64($p442);
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3331} free_pages($i443, 0);
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p444 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(222, 8)));
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    $i445 := $p2i.ref.i64($p444);
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3332} free_pages($i445, 0);
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p446 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(223, 8)));
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    $i447 := $p2i.ref.i64($p446);
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3333} free_pages($i447, 0);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p448 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(224, 8)));
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $i449 := $p2i.ref.i64($p448);
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3334} free_pages($i449, 0);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p450 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(225, 8)));
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    $i451 := $p2i.ref.i64($p450);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3335} free_pages($i451, 0);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p452 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(226, 8)));
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    $i453 := $p2i.ref.i64($p452);
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3336} free_pages($i453, 0);
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p454 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(227, 8)));
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    $i455 := $p2i.ref.i64($p454);
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3337} free_pages($i455, 0);
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p456 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(228, 8)));
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    $i457 := $p2i.ref.i64($p456);
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3338} free_pages($i457, 0);
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $p458 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(229, 8)));
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    $i459 := $p2i.ref.i64($p458);
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3339} free_pages($i459, 0);
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $p460 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(230, 8)));
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    $i461 := $p2i.ref.i64($p460);
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3340} free_pages($i461, 0);
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p462 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(231, 8)));
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    $i463 := $p2i.ref.i64($p462);
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3341} free_pages($i463, 0);
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p464 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(232, 8)));
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    $i465 := $p2i.ref.i64($p464);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3342} free_pages($i465, 0);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p466 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(233, 8)));
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $i467 := $p2i.ref.i64($p466);
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3343} free_pages($i467, 0);
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p468 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(234, 8)));
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $i469 := $p2i.ref.i64($p468);
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3344} free_pages($i469, 0);
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p470 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(235, 8)));
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    $i471 := $p2i.ref.i64($p470);
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3345} free_pages($i471, 0);
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $p472 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(236, 8)));
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $i473 := $p2i.ref.i64($p472);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3346} free_pages($i473, 0);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p474 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(237, 8)));
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    $i475 := $p2i.ref.i64($p474);
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3347} free_pages($i475, 0);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p476 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(238, 8)));
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    $i477 := $p2i.ref.i64($p476);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3348} free_pages($i477, 0);
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p478 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(239, 8)));
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    $i479 := $p2i.ref.i64($p478);
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3349} free_pages($i479, 0);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p480 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(240, 8)));
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    $i481 := $p2i.ref.i64($p480);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3350} free_pages($i481, 0);
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p482 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(241, 8)));
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    $i483 := $p2i.ref.i64($p482);
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3351} free_pages($i483, 0);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p484 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(242, 8)));
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $i485 := $p2i.ref.i64($p484);
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3352} free_pages($i485, 0);
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $p486 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(243, 8)));
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $i487 := $p2i.ref.i64($p486);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3353} free_pages($i487, 0);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p488 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(244, 8)));
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    $i489 := $p2i.ref.i64($p488);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3354} free_pages($i489, 0);
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p490 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(245, 8)));
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    $i491 := $p2i.ref.i64($p490);
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3355} free_pages($i491, 0);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $p492 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(246, 8)));
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $i493 := $p2i.ref.i64($p492);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3356} free_pages($i493, 0);
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p494 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(247, 8)));
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $i495 := $p2i.ref.i64($p494);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3357} free_pages($i495, 0);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p496 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(248, 8)));
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $i497 := $p2i.ref.i64($p496);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3358} free_pages($i497, 0);
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p498 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(249, 8)));
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $i499 := $p2i.ref.i64($p498);
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3359} free_pages($i499, 0);
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $p500 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(250, 8)));
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $i501 := $p2i.ref.i64($p500);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3360} free_pages($i501, 0);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p502 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(251, 8)));
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    $i503 := $p2i.ref.i64($p502);
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3361} free_pages($i503, 0);
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p504 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(252, 8)));
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $i505 := $p2i.ref.i64($p504);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3362} free_pages($i505, 0);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p506 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(253, 8)));
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    $i507 := $p2i.ref.i64($p506);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3363} free_pages($i507, 0);
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p508 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(254, 8)));
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    $i509 := $p2i.ref.i64($p508);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3364} free_pages($i509, 0);
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p510 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(255, 8)));
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $i511 := $p2i.ref.i64($p510);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3365} free_pages($i511, 0);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p512 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(256, 8)));
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    $i513 := $p2i.ref.i64($p512);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3366} free_pages($i513, 0);
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p514 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(257, 8)));
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    $i515 := $p2i.ref.i64($p514);
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3367} free_pages($i515, 0);
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p516 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(258, 8)));
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    $i517 := $p2i.ref.i64($p516);
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3368} free_pages($i517, 0);
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p518 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(259, 8)));
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    $i519 := $p2i.ref.i64($p518);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3369} free_pages($i519, 0);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $p520 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(260, 8)));
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    $i521 := $p2i.ref.i64($p520);
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3370} free_pages($i521, 0);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p522 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(261, 8)));
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    $i523 := $p2i.ref.i64($p522);
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3371} free_pages($i523, 0);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $p524 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(262, 8)));
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    $i525 := $p2i.ref.i64($p524);
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3372} free_pages($i525, 0);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $p526 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(263, 8)));
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    $i527 := $p2i.ref.i64($p526);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3373} free_pages($i527, 0);
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p528 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(264, 8)));
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    $i529 := $p2i.ref.i64($p528);
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3374} free_pages($i529, 0);
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p530 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(265, 8)));
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    $i531 := $p2i.ref.i64($p530);
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3375} free_pages($i531, 0);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $p532 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(266, 8)));
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    $i533 := $p2i.ref.i64($p532);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3376} free_pages($i533, 0);
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $p534 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(267, 8)));
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $i535 := $p2i.ref.i64($p534);
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3377} free_pages($i535, 0);
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $p536 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(268, 8)));
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    $i537 := $p2i.ref.i64($p536);
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3378} free_pages($i537, 0);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $p538 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(269, 8)));
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    $i539 := $p2i.ref.i64($p538);
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3379} free_pages($i539, 0);
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $p540 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(270, 8)));
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $i541 := $p2i.ref.i64($p540);
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3380} free_pages($i541, 0);
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $p542 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(271, 8)));
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    $i543 := $p2i.ref.i64($p542);
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3381} free_pages($i543, 0);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $p544 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(272, 8)));
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $i545 := $p2i.ref.i64($p544);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3382} free_pages($i545, 0);
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $p546 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(273, 8)));
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $i547 := $p2i.ref.i64($p546);
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3383} free_pages($i547, 0);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p548 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(274, 8)));
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    $i549 := $p2i.ref.i64($p548);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3384} free_pages($i549, 0);
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p550 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(275, 8)));
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    $i551 := $p2i.ref.i64($p550);
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3385} free_pages($i551, 0);
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $p552 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(276, 8)));
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    $i553 := $p2i.ref.i64($p552);
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3386} free_pages($i553, 0);
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $p554 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(277, 8)));
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $i555 := $p2i.ref.i64($p554);
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3387} free_pages($i555, 0);
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $p556 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(278, 8)));
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    $i557 := $p2i.ref.i64($p556);
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3388} free_pages($i557, 0);
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $p558 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(279, 8)));
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $i559 := $p2i.ref.i64($p558);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3389} free_pages($i559, 0);
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $p560 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(280, 8)));
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $i561 := $p2i.ref.i64($p560);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3390} free_pages($i561, 0);
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $p562 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(281, 8)));
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    $i563 := $p2i.ref.i64($p562);
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3391} free_pages($i563, 0);
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    $p564 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(282, 8)));
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $i565 := $p2i.ref.i64($p564);
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3392} free_pages($i565, 0);
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $p566 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(283, 8)));
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $i567 := $p2i.ref.i64($p566);
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3393} free_pages($i567, 0);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $p568 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(284, 8)));
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    $i569 := $p2i.ref.i64($p568);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3394} free_pages($i569, 0);
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    $p570 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(285, 8)));
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $i571 := $p2i.ref.i64($p570);
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3395} free_pages($i571, 0);
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $p572 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(286, 8)));
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    $i573 := $p2i.ref.i64($p572);
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3396} free_pages($i573, 0);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $p574 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(287, 8)));
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    $i575 := $p2i.ref.i64($p574);
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3397} free_pages($i575, 0);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p576 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(288, 8)));
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    $i577 := $p2i.ref.i64($p576);
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3398} free_pages($i577, 0);
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $p578 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(289, 8)));
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    $i579 := $p2i.ref.i64($p578);
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3399} free_pages($i579, 0);
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $p580 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(290, 8)));
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    $i581 := $p2i.ref.i64($p580);
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3400} free_pages($i581, 0);
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p582 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(291, 8)));
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    $i583 := $p2i.ref.i64($p582);
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3401} free_pages($i583, 0);
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $p584 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(292, 8)));
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $i585 := $p2i.ref.i64($p584);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3402} free_pages($i585, 0);
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $p586 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(293, 8)));
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    $i587 := $p2i.ref.i64($p586);
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3403} free_pages($i587, 0);
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $p588 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(294, 8)));
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    $i589 := $p2i.ref.i64($p588);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3404} free_pages($i589, 0);
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $p590 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(295, 8)));
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    $i591 := $p2i.ref.i64($p590);
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3405} free_pages($i591, 0);
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $p592 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(296, 8)));
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    $i593 := $p2i.ref.i64($p592);
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3406} free_pages($i593, 0);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    $p594 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(297, 8)));
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    $i595 := $p2i.ref.i64($p594);
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3407} free_pages($i595, 0);
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    $p596 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(298, 8)));
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $i597 := $p2i.ref.i64($p596);
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3408} free_pages($i597, 0);
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $p598 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(299, 8)));
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    $i599 := $p2i.ref.i64($p598);
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3409} free_pages($i599, 0);
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $p600 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(300, 8)));
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    $i601 := $p2i.ref.i64($p600);
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3410} free_pages($i601, 0);
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $p602 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(301, 8)));
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    $i603 := $p2i.ref.i64($p602);
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3411} free_pages($i603, 0);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    $p604 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(302, 8)));
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    $i605 := $p2i.ref.i64($p604);
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3412} free_pages($i605, 0);
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $p606 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(303, 8)));
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    $i607 := $p2i.ref.i64($p606);
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3413} free_pages($i607, 0);
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $p608 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(304, 8)));
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    $i609 := $p2i.ref.i64($p608);
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3414} free_pages($i609, 0);
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    $p610 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(305, 8)));
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    $i611 := $p2i.ref.i64($p610);
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3415} free_pages($i611, 0);
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    $p612 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(306, 8)));
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    $i613 := $p2i.ref.i64($p612);
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3416} free_pages($i613, 0);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $p614 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(307, 8)));
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    $i615 := $p2i.ref.i64($p614);
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3417} free_pages($i615, 0);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $p616 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(308, 8)));
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $i617 := $p2i.ref.i64($p616);
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3418} free_pages($i617, 0);
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    $p618 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(309, 8)));
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    $i619 := $p2i.ref.i64($p618);
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3419} free_pages($i619, 0);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $p620 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(310, 8)));
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $i621 := $p2i.ref.i64($p620);
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3420} free_pages($i621, 0);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $p622 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(311, 8)));
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    $i623 := $p2i.ref.i64($p622);
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3421} free_pages($i623, 0);
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $p624 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(312, 8)));
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $i625 := $p2i.ref.i64($p624);
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3422} free_pages($i625, 0);
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $p626 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(313, 8)));
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    $i627 := $p2i.ref.i64($p626);
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3423} free_pages($i627, 0);
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    $p628 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(314, 8)));
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $i629 := $p2i.ref.i64($p628);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3424} free_pages($i629, 0);
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $p630 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(315, 8)));
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    $i631 := $p2i.ref.i64($p630);
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3425} free_pages($i631, 0);
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $p632 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(316, 8)));
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $i633 := $p2i.ref.i64($p632);
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3426} free_pages($i633, 0);
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    $p634 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(317, 8)));
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    $i635 := $p2i.ref.i64($p634);
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3427} free_pages($i635, 0);
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    $p636 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(318, 8)));
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    $i637 := $p2i.ref.i64($p636);
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3428} free_pages($i637, 0);
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    $p638 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(319, 8)));
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    $i639 := $p2i.ref.i64($p638);
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3429} free_pages($i639, 0);
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    $p640 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(320, 8)));
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $i641 := $p2i.ref.i64($p640);
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3430} free_pages($i641, 0);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    $p642 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(321, 8)));
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    $i643 := $p2i.ref.i64($p642);
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3431} free_pages($i643, 0);
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    $p644 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(322, 8)));
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $i645 := $p2i.ref.i64($p644);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3432} free_pages($i645, 0);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $p646 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(323, 8)));
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    $i647 := $p2i.ref.i64($p646);
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3433} free_pages($i647, 0);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $p648 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(324, 8)));
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $i649 := $p2i.ref.i64($p648);
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3434} free_pages($i649, 0);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    $p650 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(325, 8)));
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    $i651 := $p2i.ref.i64($p650);
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3435} free_pages($i651, 0);
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    $p652 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(326, 8)));
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    $i653 := $p2i.ref.i64($p652);
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3436} free_pages($i653, 0);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    $p654 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(327, 8)));
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    $i655 := $p2i.ref.i64($p654);
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3437} free_pages($i655, 0);
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $p656 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(328, 8)));
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $i657 := $p2i.ref.i64($p656);
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3438} free_pages($i657, 0);
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    $p658 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(329, 8)));
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    $i659 := $p2i.ref.i64($p658);
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3439} free_pages($i659, 0);
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    $p660 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(330, 8)));
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    $i661 := $p2i.ref.i64($p660);
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3440} free_pages($i661, 0);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $p662 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(331, 8)));
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    $i663 := $p2i.ref.i64($p662);
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3441} free_pages($i663, 0);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    $p664 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(332, 8)));
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    $i665 := $p2i.ref.i64($p664);
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3442} free_pages($i665, 0);
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $p666 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(333, 8)));
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    $i667 := $p2i.ref.i64($p666);
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3443} free_pages($i667, 0);
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    $p668 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(334, 8)));
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    $i669 := $p2i.ref.i64($p668);
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3444} free_pages($i669, 0);
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    $p670 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(335, 8)));
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    $i671 := $p2i.ref.i64($p670);
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3445} free_pages($i671, 0);
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    $p672 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(336, 8)));
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $i673 := $p2i.ref.i64($p672);
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3446} free_pages($i673, 0);
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $p674 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(337, 8)));
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    $i675 := $p2i.ref.i64($p674);
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3447} free_pages($i675, 0);
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    $p676 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(338, 8)));
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    $i677 := $p2i.ref.i64($p676);
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3448} free_pages($i677, 0);
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    $p678 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(339, 8)));
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $i679 := $p2i.ref.i64($p678);
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3449} free_pages($i679, 0);
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $p680 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(340, 8)));
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $i681 := $p2i.ref.i64($p680);
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3450} free_pages($i681, 0);
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    $p682 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(341, 8)));
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    $i683 := $p2i.ref.i64($p682);
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3451} free_pages($i683, 0);
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    $p684 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(342, 8)));
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $i685 := $p2i.ref.i64($p684);
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3452} free_pages($i685, 0);
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    $p686 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(343, 8)));
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    $i687 := $p2i.ref.i64($p686);
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3453} free_pages($i687, 0);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    $p688 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(344, 8)));
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $i689 := $p2i.ref.i64($p688);
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3454} free_pages($i689, 0);
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    $p690 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(345, 8)));
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $i691 := $p2i.ref.i64($p690);
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3455} free_pages($i691, 0);
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $p692 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(346, 8)));
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $i693 := $p2i.ref.i64($p692);
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3456} free_pages($i693, 0);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    $p694 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(347, 8)));
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $i695 := $p2i.ref.i64($p694);
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3457} free_pages($i695, 0);
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    $p696 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(348, 8)));
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $i697 := $p2i.ref.i64($p696);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3458} free_pages($i697, 0);
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    $p698 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(349, 8)));
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    $i699 := $p2i.ref.i64($p698);
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3459} free_pages($i699, 0);
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    $p700 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(350, 8)));
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $i701 := $p2i.ref.i64($p700);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3460} free_pages($i701, 0);
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $p702 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(351, 8)));
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $i703 := $p2i.ref.i64($p702);
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3461} free_pages($i703, 0);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $p704 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(352, 8)));
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    $i705 := $p2i.ref.i64($p704);
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3462} free_pages($i705, 0);
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    $p706 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(353, 8)));
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    $i707 := $p2i.ref.i64($p706);
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3463} free_pages($i707, 0);
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    $p708 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(354, 8)));
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    $i709 := $p2i.ref.i64($p708);
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3464} free_pages($i709, 0);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $p710 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(355, 8)));
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $i711 := $p2i.ref.i64($p710);
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3465} free_pages($i711, 0);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    $p712 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(356, 8)));
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $i713 := $p2i.ref.i64($p712);
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3466} free_pages($i713, 0);
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    $p714 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(357, 8)));
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    $i715 := $p2i.ref.i64($p714);
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3467} free_pages($i715, 0);
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    $p716 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(358, 8)));
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $i717 := $p2i.ref.i64($p716);
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3468} free_pages($i717, 0);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    $p718 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(359, 8)));
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    $i719 := $p2i.ref.i64($p718);
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3469} free_pages($i719, 0);
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $p720 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(360, 8)));
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $i721 := $p2i.ref.i64($p720);
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3470} free_pages($i721, 0);
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $p722 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(361, 8)));
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $i723 := $p2i.ref.i64($p722);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3471} free_pages($i723, 0);
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    $p724 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(362, 8)));
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $i725 := $p2i.ref.i64($p724);
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3472} free_pages($i725, 0);
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    $p726 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(363, 8)));
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $i727 := $p2i.ref.i64($p726);
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3473} free_pages($i727, 0);
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $p728 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(364, 8)));
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $i729 := $p2i.ref.i64($p728);
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3474} free_pages($i729, 0);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    $p730 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(365, 8)));
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    $i731 := $p2i.ref.i64($p730);
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3475} free_pages($i731, 0);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    $p732 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(366, 8)));
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    $i733 := $p2i.ref.i64($p732);
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3476} free_pages($i733, 0);
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    $p734 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(367, 8)));
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    $i735 := $p2i.ref.i64($p734);
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3477} free_pages($i735, 0);
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    $p736 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(368, 8)));
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $i737 := $p2i.ref.i64($p736);
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3478} free_pages($i737, 0);
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $p738 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(369, 8)));
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    $i739 := $p2i.ref.i64($p738);
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3479} free_pages($i739, 0);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    $p740 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(370, 8)));
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $i741 := $p2i.ref.i64($p740);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3480} free_pages($i741, 0);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    $p742 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(371, 8)));
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    $i743 := $p2i.ref.i64($p742);
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3481} free_pages($i743, 0);
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    $p744 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(372, 8)));
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    $i745 := $p2i.ref.i64($p744);
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3482} free_pages($i745, 0);
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    $p746 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(373, 8)));
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $i747 := $p2i.ref.i64($p746);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3483} free_pages($i747, 0);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    $p748 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(374, 8)));
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $i749 := $p2i.ref.i64($p748);
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3484} free_pages($i749, 0);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    $p750 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(375, 8)));
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    $i751 := $p2i.ref.i64($p750);
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3485} free_pages($i751, 0);
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    $p752 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(376, 8)));
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $i753 := $p2i.ref.i64($p752);
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3486} free_pages($i753, 0);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    $p754 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(377, 8)));
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    $i755 := $p2i.ref.i64($p754);
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3487} free_pages($i755, 0);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    $p756 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(378, 8)));
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    $i757 := $p2i.ref.i64($p756);
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3488} free_pages($i757, 0);
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    $p758 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(379, 8)));
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    $i759 := $p2i.ref.i64($p758);
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3489} free_pages($i759, 0);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    $p760 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(380, 8)));
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    $i761 := $p2i.ref.i64($p760);
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3490} free_pages($i761, 0);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    $p762 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(381, 8)));
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    $i763 := $p2i.ref.i64($p762);
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3491} free_pages($i763, 0);
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    $p764 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(382, 8)));
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    $i765 := $p2i.ref.i64($p764);
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3492} free_pages($i765, 0);
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    $p766 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(383, 8)));
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    $i767 := $p2i.ref.i64($p766);
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3493} free_pages($i767, 0);
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    $p768 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(384, 8)));
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    $i769 := $p2i.ref.i64($p768);
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3494} free_pages($i769, 0);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $p770 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(385, 8)));
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    $i771 := $p2i.ref.i64($p770);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3495} free_pages($i771, 0);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    $p772 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(386, 8)));
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    $i773 := $p2i.ref.i64($p772);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3496} free_pages($i773, 0);
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    $p774 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(387, 8)));
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    $i775 := $p2i.ref.i64($p774);
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3497} free_pages($i775, 0);
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    $p776 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(388, 8)));
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    $i777 := $p2i.ref.i64($p776);
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3498} free_pages($i777, 0);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    $p778 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(389, 8)));
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    $i779 := $p2i.ref.i64($p778);
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3499} free_pages($i779, 0);
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    $p780 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(390, 8)));
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $i781 := $p2i.ref.i64($p780);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3500} free_pages($i781, 0);
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    $p782 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(391, 8)));
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    $i783 := $p2i.ref.i64($p782);
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3501} free_pages($i783, 0);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $p784 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(392, 8)));
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $i785 := $p2i.ref.i64($p784);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3502} free_pages($i785, 0);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    $p786 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(393, 8)));
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    $i787 := $p2i.ref.i64($p786);
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3503} free_pages($i787, 0);
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    $p788 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(394, 8)));
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $i789 := $p2i.ref.i64($p788);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3504} free_pages($i789, 0);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    $p790 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(395, 8)));
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    $i791 := $p2i.ref.i64($p790);
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3505} free_pages($i791, 0);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    $p792 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(396, 8)));
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    $i793 := $p2i.ref.i64($p792);
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3506} free_pages($i793, 0);
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    $p794 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(397, 8)));
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $i795 := $p2i.ref.i64($p794);
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3507} free_pages($i795, 0);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    $p796 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(398, 8)));
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $i797 := $p2i.ref.i64($p796);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3508} free_pages($i797, 0);
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    $p798 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(399, 8)));
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    $i799 := $p2i.ref.i64($p798);
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3509} free_pages($i799, 0);
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    $p800 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(400, 8)));
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    $i801 := $p2i.ref.i64($p800);
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3510} free_pages($i801, 0);
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    $p802 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(401, 8)));
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    $i803 := $p2i.ref.i64($p802);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3511} free_pages($i803, 0);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    $p804 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(402, 8)));
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $i805 := $p2i.ref.i64($p804);
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3512} free_pages($i805, 0);
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    $p806 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(403, 8)));
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    $i807 := $p2i.ref.i64($p806);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3513} free_pages($i807, 0);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    $p808 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(404, 8)));
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    $i809 := $p2i.ref.i64($p808);
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3514} free_pages($i809, 0);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    $p810 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(405, 8)));
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    $i811 := $p2i.ref.i64($p810);
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3515} free_pages($i811, 0);
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    $p812 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(406, 8)));
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $i813 := $p2i.ref.i64($p812);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3516} free_pages($i813, 0);
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    $p814 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(407, 8)));
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    $i815 := $p2i.ref.i64($p814);
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3517} free_pages($i815, 0);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    $p816 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(408, 8)));
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    $i817 := $p2i.ref.i64($p816);
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3518} free_pages($i817, 0);
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    $p818 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(409, 8)));
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    $i819 := $p2i.ref.i64($p818);
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3519} free_pages($i819, 0);
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    $p820 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(410, 8)));
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $i821 := $p2i.ref.i64($p820);
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3520} free_pages($i821, 0);
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    $p822 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(411, 8)));
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    $i823 := $p2i.ref.i64($p822);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3521} free_pages($i823, 0);
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    $p824 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(412, 8)));
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    $i825 := $p2i.ref.i64($p824);
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3522} free_pages($i825, 0);
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    $p826 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(413, 8)));
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    $i827 := $p2i.ref.i64($p826);
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3523} free_pages($i827, 0);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    $p828 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(414, 8)));
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    $i829 := $p2i.ref.i64($p828);
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3524} free_pages($i829, 0);
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    $p830 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(415, 8)));
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    $i831 := $p2i.ref.i64($p830);
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3525} free_pages($i831, 0);
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    $p832 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(416, 8)));
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    $i833 := $p2i.ref.i64($p832);
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3526} free_pages($i833, 0);
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    $p834 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(417, 8)));
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    $i835 := $p2i.ref.i64($p834);
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3527} free_pages($i835, 0);
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    $p836 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(418, 8)));
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $i837 := $p2i.ref.i64($p836);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3528} free_pages($i837, 0);
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    $p838 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(419, 8)));
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    $i839 := $p2i.ref.i64($p838);
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3529} free_pages($i839, 0);
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    $p840 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(420, 8)));
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $i841 := $p2i.ref.i64($p840);
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3530} free_pages($i841, 0);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    $p842 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(421, 8)));
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    $i843 := $p2i.ref.i64($p842);
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3531} free_pages($i843, 0);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    $p844 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(422, 8)));
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $i845 := $p2i.ref.i64($p844);
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3532} free_pages($i845, 0);
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    $p846 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(423, 8)));
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    $i847 := $p2i.ref.i64($p846);
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3533} free_pages($i847, 0);
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $p848 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(424, 8)));
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $i849 := $p2i.ref.i64($p848);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3534} free_pages($i849, 0);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    $p850 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(425, 8)));
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $i851 := $p2i.ref.i64($p850);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3535} free_pages($i851, 0);
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    $p852 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(426, 8)));
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    $i853 := $p2i.ref.i64($p852);
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3536} free_pages($i853, 0);
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    $p854 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(427, 8)));
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    $i855 := $p2i.ref.i64($p854);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3537} free_pages($i855, 0);
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    $p856 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(428, 8)));
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $i857 := $p2i.ref.i64($p856);
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3538} free_pages($i857, 0);
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    $p858 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(429, 8)));
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    $i859 := $p2i.ref.i64($p858);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3539} free_pages($i859, 0);
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    $p860 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(430, 8)));
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $i861 := $p2i.ref.i64($p860);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3540} free_pages($i861, 0);
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    $p862 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(431, 8)));
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    $i863 := $p2i.ref.i64($p862);
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3541} free_pages($i863, 0);
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    $p864 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(432, 8)));
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    $i865 := $p2i.ref.i64($p864);
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3542} free_pages($i865, 0);
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    $p866 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(433, 8)));
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    $i867 := $p2i.ref.i64($p866);
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3543} free_pages($i867, 0);
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    $p868 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(434, 8)));
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    $i869 := $p2i.ref.i64($p868);
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3544} free_pages($i869, 0);
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    $p870 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(435, 8)));
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    $i871 := $p2i.ref.i64($p870);
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3545} free_pages($i871, 0);
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    $p872 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(436, 8)));
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $i873 := $p2i.ref.i64($p872);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3546} free_pages($i873, 0);
    goto corral_source_split_12615;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    $p874 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(437, 8)));
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $i875 := $p2i.ref.i64($p874);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3547} free_pages($i875, 0);
    goto corral_source_split_12619;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    $p876 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(438, 8)));
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    $i877 := $p2i.ref.i64($p876);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3548} free_pages($i877, 0);
    goto corral_source_split_12623;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    $p878 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(439, 8)));
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    $i879 := $p2i.ref.i64($p878);
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3549} free_pages($i879, 0);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    $p880 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(440, 8)));
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    $i881 := $p2i.ref.i64($p880);
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3550} free_pages($i881, 0);
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    $p882 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(441, 8)));
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $i883 := $p2i.ref.i64($p882);
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3551} free_pages($i883, 0);
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    $p884 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(442, 8)));
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    $i885 := $p2i.ref.i64($p884);
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3552} free_pages($i885, 0);
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    $p886 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(443, 8)));
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    $i887 := $p2i.ref.i64($p886);
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3553} free_pages($i887, 0);
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    $p888 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(444, 8)));
    goto corral_source_split_12645;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    $i889 := $p2i.ref.i64($p888);
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3554} free_pages($i889, 0);
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    $p890 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(445, 8)));
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    $i891 := $p2i.ref.i64($p890);
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3555} free_pages($i891, 0);
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    $p892 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(446, 8)));
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    $i893 := $p2i.ref.i64($p892);
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3556} free_pages($i893, 0);
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    $p894 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(447, 8)));
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    $i895 := $p2i.ref.i64($p894);
    goto corral_source_split_12658;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3557} free_pages($i895, 0);
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    $p896 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(448, 8)));
    goto corral_source_split_12661;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    $i897 := $p2i.ref.i64($p896);
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3558} free_pages($i897, 0);
    goto corral_source_split_12663;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    $p898 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(449, 8)));
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    $i899 := $p2i.ref.i64($p898);
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3559} free_pages($i899, 0);
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    $p900 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(450, 8)));
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    $i901 := $p2i.ref.i64($p900);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3560} free_pages($i901, 0);
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    $p902 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(451, 8)));
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    $i903 := $p2i.ref.i64($p902);
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3561} free_pages($i903, 0);
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $p904 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(452, 8)));
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    $i905 := $p2i.ref.i64($p904);
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3562} free_pages($i905, 0);
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    $p906 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(453, 8)));
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    $i907 := $p2i.ref.i64($p906);
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3563} free_pages($i907, 0);
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    $p908 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(454, 8)));
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $i909 := $p2i.ref.i64($p908);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3564} free_pages($i909, 0);
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    $p910 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(455, 8)));
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    $i911 := $p2i.ref.i64($p910);
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3565} free_pages($i911, 0);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    $p912 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(456, 8)));
    goto corral_source_split_12693;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    $i913 := $p2i.ref.i64($p912);
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3566} free_pages($i913, 0);
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    $p914 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(457, 8)));
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    $i915 := $p2i.ref.i64($p914);
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3567} free_pages($i915, 0);
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    $p916 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(458, 8)));
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    $i917 := $p2i.ref.i64($p916);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3568} free_pages($i917, 0);
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    $p918 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(459, 8)));
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    $i919 := $p2i.ref.i64($p918);
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3569} free_pages($i919, 0);
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    $p920 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(460, 8)));
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    $i921 := $p2i.ref.i64($p920);
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3570} free_pages($i921, 0);
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    $p922 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(461, 8)));
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    $i923 := $p2i.ref.i64($p922);
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3571} free_pages($i923, 0);
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    $p924 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(462, 8)));
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    $i925 := $p2i.ref.i64($p924);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3572} free_pages($i925, 0);
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    $p926 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(463, 8)));
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    $i927 := $p2i.ref.i64($p926);
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3573} free_pages($i927, 0);
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    $p928 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(464, 8)));
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    $i929 := $p2i.ref.i64($p928);
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3574} free_pages($i929, 0);
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    $p930 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(465, 8)));
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    $i931 := $p2i.ref.i64($p930);
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3575} free_pages($i931, 0);
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    $p932 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(466, 8)));
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $i933 := $p2i.ref.i64($p932);
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3576} free_pages($i933, 0);
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    $p934 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(467, 8)));
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    $i935 := $p2i.ref.i64($p934);
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3577} free_pages($i935, 0);
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    $p936 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(468, 8)));
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    $i937 := $p2i.ref.i64($p936);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3578} free_pages($i937, 0);
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    $p938 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(469, 8)));
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    $i939 := $p2i.ref.i64($p938);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3579} free_pages($i939, 0);
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    $p940 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(470, 8)));
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    $i941 := $p2i.ref.i64($p940);
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3580} free_pages($i941, 0);
    goto corral_source_split_12751;

  corral_source_split_12751:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    $p942 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(471, 8)));
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    $i943 := $p2i.ref.i64($p942);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3581} free_pages($i943, 0);
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $p944 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(472, 8)));
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $i945 := $p2i.ref.i64($p944);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3582} free_pages($i945, 0);
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    $p946 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(473, 8)));
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    $i947 := $p2i.ref.i64($p946);
    goto corral_source_split_12762;

  corral_source_split_12762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3583} free_pages($i947, 0);
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    $p948 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(474, 8)));
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    $i949 := $p2i.ref.i64($p948);
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3584} free_pages($i949, 0);
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    $p950 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(475, 8)));
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    $i951 := $p2i.ref.i64($p950);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3585} free_pages($i951, 0);
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    $p952 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(476, 8)));
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    $i953 := $p2i.ref.i64($p952);
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3586} free_pages($i953, 0);
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    $p954 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(477, 8)));
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    $i955 := $p2i.ref.i64($p954);
    goto corral_source_split_12778;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3587} free_pages($i955, 0);
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    $p956 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(478, 8)));
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    $i957 := $p2i.ref.i64($p956);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3588} free_pages($i957, 0);
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    $p958 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(479, 8)));
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    $i959 := $p2i.ref.i64($p958);
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3589} free_pages($i959, 0);
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    $p960 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(480, 8)));
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    $i961 := $p2i.ref.i64($p960);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3590} free_pages($i961, 0);
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    $p962 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(481, 8)));
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    $i963 := $p2i.ref.i64($p962);
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3591} free_pages($i963, 0);
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    $p964 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(482, 8)));
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $i965 := $p2i.ref.i64($p964);
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3592} free_pages($i965, 0);
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    $p966 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(483, 8)));
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    $i967 := $p2i.ref.i64($p966);
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3593} free_pages($i967, 0);
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    $p968 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(484, 8)));
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    $i969 := $p2i.ref.i64($p968);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3594} free_pages($i969, 0);
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    $p970 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(485, 8)));
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    $i971 := $p2i.ref.i64($p970);
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3595} free_pages($i971, 0);
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    $p972 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(486, 8)));
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    $i973 := $p2i.ref.i64($p972);
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3596} free_pages($i973, 0);
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    $p974 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(487, 8)));
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    $i975 := $p2i.ref.i64($p974);
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3597} free_pages($i975, 0);
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    $p976 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(488, 8)));
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $i977 := $p2i.ref.i64($p976);
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3598} free_pages($i977, 0);
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    $p978 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(489, 8)));
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    $i979 := $p2i.ref.i64($p978);
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3599} free_pages($i979, 0);
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    $p980 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(490, 8)));
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $i981 := $p2i.ref.i64($p980);
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3600} free_pages($i981, 0);
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    $p982 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(491, 8)));
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    $i983 := $p2i.ref.i64($p982);
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3601} free_pages($i983, 0);
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    $p984 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(492, 8)));
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    $i985 := $p2i.ref.i64($p984);
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3602} free_pages($i985, 0);
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    $p986 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(493, 8)));
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    $i987 := $p2i.ref.i64($p986);
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3603} free_pages($i987, 0);
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    $p988 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(494, 8)));
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $i989 := $p2i.ref.i64($p988);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3604} free_pages($i989, 0);
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    $p990 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(495, 8)));
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    $i991 := $p2i.ref.i64($p990);
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3605} free_pages($i991, 0);
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    $p992 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(496, 8)));
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    $i993 := $p2i.ref.i64($p992);
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3606} free_pages($i993, 0);
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    $p994 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(497, 8)));
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    $i995 := $p2i.ref.i64($p994);
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3607} free_pages($i995, 0);
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    $p996 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(498, 8)));
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    $i997 := $p2i.ref.i64($p996);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3608} free_pages($i997, 0);
    goto corral_source_split_12863;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    $p998 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(499, 8)));
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    $i999 := $p2i.ref.i64($p998);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3609} free_pages($i999, 0);
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    $p1000 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(500, 8)));
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    $i1001 := $p2i.ref.i64($p1000);
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3610} free_pages($i1001, 0);
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    $p1002 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(501, 8)));
    goto corral_source_split_12873;

  corral_source_split_12873:
    assume {:verifier.code 0} true;
    $i1003 := $p2i.ref.i64($p1002);
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3611} free_pages($i1003, 0);
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    $p1004 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(502, 8)));
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    $i1005 := $p2i.ref.i64($p1004);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3612} free_pages($i1005, 0);
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    $p1006 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(503, 8)));
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    $i1007 := $p2i.ref.i64($p1006);
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3613} free_pages($i1007, 0);
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    $p1008 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(504, 8)));
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $i1009 := $p2i.ref.i64($p1008);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3614} free_pages($i1009, 0);
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    $p1010 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(505, 8)));
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    $i1011 := $p2i.ref.i64($p1010);
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3615} free_pages($i1011, 0);
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    $p1012 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(506, 8)));
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    $i1013 := $p2i.ref.i64($p1012);
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3616} free_pages($i1013, 0);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    $p1014 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(507, 8)));
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    $i1015 := $p2i.ref.i64($p1014);
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3617} free_pages($i1015, 0);
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    $p1016 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(508, 8)));
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    $i1017 := $p2i.ref.i64($p1016);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3618} free_pages($i1017, 0);
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    $p1018 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(509, 8)));
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    $i1019 := $p2i.ref.i64($p1018);
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3619} free_pages($i1019, 0);
    goto corral_source_split_12907;

  corral_source_split_12907:
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    $p1020 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(510, 8)));
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    $i1021 := $p2i.ref.i64($p1020);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3620} free_pages($i1021, 0);
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    $p1022 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(511, 8)));
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    $i1023 := $p2i.ref.i64($p1022);
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3621} free_pages($i1023, 0);
    goto corral_source_split_12915;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    $p1024 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(512, 8)));
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    $i1025 := $p2i.ref.i64($p1024);
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3622} free_pages($i1025, 0);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    $p1026 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(513, 8)));
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    $i1027 := $p2i.ref.i64($p1026);
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3623} free_pages($i1027, 0);
    goto corral_source_split_12923;

  corral_source_split_12923:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    $p1028 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(514, 8)));
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    $i1029 := $p2i.ref.i64($p1028);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3624} free_pages($i1029, 0);
    goto corral_source_split_12927;

  corral_source_split_12927:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    $p1030 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(515, 8)));
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    $i1031 := $p2i.ref.i64($p1030);
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3625} free_pages($i1031, 0);
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    goto $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    $p1032 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(516, 8)));
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    $i1033 := $p2i.ref.i64($p1032);
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3626} free_pages($i1033, 0);
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    $p1034 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(517, 8)));
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    $i1035 := $p2i.ref.i64($p1034);
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3627} free_pages($i1035, 0);
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    $p1036 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(518, 8)));
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    $i1037 := $p2i.ref.i64($p1036);
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3628} free_pages($i1037, 0);
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    $p1038 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(519, 8)));
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    $i1039 := $p2i.ref.i64($p1038);
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3629} free_pages($i1039, 0);
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    $p1040 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(520, 8)));
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    $i1041 := $p2i.ref.i64($p1040);
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3630} free_pages($i1041, 0);
    goto corral_source_split_12951;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    $p1042 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(521, 8)));
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    $i1043 := $p2i.ref.i64($p1042);
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3631} free_pages($i1043, 0);
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    $p1044 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(522, 8)));
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    $i1045 := $p2i.ref.i64($p1044);
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3632} free_pages($i1045, 0);
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    $p1046 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(523, 8)));
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    $i1047 := $p2i.ref.i64($p1046);
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3633} free_pages($i1047, 0);
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    $p1048 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(524, 8)));
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    $i1049 := $p2i.ref.i64($p1048);
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3634} free_pages($i1049, 0);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    $p1050 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(525, 8)));
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    $i1051 := $p2i.ref.i64($p1050);
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3635} free_pages($i1051, 0);
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    $p1052 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(526, 8)));
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    $i1053 := $p2i.ref.i64($p1052);
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3636} free_pages($i1053, 0);
    goto corral_source_split_12975;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    $p1054 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(527, 8)));
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    $i1055 := $p2i.ref.i64($p1054);
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3637} free_pages($i1055, 0);
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    $p1056 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(528, 8)));
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    $i1057 := $p2i.ref.i64($p1056);
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3638} free_pages($i1057, 0);
    goto corral_source_split_12983;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    $p1058 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(529, 8)));
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    $i1059 := $p2i.ref.i64($p1058);
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3639} free_pages($i1059, 0);
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    $p1060 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(530, 8)));
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    $i1061 := $p2i.ref.i64($p1060);
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3640} free_pages($i1061, 0);
    goto corral_source_split_12991;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    $p1062 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(531, 8)));
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    $i1063 := $p2i.ref.i64($p1062);
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3641} free_pages($i1063, 0);
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    $p1064 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(532, 8)));
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $i1065 := $p2i.ref.i64($p1064);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3642} free_pages($i1065, 0);
    goto corral_source_split_12999;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    $p1066 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(533, 8)));
    goto corral_source_split_13001;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    $i1067 := $p2i.ref.i64($p1066);
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3643} free_pages($i1067, 0);
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    $p1068 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(534, 8)));
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    $i1069 := $p2i.ref.i64($p1068);
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3644} free_pages($i1069, 0);
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    $p1070 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(535, 8)));
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    $i1071 := $p2i.ref.i64($p1070);
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3645} free_pages($i1071, 0);
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    $p1072 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(536, 8)));
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    $i1073 := $p2i.ref.i64($p1072);
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3646} free_pages($i1073, 0);
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    $p1074 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(537, 8)));
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    $i1075 := $p2i.ref.i64($p1074);
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3647} free_pages($i1075, 0);
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    $p1076 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(538, 8)));
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    $i1077 := $p2i.ref.i64($p1076);
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3648} free_pages($i1077, 0);
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    $p1078 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(539, 8)));
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 0} true;
    $i1079 := $p2i.ref.i64($p1078);
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3649} free_pages($i1079, 0);
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    $p1080 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(540, 8)));
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    $i1081 := $p2i.ref.i64($p1080);
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3650} free_pages($i1081, 0);
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    $p1082 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(541, 8)));
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    $i1083 := $p2i.ref.i64($p1082);
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3651} free_pages($i1083, 0);
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    $p1084 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(542, 8)));
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    $i1085 := $p2i.ref.i64($p1084);
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3652} free_pages($i1085, 0);
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    $p1086 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(543, 8)));
    goto corral_source_split_13041;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    $i1087 := $p2i.ref.i64($p1086);
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3653} free_pages($i1087, 0);
    goto corral_source_split_13043;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    $p1088 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(544, 8)));
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    $i1089 := $p2i.ref.i64($p1088);
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3654} free_pages($i1089, 0);
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    $p1090 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(545, 8)));
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    $i1091 := $p2i.ref.i64($p1090);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3655} free_pages($i1091, 0);
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    $p1092 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(546, 8)));
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    $i1093 := $p2i.ref.i64($p1092);
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3656} free_pages($i1093, 0);
    goto corral_source_split_13055;

  corral_source_split_13055:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    $p1094 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(547, 8)));
    goto corral_source_split_13057;

  corral_source_split_13057:
    assume {:verifier.code 0} true;
    $i1095 := $p2i.ref.i64($p1094);
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3657} free_pages($i1095, 0);
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    $p1096 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(548, 8)));
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    $i1097 := $p2i.ref.i64($p1096);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3658} free_pages($i1097, 0);
    goto corral_source_split_13063;

  corral_source_split_13063:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    $p1098 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(549, 8)));
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    $i1099 := $p2i.ref.i64($p1098);
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3659} free_pages($i1099, 0);
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    $p1100 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(550, 8)));
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    $i1101 := $p2i.ref.i64($p1100);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3660} free_pages($i1101, 0);
    goto corral_source_split_13071;

  corral_source_split_13071:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    $p1102 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(551, 8)));
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    $i1103 := $p2i.ref.i64($p1102);
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3661} free_pages($i1103, 0);
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    $p1104 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(552, 8)));
    goto corral_source_split_13077;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    $i1105 := $p2i.ref.i64($p1104);
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3662} free_pages($i1105, 0);
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    $p1106 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(553, 8)));
    goto corral_source_split_13081;

  corral_source_split_13081:
    assume {:verifier.code 0} true;
    $i1107 := $p2i.ref.i64($p1106);
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3663} free_pages($i1107, 0);
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    $p1108 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(554, 8)));
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    $i1109 := $p2i.ref.i64($p1108);
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3664} free_pages($i1109, 0);
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    $p1110 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(555, 8)));
    goto corral_source_split_13089;

  corral_source_split_13089:
    assume {:verifier.code 0} true;
    $i1111 := $p2i.ref.i64($p1110);
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3665} free_pages($i1111, 0);
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    $p1112 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(556, 8)));
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    $i1113 := $p2i.ref.i64($p1112);
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3666} free_pages($i1113, 0);
    goto corral_source_split_13095;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    $p1114 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(557, 8)));
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    $i1115 := $p2i.ref.i64($p1114);
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3667} free_pages($i1115, 0);
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    $p1116 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(558, 8)));
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    $i1117 := $p2i.ref.i64($p1116);
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3668} free_pages($i1117, 0);
    goto corral_source_split_13103;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    $p1118 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(559, 8)));
    goto corral_source_split_13105;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    $i1119 := $p2i.ref.i64($p1118);
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3669} free_pages($i1119, 0);
    goto corral_source_split_13107;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    $p1120 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(560, 8)));
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    $i1121 := $p2i.ref.i64($p1120);
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3670} free_pages($i1121, 0);
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    $p1122 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(561, 8)));
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    $i1123 := $p2i.ref.i64($p1122);
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3671} free_pages($i1123, 0);
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    $p1124 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(562, 8)));
    goto corral_source_split_13117;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    $i1125 := $p2i.ref.i64($p1124);
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3672} free_pages($i1125, 0);
    goto corral_source_split_13119;

  corral_source_split_13119:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    $p1126 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(563, 8)));
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    $i1127 := $p2i.ref.i64($p1126);
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3673} free_pages($i1127, 0);
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    $p1128 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(564, 8)));
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    $i1129 := $p2i.ref.i64($p1128);
    goto corral_source_split_13126;

  corral_source_split_13126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3674} free_pages($i1129, 0);
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    $p1130 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(565, 8)));
    goto corral_source_split_13129;

  corral_source_split_13129:
    assume {:verifier.code 0} true;
    $i1131 := $p2i.ref.i64($p1130);
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3675} free_pages($i1131, 0);
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    $p1132 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(566, 8)));
    goto corral_source_split_13133;

  corral_source_split_13133:
    assume {:verifier.code 0} true;
    $i1133 := $p2i.ref.i64($p1132);
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3676} free_pages($i1133, 0);
    goto corral_source_split_13135;

  corral_source_split_13135:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    $p1134 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(567, 8)));
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    $i1135 := $p2i.ref.i64($p1134);
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3677} free_pages($i1135, 0);
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    $p1136 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(568, 8)));
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    $i1137 := $p2i.ref.i64($p1136);
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3678} free_pages($i1137, 0);
    goto corral_source_split_13143;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    $p1138 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(569, 8)));
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    $i1139 := $p2i.ref.i64($p1138);
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3679} free_pages($i1139, 0);
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    $p1140 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(570, 8)));
    goto corral_source_split_13149;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    $i1141 := $p2i.ref.i64($p1140);
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3680} free_pages($i1141, 0);
    goto corral_source_split_13151;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    $p1142 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(571, 8)));
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    $i1143 := $p2i.ref.i64($p1142);
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3681} free_pages($i1143, 0);
    goto corral_source_split_13155;

  corral_source_split_13155:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    $p1144 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(572, 8)));
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    $i1145 := $p2i.ref.i64($p1144);
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3682} free_pages($i1145, 0);
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    $p1146 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(573, 8)));
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    $i1147 := $p2i.ref.i64($p1146);
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3683} free_pages($i1147, 0);
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    $p1148 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(574, 8)));
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    $i1149 := $p2i.ref.i64($p1148);
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3684} free_pages($i1149, 0);
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    $p1150 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(575, 8)));
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    $i1151 := $p2i.ref.i64($p1150);
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3685} free_pages($i1151, 0);
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    $p1152 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(576, 8)));
    goto corral_source_split_13173;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    $i1153 := $p2i.ref.i64($p1152);
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3686} free_pages($i1153, 0);
    goto corral_source_split_13175;

  corral_source_split_13175:
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    $p1154 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(577, 8)));
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    $i1155 := $p2i.ref.i64($p1154);
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3687} free_pages($i1155, 0);
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    $p1156 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(578, 8)));
    goto corral_source_split_13181;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    $i1157 := $p2i.ref.i64($p1156);
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3688} free_pages($i1157, 0);
    goto corral_source_split_13183;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    $p1158 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(579, 8)));
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    $i1159 := $p2i.ref.i64($p1158);
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3689} free_pages($i1159, 0);
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    $p1160 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(580, 8)));
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    $i1161 := $p2i.ref.i64($p1160);
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3690} free_pages($i1161, 0);
    goto corral_source_split_13191;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    $p1162 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(581, 8)));
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $i1163 := $p2i.ref.i64($p1162);
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3691} free_pages($i1163, 0);
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    $p1164 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(582, 8)));
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    $i1165 := $p2i.ref.i64($p1164);
    goto corral_source_split_13198;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3692} free_pages($i1165, 0);
    goto corral_source_split_13199;

  corral_source_split_13199:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    $p1166 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(583, 8)));
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    $i1167 := $p2i.ref.i64($p1166);
    goto corral_source_split_13202;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3693} free_pages($i1167, 0);
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    $p1168 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(584, 8)));
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    $i1169 := $p2i.ref.i64($p1168);
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3694} free_pages($i1169, 0);
    goto corral_source_split_13207;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    $p1170 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(585, 8)));
    goto corral_source_split_13209;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    $i1171 := $p2i.ref.i64($p1170);
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3695} free_pages($i1171, 0);
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    $p1172 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(586, 8)));
    goto corral_source_split_13213;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    $i1173 := $p2i.ref.i64($p1172);
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3696} free_pages($i1173, 0);
    goto corral_source_split_13215;

  corral_source_split_13215:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    $p1174 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(587, 8)));
    goto corral_source_split_13217;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    $i1175 := $p2i.ref.i64($p1174);
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3697} free_pages($i1175, 0);
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    $p1176 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(588, 8)));
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    $i1177 := $p2i.ref.i64($p1176);
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3698} free_pages($i1177, 0);
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    $p1178 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(589, 8)));
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    $i1179 := $p2i.ref.i64($p1178);
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3699} free_pages($i1179, 0);
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    $p1180 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(590, 8)));
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    $i1181 := $p2i.ref.i64($p1180);
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3700} free_pages($i1181, 0);
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    $p1182 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(591, 8)));
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    $i1183 := $p2i.ref.i64($p1182);
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3701} free_pages($i1183, 0);
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    $p1184 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(592, 8)));
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    $i1185 := $p2i.ref.i64($p1184);
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3702} free_pages($i1185, 0);
    goto corral_source_split_13239;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    $p1186 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(593, 8)));
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    $i1187 := $p2i.ref.i64($p1186);
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3703} free_pages($i1187, 0);
    goto corral_source_split_13243;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    $p1188 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(594, 8)));
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $i1189 := $p2i.ref.i64($p1188);
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3704} free_pages($i1189, 0);
    goto corral_source_split_13247;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    $p1190 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(595, 8)));
    goto corral_source_split_13249;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    $i1191 := $p2i.ref.i64($p1190);
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3705} free_pages($i1191, 0);
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    $p1192 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(596, 8)));
    goto corral_source_split_13253;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    $i1193 := $p2i.ref.i64($p1192);
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3706} free_pages($i1193, 0);
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    $p1194 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(597, 8)));
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    $i1195 := $p2i.ref.i64($p1194);
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3707} free_pages($i1195, 0);
    goto corral_source_split_13259;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    $p1196 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(598, 8)));
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $i1197 := $p2i.ref.i64($p1196);
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3708} free_pages($i1197, 0);
    goto corral_source_split_13263;

  corral_source_split_13263:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    $p1198 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(599, 8)));
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    $i1199 := $p2i.ref.i64($p1198);
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3709} free_pages($i1199, 0);
    goto corral_source_split_13267;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    $p1200 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(600, 8)));
    goto corral_source_split_13269;

  corral_source_split_13269:
    assume {:verifier.code 0} true;
    $i1201 := $p2i.ref.i64($p1200);
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3710} free_pages($i1201, 0);
    goto corral_source_split_13271;

  corral_source_split_13271:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    $p1202 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(601, 8)));
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    $i1203 := $p2i.ref.i64($p1202);
    goto corral_source_split_13274;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3711} free_pages($i1203, 0);
    goto corral_source_split_13275;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    $p1204 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(602, 8)));
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    $i1205 := $p2i.ref.i64($p1204);
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3712} free_pages($i1205, 0);
    goto corral_source_split_13279;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    $p1206 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(603, 8)));
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    $i1207 := $p2i.ref.i64($p1206);
    goto corral_source_split_13282;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3713} free_pages($i1207, 0);
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    $p1208 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(604, 8)));
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    $i1209 := $p2i.ref.i64($p1208);
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3714} free_pages($i1209, 0);
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    $p1210 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(605, 8)));
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    $i1211 := $p2i.ref.i64($p1210);
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3715} free_pages($i1211, 0);
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    $p1212 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(606, 8)));
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $i1213 := $p2i.ref.i64($p1212);
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3716} free_pages($i1213, 0);
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    $p1214 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(607, 8)));
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    $i1215 := $p2i.ref.i64($p1214);
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3717} free_pages($i1215, 0);
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    $p1216 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(608, 8)));
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    $i1217 := $p2i.ref.i64($p1216);
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3718} free_pages($i1217, 0);
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    $p1218 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(609, 8)));
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    $i1219 := $p2i.ref.i64($p1218);
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3719} free_pages($i1219, 0);
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb613:
    assume {:verifier.code 0} true;
    $p1220 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(610, 8)));
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    $i1221 := $p2i.ref.i64($p1220);
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3720} free_pages($i1221, 0);
    goto corral_source_split_13311;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    $p1222 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(611, 8)));
    goto corral_source_split_13313;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    $i1223 := $p2i.ref.i64($p1222);
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3721} free_pages($i1223, 0);
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    $p1224 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(612, 8)));
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    $i1225 := $p2i.ref.i64($p1224);
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3722} free_pages($i1225, 0);
    goto corral_source_split_13319;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    $p1226 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(613, 8)));
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    $i1227 := $p2i.ref.i64($p1226);
    goto corral_source_split_13322;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3723} free_pages($i1227, 0);
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    $p1228 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(614, 8)));
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    $i1229 := $p2i.ref.i64($p1228);
    goto corral_source_split_13326;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3724} free_pages($i1229, 0);
    goto corral_source_split_13327;

  corral_source_split_13327:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    $p1230 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(615, 8)));
    goto corral_source_split_13329;

  corral_source_split_13329:
    assume {:verifier.code 0} true;
    $i1231 := $p2i.ref.i64($p1230);
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3725} free_pages($i1231, 0);
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    $p1232 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(616, 8)));
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    $i1233 := $p2i.ref.i64($p1232);
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3726} free_pages($i1233, 0);
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    $p1234 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(617, 8)));
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    $i1235 := $p2i.ref.i64($p1234);
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3727} free_pages($i1235, 0);
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    $p1236 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(618, 8)));
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    $i1237 := $p2i.ref.i64($p1236);
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3728} free_pages($i1237, 0);
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    $p1238 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(619, 8)));
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    $i1239 := $p2i.ref.i64($p1238);
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3729} free_pages($i1239, 0);
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    $p1240 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(620, 8)));
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    $i1241 := $p2i.ref.i64($p1240);
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3730} free_pages($i1241, 0);
    goto corral_source_split_13351;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    $p1242 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(621, 8)));
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    $i1243 := $p2i.ref.i64($p1242);
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3731} free_pages($i1243, 0);
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    $p1244 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(622, 8)));
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 0} true;
    $i1245 := $p2i.ref.i64($p1244);
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3732} free_pages($i1245, 0);
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    $p1246 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(623, 8)));
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    $i1247 := $p2i.ref.i64($p1246);
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3733} free_pages($i1247, 0);
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    $p1248 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(624, 8)));
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    $i1249 := $p2i.ref.i64($p1248);
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3734} free_pages($i1249, 0);
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    $p1250 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(625, 8)));
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    $i1251 := $p2i.ref.i64($p1250);
    goto corral_source_split_13370;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3735} free_pages($i1251, 0);
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb629:
    assume {:verifier.code 0} true;
    $p1252 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(626, 8)));
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    $i1253 := $p2i.ref.i64($p1252);
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3736} free_pages($i1253, 0);
    goto corral_source_split_13375;

  corral_source_split_13375:
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    $p1254 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(627, 8)));
    goto corral_source_split_13377;

  corral_source_split_13377:
    assume {:verifier.code 0} true;
    $i1255 := $p2i.ref.i64($p1254);
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3737} free_pages($i1255, 0);
    goto corral_source_split_13379;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    $p1256 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(628, 8)));
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    $i1257 := $p2i.ref.i64($p1256);
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3738} free_pages($i1257, 0);
    goto corral_source_split_13383;

  corral_source_split_13383:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    $p1258 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(629, 8)));
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    $i1259 := $p2i.ref.i64($p1258);
    goto corral_source_split_13386;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3739} free_pages($i1259, 0);
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    $p1260 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(630, 8)));
    goto corral_source_split_13389;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    $i1261 := $p2i.ref.i64($p1260);
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3740} free_pages($i1261, 0);
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    $p1262 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(631, 8)));
    goto corral_source_split_13393;

  corral_source_split_13393:
    assume {:verifier.code 0} true;
    $i1263 := $p2i.ref.i64($p1262);
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3741} free_pages($i1263, 0);
    goto corral_source_split_13395;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    $p1264 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(632, 8)));
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    $i1265 := $p2i.ref.i64($p1264);
    goto corral_source_split_13398;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3742} free_pages($i1265, 0);
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    $p1266 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(633, 8)));
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    $i1267 := $p2i.ref.i64($p1266);
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3743} free_pages($i1267, 0);
    goto corral_source_split_13403;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    $p1268 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(634, 8)));
    goto corral_source_split_13405;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    $i1269 := $p2i.ref.i64($p1268);
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3744} free_pages($i1269, 0);
    goto corral_source_split_13407;

  corral_source_split_13407:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    $p1270 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(635, 8)));
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    $i1271 := $p2i.ref.i64($p1270);
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3745} free_pages($i1271, 0);
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    $p1272 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(636, 8)));
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $i1273 := $p2i.ref.i64($p1272);
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3746} free_pages($i1273, 0);
    goto corral_source_split_13415;

  corral_source_split_13415:
    assume {:verifier.code 0} true;
    goto $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    $p1274 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(637, 8)));
    goto corral_source_split_13417;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    $i1275 := $p2i.ref.i64($p1274);
    goto corral_source_split_13418;

  corral_source_split_13418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3747} free_pages($i1275, 0);
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    $p1276 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(638, 8)));
    goto corral_source_split_13421;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    $i1277 := $p2i.ref.i64($p1276);
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3748} free_pages($i1277, 0);
    goto corral_source_split_13423;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    $p1278 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(639, 8)));
    goto corral_source_split_13425;

  corral_source_split_13425:
    assume {:verifier.code 0} true;
    $i1279 := $p2i.ref.i64($p1278);
    goto corral_source_split_13426;

  corral_source_split_13426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3749} free_pages($i1279, 0);
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    $p1280 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(640, 8)));
    goto corral_source_split_13429;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    $i1281 := $p2i.ref.i64($p1280);
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3750} free_pages($i1281, 0);
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    $p1282 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(641, 8)));
    goto corral_source_split_13433;

  corral_source_split_13433:
    assume {:verifier.code 0} true;
    $i1283 := $p2i.ref.i64($p1282);
    goto corral_source_split_13434;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3751} free_pages($i1283, 0);
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    $p1284 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(642, 8)));
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    $i1285 := $p2i.ref.i64($p1284);
    goto corral_source_split_13438;

  corral_source_split_13438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3752} free_pages($i1285, 0);
    goto corral_source_split_13439;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    $p1286 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(643, 8)));
    goto corral_source_split_13441;

  corral_source_split_13441:
    assume {:verifier.code 0} true;
    $i1287 := $p2i.ref.i64($p1286);
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3753} free_pages($i1287, 0);
    goto corral_source_split_13443;

  corral_source_split_13443:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    $p1288 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(644, 8)));
    goto corral_source_split_13445;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    $i1289 := $p2i.ref.i64($p1288);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3754} free_pages($i1289, 0);
    goto corral_source_split_13447;

  corral_source_split_13447:
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb648:
    assume {:verifier.code 0} true;
    $p1290 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(645, 8)));
    goto corral_source_split_13449;

  corral_source_split_13449:
    assume {:verifier.code 0} true;
    $i1291 := $p2i.ref.i64($p1290);
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3755} free_pages($i1291, 0);
    goto corral_source_split_13451;

  corral_source_split_13451:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    $p1292 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(646, 8)));
    goto corral_source_split_13453;

  corral_source_split_13453:
    assume {:verifier.code 0} true;
    $i1293 := $p2i.ref.i64($p1292);
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3756} free_pages($i1293, 0);
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    $p1294 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(647, 8)));
    goto corral_source_split_13457;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    $i1295 := $p2i.ref.i64($p1294);
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3757} free_pages($i1295, 0);
    goto corral_source_split_13459;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    $p1296 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(648, 8)));
    goto corral_source_split_13461;

  corral_source_split_13461:
    assume {:verifier.code 0} true;
    $i1297 := $p2i.ref.i64($p1296);
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3758} free_pages($i1297, 0);
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 0} true;
    goto $bb652;

  $bb652:
    assume {:verifier.code 0} true;
    $p1298 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(649, 8)));
    goto corral_source_split_13465;

  corral_source_split_13465:
    assume {:verifier.code 0} true;
    $i1299 := $p2i.ref.i64($p1298);
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3759} free_pages($i1299, 0);
    goto corral_source_split_13467;

  corral_source_split_13467:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    $p1300 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(650, 8)));
    goto corral_source_split_13469;

  corral_source_split_13469:
    assume {:verifier.code 0} true;
    $i1301 := $p2i.ref.i64($p1300);
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3760} free_pages($i1301, 0);
    goto corral_source_split_13471;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    $p1302 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(651, 8)));
    goto corral_source_split_13473;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    $i1303 := $p2i.ref.i64($p1302);
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3761} free_pages($i1303, 0);
    goto corral_source_split_13475;

  corral_source_split_13475:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    $p1304 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(652, 8)));
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    $i1305 := $p2i.ref.i64($p1304);
    goto corral_source_split_13478;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3762} free_pages($i1305, 0);
    goto corral_source_split_13479;

  corral_source_split_13479:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    $p1306 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(653, 8)));
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    $i1307 := $p2i.ref.i64($p1306);
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3763} free_pages($i1307, 0);
    goto corral_source_split_13483;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    $p1308 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(654, 8)));
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    $i1309 := $p2i.ref.i64($p1308);
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3764} free_pages($i1309, 0);
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    $p1310 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(655, 8)));
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    $i1311 := $p2i.ref.i64($p1310);
    goto corral_source_split_13490;

  corral_source_split_13490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3765} free_pages($i1311, 0);
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    $p1312 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(656, 8)));
    goto corral_source_split_13493;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    $i1313 := $p2i.ref.i64($p1312);
    goto corral_source_split_13494;

  corral_source_split_13494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3766} free_pages($i1313, 0);
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    $p1314 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(657, 8)));
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    $i1315 := $p2i.ref.i64($p1314);
    goto corral_source_split_13498;

  corral_source_split_13498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3767} free_pages($i1315, 0);
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    $p1316 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(658, 8)));
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    $i1317 := $p2i.ref.i64($p1316);
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3768} free_pages($i1317, 0);
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    $p1318 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(659, 8)));
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    $i1319 := $p2i.ref.i64($p1318);
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3769} free_pages($i1319, 0);
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    $p1320 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(660, 8)));
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    $i1321 := $p2i.ref.i64($p1320);
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3770} free_pages($i1321, 0);
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    goto $bb664;

  $bb664:
    assume {:verifier.code 0} true;
    $p1322 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(661, 8)));
    goto corral_source_split_13513;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    $i1323 := $p2i.ref.i64($p1322);
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3771} free_pages($i1323, 0);
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    $p1324 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(662, 8)));
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    $i1325 := $p2i.ref.i64($p1324);
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3772} free_pages($i1325, 0);
    goto corral_source_split_13519;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    $p1326 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(663, 8)));
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    $i1327 := $p2i.ref.i64($p1326);
    goto corral_source_split_13522;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3773} free_pages($i1327, 0);
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    $p1328 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(664, 8)));
    goto corral_source_split_13525;

  corral_source_split_13525:
    assume {:verifier.code 0} true;
    $i1329 := $p2i.ref.i64($p1328);
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3774} free_pages($i1329, 0);
    goto corral_source_split_13527;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    $p1330 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(665, 8)));
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    $i1331 := $p2i.ref.i64($p1330);
    goto corral_source_split_13530;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3775} free_pages($i1331, 0);
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    goto $bb669;

  $bb669:
    assume {:verifier.code 0} true;
    $p1332 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(666, 8)));
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    $i1333 := $p2i.ref.i64($p1332);
    goto corral_source_split_13534;

  corral_source_split_13534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3776} free_pages($i1333, 0);
    goto corral_source_split_13535;

  corral_source_split_13535:
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    $p1334 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(667, 8)));
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    $i1335 := $p2i.ref.i64($p1334);
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3777} free_pages($i1335, 0);
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    $p1336 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(668, 8)));
    goto corral_source_split_13541;

  corral_source_split_13541:
    assume {:verifier.code 0} true;
    $i1337 := $p2i.ref.i64($p1336);
    goto corral_source_split_13542;

  corral_source_split_13542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3778} free_pages($i1337, 0);
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb672:
    assume {:verifier.code 0} true;
    $p1338 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(669, 8)));
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    $i1339 := $p2i.ref.i64($p1338);
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3779} free_pages($i1339, 0);
    goto corral_source_split_13547;

  corral_source_split_13547:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb673:
    assume {:verifier.code 0} true;
    $p1340 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(670, 8)));
    goto corral_source_split_13549;

  corral_source_split_13549:
    assume {:verifier.code 0} true;
    $i1341 := $p2i.ref.i64($p1340);
    goto corral_source_split_13550;

  corral_source_split_13550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3780} free_pages($i1341, 0);
    goto corral_source_split_13551;

  corral_source_split_13551:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    $p1342 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(671, 8)));
    goto corral_source_split_13553;

  corral_source_split_13553:
    assume {:verifier.code 0} true;
    $i1343 := $p2i.ref.i64($p1342);
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3781} free_pages($i1343, 0);
    goto corral_source_split_13555;

  corral_source_split_13555:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    $p1344 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(672, 8)));
    goto corral_source_split_13557;

  corral_source_split_13557:
    assume {:verifier.code 0} true;
    $i1345 := $p2i.ref.i64($p1344);
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3782} free_pages($i1345, 0);
    goto corral_source_split_13559;

  corral_source_split_13559:
    assume {:verifier.code 0} true;
    goto $bb676;

  $bb676:
    assume {:verifier.code 0} true;
    $p1346 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(673, 8)));
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    $i1347 := $p2i.ref.i64($p1346);
    goto corral_source_split_13562;

  corral_source_split_13562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3783} free_pages($i1347, 0);
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    $p1348 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(674, 8)));
    goto corral_source_split_13565;

  corral_source_split_13565:
    assume {:verifier.code 0} true;
    $i1349 := $p2i.ref.i64($p1348);
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3784} free_pages($i1349, 0);
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    $p1350 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(675, 8)));
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    $i1351 := $p2i.ref.i64($p1350);
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3785} free_pages($i1351, 0);
    goto corral_source_split_13571;

  corral_source_split_13571:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    $p1352 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(676, 8)));
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    $i1353 := $p2i.ref.i64($p1352);
    goto corral_source_split_13574;

  corral_source_split_13574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3786} free_pages($i1353, 0);
    goto corral_source_split_13575;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb680:
    assume {:verifier.code 0} true;
    $p1354 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(677, 8)));
    goto corral_source_split_13577;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    $i1355 := $p2i.ref.i64($p1354);
    goto corral_source_split_13578;

  corral_source_split_13578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3787} free_pages($i1355, 0);
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    $p1356 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(678, 8)));
    goto corral_source_split_13581;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    $i1357 := $p2i.ref.i64($p1356);
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3788} free_pages($i1357, 0);
    goto corral_source_split_13583;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    $p1358 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(679, 8)));
    goto corral_source_split_13585;

  corral_source_split_13585:
    assume {:verifier.code 0} true;
    $i1359 := $p2i.ref.i64($p1358);
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3789} free_pages($i1359, 0);
    goto corral_source_split_13587;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    $p1360 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(680, 8)));
    goto corral_source_split_13589;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    $i1361 := $p2i.ref.i64($p1360);
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3790} free_pages($i1361, 0);
    goto corral_source_split_13591;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    goto $bb684;

  $bb684:
    assume {:verifier.code 0} true;
    $p1362 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(681, 8)));
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    $i1363 := $p2i.ref.i64($p1362);
    goto corral_source_split_13594;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3791} free_pages($i1363, 0);
    goto corral_source_split_13595;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    $p1364 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(682, 8)));
    goto corral_source_split_13597;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    $i1365 := $p2i.ref.i64($p1364);
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3792} free_pages($i1365, 0);
    goto corral_source_split_13599;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    $p1366 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(683, 8)));
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    $i1367 := $p2i.ref.i64($p1366);
    goto corral_source_split_13602;

  corral_source_split_13602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3793} free_pages($i1367, 0);
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    goto $bb687;

  $bb687:
    assume {:verifier.code 0} true;
    $p1368 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(684, 8)));
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    $i1369 := $p2i.ref.i64($p1368);
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3794} free_pages($i1369, 0);
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    goto $bb688;

  $bb688:
    assume {:verifier.code 0} true;
    $p1370 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(685, 8)));
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    $i1371 := $p2i.ref.i64($p1370);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3795} free_pages($i1371, 0);
    goto corral_source_split_13611;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    goto $bb689;

  $bb689:
    assume {:verifier.code 0} true;
    $p1372 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(686, 8)));
    goto corral_source_split_13613;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    $i1373 := $p2i.ref.i64($p1372);
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3796} free_pages($i1373, 0);
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    $p1374 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(687, 8)));
    goto corral_source_split_13617;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    $i1375 := $p2i.ref.i64($p1374);
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3797} free_pages($i1375, 0);
    goto corral_source_split_13619;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    $p1376 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(688, 8)));
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    $i1377 := $p2i.ref.i64($p1376);
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3798} free_pages($i1377, 0);
    goto corral_source_split_13623;

  corral_source_split_13623:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb692:
    assume {:verifier.code 0} true;
    $p1378 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(689, 8)));
    goto corral_source_split_13625;

  corral_source_split_13625:
    assume {:verifier.code 0} true;
    $i1379 := $p2i.ref.i64($p1378);
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3799} free_pages($i1379, 0);
    goto corral_source_split_13627;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    goto $bb693;

  $bb693:
    assume {:verifier.code 0} true;
    $p1380 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(690, 8)));
    goto corral_source_split_13629;

  corral_source_split_13629:
    assume {:verifier.code 0} true;
    $i1381 := $p2i.ref.i64($p1380);
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3800} free_pages($i1381, 0);
    goto corral_source_split_13631;

  corral_source_split_13631:
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    $p1382 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(691, 8)));
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    $i1383 := $p2i.ref.i64($p1382);
    goto corral_source_split_13634;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3801} free_pages($i1383, 0);
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    $p1384 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(692, 8)));
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    $i1385 := $p2i.ref.i64($p1384);
    goto corral_source_split_13638;

  corral_source_split_13638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3802} free_pages($i1385, 0);
    goto corral_source_split_13639;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb696:
    assume {:verifier.code 0} true;
    $p1386 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(693, 8)));
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    $i1387 := $p2i.ref.i64($p1386);
    goto corral_source_split_13642;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3803} free_pages($i1387, 0);
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    $p1388 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(694, 8)));
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    $i1389 := $p2i.ref.i64($p1388);
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3804} free_pages($i1389, 0);
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    $p1390 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(695, 8)));
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    $i1391 := $p2i.ref.i64($p1390);
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3805} free_pages($i1391, 0);
    goto corral_source_split_13651;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    $p1392 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(696, 8)));
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    $i1393 := $p2i.ref.i64($p1392);
    goto corral_source_split_13654;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3806} free_pages($i1393, 0);
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    goto $bb700;

  $bb700:
    assume {:verifier.code 0} true;
    $p1394 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(697, 8)));
    goto corral_source_split_13657;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    $i1395 := $p2i.ref.i64($p1394);
    goto corral_source_split_13658;

  corral_source_split_13658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3807} free_pages($i1395, 0);
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    goto $bb701;

  $bb701:
    assume {:verifier.code 0} true;
    $p1396 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(698, 8)));
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    $i1397 := $p2i.ref.i64($p1396);
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3808} free_pages($i1397, 0);
    goto corral_source_split_13663;

  corral_source_split_13663:
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    $p1398 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(699, 8)));
    goto corral_source_split_13665;

  corral_source_split_13665:
    assume {:verifier.code 0} true;
    $i1399 := $p2i.ref.i64($p1398);
    goto corral_source_split_13666;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3809} free_pages($i1399, 0);
    goto corral_source_split_13667;

  corral_source_split_13667:
    assume {:verifier.code 0} true;
    goto $bb703;

  $bb703:
    assume {:verifier.code 0} true;
    $p1400 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(700, 8)));
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    $i1401 := $p2i.ref.i64($p1400);
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3810} free_pages($i1401, 0);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    goto $bb704;

  $bb704:
    assume {:verifier.code 0} true;
    $p1402 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(701, 8)));
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    $i1403 := $p2i.ref.i64($p1402);
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3811} free_pages($i1403, 0);
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb705:
    assume {:verifier.code 0} true;
    $p1404 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(702, 8)));
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    $i1405 := $p2i.ref.i64($p1404);
    goto corral_source_split_13678;

  corral_source_split_13678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3812} free_pages($i1405, 0);
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    $p1406 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(703, 8)));
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    $i1407 := $p2i.ref.i64($p1406);
    goto corral_source_split_13682;

  corral_source_split_13682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3813} free_pages($i1407, 0);
    goto corral_source_split_13683;

  corral_source_split_13683:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    $p1408 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(704, 8)));
    goto corral_source_split_13685;

  corral_source_split_13685:
    assume {:verifier.code 0} true;
    $i1409 := $p2i.ref.i64($p1408);
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3814} free_pages($i1409, 0);
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    goto $bb708;

  $bb708:
    assume {:verifier.code 0} true;
    $p1410 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(705, 8)));
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    $i1411 := $p2i.ref.i64($p1410);
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3815} free_pages($i1411, 0);
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb709:
    assume {:verifier.code 0} true;
    $p1412 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(706, 8)));
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    $i1413 := $p2i.ref.i64($p1412);
    goto corral_source_split_13694;

  corral_source_split_13694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3816} free_pages($i1413, 0);
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    $p1414 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(707, 8)));
    goto corral_source_split_13697;

  corral_source_split_13697:
    assume {:verifier.code 0} true;
    $i1415 := $p2i.ref.i64($p1414);
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3817} free_pages($i1415, 0);
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb711:
    assume {:verifier.code 0} true;
    $p1416 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(708, 8)));
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    $i1417 := $p2i.ref.i64($p1416);
    goto corral_source_split_13702;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3818} free_pages($i1417, 0);
    goto corral_source_split_13703;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    goto $bb712;

  $bb712:
    assume {:verifier.code 0} true;
    $p1418 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(709, 8)));
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    $i1419 := $p2i.ref.i64($p1418);
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3819} free_pages($i1419, 0);
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    $p1420 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(710, 8)));
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    $i1421 := $p2i.ref.i64($p1420);
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3820} free_pages($i1421, 0);
    goto corral_source_split_13711;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    $p1422 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(711, 8)));
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    $i1423 := $p2i.ref.i64($p1422);
    goto corral_source_split_13714;

  corral_source_split_13714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3821} free_pages($i1423, 0);
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    $p1424 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(712, 8)));
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    $i1425 := $p2i.ref.i64($p1424);
    goto corral_source_split_13718;

  corral_source_split_13718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3822} free_pages($i1425, 0);
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    $p1426 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(713, 8)));
    goto corral_source_split_13721;

  corral_source_split_13721:
    assume {:verifier.code 0} true;
    $i1427 := $p2i.ref.i64($p1426);
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3823} free_pages($i1427, 0);
    goto corral_source_split_13723;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb717:
    assume {:verifier.code 0} true;
    $p1428 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(714, 8)));
    goto corral_source_split_13725;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    $i1429 := $p2i.ref.i64($p1428);
    goto corral_source_split_13726;

  corral_source_split_13726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3824} free_pages($i1429, 0);
    goto corral_source_split_13727;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    $p1430 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(715, 8)));
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    $i1431 := $p2i.ref.i64($p1430);
    goto corral_source_split_13730;

  corral_source_split_13730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3825} free_pages($i1431, 0);
    goto corral_source_split_13731;

  corral_source_split_13731:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    $p1432 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(716, 8)));
    goto corral_source_split_13733;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    $i1433 := $p2i.ref.i64($p1432);
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3826} free_pages($i1433, 0);
    goto corral_source_split_13735;

  corral_source_split_13735:
    assume {:verifier.code 0} true;
    goto $bb720;

  $bb720:
    assume {:verifier.code 0} true;
    $p1434 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(717, 8)));
    goto corral_source_split_13737;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    $i1435 := $p2i.ref.i64($p1434);
    goto corral_source_split_13738;

  corral_source_split_13738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3827} free_pages($i1435, 0);
    goto corral_source_split_13739;

  corral_source_split_13739:
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb721:
    assume {:verifier.code 0} true;
    $p1436 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(718, 8)));
    goto corral_source_split_13741;

  corral_source_split_13741:
    assume {:verifier.code 0} true;
    $i1437 := $p2i.ref.i64($p1436);
    goto corral_source_split_13742;

  corral_source_split_13742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3828} free_pages($i1437, 0);
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    $p1438 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(719, 8)));
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    $i1439 := $p2i.ref.i64($p1438);
    goto corral_source_split_13746;

  corral_source_split_13746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3829} free_pages($i1439, 0);
    goto corral_source_split_13747;

  corral_source_split_13747:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    $p1440 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(720, 8)));
    goto corral_source_split_13749;

  corral_source_split_13749:
    assume {:verifier.code 0} true;
    $i1441 := $p2i.ref.i64($p1440);
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3830} free_pages($i1441, 0);
    goto corral_source_split_13751;

  corral_source_split_13751:
    assume {:verifier.code 0} true;
    goto $bb724;

  $bb724:
    assume {:verifier.code 0} true;
    $p1442 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(721, 8)));
    goto corral_source_split_13753;

  corral_source_split_13753:
    assume {:verifier.code 0} true;
    $i1443 := $p2i.ref.i64($p1442);
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3831} free_pages($i1443, 0);
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb725:
    assume {:verifier.code 0} true;
    $p1444 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(722, 8)));
    goto corral_source_split_13757;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    $i1445 := $p2i.ref.i64($p1444);
    goto corral_source_split_13758;

  corral_source_split_13758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3832} free_pages($i1445, 0);
    goto corral_source_split_13759;

  corral_source_split_13759:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    $p1446 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(723, 8)));
    goto corral_source_split_13761;

  corral_source_split_13761:
    assume {:verifier.code 0} true;
    $i1447 := $p2i.ref.i64($p1446);
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3833} free_pages($i1447, 0);
    goto corral_source_split_13763;

  corral_source_split_13763:
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb727:
    assume {:verifier.code 0} true;
    $p1448 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(724, 8)));
    goto corral_source_split_13765;

  corral_source_split_13765:
    assume {:verifier.code 0} true;
    $i1449 := $p2i.ref.i64($p1448);
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3834} free_pages($i1449, 0);
    goto corral_source_split_13767;

  corral_source_split_13767:
    assume {:verifier.code 0} true;
    goto $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    $p1450 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(725, 8)));
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    $i1451 := $p2i.ref.i64($p1450);
    goto corral_source_split_13770;

  corral_source_split_13770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3835} free_pages($i1451, 0);
    goto corral_source_split_13771;

  corral_source_split_13771:
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    $p1452 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(726, 8)));
    goto corral_source_split_13773;

  corral_source_split_13773:
    assume {:verifier.code 0} true;
    $i1453 := $p2i.ref.i64($p1452);
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3836} free_pages($i1453, 0);
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    $p1454 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(727, 8)));
    goto corral_source_split_13777;

  corral_source_split_13777:
    assume {:verifier.code 0} true;
    $i1455 := $p2i.ref.i64($p1454);
    goto corral_source_split_13778;

  corral_source_split_13778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3837} free_pages($i1455, 0);
    goto corral_source_split_13779;

  corral_source_split_13779:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    $p1456 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(728, 8)));
    goto corral_source_split_13781;

  corral_source_split_13781:
    assume {:verifier.code 0} true;
    $i1457 := $p2i.ref.i64($p1456);
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3838} free_pages($i1457, 0);
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    goto $bb732;

  $bb732:
    assume {:verifier.code 0} true;
    $p1458 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(729, 8)));
    goto corral_source_split_13785;

  corral_source_split_13785:
    assume {:verifier.code 0} true;
    $i1459 := $p2i.ref.i64($p1458);
    goto corral_source_split_13786;

  corral_source_split_13786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3839} free_pages($i1459, 0);
    goto corral_source_split_13787;

  corral_source_split_13787:
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb733:
    assume {:verifier.code 0} true;
    $p1460 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(730, 8)));
    goto corral_source_split_13789;

  corral_source_split_13789:
    assume {:verifier.code 0} true;
    $i1461 := $p2i.ref.i64($p1460);
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3840} free_pages($i1461, 0);
    goto corral_source_split_13791;

  corral_source_split_13791:
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    $p1462 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(731, 8)));
    goto corral_source_split_13793;

  corral_source_split_13793:
    assume {:verifier.code 0} true;
    $i1463 := $p2i.ref.i64($p1462);
    goto corral_source_split_13794;

  corral_source_split_13794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3841} free_pages($i1463, 0);
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    $p1464 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(732, 8)));
    goto corral_source_split_13797;

  corral_source_split_13797:
    assume {:verifier.code 0} true;
    $i1465 := $p2i.ref.i64($p1464);
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3842} free_pages($i1465, 0);
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb736:
    assume {:verifier.code 0} true;
    $p1466 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(733, 8)));
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    $i1467 := $p2i.ref.i64($p1466);
    goto corral_source_split_13802;

  corral_source_split_13802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3843} free_pages($i1467, 0);
    goto corral_source_split_13803;

  corral_source_split_13803:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    $p1468 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(734, 8)));
    goto corral_source_split_13805;

  corral_source_split_13805:
    assume {:verifier.code 0} true;
    $i1469 := $p2i.ref.i64($p1468);
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3844} free_pages($i1469, 0);
    goto corral_source_split_13807;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    $p1470 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(735, 8)));
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    $i1471 := $p2i.ref.i64($p1470);
    goto corral_source_split_13810;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3845} free_pages($i1471, 0);
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    $p1472 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(736, 8)));
    goto corral_source_split_13813;

  corral_source_split_13813:
    assume {:verifier.code 0} true;
    $i1473 := $p2i.ref.i64($p1472);
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3846} free_pages($i1473, 0);
    goto corral_source_split_13815;

  corral_source_split_13815:
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    $p1474 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(737, 8)));
    goto corral_source_split_13817;

  corral_source_split_13817:
    assume {:verifier.code 0} true;
    $i1475 := $p2i.ref.i64($p1474);
    goto corral_source_split_13818;

  corral_source_split_13818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3847} free_pages($i1475, 0);
    goto corral_source_split_13819;

  corral_source_split_13819:
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb741:
    assume {:verifier.code 0} true;
    $p1476 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(738, 8)));
    goto corral_source_split_13821;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    $i1477 := $p2i.ref.i64($p1476);
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3848} free_pages($i1477, 0);
    goto corral_source_split_13823;

  corral_source_split_13823:
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    $p1478 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(739, 8)));
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    $i1479 := $p2i.ref.i64($p1478);
    goto corral_source_split_13826;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3849} free_pages($i1479, 0);
    goto corral_source_split_13827;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb743:
    assume {:verifier.code 0} true;
    $p1480 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(740, 8)));
    goto corral_source_split_13829;

  corral_source_split_13829:
    assume {:verifier.code 0} true;
    $i1481 := $p2i.ref.i64($p1480);
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3850} free_pages($i1481, 0);
    goto corral_source_split_13831;

  corral_source_split_13831:
    assume {:verifier.code 0} true;
    goto $bb744;

  $bb744:
    assume {:verifier.code 0} true;
    $p1482 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(741, 8)));
    goto corral_source_split_13833;

  corral_source_split_13833:
    assume {:verifier.code 0} true;
    $i1483 := $p2i.ref.i64($p1482);
    goto corral_source_split_13834;

  corral_source_split_13834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3851} free_pages($i1483, 0);
    goto corral_source_split_13835;

  corral_source_split_13835:
    assume {:verifier.code 0} true;
    goto $bb745;

  $bb745:
    assume {:verifier.code 0} true;
    $p1484 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(742, 8)));
    goto corral_source_split_13837;

  corral_source_split_13837:
    assume {:verifier.code 0} true;
    $i1485 := $p2i.ref.i64($p1484);
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3852} free_pages($i1485, 0);
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    $p1486 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(743, 8)));
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    $i1487 := $p2i.ref.i64($p1486);
    goto corral_source_split_13842;

  corral_source_split_13842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3853} free_pages($i1487, 0);
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    $p1488 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(744, 8)));
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    $i1489 := $p2i.ref.i64($p1488);
    goto corral_source_split_13846;

  corral_source_split_13846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3854} free_pages($i1489, 0);
    goto corral_source_split_13847;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    goto $bb748;

  $bb748:
    assume {:verifier.code 0} true;
    $p1490 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(745, 8)));
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    $i1491 := $p2i.ref.i64($p1490);
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3855} free_pages($i1491, 0);
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb749:
    assume {:verifier.code 0} true;
    $p1492 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(746, 8)));
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    $i1493 := $p2i.ref.i64($p1492);
    goto corral_source_split_13854;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3856} free_pages($i1493, 0);
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    $p1494 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(747, 8)));
    goto corral_source_split_13857;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    $i1495 := $p2i.ref.i64($p1494);
    goto corral_source_split_13858;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3857} free_pages($i1495, 0);
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    $p1496 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(748, 8)));
    goto corral_source_split_13861;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    $i1497 := $p2i.ref.i64($p1496);
    goto corral_source_split_13862;

  corral_source_split_13862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3858} free_pages($i1497, 0);
    goto corral_source_split_13863;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    goto $bb752;

  $bb752:
    assume {:verifier.code 0} true;
    $p1498 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(749, 8)));
    goto corral_source_split_13865;

  corral_source_split_13865:
    assume {:verifier.code 0} true;
    $i1499 := $p2i.ref.i64($p1498);
    goto corral_source_split_13866;

  corral_source_split_13866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3859} free_pages($i1499, 0);
    goto corral_source_split_13867;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    goto $bb753;

  $bb753:
    assume {:verifier.code 0} true;
    $p1500 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(750, 8)));
    goto corral_source_split_13869;

  corral_source_split_13869:
    assume {:verifier.code 0} true;
    $i1501 := $p2i.ref.i64($p1500);
    goto corral_source_split_13870;

  corral_source_split_13870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3860} free_pages($i1501, 0);
    goto corral_source_split_13871;

  corral_source_split_13871:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    $p1502 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(751, 8)));
    goto corral_source_split_13873;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    $i1503 := $p2i.ref.i64($p1502);
    goto corral_source_split_13874;

  corral_source_split_13874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3861} free_pages($i1503, 0);
    goto corral_source_split_13875;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    $p1504 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(752, 8)));
    goto corral_source_split_13877;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    $i1505 := $p2i.ref.i64($p1504);
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3862} free_pages($i1505, 0);
    goto corral_source_split_13879;

  corral_source_split_13879:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    $p1506 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(753, 8)));
    goto corral_source_split_13881;

  corral_source_split_13881:
    assume {:verifier.code 0} true;
    $i1507 := $p2i.ref.i64($p1506);
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3863} free_pages($i1507, 0);
    goto corral_source_split_13883;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb757:
    assume {:verifier.code 0} true;
    $p1508 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(754, 8)));
    goto corral_source_split_13885;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    $i1509 := $p2i.ref.i64($p1508);
    goto corral_source_split_13886;

  corral_source_split_13886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3864} free_pages($i1509, 0);
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    $p1510 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(755, 8)));
    goto corral_source_split_13889;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    $i1511 := $p2i.ref.i64($p1510);
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3865} free_pages($i1511, 0);
    goto corral_source_split_13891;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb759:
    assume {:verifier.code 0} true;
    $p1512 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(756, 8)));
    goto corral_source_split_13893;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    $i1513 := $p2i.ref.i64($p1512);
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3866} free_pages($i1513, 0);
    goto corral_source_split_13895;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    goto $bb760;

  $bb760:
    assume {:verifier.code 0} true;
    $p1514 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(757, 8)));
    goto corral_source_split_13897;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    $i1515 := $p2i.ref.i64($p1514);
    goto corral_source_split_13898;

  corral_source_split_13898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3867} free_pages($i1515, 0);
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    $p1516 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(758, 8)));
    goto corral_source_split_13901;

  corral_source_split_13901:
    assume {:verifier.code 0} true;
    $i1517 := $p2i.ref.i64($p1516);
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3868} free_pages($i1517, 0);
    goto corral_source_split_13903;

  corral_source_split_13903:
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb762:
    assume {:verifier.code 0} true;
    $p1518 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(759, 8)));
    goto corral_source_split_13905;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    $i1519 := $p2i.ref.i64($p1518);
    goto corral_source_split_13906;

  corral_source_split_13906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3869} free_pages($i1519, 0);
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb763:
    assume {:verifier.code 0} true;
    $p1520 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(760, 8)));
    goto corral_source_split_13909;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    $i1521 := $p2i.ref.i64($p1520);
    goto corral_source_split_13910;

  corral_source_split_13910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3870} free_pages($i1521, 0);
    goto corral_source_split_13911;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb764:
    assume {:verifier.code 0} true;
    $p1522 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(761, 8)));
    goto corral_source_split_13913;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    $i1523 := $p2i.ref.i64($p1522);
    goto corral_source_split_13914;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3871} free_pages($i1523, 0);
    goto corral_source_split_13915;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    goto $bb765;

  $bb765:
    assume {:verifier.code 0} true;
    $p1524 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(762, 8)));
    goto corral_source_split_13917;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    $i1525 := $p2i.ref.i64($p1524);
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3872} free_pages($i1525, 0);
    goto corral_source_split_13919;

  corral_source_split_13919:
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    $p1526 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(763, 8)));
    goto corral_source_split_13921;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    $i1527 := $p2i.ref.i64($p1526);
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3873} free_pages($i1527, 0);
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    $p1528 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(764, 8)));
    goto corral_source_split_13925;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    $i1529 := $p2i.ref.i64($p1528);
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3874} free_pages($i1529, 0);
    goto corral_source_split_13927;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    $p1530 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(765, 8)));
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    $i1531 := $p2i.ref.i64($p1530);
    goto corral_source_split_13930;

  corral_source_split_13930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3875} free_pages($i1531, 0);
    goto corral_source_split_13931;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb769:
    assume {:verifier.code 0} true;
    $p1532 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(766, 8)));
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    $i1533 := $p2i.ref.i64($p1532);
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3876} free_pages($i1533, 0);
    goto corral_source_split_13935;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    $p1534 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(767, 8)));
    goto corral_source_split_13937;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    $i1535 := $p2i.ref.i64($p1534);
    goto corral_source_split_13938;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3877} free_pages($i1535, 0);
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    $p1536 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(768, 8)));
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    $i1537 := $p2i.ref.i64($p1536);
    goto corral_source_split_13942;

  corral_source_split_13942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3878} free_pages($i1537, 0);
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb772:
    assume {:verifier.code 0} true;
    $p1538 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(769, 8)));
    goto corral_source_split_13945;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    $i1539 := $p2i.ref.i64($p1538);
    goto corral_source_split_13946;

  corral_source_split_13946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3879} free_pages($i1539, 0);
    goto corral_source_split_13947;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    goto $bb773;

  $bb773:
    assume {:verifier.code 0} true;
    $p1540 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(770, 8)));
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    $i1541 := $p2i.ref.i64($p1540);
    goto corral_source_split_13950;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3880} free_pages($i1541, 0);
    goto corral_source_split_13951;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    $p1542 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(771, 8)));
    goto corral_source_split_13953;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    $i1543 := $p2i.ref.i64($p1542);
    goto corral_source_split_13954;

  corral_source_split_13954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3881} free_pages($i1543, 0);
    goto corral_source_split_13955;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    $p1544 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(772, 8)));
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    $i1545 := $p2i.ref.i64($p1544);
    goto corral_source_split_13958;

  corral_source_split_13958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3882} free_pages($i1545, 0);
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    goto $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    $p1546 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(773, 8)));
    goto corral_source_split_13961;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    $i1547 := $p2i.ref.i64($p1546);
    goto corral_source_split_13962;

  corral_source_split_13962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3883} free_pages($i1547, 0);
    goto corral_source_split_13963;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    $p1548 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(774, 8)));
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    $i1549 := $p2i.ref.i64($p1548);
    goto corral_source_split_13966;

  corral_source_split_13966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3884} free_pages($i1549, 0);
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    $p1550 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(775, 8)));
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    $i1551 := $p2i.ref.i64($p1550);
    goto corral_source_split_13970;

  corral_source_split_13970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3885} free_pages($i1551, 0);
    goto corral_source_split_13971;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    $p1552 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(776, 8)));
    goto corral_source_split_13973;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    $i1553 := $p2i.ref.i64($p1552);
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3886} free_pages($i1553, 0);
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    goto $bb780;

  $bb780:
    assume {:verifier.code 0} true;
    $p1554 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(777, 8)));
    goto corral_source_split_13977;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    $i1555 := $p2i.ref.i64($p1554);
    goto corral_source_split_13978;

  corral_source_split_13978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3887} free_pages($i1555, 0);
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    goto $bb781;

  $bb781:
    assume {:verifier.code 0} true;
    $p1556 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(778, 8)));
    goto corral_source_split_13981;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    $i1557 := $p2i.ref.i64($p1556);
    goto corral_source_split_13982;

  corral_source_split_13982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3888} free_pages($i1557, 0);
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    $p1558 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(779, 8)));
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 0} true;
    $i1559 := $p2i.ref.i64($p1558);
    goto corral_source_split_13986;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3889} free_pages($i1559, 0);
    goto corral_source_split_13987;

  corral_source_split_13987:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb783:
    assume {:verifier.code 0} true;
    $p1560 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(780, 8)));
    goto corral_source_split_13989;

  corral_source_split_13989:
    assume {:verifier.code 0} true;
    $i1561 := $p2i.ref.i64($p1560);
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3890} free_pages($i1561, 0);
    goto corral_source_split_13991;

  corral_source_split_13991:
    assume {:verifier.code 0} true;
    goto $bb784;

  $bb784:
    assume {:verifier.code 0} true;
    $p1562 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(781, 8)));
    goto corral_source_split_13993;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    $i1563 := $p2i.ref.i64($p1562);
    goto corral_source_split_13994;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3891} free_pages($i1563, 0);
    goto corral_source_split_13995;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    goto $bb785;

  $bb785:
    assume {:verifier.code 0} true;
    $p1564 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(782, 8)));
    goto corral_source_split_13997;

  corral_source_split_13997:
    assume {:verifier.code 0} true;
    $i1565 := $p2i.ref.i64($p1564);
    goto corral_source_split_13998;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3892} free_pages($i1565, 0);
    goto corral_source_split_13999;

  corral_source_split_13999:
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    $p1566 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(783, 8)));
    goto corral_source_split_14001;

  corral_source_split_14001:
    assume {:verifier.code 0} true;
    $i1567 := $p2i.ref.i64($p1566);
    goto corral_source_split_14002;

  corral_source_split_14002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3893} free_pages($i1567, 0);
    goto corral_source_split_14003;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    $p1568 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(784, 8)));
    goto corral_source_split_14005;

  corral_source_split_14005:
    assume {:verifier.code 0} true;
    $i1569 := $p2i.ref.i64($p1568);
    goto corral_source_split_14006;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3894} free_pages($i1569, 0);
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb788:
    assume {:verifier.code 0} true;
    $p1570 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(785, 8)));
    goto corral_source_split_14009;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    $i1571 := $p2i.ref.i64($p1570);
    goto corral_source_split_14010;

  corral_source_split_14010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3895} free_pages($i1571, 0);
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb789:
    assume {:verifier.code 0} true;
    $p1572 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(786, 8)));
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    $i1573 := $p2i.ref.i64($p1572);
    goto corral_source_split_14014;

  corral_source_split_14014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3896} free_pages($i1573, 0);
    goto corral_source_split_14015;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    $p1574 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(787, 8)));
    goto corral_source_split_14017;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    $i1575 := $p2i.ref.i64($p1574);
    goto corral_source_split_14018;

  corral_source_split_14018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3897} free_pages($i1575, 0);
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    $p1576 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(788, 8)));
    goto corral_source_split_14021;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    $i1577 := $p2i.ref.i64($p1576);
    goto corral_source_split_14022;

  corral_source_split_14022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3898} free_pages($i1577, 0);
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb792:
    assume {:verifier.code 0} true;
    $p1578 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(789, 8)));
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    $i1579 := $p2i.ref.i64($p1578);
    goto corral_source_split_14026;

  corral_source_split_14026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3899} free_pages($i1579, 0);
    goto corral_source_split_14027;

  corral_source_split_14027:
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb793:
    assume {:verifier.code 0} true;
    $p1580 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(790, 8)));
    goto corral_source_split_14029;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    $i1581 := $p2i.ref.i64($p1580);
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3900} free_pages($i1581, 0);
    goto corral_source_split_14031;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    $p1582 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(791, 8)));
    goto corral_source_split_14033;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    $i1583 := $p2i.ref.i64($p1582);
    goto corral_source_split_14034;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3901} free_pages($i1583, 0);
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb795:
    assume {:verifier.code 0} true;
    $p1584 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(792, 8)));
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    $i1585 := $p2i.ref.i64($p1584);
    goto corral_source_split_14038;

  corral_source_split_14038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3902} free_pages($i1585, 0);
    goto corral_source_split_14039;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    goto $bb796;

  $bb796:
    assume {:verifier.code 0} true;
    $p1586 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(793, 8)));
    goto corral_source_split_14041;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    $i1587 := $p2i.ref.i64($p1586);
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3903} free_pages($i1587, 0);
    goto corral_source_split_14043;

  corral_source_split_14043:
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb797:
    assume {:verifier.code 0} true;
    $p1588 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(794, 8)));
    goto corral_source_split_14045;

  corral_source_split_14045:
    assume {:verifier.code 0} true;
    $i1589 := $p2i.ref.i64($p1588);
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3904} free_pages($i1589, 0);
    goto corral_source_split_14047;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    $p1590 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(795, 8)));
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    $i1591 := $p2i.ref.i64($p1590);
    goto corral_source_split_14050;

  corral_source_split_14050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3905} free_pages($i1591, 0);
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    goto $bb799;

  $bb799:
    assume {:verifier.code 0} true;
    $p1592 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(796, 8)));
    goto corral_source_split_14053;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    $i1593 := $p2i.ref.i64($p1592);
    goto corral_source_split_14054;

  corral_source_split_14054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3906} free_pages($i1593, 0);
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    goto $bb800;

  $bb800:
    assume {:verifier.code 0} true;
    $p1594 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(797, 8)));
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    $i1595 := $p2i.ref.i64($p1594);
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3907} free_pages($i1595, 0);
    goto corral_source_split_14059;

  corral_source_split_14059:
    assume {:verifier.code 0} true;
    goto $bb801;

  $bb801:
    assume {:verifier.code 0} true;
    $p1596 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(798, 8)));
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    $i1597 := $p2i.ref.i64($p1596);
    goto corral_source_split_14062;

  corral_source_split_14062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3908} free_pages($i1597, 0);
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    $p1598 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(799, 8)));
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    $i1599 := $p2i.ref.i64($p1598);
    goto corral_source_split_14066;

  corral_source_split_14066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3909} free_pages($i1599, 0);
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb803:
    assume {:verifier.code 0} true;
    $p1600 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(800, 8)));
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    $i1601 := $p2i.ref.i64($p1600);
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3910} free_pages($i1601, 0);
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    goto $bb804;

  $bb804:
    assume {:verifier.code 0} true;
    $p1602 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(801, 8)));
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    $i1603 := $p2i.ref.i64($p1602);
    goto corral_source_split_14074;

  corral_source_split_14074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3911} free_pages($i1603, 0);
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    goto $bb805;

  $bb805:
    assume {:verifier.code 0} true;
    $p1604 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(802, 8)));
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    $i1605 := $p2i.ref.i64($p1604);
    goto corral_source_split_14078;

  corral_source_split_14078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3912} free_pages($i1605, 0);
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    $p1606 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(803, 8)));
    goto corral_source_split_14081;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    $i1607 := $p2i.ref.i64($p1606);
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3913} free_pages($i1607, 0);
    goto corral_source_split_14083;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    $p1608 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(804, 8)));
    goto corral_source_split_14085;

  corral_source_split_14085:
    assume {:verifier.code 0} true;
    $i1609 := $p2i.ref.i64($p1608);
    goto corral_source_split_14086;

  corral_source_split_14086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3914} free_pages($i1609, 0);
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    goto $bb808;

  $bb808:
    assume {:verifier.code 0} true;
    $p1610 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(805, 8)));
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    $i1611 := $p2i.ref.i64($p1610);
    goto corral_source_split_14090;

  corral_source_split_14090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3915} free_pages($i1611, 0);
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb809:
    assume {:verifier.code 0} true;
    $p1612 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(806, 8)));
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    $i1613 := $p2i.ref.i64($p1612);
    goto corral_source_split_14094;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3916} free_pages($i1613, 0);
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    $p1614 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(807, 8)));
    goto corral_source_split_14097;

  corral_source_split_14097:
    assume {:verifier.code 0} true;
    $i1615 := $p2i.ref.i64($p1614);
    goto corral_source_split_14098;

  corral_source_split_14098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3917} free_pages($i1615, 0);
    goto corral_source_split_14099;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    $p1616 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(808, 8)));
    goto corral_source_split_14101;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    $i1617 := $p2i.ref.i64($p1616);
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3918} free_pages($i1617, 0);
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb812:
    assume {:verifier.code 0} true;
    $p1618 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(809, 8)));
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    $i1619 := $p2i.ref.i64($p1618);
    goto corral_source_split_14106;

  corral_source_split_14106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3919} free_pages($i1619, 0);
    goto corral_source_split_14107;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb813:
    assume {:verifier.code 0} true;
    $p1620 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(810, 8)));
    goto corral_source_split_14109;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    $i1621 := $p2i.ref.i64($p1620);
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3920} free_pages($i1621, 0);
    goto corral_source_split_14111;

  corral_source_split_14111:
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    $p1622 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(811, 8)));
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    $i1623 := $p2i.ref.i64($p1622);
    goto corral_source_split_14114;

  corral_source_split_14114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3921} free_pages($i1623, 0);
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    $p1624 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(812, 8)));
    goto corral_source_split_14117;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    $i1625 := $p2i.ref.i64($p1624);
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3922} free_pages($i1625, 0);
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    goto $bb816;

  $bb816:
    assume {:verifier.code 0} true;
    $p1626 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(813, 8)));
    goto corral_source_split_14121;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    $i1627 := $p2i.ref.i64($p1626);
    goto corral_source_split_14122;

  corral_source_split_14122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3923} free_pages($i1627, 0);
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb817:
    assume {:verifier.code 0} true;
    $p1628 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(814, 8)));
    goto corral_source_split_14125;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    $i1629 := $p2i.ref.i64($p1628);
    goto corral_source_split_14126;

  corral_source_split_14126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3924} free_pages($i1629, 0);
    goto corral_source_split_14127;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    $p1630 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(815, 8)));
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    $i1631 := $p2i.ref.i64($p1630);
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3925} free_pages($i1631, 0);
    goto corral_source_split_14131;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    goto $bb819;

  $bb819:
    assume {:verifier.code 0} true;
    $p1632 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(816, 8)));
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    $i1633 := $p2i.ref.i64($p1632);
    goto corral_source_split_14134;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3926} free_pages($i1633, 0);
    goto corral_source_split_14135;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    goto $bb820;

  $bb820:
    assume {:verifier.code 0} true;
    $p1634 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(817, 8)));
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    $i1635 := $p2i.ref.i64($p1634);
    goto corral_source_split_14138;

  corral_source_split_14138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3927} free_pages($i1635, 0);
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb821:
    assume {:verifier.code 0} true;
    $p1636 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(818, 8)));
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    $i1637 := $p2i.ref.i64($p1636);
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3928} free_pages($i1637, 0);
    goto corral_source_split_14143;

  corral_source_split_14143:
    assume {:verifier.code 0} true;
    goto $bb822;

  $bb822:
    assume {:verifier.code 0} true;
    $p1638 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(819, 8)));
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    $i1639 := $p2i.ref.i64($p1638);
    goto corral_source_split_14146;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3929} free_pages($i1639, 0);
    goto corral_source_split_14147;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb823:
    assume {:verifier.code 0} true;
    $p1640 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(820, 8)));
    goto corral_source_split_14149;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    $i1641 := $p2i.ref.i64($p1640);
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3930} free_pages($i1641, 0);
    goto corral_source_split_14151;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    goto $bb824;

  $bb824:
    assume {:verifier.code 0} true;
    $p1642 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(821, 8)));
    goto corral_source_split_14153;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    $i1643 := $p2i.ref.i64($p1642);
    goto corral_source_split_14154;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3931} free_pages($i1643, 0);
    goto corral_source_split_14155;

  corral_source_split_14155:
    assume {:verifier.code 0} true;
    goto $bb825;

  $bb825:
    assume {:verifier.code 0} true;
    $p1644 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(822, 8)));
    goto corral_source_split_14157;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    $i1645 := $p2i.ref.i64($p1644);
    goto corral_source_split_14158;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3932} free_pages($i1645, 0);
    goto corral_source_split_14159;

  corral_source_split_14159:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    $p1646 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(823, 8)));
    goto corral_source_split_14161;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    $i1647 := $p2i.ref.i64($p1646);
    goto corral_source_split_14162;

  corral_source_split_14162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3933} free_pages($i1647, 0);
    goto corral_source_split_14163;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    $p1648 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(824, 8)));
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    $i1649 := $p2i.ref.i64($p1648);
    goto corral_source_split_14166;

  corral_source_split_14166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3934} free_pages($i1649, 0);
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    goto $bb828;

  $bb828:
    assume {:verifier.code 0} true;
    $p1650 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(825, 8)));
    goto corral_source_split_14169;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    $i1651 := $p2i.ref.i64($p1650);
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3935} free_pages($i1651, 0);
    goto corral_source_split_14171;

  corral_source_split_14171:
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb829:
    assume {:verifier.code 0} true;
    $p1652 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(826, 8)));
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    $i1653 := $p2i.ref.i64($p1652);
    goto corral_source_split_14174;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3936} free_pages($i1653, 0);
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    goto $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    $p1654 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(827, 8)));
    goto corral_source_split_14177;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    $i1655 := $p2i.ref.i64($p1654);
    goto corral_source_split_14178;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3937} free_pages($i1655, 0);
    goto corral_source_split_14179;

  corral_source_split_14179:
    assume {:verifier.code 0} true;
    goto $bb831;

  $bb831:
    assume {:verifier.code 0} true;
    $p1656 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(828, 8)));
    goto corral_source_split_14181;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    $i1657 := $p2i.ref.i64($p1656);
    goto corral_source_split_14182;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3938} free_pages($i1657, 0);
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    goto $bb832;

  $bb832:
    assume {:verifier.code 0} true;
    $p1658 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(829, 8)));
    goto corral_source_split_14185;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    $i1659 := $p2i.ref.i64($p1658);
    goto corral_source_split_14186;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3939} free_pages($i1659, 0);
    goto corral_source_split_14187;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    goto $bb833;

  $bb833:
    assume {:verifier.code 0} true;
    $p1660 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(830, 8)));
    goto corral_source_split_14189;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    $i1661 := $p2i.ref.i64($p1660);
    goto corral_source_split_14190;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3940} free_pages($i1661, 0);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb834:
    assume {:verifier.code 0} true;
    $p1662 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(831, 8)));
    goto corral_source_split_14193;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    $i1663 := $p2i.ref.i64($p1662);
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3941} free_pages($i1663, 0);
    goto corral_source_split_14195;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb835:
    assume {:verifier.code 0} true;
    $p1664 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(832, 8)));
    goto corral_source_split_14197;

  corral_source_split_14197:
    assume {:verifier.code 0} true;
    $i1665 := $p2i.ref.i64($p1664);
    goto corral_source_split_14198;

  corral_source_split_14198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3942} free_pages($i1665, 0);
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb836:
    assume {:verifier.code 0} true;
    $p1666 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(833, 8)));
    goto corral_source_split_14201;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    $i1667 := $p2i.ref.i64($p1666);
    goto corral_source_split_14202;

  corral_source_split_14202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3943} free_pages($i1667, 0);
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb837:
    assume {:verifier.code 0} true;
    $p1668 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(834, 8)));
    goto corral_source_split_14205;

  corral_source_split_14205:
    assume {:verifier.code 0} true;
    $i1669 := $p2i.ref.i64($p1668);
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3944} free_pages($i1669, 0);
    goto corral_source_split_14207;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    goto $bb838;

  $bb838:
    assume {:verifier.code 0} true;
    $p1670 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(835, 8)));
    goto corral_source_split_14209;

  corral_source_split_14209:
    assume {:verifier.code 0} true;
    $i1671 := $p2i.ref.i64($p1670);
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3945} free_pages($i1671, 0);
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    goto $bb839;

  $bb839:
    assume {:verifier.code 0} true;
    $p1672 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(836, 8)));
    goto corral_source_split_14213;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    $i1673 := $p2i.ref.i64($p1672);
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3946} free_pages($i1673, 0);
    goto corral_source_split_14215;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    goto $bb840;

  $bb840:
    assume {:verifier.code 0} true;
    $p1674 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(837, 8)));
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    $i1675 := $p2i.ref.i64($p1674);
    goto corral_source_split_14218;

  corral_source_split_14218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3947} free_pages($i1675, 0);
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    goto $bb841;

  $bb841:
    assume {:verifier.code 0} true;
    $p1676 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(838, 8)));
    goto corral_source_split_14221;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    $i1677 := $p2i.ref.i64($p1676);
    goto corral_source_split_14222;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3948} free_pages($i1677, 0);
    goto corral_source_split_14223;

  corral_source_split_14223:
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    $p1678 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(839, 8)));
    goto corral_source_split_14225;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    $i1679 := $p2i.ref.i64($p1678);
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3949} free_pages($i1679, 0);
    goto corral_source_split_14227;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb843:
    assume {:verifier.code 0} true;
    $p1680 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(840, 8)));
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    $i1681 := $p2i.ref.i64($p1680);
    goto corral_source_split_14230;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3950} free_pages($i1681, 0);
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    goto $bb844;

  $bb844:
    assume {:verifier.code 0} true;
    $p1682 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(841, 8)));
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    $i1683 := $p2i.ref.i64($p1682);
    goto corral_source_split_14234;

  corral_source_split_14234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3951} free_pages($i1683, 0);
    goto corral_source_split_14235;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    goto $bb845;

  $bb845:
    assume {:verifier.code 0} true;
    $p1684 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(842, 8)));
    goto corral_source_split_14237;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    $i1685 := $p2i.ref.i64($p1684);
    goto corral_source_split_14238;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3952} free_pages($i1685, 0);
    goto corral_source_split_14239;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    $p1686 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(843, 8)));
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    $i1687 := $p2i.ref.i64($p1686);
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3953} free_pages($i1687, 0);
    goto corral_source_split_14243;

  corral_source_split_14243:
    assume {:verifier.code 0} true;
    goto $bb847;

  $bb847:
    assume {:verifier.code 0} true;
    $p1688 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(844, 8)));
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    $i1689 := $p2i.ref.i64($p1688);
    goto corral_source_split_14246;

  corral_source_split_14246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3954} free_pages($i1689, 0);
    goto corral_source_split_14247;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    goto $bb848;

  $bb848:
    assume {:verifier.code 0} true;
    $p1690 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(845, 8)));
    goto corral_source_split_14249;

  corral_source_split_14249:
    assume {:verifier.code 0} true;
    $i1691 := $p2i.ref.i64($p1690);
    goto corral_source_split_14250;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3955} free_pages($i1691, 0);
    goto corral_source_split_14251;

  corral_source_split_14251:
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb849:
    assume {:verifier.code 0} true;
    $p1692 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(846, 8)));
    goto corral_source_split_14253;

  corral_source_split_14253:
    assume {:verifier.code 0} true;
    $i1693 := $p2i.ref.i64($p1692);
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3956} free_pages($i1693, 0);
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    goto $bb850;

  $bb850:
    assume {:verifier.code 0} true;
    $p1694 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(847, 8)));
    goto corral_source_split_14257;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    $i1695 := $p2i.ref.i64($p1694);
    goto corral_source_split_14258;

  corral_source_split_14258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3957} free_pages($i1695, 0);
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb851:
    assume {:verifier.code 0} true;
    $p1696 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(848, 8)));
    goto corral_source_split_14261;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    $i1697 := $p2i.ref.i64($p1696);
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3958} free_pages($i1697, 0);
    goto corral_source_split_14263;

  corral_source_split_14263:
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb852:
    assume {:verifier.code 0} true;
    $p1698 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(849, 8)));
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    $i1699 := $p2i.ref.i64($p1698);
    goto corral_source_split_14266;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3959} free_pages($i1699, 0);
    goto corral_source_split_14267;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb853:
    assume {:verifier.code 0} true;
    $p1700 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(850, 8)));
    goto corral_source_split_14269;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    $i1701 := $p2i.ref.i64($p1700);
    goto corral_source_split_14270;

  corral_source_split_14270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3960} free_pages($i1701, 0);
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    goto $bb854;

  $bb854:
    assume {:verifier.code 0} true;
    $p1702 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(851, 8)));
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    $i1703 := $p2i.ref.i64($p1702);
    goto corral_source_split_14274;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3961} free_pages($i1703, 0);
    goto corral_source_split_14275;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    goto $bb855;

  $bb855:
    assume {:verifier.code 0} true;
    $p1704 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(852, 8)));
    goto corral_source_split_14277;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    $i1705 := $p2i.ref.i64($p1704);
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3962} free_pages($i1705, 0);
    goto corral_source_split_14279;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    goto $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    $p1706 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(853, 8)));
    goto corral_source_split_14281;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    $i1707 := $p2i.ref.i64($p1706);
    goto corral_source_split_14282;

  corral_source_split_14282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3963} free_pages($i1707, 0);
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    goto $bb857;

  $bb857:
    assume {:verifier.code 0} true;
    $p1708 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(854, 8)));
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    $i1709 := $p2i.ref.i64($p1708);
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3964} free_pages($i1709, 0);
    goto corral_source_split_14287;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    goto $bb858;

  $bb858:
    assume {:verifier.code 0} true;
    $p1710 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(855, 8)));
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    $i1711 := $p2i.ref.i64($p1710);
    goto corral_source_split_14290;

  corral_source_split_14290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3965} free_pages($i1711, 0);
    goto corral_source_split_14291;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    goto $bb859;

  $bb859:
    assume {:verifier.code 0} true;
    $p1712 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(856, 8)));
    goto corral_source_split_14293;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    $i1713 := $p2i.ref.i64($p1712);
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3966} free_pages($i1713, 0);
    goto corral_source_split_14295;

  corral_source_split_14295:
    assume {:verifier.code 0} true;
    goto $bb860;

  $bb860:
    assume {:verifier.code 0} true;
    $p1714 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(857, 8)));
    goto corral_source_split_14297;

  corral_source_split_14297:
    assume {:verifier.code 0} true;
    $i1715 := $p2i.ref.i64($p1714);
    goto corral_source_split_14298;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3967} free_pages($i1715, 0);
    goto corral_source_split_14299;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    goto $bb861;

  $bb861:
    assume {:verifier.code 0} true;
    $p1716 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(858, 8)));
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    $i1717 := $p2i.ref.i64($p1716);
    goto corral_source_split_14302;

  corral_source_split_14302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3968} free_pages($i1717, 0);
    goto corral_source_split_14303;

  corral_source_split_14303:
    assume {:verifier.code 0} true;
    goto $bb862;

  $bb862:
    assume {:verifier.code 0} true;
    $p1718 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(859, 8)));
    goto corral_source_split_14305;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    $i1719 := $p2i.ref.i64($p1718);
    goto corral_source_split_14306;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3969} free_pages($i1719, 0);
    goto corral_source_split_14307;

  corral_source_split_14307:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb863:
    assume {:verifier.code 0} true;
    $p1720 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(860, 8)));
    goto corral_source_split_14309;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    $i1721 := $p2i.ref.i64($p1720);
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3970} free_pages($i1721, 0);
    goto corral_source_split_14311;

  corral_source_split_14311:
    assume {:verifier.code 0} true;
    goto $bb864;

  $bb864:
    assume {:verifier.code 0} true;
    $p1722 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(861, 8)));
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    $i1723 := $p2i.ref.i64($p1722);
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3971} free_pages($i1723, 0);
    goto corral_source_split_14315;

  corral_source_split_14315:
    assume {:verifier.code 0} true;
    goto $bb865;

  $bb865:
    assume {:verifier.code 0} true;
    $p1724 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(862, 8)));
    goto corral_source_split_14317;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    $i1725 := $p2i.ref.i64($p1724);
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3972} free_pages($i1725, 0);
    goto corral_source_split_14319;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb866:
    assume {:verifier.code 0} true;
    $p1726 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(863, 8)));
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    $i1727 := $p2i.ref.i64($p1726);
    goto corral_source_split_14322;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3973} free_pages($i1727, 0);
    goto corral_source_split_14323;

  corral_source_split_14323:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb867:
    assume {:verifier.code 0} true;
    $p1728 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(864, 8)));
    goto corral_source_split_14325;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    $i1729 := $p2i.ref.i64($p1728);
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3974} free_pages($i1729, 0);
    goto corral_source_split_14327;

  corral_source_split_14327:
    assume {:verifier.code 0} true;
    goto $bb868;

  $bb868:
    assume {:verifier.code 0} true;
    $p1730 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(865, 8)));
    goto corral_source_split_14329;

  corral_source_split_14329:
    assume {:verifier.code 0} true;
    $i1731 := $p2i.ref.i64($p1730);
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3975} free_pages($i1731, 0);
    goto corral_source_split_14331;

  corral_source_split_14331:
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb869:
    assume {:verifier.code 0} true;
    $p1732 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(866, 8)));
    goto corral_source_split_14333;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    $i1733 := $p2i.ref.i64($p1732);
    goto corral_source_split_14334;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3976} free_pages($i1733, 0);
    goto corral_source_split_14335;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    goto $bb870;

  $bb870:
    assume {:verifier.code 0} true;
    $p1734 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(867, 8)));
    goto corral_source_split_14337;

  corral_source_split_14337:
    assume {:verifier.code 0} true;
    $i1735 := $p2i.ref.i64($p1734);
    goto corral_source_split_14338;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3977} free_pages($i1735, 0);
    goto corral_source_split_14339;

  corral_source_split_14339:
    assume {:verifier.code 0} true;
    goto $bb871;

  $bb871:
    assume {:verifier.code 0} true;
    $p1736 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(868, 8)));
    goto corral_source_split_14341;

  corral_source_split_14341:
    assume {:verifier.code 0} true;
    $i1737 := $p2i.ref.i64($p1736);
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3978} free_pages($i1737, 0);
    goto corral_source_split_14343;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    goto $bb872;

  $bb872:
    assume {:verifier.code 0} true;
    $p1738 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(869, 8)));
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    $i1739 := $p2i.ref.i64($p1738);
    goto corral_source_split_14346;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3979} free_pages($i1739, 0);
    goto corral_source_split_14347;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    goto $bb873;

  $bb873:
    assume {:verifier.code 0} true;
    $p1740 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(870, 8)));
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    $i1741 := $p2i.ref.i64($p1740);
    goto corral_source_split_14350;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3980} free_pages($i1741, 0);
    goto corral_source_split_14351;

  corral_source_split_14351:
    assume {:verifier.code 0} true;
    goto $bb874;

  $bb874:
    assume {:verifier.code 0} true;
    $p1742 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(871, 8)));
    goto corral_source_split_14353;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    $i1743 := $p2i.ref.i64($p1742);
    goto corral_source_split_14354;

  corral_source_split_14354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3981} free_pages($i1743, 0);
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    goto $bb875;

  $bb875:
    assume {:verifier.code 0} true;
    $p1744 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(872, 8)));
    goto corral_source_split_14357;

  corral_source_split_14357:
    assume {:verifier.code 0} true;
    $i1745 := $p2i.ref.i64($p1744);
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3982} free_pages($i1745, 0);
    goto corral_source_split_14359;

  corral_source_split_14359:
    assume {:verifier.code 0} true;
    goto $bb876;

  $bb876:
    assume {:verifier.code 0} true;
    $p1746 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(873, 8)));
    goto corral_source_split_14361;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    $i1747 := $p2i.ref.i64($p1746);
    goto corral_source_split_14362;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3983} free_pages($i1747, 0);
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    goto $bb877;

  $bb877:
    assume {:verifier.code 0} true;
    $p1748 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(874, 8)));
    goto corral_source_split_14365;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    $i1749 := $p2i.ref.i64($p1748);
    goto corral_source_split_14366;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3984} free_pages($i1749, 0);
    goto corral_source_split_14367;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    goto $bb878;

  $bb878:
    assume {:verifier.code 0} true;
    $p1750 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(875, 8)));
    goto corral_source_split_14369;

  corral_source_split_14369:
    assume {:verifier.code 0} true;
    $i1751 := $p2i.ref.i64($p1750);
    goto corral_source_split_14370;

  corral_source_split_14370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3985} free_pages($i1751, 0);
    goto corral_source_split_14371;

  corral_source_split_14371:
    assume {:verifier.code 0} true;
    goto $bb879;

  $bb879:
    assume {:verifier.code 0} true;
    $p1752 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(876, 8)));
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    $i1753 := $p2i.ref.i64($p1752);
    goto corral_source_split_14374;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3986} free_pages($i1753, 0);
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    goto $bb880;

  $bb880:
    assume {:verifier.code 0} true;
    $p1754 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(877, 8)));
    goto corral_source_split_14377;

  corral_source_split_14377:
    assume {:verifier.code 0} true;
    $i1755 := $p2i.ref.i64($p1754);
    goto corral_source_split_14378;

  corral_source_split_14378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3987} free_pages($i1755, 0);
    goto corral_source_split_14379;

  corral_source_split_14379:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb881:
    assume {:verifier.code 0} true;
    $p1756 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(878, 8)));
    goto corral_source_split_14381;

  corral_source_split_14381:
    assume {:verifier.code 0} true;
    $i1757 := $p2i.ref.i64($p1756);
    goto corral_source_split_14382;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3988} free_pages($i1757, 0);
    goto corral_source_split_14383;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    goto $bb882;

  $bb882:
    assume {:verifier.code 0} true;
    $p1758 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(879, 8)));
    goto corral_source_split_14385;

  corral_source_split_14385:
    assume {:verifier.code 0} true;
    $i1759 := $p2i.ref.i64($p1758);
    goto corral_source_split_14386;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3989} free_pages($i1759, 0);
    goto corral_source_split_14387;

  corral_source_split_14387:
    assume {:verifier.code 0} true;
    goto $bb883;

  $bb883:
    assume {:verifier.code 0} true;
    $p1760 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(880, 8)));
    goto corral_source_split_14389;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    $i1761 := $p2i.ref.i64($p1760);
    goto corral_source_split_14390;

  corral_source_split_14390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3990} free_pages($i1761, 0);
    goto corral_source_split_14391;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    goto $bb884;

  $bb884:
    assume {:verifier.code 0} true;
    $p1762 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(881, 8)));
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 0} true;
    $i1763 := $p2i.ref.i64($p1762);
    goto corral_source_split_14394;

  corral_source_split_14394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3991} free_pages($i1763, 0);
    goto corral_source_split_14395;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    goto $bb885;

  $bb885:
    assume {:verifier.code 0} true;
    $p1764 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(882, 8)));
    goto corral_source_split_14397;

  corral_source_split_14397:
    assume {:verifier.code 0} true;
    $i1765 := $p2i.ref.i64($p1764);
    goto corral_source_split_14398;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3992} free_pages($i1765, 0);
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    goto $bb886;

  $bb886:
    assume {:verifier.code 0} true;
    $p1766 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(883, 8)));
    goto corral_source_split_14401;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    $i1767 := $p2i.ref.i64($p1766);
    goto corral_source_split_14402;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3993} free_pages($i1767, 0);
    goto corral_source_split_14403;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb887:
    assume {:verifier.code 0} true;
    $p1768 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(884, 8)));
    goto corral_source_split_14405;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    $i1769 := $p2i.ref.i64($p1768);
    goto corral_source_split_14406;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3994} free_pages($i1769, 0);
    goto corral_source_split_14407;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    goto $bb888;

  $bb888:
    assume {:verifier.code 0} true;
    $p1770 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(885, 8)));
    goto corral_source_split_14409;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    $i1771 := $p2i.ref.i64($p1770);
    goto corral_source_split_14410;

  corral_source_split_14410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3995} free_pages($i1771, 0);
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    goto $bb889;

  $bb889:
    assume {:verifier.code 0} true;
    $p1772 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(886, 8)));
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    $i1773 := $p2i.ref.i64($p1772);
    goto corral_source_split_14414;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3996} free_pages($i1773, 0);
    goto corral_source_split_14415;

  corral_source_split_14415:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb890:
    assume {:verifier.code 0} true;
    $p1774 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(887, 8)));
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    $i1775 := $p2i.ref.i64($p1774);
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3997} free_pages($i1775, 0);
    goto corral_source_split_14419;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    goto $bb891;

  $bb891:
    assume {:verifier.code 0} true;
    $p1776 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(888, 8)));
    goto corral_source_split_14421;

  corral_source_split_14421:
    assume {:verifier.code 0} true;
    $i1777 := $p2i.ref.i64($p1776);
    goto corral_source_split_14422;

  corral_source_split_14422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3998} free_pages($i1777, 0);
    goto corral_source_split_14423;

  corral_source_split_14423:
    assume {:verifier.code 0} true;
    goto $bb892;

  $bb892:
    assume {:verifier.code 0} true;
    $p1778 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(889, 8)));
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    $i1779 := $p2i.ref.i64($p1778);
    goto corral_source_split_14426;

  corral_source_split_14426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3999} free_pages($i1779, 0);
    goto corral_source_split_14427;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb893:
    assume {:verifier.code 0} true;
    $p1780 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(890, 8)));
    goto corral_source_split_14429;

  corral_source_split_14429:
    assume {:verifier.code 0} true;
    $i1781 := $p2i.ref.i64($p1780);
    goto corral_source_split_14430;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4000} free_pages($i1781, 0);
    goto corral_source_split_14431;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    goto $bb894;

  $bb894:
    assume {:verifier.code 0} true;
    $p1782 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(891, 8)));
    goto corral_source_split_14433;

  corral_source_split_14433:
    assume {:verifier.code 0} true;
    $i1783 := $p2i.ref.i64($p1782);
    goto corral_source_split_14434;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4001} free_pages($i1783, 0);
    goto corral_source_split_14435;

  corral_source_split_14435:
    assume {:verifier.code 0} true;
    goto $bb895;

  $bb895:
    assume {:verifier.code 0} true;
    $p1784 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(892, 8)));
    goto corral_source_split_14437;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    $i1785 := $p2i.ref.i64($p1784);
    goto corral_source_split_14438;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4002} free_pages($i1785, 0);
    goto corral_source_split_14439;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    goto $bb896;

  $bb896:
    assume {:verifier.code 0} true;
    $p1786 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(893, 8)));
    goto corral_source_split_14441;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    $i1787 := $p2i.ref.i64($p1786);
    goto corral_source_split_14442;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4003} free_pages($i1787, 0);
    goto corral_source_split_14443;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    goto $bb897;

  $bb897:
    assume {:verifier.code 0} true;
    $p1788 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(894, 8)));
    goto corral_source_split_14445;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    $i1789 := $p2i.ref.i64($p1788);
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4004} free_pages($i1789, 0);
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    goto $bb898;

  $bb898:
    assume {:verifier.code 0} true;
    $p1790 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(895, 8)));
    goto corral_source_split_14449;

  corral_source_split_14449:
    assume {:verifier.code 0} true;
    $i1791 := $p2i.ref.i64($p1790);
    goto corral_source_split_14450;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4005} free_pages($i1791, 0);
    goto corral_source_split_14451;

  corral_source_split_14451:
    assume {:verifier.code 0} true;
    goto $bb899;

  $bb899:
    assume {:verifier.code 0} true;
    $p1792 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(896, 8)));
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    $i1793 := $p2i.ref.i64($p1792);
    goto corral_source_split_14454;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4006} free_pages($i1793, 0);
    goto corral_source_split_14455;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    goto $bb900;

  $bb900:
    assume {:verifier.code 0} true;
    $p1794 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(897, 8)));
    goto corral_source_split_14457;

  corral_source_split_14457:
    assume {:verifier.code 0} true;
    $i1795 := $p2i.ref.i64($p1794);
    goto corral_source_split_14458;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4007} free_pages($i1795, 0);
    goto corral_source_split_14459;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    goto $bb901;

  $bb901:
    assume {:verifier.code 0} true;
    $p1796 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(898, 8)));
    goto corral_source_split_14461;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    $i1797 := $p2i.ref.i64($p1796);
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4008} free_pages($i1797, 0);
    goto corral_source_split_14463;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    goto $bb902;

  $bb902:
    assume {:verifier.code 0} true;
    $p1798 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(899, 8)));
    goto corral_source_split_14465;

  corral_source_split_14465:
    assume {:verifier.code 0} true;
    $i1799 := $p2i.ref.i64($p1798);
    goto corral_source_split_14466;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4009} free_pages($i1799, 0);
    goto corral_source_split_14467;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    goto $bb903;

  $bb903:
    assume {:verifier.code 0} true;
    $p1800 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(900, 8)));
    goto corral_source_split_14469;

  corral_source_split_14469:
    assume {:verifier.code 0} true;
    $i1801 := $p2i.ref.i64($p1800);
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4010} free_pages($i1801, 0);
    goto corral_source_split_14471;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    goto $bb904;

  $bb904:
    assume {:verifier.code 0} true;
    $p1802 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(901, 8)));
    goto corral_source_split_14473;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    $i1803 := $p2i.ref.i64($p1802);
    goto corral_source_split_14474;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4011} free_pages($i1803, 0);
    goto corral_source_split_14475;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    $p1804 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(902, 8)));
    goto corral_source_split_14477;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    $i1805 := $p2i.ref.i64($p1804);
    goto corral_source_split_14478;

  corral_source_split_14478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4012} free_pages($i1805, 0);
    goto corral_source_split_14479;

  corral_source_split_14479:
    assume {:verifier.code 0} true;
    goto $bb906;

  $bb906:
    assume {:verifier.code 0} true;
    $p1806 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(903, 8)));
    goto corral_source_split_14481;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    $i1807 := $p2i.ref.i64($p1806);
    goto corral_source_split_14482;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4013} free_pages($i1807, 0);
    goto corral_source_split_14483;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    goto $bb907;

  $bb907:
    assume {:verifier.code 0} true;
    $p1808 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(904, 8)));
    goto corral_source_split_14485;

  corral_source_split_14485:
    assume {:verifier.code 0} true;
    $i1809 := $p2i.ref.i64($p1808);
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4014} free_pages($i1809, 0);
    goto corral_source_split_14487;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    $p1810 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(905, 8)));
    goto corral_source_split_14489;

  corral_source_split_14489:
    assume {:verifier.code 0} true;
    $i1811 := $p2i.ref.i64($p1810);
    goto corral_source_split_14490;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4015} free_pages($i1811, 0);
    goto corral_source_split_14491;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    goto $bb909;

  $bb909:
    assume {:verifier.code 0} true;
    $p1812 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(906, 8)));
    goto corral_source_split_14493;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    $i1813 := $p2i.ref.i64($p1812);
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4016} free_pages($i1813, 0);
    goto corral_source_split_14495;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    goto $bb910;

  $bb910:
    assume {:verifier.code 0} true;
    $p1814 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(907, 8)));
    goto corral_source_split_14497;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    $i1815 := $p2i.ref.i64($p1814);
    goto corral_source_split_14498;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4017} free_pages($i1815, 0);
    goto corral_source_split_14499;

  corral_source_split_14499:
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb911:
    assume {:verifier.code 0} true;
    $p1816 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(908, 8)));
    goto corral_source_split_14501;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    $i1817 := $p2i.ref.i64($p1816);
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4018} free_pages($i1817, 0);
    goto corral_source_split_14503;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    goto $bb912;

  $bb912:
    assume {:verifier.code 0} true;
    $p1818 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(909, 8)));
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    $i1819 := $p2i.ref.i64($p1818);
    goto corral_source_split_14506;

  corral_source_split_14506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4019} free_pages($i1819, 0);
    goto corral_source_split_14507;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    goto $bb913;

  $bb913:
    assume {:verifier.code 0} true;
    $p1820 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(910, 8)));
    goto corral_source_split_14509;

  corral_source_split_14509:
    assume {:verifier.code 0} true;
    $i1821 := $p2i.ref.i64($p1820);
    goto corral_source_split_14510;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4020} free_pages($i1821, 0);
    goto corral_source_split_14511;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    goto $bb914;

  $bb914:
    assume {:verifier.code 0} true;
    $p1822 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(911, 8)));
    goto corral_source_split_14513;

  corral_source_split_14513:
    assume {:verifier.code 0} true;
    $i1823 := $p2i.ref.i64($p1822);
    goto corral_source_split_14514;

  corral_source_split_14514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4021} free_pages($i1823, 0);
    goto corral_source_split_14515;

  corral_source_split_14515:
    assume {:verifier.code 0} true;
    goto $bb915;

  $bb915:
    assume {:verifier.code 0} true;
    $p1824 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(912, 8)));
    goto corral_source_split_14517;

  corral_source_split_14517:
    assume {:verifier.code 0} true;
    $i1825 := $p2i.ref.i64($p1824);
    goto corral_source_split_14518;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4022} free_pages($i1825, 0);
    goto corral_source_split_14519;

  corral_source_split_14519:
    assume {:verifier.code 0} true;
    goto $bb916;

  $bb916:
    assume {:verifier.code 0} true;
    $p1826 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(913, 8)));
    goto corral_source_split_14521;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    $i1827 := $p2i.ref.i64($p1826);
    goto corral_source_split_14522;

  corral_source_split_14522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4023} free_pages($i1827, 0);
    goto corral_source_split_14523;

  corral_source_split_14523:
    assume {:verifier.code 0} true;
    goto $bb917;

  $bb917:
    assume {:verifier.code 0} true;
    $p1828 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(914, 8)));
    goto corral_source_split_14525;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    $i1829 := $p2i.ref.i64($p1828);
    goto corral_source_split_14526;

  corral_source_split_14526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4024} free_pages($i1829, 0);
    goto corral_source_split_14527;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb918:
    assume {:verifier.code 0} true;
    $p1830 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(915, 8)));
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    $i1831 := $p2i.ref.i64($p1830);
    goto corral_source_split_14530;

  corral_source_split_14530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4025} free_pages($i1831, 0);
    goto corral_source_split_14531;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    goto $bb919;

  $bb919:
    assume {:verifier.code 0} true;
    $p1832 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(916, 8)));
    goto corral_source_split_14533;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    $i1833 := $p2i.ref.i64($p1832);
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4026} free_pages($i1833, 0);
    goto corral_source_split_14535;

  corral_source_split_14535:
    assume {:verifier.code 0} true;
    goto $bb920;

  $bb920:
    assume {:verifier.code 0} true;
    $p1834 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(917, 8)));
    goto corral_source_split_14537;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    $i1835 := $p2i.ref.i64($p1834);
    goto corral_source_split_14538;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4027} free_pages($i1835, 0);
    goto corral_source_split_14539;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    $p1836 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(918, 8)));
    goto corral_source_split_14541;

  corral_source_split_14541:
    assume {:verifier.code 0} true;
    $i1837 := $p2i.ref.i64($p1836);
    goto corral_source_split_14542;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4028} free_pages($i1837, 0);
    goto corral_source_split_14543;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb922:
    assume {:verifier.code 0} true;
    $p1838 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(919, 8)));
    goto corral_source_split_14545;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    $i1839 := $p2i.ref.i64($p1838);
    goto corral_source_split_14546;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4029} free_pages($i1839, 0);
    goto corral_source_split_14547;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb923:
    assume {:verifier.code 0} true;
    $p1840 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(920, 8)));
    goto corral_source_split_14549;

  corral_source_split_14549:
    assume {:verifier.code 0} true;
    $i1841 := $p2i.ref.i64($p1840);
    goto corral_source_split_14550;

  corral_source_split_14550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4030} free_pages($i1841, 0);
    goto corral_source_split_14551;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb924:
    assume {:verifier.code 0} true;
    $p1842 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(921, 8)));
    goto corral_source_split_14553;

  corral_source_split_14553:
    assume {:verifier.code 0} true;
    $i1843 := $p2i.ref.i64($p1842);
    goto corral_source_split_14554;

  corral_source_split_14554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4031} free_pages($i1843, 0);
    goto corral_source_split_14555;

  corral_source_split_14555:
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb925:
    assume {:verifier.code 0} true;
    $p1844 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(922, 8)));
    goto corral_source_split_14557;

  corral_source_split_14557:
    assume {:verifier.code 0} true;
    $i1845 := $p2i.ref.i64($p1844);
    goto corral_source_split_14558;

  corral_source_split_14558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4032} free_pages($i1845, 0);
    goto corral_source_split_14559;

  corral_source_split_14559:
    assume {:verifier.code 0} true;
    goto $bb926;

  $bb926:
    assume {:verifier.code 0} true;
    $p1846 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(923, 8)));
    goto corral_source_split_14561;

  corral_source_split_14561:
    assume {:verifier.code 0} true;
    $i1847 := $p2i.ref.i64($p1846);
    goto corral_source_split_14562;

  corral_source_split_14562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4033} free_pages($i1847, 0);
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb927:
    assume {:verifier.code 0} true;
    $p1848 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(924, 8)));
    goto corral_source_split_14565;

  corral_source_split_14565:
    assume {:verifier.code 0} true;
    $i1849 := $p2i.ref.i64($p1848);
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4034} free_pages($i1849, 0);
    goto corral_source_split_14567;

  corral_source_split_14567:
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb928:
    assume {:verifier.code 0} true;
    $p1850 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(925, 8)));
    goto corral_source_split_14569;

  corral_source_split_14569:
    assume {:verifier.code 0} true;
    $i1851 := $p2i.ref.i64($p1850);
    goto corral_source_split_14570;

  corral_source_split_14570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4035} free_pages($i1851, 0);
    goto corral_source_split_14571;

  corral_source_split_14571:
    assume {:verifier.code 0} true;
    goto $bb929;

  $bb929:
    assume {:verifier.code 0} true;
    $p1852 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(926, 8)));
    goto corral_source_split_14573;

  corral_source_split_14573:
    assume {:verifier.code 0} true;
    $i1853 := $p2i.ref.i64($p1852);
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4036} free_pages($i1853, 0);
    goto corral_source_split_14575;

  corral_source_split_14575:
    assume {:verifier.code 0} true;
    goto $bb930;

  $bb930:
    assume {:verifier.code 0} true;
    $p1854 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(927, 8)));
    goto corral_source_split_14577;

  corral_source_split_14577:
    assume {:verifier.code 0} true;
    $i1855 := $p2i.ref.i64($p1854);
    goto corral_source_split_14578;

  corral_source_split_14578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4037} free_pages($i1855, 0);
    goto corral_source_split_14579;

  corral_source_split_14579:
    assume {:verifier.code 0} true;
    goto $bb931;

  $bb931:
    assume {:verifier.code 0} true;
    $p1856 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(928, 8)));
    goto corral_source_split_14581;

  corral_source_split_14581:
    assume {:verifier.code 0} true;
    $i1857 := $p2i.ref.i64($p1856);
    goto corral_source_split_14582;

  corral_source_split_14582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4038} free_pages($i1857, 0);
    goto corral_source_split_14583;

  corral_source_split_14583:
    assume {:verifier.code 0} true;
    goto $bb932;

  $bb932:
    assume {:verifier.code 0} true;
    $p1858 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(929, 8)));
    goto corral_source_split_14585;

  corral_source_split_14585:
    assume {:verifier.code 0} true;
    $i1859 := $p2i.ref.i64($p1858);
    goto corral_source_split_14586;

  corral_source_split_14586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4039} free_pages($i1859, 0);
    goto corral_source_split_14587;

  corral_source_split_14587:
    assume {:verifier.code 0} true;
    goto $bb933;

  $bb933:
    assume {:verifier.code 0} true;
    $p1860 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(930, 8)));
    goto corral_source_split_14589;

  corral_source_split_14589:
    assume {:verifier.code 0} true;
    $i1861 := $p2i.ref.i64($p1860);
    goto corral_source_split_14590;

  corral_source_split_14590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4040} free_pages($i1861, 0);
    goto corral_source_split_14591;

  corral_source_split_14591:
    assume {:verifier.code 0} true;
    goto $bb934;

  $bb934:
    assume {:verifier.code 0} true;
    $p1862 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(931, 8)));
    goto corral_source_split_14593;

  corral_source_split_14593:
    assume {:verifier.code 0} true;
    $i1863 := $p2i.ref.i64($p1862);
    goto corral_source_split_14594;

  corral_source_split_14594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4041} free_pages($i1863, 0);
    goto corral_source_split_14595;

  corral_source_split_14595:
    assume {:verifier.code 0} true;
    goto $bb935;

  $bb935:
    assume {:verifier.code 0} true;
    $p1864 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(932, 8)));
    goto corral_source_split_14597;

  corral_source_split_14597:
    assume {:verifier.code 0} true;
    $i1865 := $p2i.ref.i64($p1864);
    goto corral_source_split_14598;

  corral_source_split_14598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4042} free_pages($i1865, 0);
    goto corral_source_split_14599;

  corral_source_split_14599:
    assume {:verifier.code 0} true;
    goto $bb936;

  $bb936:
    assume {:verifier.code 0} true;
    $p1866 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(933, 8)));
    goto corral_source_split_14601;

  corral_source_split_14601:
    assume {:verifier.code 0} true;
    $i1867 := $p2i.ref.i64($p1866);
    goto corral_source_split_14602;

  corral_source_split_14602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4043} free_pages($i1867, 0);
    goto corral_source_split_14603;

  corral_source_split_14603:
    assume {:verifier.code 0} true;
    goto $bb937;

  $bb937:
    assume {:verifier.code 0} true;
    $p1868 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(934, 8)));
    goto corral_source_split_14605;

  corral_source_split_14605:
    assume {:verifier.code 0} true;
    $i1869 := $p2i.ref.i64($p1868);
    goto corral_source_split_14606;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4044} free_pages($i1869, 0);
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    goto $bb938;

  $bb938:
    assume {:verifier.code 0} true;
    $p1870 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(935, 8)));
    goto corral_source_split_14609;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    $i1871 := $p2i.ref.i64($p1870);
    goto corral_source_split_14610;

  corral_source_split_14610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4045} free_pages($i1871, 0);
    goto corral_source_split_14611;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    goto $bb939;

  $bb939:
    assume {:verifier.code 0} true;
    $p1872 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(936, 8)));
    goto corral_source_split_14613;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    $i1873 := $p2i.ref.i64($p1872);
    goto corral_source_split_14614;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4046} free_pages($i1873, 0);
    goto corral_source_split_14615;

  corral_source_split_14615:
    assume {:verifier.code 0} true;
    goto $bb940;

  $bb940:
    assume {:verifier.code 0} true;
    $p1874 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(937, 8)));
    goto corral_source_split_14617;

  corral_source_split_14617:
    assume {:verifier.code 0} true;
    $i1875 := $p2i.ref.i64($p1874);
    goto corral_source_split_14618;

  corral_source_split_14618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4047} free_pages($i1875, 0);
    goto corral_source_split_14619;

  corral_source_split_14619:
    assume {:verifier.code 0} true;
    goto $bb941;

  $bb941:
    assume {:verifier.code 0} true;
    $p1876 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(938, 8)));
    goto corral_source_split_14621;

  corral_source_split_14621:
    assume {:verifier.code 0} true;
    $i1877 := $p2i.ref.i64($p1876);
    goto corral_source_split_14622;

  corral_source_split_14622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4048} free_pages($i1877, 0);
    goto corral_source_split_14623;

  corral_source_split_14623:
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb942:
    assume {:verifier.code 0} true;
    $p1878 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(939, 8)));
    goto corral_source_split_14625;

  corral_source_split_14625:
    assume {:verifier.code 0} true;
    $i1879 := $p2i.ref.i64($p1878);
    goto corral_source_split_14626;

  corral_source_split_14626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4049} free_pages($i1879, 0);
    goto corral_source_split_14627;

  corral_source_split_14627:
    assume {:verifier.code 0} true;
    goto $bb943;

  $bb943:
    assume {:verifier.code 0} true;
    $p1880 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(940, 8)));
    goto corral_source_split_14629;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    $i1881 := $p2i.ref.i64($p1880);
    goto corral_source_split_14630;

  corral_source_split_14630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4050} free_pages($i1881, 0);
    goto corral_source_split_14631;

  corral_source_split_14631:
    assume {:verifier.code 0} true;
    goto $bb944;

  $bb944:
    assume {:verifier.code 0} true;
    $p1882 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(941, 8)));
    goto corral_source_split_14633;

  corral_source_split_14633:
    assume {:verifier.code 0} true;
    $i1883 := $p2i.ref.i64($p1882);
    goto corral_source_split_14634;

  corral_source_split_14634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4051} free_pages($i1883, 0);
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb945:
    assume {:verifier.code 0} true;
    $p1884 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(942, 8)));
    goto corral_source_split_14637;

  corral_source_split_14637:
    assume {:verifier.code 0} true;
    $i1885 := $p2i.ref.i64($p1884);
    goto corral_source_split_14638;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4052} free_pages($i1885, 0);
    goto corral_source_split_14639;

  corral_source_split_14639:
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb946:
    assume {:verifier.code 0} true;
    $p1886 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(943, 8)));
    goto corral_source_split_14641;

  corral_source_split_14641:
    assume {:verifier.code 0} true;
    $i1887 := $p2i.ref.i64($p1886);
    goto corral_source_split_14642;

  corral_source_split_14642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4053} free_pages($i1887, 0);
    goto corral_source_split_14643;

  corral_source_split_14643:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb947:
    assume {:verifier.code 0} true;
    $p1888 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(944, 8)));
    goto corral_source_split_14645;

  corral_source_split_14645:
    assume {:verifier.code 0} true;
    $i1889 := $p2i.ref.i64($p1888);
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4054} free_pages($i1889, 0);
    goto corral_source_split_14647;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb948:
    assume {:verifier.code 0} true;
    $p1890 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(945, 8)));
    goto corral_source_split_14649;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    $i1891 := $p2i.ref.i64($p1890);
    goto corral_source_split_14650;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4055} free_pages($i1891, 0);
    goto corral_source_split_14651;

  corral_source_split_14651:
    assume {:verifier.code 0} true;
    goto $bb949;

  $bb949:
    assume {:verifier.code 0} true;
    $p1892 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(946, 8)));
    goto corral_source_split_14653;

  corral_source_split_14653:
    assume {:verifier.code 0} true;
    $i1893 := $p2i.ref.i64($p1892);
    goto corral_source_split_14654;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4056} free_pages($i1893, 0);
    goto corral_source_split_14655;

  corral_source_split_14655:
    assume {:verifier.code 0} true;
    goto $bb950;

  $bb950:
    assume {:verifier.code 0} true;
    $p1894 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(947, 8)));
    goto corral_source_split_14657;

  corral_source_split_14657:
    assume {:verifier.code 0} true;
    $i1895 := $p2i.ref.i64($p1894);
    goto corral_source_split_14658;

  corral_source_split_14658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4057} free_pages($i1895, 0);
    goto corral_source_split_14659;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    goto $bb951;

  $bb951:
    assume {:verifier.code 0} true;
    $p1896 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(948, 8)));
    goto corral_source_split_14661;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    $i1897 := $p2i.ref.i64($p1896);
    goto corral_source_split_14662;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4058} free_pages($i1897, 0);
    goto corral_source_split_14663;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    goto $bb952;

  $bb952:
    assume {:verifier.code 0} true;
    $p1898 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(949, 8)));
    goto corral_source_split_14665;

  corral_source_split_14665:
    assume {:verifier.code 0} true;
    $i1899 := $p2i.ref.i64($p1898);
    goto corral_source_split_14666;

  corral_source_split_14666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4059} free_pages($i1899, 0);
    goto corral_source_split_14667;

  corral_source_split_14667:
    assume {:verifier.code 0} true;
    goto $bb953;

  $bb953:
    assume {:verifier.code 0} true;
    $p1900 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(950, 8)));
    goto corral_source_split_14669;

  corral_source_split_14669:
    assume {:verifier.code 0} true;
    $i1901 := $p2i.ref.i64($p1900);
    goto corral_source_split_14670;

  corral_source_split_14670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4060} free_pages($i1901, 0);
    goto corral_source_split_14671;

  corral_source_split_14671:
    assume {:verifier.code 0} true;
    goto $bb954;

  $bb954:
    assume {:verifier.code 0} true;
    $p1902 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(951, 8)));
    goto corral_source_split_14673;

  corral_source_split_14673:
    assume {:verifier.code 0} true;
    $i1903 := $p2i.ref.i64($p1902);
    goto corral_source_split_14674;

  corral_source_split_14674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4061} free_pages($i1903, 0);
    goto corral_source_split_14675;

  corral_source_split_14675:
    assume {:verifier.code 0} true;
    goto $bb955;

  $bb955:
    assume {:verifier.code 0} true;
    $p1904 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(952, 8)));
    goto corral_source_split_14677;

  corral_source_split_14677:
    assume {:verifier.code 0} true;
    $i1905 := $p2i.ref.i64($p1904);
    goto corral_source_split_14678;

  corral_source_split_14678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4062} free_pages($i1905, 0);
    goto corral_source_split_14679;

  corral_source_split_14679:
    assume {:verifier.code 0} true;
    goto $bb956;

  $bb956:
    assume {:verifier.code 0} true;
    $p1906 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(953, 8)));
    goto corral_source_split_14681;

  corral_source_split_14681:
    assume {:verifier.code 0} true;
    $i1907 := $p2i.ref.i64($p1906);
    goto corral_source_split_14682;

  corral_source_split_14682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4063} free_pages($i1907, 0);
    goto corral_source_split_14683;

  corral_source_split_14683:
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb957:
    assume {:verifier.code 0} true;
    $p1908 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(954, 8)));
    goto corral_source_split_14685;

  corral_source_split_14685:
    assume {:verifier.code 0} true;
    $i1909 := $p2i.ref.i64($p1908);
    goto corral_source_split_14686;

  corral_source_split_14686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4064} free_pages($i1909, 0);
    goto corral_source_split_14687;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    goto $bb958;

  $bb958:
    assume {:verifier.code 0} true;
    $p1910 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(955, 8)));
    goto corral_source_split_14689;

  corral_source_split_14689:
    assume {:verifier.code 0} true;
    $i1911 := $p2i.ref.i64($p1910);
    goto corral_source_split_14690;

  corral_source_split_14690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4065} free_pages($i1911, 0);
    goto corral_source_split_14691;

  corral_source_split_14691:
    assume {:verifier.code 0} true;
    goto $bb959;

  $bb959:
    assume {:verifier.code 0} true;
    $p1912 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(956, 8)));
    goto corral_source_split_14693;

  corral_source_split_14693:
    assume {:verifier.code 0} true;
    $i1913 := $p2i.ref.i64($p1912);
    goto corral_source_split_14694;

  corral_source_split_14694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4066} free_pages($i1913, 0);
    goto corral_source_split_14695;

  corral_source_split_14695:
    assume {:verifier.code 0} true;
    goto $bb960;

  $bb960:
    assume {:verifier.code 0} true;
    $p1914 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(957, 8)));
    goto corral_source_split_14697;

  corral_source_split_14697:
    assume {:verifier.code 0} true;
    $i1915 := $p2i.ref.i64($p1914);
    goto corral_source_split_14698;

  corral_source_split_14698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4067} free_pages($i1915, 0);
    goto corral_source_split_14699;

  corral_source_split_14699:
    assume {:verifier.code 0} true;
    goto $bb961;

  $bb961:
    assume {:verifier.code 0} true;
    $p1916 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(958, 8)));
    goto corral_source_split_14701;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    $i1917 := $p2i.ref.i64($p1916);
    goto corral_source_split_14702;

  corral_source_split_14702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4068} free_pages($i1917, 0);
    goto corral_source_split_14703;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb962:
    assume {:verifier.code 0} true;
    $p1918 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(959, 8)));
    goto corral_source_split_14705;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    $i1919 := $p2i.ref.i64($p1918);
    goto corral_source_split_14706;

  corral_source_split_14706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4069} free_pages($i1919, 0);
    goto corral_source_split_14707;

  corral_source_split_14707:
    assume {:verifier.code 0} true;
    goto $bb963;

  $bb963:
    assume {:verifier.code 0} true;
    $p1920 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(960, 8)));
    goto corral_source_split_14709;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    $i1921 := $p2i.ref.i64($p1920);
    goto corral_source_split_14710;

  corral_source_split_14710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4070} free_pages($i1921, 0);
    goto corral_source_split_14711;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    goto $bb964;

  $bb964:
    assume {:verifier.code 0} true;
    $p1922 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(961, 8)));
    goto corral_source_split_14713;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    $i1923 := $p2i.ref.i64($p1922);
    goto corral_source_split_14714;

  corral_source_split_14714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4071} free_pages($i1923, 0);
    goto corral_source_split_14715;

  corral_source_split_14715:
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb965:
    assume {:verifier.code 0} true;
    $p1924 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(962, 8)));
    goto corral_source_split_14717;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    $i1925 := $p2i.ref.i64($p1924);
    goto corral_source_split_14718;

  corral_source_split_14718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4072} free_pages($i1925, 0);
    goto corral_source_split_14719;

  corral_source_split_14719:
    assume {:verifier.code 0} true;
    goto $bb966;

  $bb966:
    assume {:verifier.code 0} true;
    $p1926 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(963, 8)));
    goto corral_source_split_14721;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    $i1927 := $p2i.ref.i64($p1926);
    goto corral_source_split_14722;

  corral_source_split_14722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4073} free_pages($i1927, 0);
    goto corral_source_split_14723;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    goto $bb967;

  $bb967:
    assume {:verifier.code 0} true;
    $p1928 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(964, 8)));
    goto corral_source_split_14725;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    $i1929 := $p2i.ref.i64($p1928);
    goto corral_source_split_14726;

  corral_source_split_14726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4074} free_pages($i1929, 0);
    goto corral_source_split_14727;

  corral_source_split_14727:
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb968:
    assume {:verifier.code 0} true;
    $p1930 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(965, 8)));
    goto corral_source_split_14729;

  corral_source_split_14729:
    assume {:verifier.code 0} true;
    $i1931 := $p2i.ref.i64($p1930);
    goto corral_source_split_14730;

  corral_source_split_14730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4075} free_pages($i1931, 0);
    goto corral_source_split_14731;

  corral_source_split_14731:
    assume {:verifier.code 0} true;
    goto $bb969;

  $bb969:
    assume {:verifier.code 0} true;
    $p1932 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(966, 8)));
    goto corral_source_split_14733;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    $i1933 := $p2i.ref.i64($p1932);
    goto corral_source_split_14734;

  corral_source_split_14734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4076} free_pages($i1933, 0);
    goto corral_source_split_14735;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    goto $bb970;

  $bb970:
    assume {:verifier.code 0} true;
    $p1934 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(967, 8)));
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    $i1935 := $p2i.ref.i64($p1934);
    goto corral_source_split_14738;

  corral_source_split_14738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4077} free_pages($i1935, 0);
    goto corral_source_split_14739;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    goto $bb971;

  $bb971:
    assume {:verifier.code 0} true;
    $p1936 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(968, 8)));
    goto corral_source_split_14741;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    $i1937 := $p2i.ref.i64($p1936);
    goto corral_source_split_14742;

  corral_source_split_14742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4078} free_pages($i1937, 0);
    goto corral_source_split_14743;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    goto $bb972;

  $bb972:
    assume {:verifier.code 0} true;
    $p1938 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(969, 8)));
    goto corral_source_split_14745;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    $i1939 := $p2i.ref.i64($p1938);
    goto corral_source_split_14746;

  corral_source_split_14746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4079} free_pages($i1939, 0);
    goto corral_source_split_14747;

  corral_source_split_14747:
    assume {:verifier.code 0} true;
    goto $bb973;

  $bb973:
    assume {:verifier.code 0} true;
    $p1940 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(970, 8)));
    goto corral_source_split_14749;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    $i1941 := $p2i.ref.i64($p1940);
    goto corral_source_split_14750;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4080} free_pages($i1941, 0);
    goto corral_source_split_14751;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    goto $bb974;

  $bb974:
    assume {:verifier.code 0} true;
    $p1942 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(971, 8)));
    goto corral_source_split_14753;

  corral_source_split_14753:
    assume {:verifier.code 0} true;
    $i1943 := $p2i.ref.i64($p1942);
    goto corral_source_split_14754;

  corral_source_split_14754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4081} free_pages($i1943, 0);
    goto corral_source_split_14755;

  corral_source_split_14755:
    assume {:verifier.code 0} true;
    goto $bb975;

  $bb975:
    assume {:verifier.code 0} true;
    $p1944 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(972, 8)));
    goto corral_source_split_14757;

  corral_source_split_14757:
    assume {:verifier.code 0} true;
    $i1945 := $p2i.ref.i64($p1944);
    goto corral_source_split_14758;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4082} free_pages($i1945, 0);
    goto corral_source_split_14759;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    goto $bb976;

  $bb976:
    assume {:verifier.code 0} true;
    $p1946 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(973, 8)));
    goto corral_source_split_14761;

  corral_source_split_14761:
    assume {:verifier.code 0} true;
    $i1947 := $p2i.ref.i64($p1946);
    goto corral_source_split_14762;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4083} free_pages($i1947, 0);
    goto corral_source_split_14763;

  corral_source_split_14763:
    assume {:verifier.code 0} true;
    goto $bb977;

  $bb977:
    assume {:verifier.code 0} true;
    $p1948 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(974, 8)));
    goto corral_source_split_14765;

  corral_source_split_14765:
    assume {:verifier.code 0} true;
    $i1949 := $p2i.ref.i64($p1948);
    goto corral_source_split_14766;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4084} free_pages($i1949, 0);
    goto corral_source_split_14767;

  corral_source_split_14767:
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb978:
    assume {:verifier.code 0} true;
    $p1950 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(975, 8)));
    goto corral_source_split_14769;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    $i1951 := $p2i.ref.i64($p1950);
    goto corral_source_split_14770;

  corral_source_split_14770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4085} free_pages($i1951, 0);
    goto corral_source_split_14771;

  corral_source_split_14771:
    assume {:verifier.code 0} true;
    goto $bb979;

  $bb979:
    assume {:verifier.code 0} true;
    $p1952 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(976, 8)));
    goto corral_source_split_14773;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    $i1953 := $p2i.ref.i64($p1952);
    goto corral_source_split_14774;

  corral_source_split_14774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4086} free_pages($i1953, 0);
    goto corral_source_split_14775;

  corral_source_split_14775:
    assume {:verifier.code 0} true;
    goto $bb980;

  $bb980:
    assume {:verifier.code 0} true;
    $p1954 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(977, 8)));
    goto corral_source_split_14777;

  corral_source_split_14777:
    assume {:verifier.code 0} true;
    $i1955 := $p2i.ref.i64($p1954);
    goto corral_source_split_14778;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4087} free_pages($i1955, 0);
    goto corral_source_split_14779;

  corral_source_split_14779:
    assume {:verifier.code 0} true;
    goto $bb981;

  $bb981:
    assume {:verifier.code 0} true;
    $p1956 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(978, 8)));
    goto corral_source_split_14781;

  corral_source_split_14781:
    assume {:verifier.code 0} true;
    $i1957 := $p2i.ref.i64($p1956);
    goto corral_source_split_14782;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4088} free_pages($i1957, 0);
    goto corral_source_split_14783;

  corral_source_split_14783:
    assume {:verifier.code 0} true;
    goto $bb982;

  $bb982:
    assume {:verifier.code 0} true;
    $p1958 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(979, 8)));
    goto corral_source_split_14785;

  corral_source_split_14785:
    assume {:verifier.code 0} true;
    $i1959 := $p2i.ref.i64($p1958);
    goto corral_source_split_14786;

  corral_source_split_14786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4089} free_pages($i1959, 0);
    goto corral_source_split_14787;

  corral_source_split_14787:
    assume {:verifier.code 0} true;
    goto $bb983;

  $bb983:
    assume {:verifier.code 0} true;
    $p1960 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(980, 8)));
    goto corral_source_split_14789;

  corral_source_split_14789:
    assume {:verifier.code 0} true;
    $i1961 := $p2i.ref.i64($p1960);
    goto corral_source_split_14790;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4090} free_pages($i1961, 0);
    goto corral_source_split_14791;

  corral_source_split_14791:
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb984:
    assume {:verifier.code 0} true;
    $p1962 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(981, 8)));
    goto corral_source_split_14793;

  corral_source_split_14793:
    assume {:verifier.code 0} true;
    $i1963 := $p2i.ref.i64($p1962);
    goto corral_source_split_14794;

  corral_source_split_14794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4091} free_pages($i1963, 0);
    goto corral_source_split_14795;

  corral_source_split_14795:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb985:
    assume {:verifier.code 0} true;
    $p1964 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(982, 8)));
    goto corral_source_split_14797;

  corral_source_split_14797:
    assume {:verifier.code 0} true;
    $i1965 := $p2i.ref.i64($p1964);
    goto corral_source_split_14798;

  corral_source_split_14798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4092} free_pages($i1965, 0);
    goto corral_source_split_14799;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    goto $bb986;

  $bb986:
    assume {:verifier.code 0} true;
    $p1966 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(983, 8)));
    goto corral_source_split_14801;

  corral_source_split_14801:
    assume {:verifier.code 0} true;
    $i1967 := $p2i.ref.i64($p1966);
    goto corral_source_split_14802;

  corral_source_split_14802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4093} free_pages($i1967, 0);
    goto corral_source_split_14803;

  corral_source_split_14803:
    assume {:verifier.code 0} true;
    goto $bb987;

  $bb987:
    assume {:verifier.code 0} true;
    $p1968 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(984, 8)));
    goto corral_source_split_14805;

  corral_source_split_14805:
    assume {:verifier.code 0} true;
    $i1969 := $p2i.ref.i64($p1968);
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4094} free_pages($i1969, 0);
    goto corral_source_split_14807;

  corral_source_split_14807:
    assume {:verifier.code 0} true;
    goto $bb988;

  $bb988:
    assume {:verifier.code 0} true;
    $p1970 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(985, 8)));
    goto corral_source_split_14809;

  corral_source_split_14809:
    assume {:verifier.code 0} true;
    $i1971 := $p2i.ref.i64($p1970);
    goto corral_source_split_14810;

  corral_source_split_14810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4095} free_pages($i1971, 0);
    goto corral_source_split_14811;

  corral_source_split_14811:
    assume {:verifier.code 0} true;
    goto $bb989;

  $bb989:
    assume {:verifier.code 0} true;
    $p1972 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(986, 8)));
    goto corral_source_split_14813;

  corral_source_split_14813:
    assume {:verifier.code 0} true;
    $i1973 := $p2i.ref.i64($p1972);
    goto corral_source_split_14814;

  corral_source_split_14814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4096} free_pages($i1973, 0);
    goto corral_source_split_14815;

  corral_source_split_14815:
    assume {:verifier.code 0} true;
    goto $bb990;

  $bb990:
    assume {:verifier.code 0} true;
    $p1974 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(987, 8)));
    goto corral_source_split_14817;

  corral_source_split_14817:
    assume {:verifier.code 0} true;
    $i1975 := $p2i.ref.i64($p1974);
    goto corral_source_split_14818;

  corral_source_split_14818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4097} free_pages($i1975, 0);
    goto corral_source_split_14819;

  corral_source_split_14819:
    assume {:verifier.code 0} true;
    goto $bb991;

  $bb991:
    assume {:verifier.code 0} true;
    $p1976 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(988, 8)));
    goto corral_source_split_14821;

  corral_source_split_14821:
    assume {:verifier.code 0} true;
    $i1977 := $p2i.ref.i64($p1976);
    goto corral_source_split_14822;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4098} free_pages($i1977, 0);
    goto corral_source_split_14823;

  corral_source_split_14823:
    assume {:verifier.code 0} true;
    goto $bb992;

  $bb992:
    assume {:verifier.code 0} true;
    $p1978 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(989, 8)));
    goto corral_source_split_14825;

  corral_source_split_14825:
    assume {:verifier.code 0} true;
    $i1979 := $p2i.ref.i64($p1978);
    goto corral_source_split_14826;

  corral_source_split_14826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4099} free_pages($i1979, 0);
    goto corral_source_split_14827;

  corral_source_split_14827:
    assume {:verifier.code 0} true;
    goto $bb993;

  $bb993:
    assume {:verifier.code 0} true;
    $p1980 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(990, 8)));
    goto corral_source_split_14829;

  corral_source_split_14829:
    assume {:verifier.code 0} true;
    $i1981 := $p2i.ref.i64($p1980);
    goto corral_source_split_14830;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4100} free_pages($i1981, 0);
    goto corral_source_split_14831;

  corral_source_split_14831:
    assume {:verifier.code 0} true;
    goto $bb994;

  $bb994:
    assume {:verifier.code 0} true;
    $p1982 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(991, 8)));
    goto corral_source_split_14833;

  corral_source_split_14833:
    assume {:verifier.code 0} true;
    $i1983 := $p2i.ref.i64($p1982);
    goto corral_source_split_14834;

  corral_source_split_14834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4101} free_pages($i1983, 0);
    goto corral_source_split_14835;

  corral_source_split_14835:
    assume {:verifier.code 0} true;
    goto $bb995;

  $bb995:
    assume {:verifier.code 0} true;
    $p1984 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(992, 8)));
    goto corral_source_split_14837;

  corral_source_split_14837:
    assume {:verifier.code 0} true;
    $i1985 := $p2i.ref.i64($p1984);
    goto corral_source_split_14838;

  corral_source_split_14838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4102} free_pages($i1985, 0);
    goto corral_source_split_14839;

  corral_source_split_14839:
    assume {:verifier.code 0} true;
    goto $bb996;

  $bb996:
    assume {:verifier.code 0} true;
    $p1986 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(993, 8)));
    goto corral_source_split_14841;

  corral_source_split_14841:
    assume {:verifier.code 0} true;
    $i1987 := $p2i.ref.i64($p1986);
    goto corral_source_split_14842;

  corral_source_split_14842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4103} free_pages($i1987, 0);
    goto corral_source_split_14843;

  corral_source_split_14843:
    assume {:verifier.code 0} true;
    goto $bb997;

  $bb997:
    assume {:verifier.code 0} true;
    $p1988 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(994, 8)));
    goto corral_source_split_14845;

  corral_source_split_14845:
    assume {:verifier.code 0} true;
    $i1989 := $p2i.ref.i64($p1988);
    goto corral_source_split_14846;

  corral_source_split_14846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4104} free_pages($i1989, 0);
    goto corral_source_split_14847;

  corral_source_split_14847:
    assume {:verifier.code 0} true;
    goto $bb998;

  $bb998:
    assume {:verifier.code 0} true;
    $p1990 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(995, 8)));
    goto corral_source_split_14849;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    $i1991 := $p2i.ref.i64($p1990);
    goto corral_source_split_14850;

  corral_source_split_14850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4105} free_pages($i1991, 0);
    goto corral_source_split_14851;

  corral_source_split_14851:
    assume {:verifier.code 0} true;
    goto $bb999;

  $bb999:
    assume {:verifier.code 0} true;
    $p1992 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(996, 8)));
    goto corral_source_split_14853;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    $i1993 := $p2i.ref.i64($p1992);
    goto corral_source_split_14854;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4106} free_pages($i1993, 0);
    goto corral_source_split_14855;

  corral_source_split_14855:
    assume {:verifier.code 0} true;
    goto $bb1000;

  $bb1000:
    assume {:verifier.code 0} true;
    $p1994 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(997, 8)));
    goto corral_source_split_14857;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    $i1995 := $p2i.ref.i64($p1994);
    goto corral_source_split_14858;

  corral_source_split_14858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4107} free_pages($i1995, 0);
    goto corral_source_split_14859;

  corral_source_split_14859:
    assume {:verifier.code 0} true;
    goto $bb1001;

  $bb1001:
    assume {:verifier.code 0} true;
    $p1996 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(998, 8)));
    goto corral_source_split_14861;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    $i1997 := $p2i.ref.i64($p1996);
    goto corral_source_split_14862;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4108} free_pages($i1997, 0);
    goto corral_source_split_14863;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    goto $bb1002;

  $bb1002:
    assume {:verifier.code 0} true;
    $p1998 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(999, 8)));
    goto corral_source_split_14865;

  corral_source_split_14865:
    assume {:verifier.code 0} true;
    $i1999 := $p2i.ref.i64($p1998);
    goto corral_source_split_14866;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4109} free_pages($i1999, 0);
    goto corral_source_split_14867;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    goto $bb1003;

  $bb1003:
    assume {:verifier.code 0} true;
    $p2000 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1000, 8)));
    goto corral_source_split_14869;

  corral_source_split_14869:
    assume {:verifier.code 0} true;
    $i2001 := $p2i.ref.i64($p2000);
    goto corral_source_split_14870;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4110} free_pages($i2001, 0);
    goto corral_source_split_14871;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    goto $bb1004;

  $bb1004:
    assume {:verifier.code 0} true;
    $p2002 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1001, 8)));
    goto corral_source_split_14873;

  corral_source_split_14873:
    assume {:verifier.code 0} true;
    $i2003 := $p2i.ref.i64($p2002);
    goto corral_source_split_14874;

  corral_source_split_14874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4111} free_pages($i2003, 0);
    goto corral_source_split_14875;

  corral_source_split_14875:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1005:
    assume {:verifier.code 0} true;
    $p2004 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1002, 8)));
    goto corral_source_split_14877;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    $i2005 := $p2i.ref.i64($p2004);
    goto corral_source_split_14878;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4112} free_pages($i2005, 0);
    goto corral_source_split_14879;

  corral_source_split_14879:
    assume {:verifier.code 0} true;
    goto $bb1006;

  $bb1006:
    assume {:verifier.code 0} true;
    $p2006 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1003, 8)));
    goto corral_source_split_14881;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    $i2007 := $p2i.ref.i64($p2006);
    goto corral_source_split_14882;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4113} free_pages($i2007, 0);
    goto corral_source_split_14883;

  corral_source_split_14883:
    assume {:verifier.code 0} true;
    goto $bb1007;

  $bb1007:
    assume {:verifier.code 0} true;
    $p2008 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1004, 8)));
    goto corral_source_split_14885;

  corral_source_split_14885:
    assume {:verifier.code 0} true;
    $i2009 := $p2i.ref.i64($p2008);
    goto corral_source_split_14886;

  corral_source_split_14886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4114} free_pages($i2009, 0);
    goto corral_source_split_14887;

  corral_source_split_14887:
    assume {:verifier.code 0} true;
    goto $bb1008;

  $bb1008:
    assume {:verifier.code 0} true;
    $p2010 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1005, 8)));
    goto corral_source_split_14889;

  corral_source_split_14889:
    assume {:verifier.code 0} true;
    $i2011 := $p2i.ref.i64($p2010);
    goto corral_source_split_14890;

  corral_source_split_14890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4115} free_pages($i2011, 0);
    goto corral_source_split_14891;

  corral_source_split_14891:
    assume {:verifier.code 0} true;
    goto $bb1009;

  $bb1009:
    assume {:verifier.code 0} true;
    $p2012 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1006, 8)));
    goto corral_source_split_14893;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    $i2013 := $p2i.ref.i64($p2012);
    goto corral_source_split_14894;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4116} free_pages($i2013, 0);
    goto corral_source_split_14895;

  corral_source_split_14895:
    assume {:verifier.code 0} true;
    goto $bb1010;

  $bb1010:
    assume {:verifier.code 0} true;
    $p2014 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1007, 8)));
    goto corral_source_split_14897;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    $i2015 := $p2i.ref.i64($p2014);
    goto corral_source_split_14898;

  corral_source_split_14898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4117} free_pages($i2015, 0);
    goto corral_source_split_14899;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    goto $bb1011;

  $bb1011:
    assume {:verifier.code 0} true;
    $p2016 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1008, 8)));
    goto corral_source_split_14901;

  corral_source_split_14901:
    assume {:verifier.code 0} true;
    $i2017 := $p2i.ref.i64($p2016);
    goto corral_source_split_14902;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4118} free_pages($i2017, 0);
    goto corral_source_split_14903;

  corral_source_split_14903:
    assume {:verifier.code 0} true;
    goto $bb1012;

  $bb1012:
    assume {:verifier.code 0} true;
    $p2018 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1009, 8)));
    goto corral_source_split_14905;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    $i2019 := $p2i.ref.i64($p2018);
    goto corral_source_split_14906;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4119} free_pages($i2019, 0);
    goto corral_source_split_14907;

  corral_source_split_14907:
    assume {:verifier.code 0} true;
    goto $bb1013;

  $bb1013:
    assume {:verifier.code 0} true;
    $p2020 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1010, 8)));
    goto corral_source_split_14909;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    $i2021 := $p2i.ref.i64($p2020);
    goto corral_source_split_14910;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4120} free_pages($i2021, 0);
    goto corral_source_split_14911;

  corral_source_split_14911:
    assume {:verifier.code 0} true;
    goto $bb1014;

  $bb1014:
    assume {:verifier.code 0} true;
    $p2022 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1011, 8)));
    goto corral_source_split_14913;

  corral_source_split_14913:
    assume {:verifier.code 0} true;
    $i2023 := $p2i.ref.i64($p2022);
    goto corral_source_split_14914;

  corral_source_split_14914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4121} free_pages($i2023, 0);
    goto corral_source_split_14915;

  corral_source_split_14915:
    assume {:verifier.code 0} true;
    goto $bb1015;

  $bb1015:
    assume {:verifier.code 0} true;
    $p2024 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1012, 8)));
    goto corral_source_split_14917;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    $i2025 := $p2i.ref.i64($p2024);
    goto corral_source_split_14918;

  corral_source_split_14918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4122} free_pages($i2025, 0);
    goto corral_source_split_14919;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    goto $bb1016;

  $bb1016:
    assume {:verifier.code 0} true;
    $p2026 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1013, 8)));
    goto corral_source_split_14921;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    $i2027 := $p2i.ref.i64($p2026);
    goto corral_source_split_14922;

  corral_source_split_14922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4123} free_pages($i2027, 0);
    goto corral_source_split_14923;

  corral_source_split_14923:
    assume {:verifier.code 0} true;
    goto $bb1017;

  $bb1017:
    assume {:verifier.code 0} true;
    $p2028 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1014, 8)));
    goto corral_source_split_14925;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    $i2029 := $p2i.ref.i64($p2028);
    goto corral_source_split_14926;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4124} free_pages($i2029, 0);
    goto corral_source_split_14927;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    goto $bb1018;

  $bb1018:
    assume {:verifier.code 0} true;
    $p2030 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1015, 8)));
    goto corral_source_split_14929;

  corral_source_split_14929:
    assume {:verifier.code 0} true;
    $i2031 := $p2i.ref.i64($p2030);
    goto corral_source_split_14930;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4125} free_pages($i2031, 0);
    goto corral_source_split_14931;

  corral_source_split_14931:
    assume {:verifier.code 0} true;
    goto $bb1019;

  $bb1019:
    assume {:verifier.code 0} true;
    $p2032 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1016, 8)));
    goto corral_source_split_14933;

  corral_source_split_14933:
    assume {:verifier.code 0} true;
    $i2033 := $p2i.ref.i64($p2032);
    goto corral_source_split_14934;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4126} free_pages($i2033, 0);
    goto corral_source_split_14935;

  corral_source_split_14935:
    assume {:verifier.code 0} true;
    goto $bb1020;

  $bb1020:
    assume {:verifier.code 0} true;
    $p2034 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1017, 8)));
    goto corral_source_split_14937;

  corral_source_split_14937:
    assume {:verifier.code 0} true;
    $i2035 := $p2i.ref.i64($p2034);
    goto corral_source_split_14938;

  corral_source_split_14938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4127} free_pages($i2035, 0);
    goto corral_source_split_14939;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    goto $bb1021;

  $bb1021:
    assume {:verifier.code 0} true;
    $p2036 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1018, 8)));
    goto corral_source_split_14941;

  corral_source_split_14941:
    assume {:verifier.code 0} true;
    $i2037 := $p2i.ref.i64($p2036);
    goto corral_source_split_14942;

  corral_source_split_14942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4128} free_pages($i2037, 0);
    goto corral_source_split_14943;

  corral_source_split_14943:
    assume {:verifier.code 0} true;
    goto $bb1022;

  $bb1022:
    assume {:verifier.code 0} true;
    $p2038 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1019, 8)));
    goto corral_source_split_14945;

  corral_source_split_14945:
    assume {:verifier.code 0} true;
    $i2039 := $p2i.ref.i64($p2038);
    goto corral_source_split_14946;

  corral_source_split_14946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4129} free_pages($i2039, 0);
    goto corral_source_split_14947;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    goto $bb1023;

  $bb1023:
    assume {:verifier.code 0} true;
    $p2040 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1020, 8)));
    goto corral_source_split_14949;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    $i2041 := $p2i.ref.i64($p2040);
    goto corral_source_split_14950;

  corral_source_split_14950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4130} free_pages($i2041, 0);
    goto corral_source_split_14951;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    goto $bb1024;

  $bb1024:
    assume {:verifier.code 0} true;
    $p2042 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1021, 8)));
    goto corral_source_split_14953;

  corral_source_split_14953:
    assume {:verifier.code 0} true;
    $i2043 := $p2i.ref.i64($p2042);
    goto corral_source_split_14954;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4131} free_pages($i2043, 0);
    goto corral_source_split_14955;

  corral_source_split_14955:
    assume {:verifier.code 0} true;
    goto $bb1025;

  $bb1025:
    assume {:verifier.code 0} true;
    $p2044 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1022, 8)));
    goto corral_source_split_14957;

  corral_source_split_14957:
    assume {:verifier.code 0} true;
    $i2045 := $p2i.ref.i64($p2044);
    goto corral_source_split_14958;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4132} free_pages($i2045, 0);
    goto corral_source_split_14959;

  corral_source_split_14959:
    assume {:verifier.code 0} true;
    goto $bb1026;

  $bb1026:
    assume {:verifier.code 0} true;
    $p2046 := $load.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1023, 8)));
    goto corral_source_split_14961;

  corral_source_split_14961:
    assume {:verifier.code 0} true;
    $i2047 := $p2i.ref.i64($p2046);
    goto corral_source_split_14962;

  corral_source_split_14962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4133} free_pages($i2047, 0);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const gru_proc_exit: ref;

axiom gru_proc_exit == $sub.ref(0, 789153);

procedure gru_proc_exit();
  free requires assertsPassed;



implementation gru_proc_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14964;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4134} delete_proc_files();
    goto corral_source_split_14965;

  corral_source_split_14965:
    assume {:verifier.code 0} true;
    return;
}



const ldv_misc_deregister_15: ref;

axiom ldv_misc_deregister_15 == $sub.ref(0, 790185);

procedure ldv_misc_deregister_15($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.62;



implementation ldv_misc_deregister_15($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14967;

  corral_source_split_14967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4135} $i1 := misc_deregister($p0);
    call {:si_unique_call 4136} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_14968;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    $M.62 := 0;
    call {:si_unique_call 4137} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_14969;

  corral_source_split_14969:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const misc_deregister: ref;

axiom misc_deregister == $sub.ref(0, 791217);

procedure misc_deregister($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation misc_deregister($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14971;

  corral_source_split_14971:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4138} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4139} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_14972;

  corral_source_split_14972:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const delete_proc_files: ref;

axiom delete_proc_files == $sub.ref(0, 792249);

procedure delete_proc_files();
  free requires assertsPassed;



implementation delete_proc_files()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p6: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14974;

  corral_source_split_14974:
    assume {:verifier.code 0} true;
    $p0 := $M.105;
    goto corral_source_split_14975;

  corral_source_split_14975:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_14976;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_14977;

  corral_source_split_14977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14979;

  corral_source_split_14979:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.106, proc_files);
    goto corral_source_split_14980;

  corral_source_split_14980:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_14981;

  corral_source_split_14981:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_14982;

  corral_source_split_14982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $M.105;
    goto corral_source_split_15007;

  corral_source_split_15007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4141} proc_remove($p19);
    goto corral_source_split_15008;

  corral_source_split_15008:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_14984;

  corral_source_split_14984:
    assume {:verifier.code 0} true;
    $p6 := proc_files;
    goto $bb6;

  $bb6:
    call $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $p15, $p16, $i17, $i18, $p6 := delete_proc_files_loop_$bb6($p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $p15, $p16, $i17, $i18, $p6);
    goto $bb6_last;

  corral_source_split_14986:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_14988;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.107, $p7);
    goto corral_source_split_14989;

  corral_source_split_14989:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_14990;

  corral_source_split_14990:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_14991;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p6, $mul.ref(1, 32));
    goto corral_source_split_14999;

  corral_source_split_14999:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(1, 32)), $mul.ref(0, 1));
    goto corral_source_split_15000;

  corral_source_split_15000:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.106, $p15);
    goto corral_source_split_15001;

  corral_source_split_15001:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_15002;

  corral_source_split_15002:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_15003;

  corral_source_split_15003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    goto corral_source_split_15005;

  corral_source_split_15005:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p14;
    goto $bb11_dummy;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_14993;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_14994;

  corral_source_split_14994:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.106, $p11);
    goto corral_source_split_14995;

  corral_source_split_14995:
    assume {:verifier.code 0} true;
    $p13 := $M.105;
    goto corral_source_split_14996;

  corral_source_split_14996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4140} remove_proc_entry($p12, $p13);
    goto corral_source_split_14997;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_14986;
}



const remove_proc_entry: ref;

axiom remove_proc_entry == $sub.ref(0, 793281);

procedure remove_proc_entry($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_proc_entry($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15010;

  corral_source_split_15010:
    assume {:verifier.code 0} true;
    return;
}



const proc_remove: ref;

axiom proc_remove == $sub.ref(0, 794313);

procedure proc_remove($p0: ref);
  free requires assertsPassed;



implementation proc_remove($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15012;

  corral_source_split_15012:
    assume {:verifier.code 0} true;
    return;
}



const free_pages: ref;

axiom free_pages == $sub.ref(0, 795345);

procedure free_pages($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation free_pages($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4142} {:cexpr "free_pages:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 4143} {:cexpr "free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_15014;

  corral_source_split_15014:
    assume {:verifier.code 0} true;
    return;
}



const uv_cpu_to_blade_id: ref;

axiom uv_cpu_to_blade_id == $sub.ref(0, 796377);

procedure uv_cpu_to_blade_id($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uv_cpu_to_blade_id($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4144} {:cexpr "uv_cpu_to_blade_id:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_15016;

  corral_source_split_15016:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.3, uv_cpu_to_blade);
    goto corral_source_split_15017;

  corral_source_split_15017:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i0);
    goto corral_source_split_15018;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 2));
    goto corral_source_split_15019;

  corral_source_split_15019:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.3, $p3);
    goto corral_source_split_15020;

  corral_source_split_15020:
    assume {:verifier.code 0} true;
    $i5 := $sext.i16.i32($i4);
    goto corral_source_split_15021;

  corral_source_split_15021:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const gru0_intr: ref;

axiom gru0_intr == $sub.ref(0, 797409);

procedure gru0_intr($i0: i32, $p1: ref) returns ($r: i32);



const gru_chiplet_setup_tlb_irq: ref;

axiom gru_chiplet_setup_tlb_irq == $sub.ref(0, 798441);

procedure gru_chiplet_setup_tlb_irq($i0: i32, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.108, $CurrAddr;



implementation gru_chiplet_setup_tlb_irq($i0: i32, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p26: ref;
  var $i8: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4145} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 4146} {:cexpr "gru_chiplet_setup_tlb_irq:arg:chiplet"} boogie_si_record_i32($i0);
    call {:si_unique_call 4147} {:cexpr "gru_chiplet_setup_tlb_irq:arg:cpu"} boogie_si_record_i32($i3);
    call {:si_unique_call 4148} {:cexpr "gru_chiplet_setup_tlb_irq:arg:blade"} boogie_si_record_i32($i4);
    goto corral_source_split_15023;

  corral_source_split_15023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4149} $i6 := gru_chiplet_cpu_to_mmr($i0, $i3, $p5);
    call {:si_unique_call 4150} {:cexpr "mmr"} boogie_si_record_i64($i6);
    goto corral_source_split_15024;

  corral_source_split_15024:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_15025;

  corral_source_split_15025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4151} $i9 := uv_setup_irq($p1, $i3, $i4, $i6, 2);
    call {:si_unique_call 4152} {:cexpr "irq"} boogie_si_record_i32($i9);
    goto corral_source_split_15031;

  corral_source_split_15031:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_15032;

  corral_source_split_15032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4154} $i13 := request_irq($i9, $p2, 0, $p1, $0.ref);
    call {:si_unique_call 4155} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_15038;

  corral_source_split_15038:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_15039;

  corral_source_split_15039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.108, $p5);
    goto corral_source_split_15046;

  corral_source_split_15046:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_15047;

  corral_source_split_15047:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i0);
    goto corral_source_split_15048;

  corral_source_split_15048:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i4);
    goto corral_source_split_15049;

  corral_source_split_15049:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i20, 8));
    goto corral_source_split_15050;

  corral_source_split_15050:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.4, $p21);
    goto corral_source_split_15051;

  corral_source_split_15051:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p22, $mul.ref(0, 1136)), $mul.ref(288, 1)), $mul.ref($i19, 424)), $mul.ref(360, 1)), $mul.ref($i18, 4));
    goto corral_source_split_15052;

  corral_source_split_15052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i9);
    goto corral_source_split_15053;

  corral_source_split_15053:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15029;

  corral_source_split_15029:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_15041;

  corral_source_split_15041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4156} uv_teardown_irq($i9);
    goto corral_source_split_15042;

  corral_source_split_15042:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, $i13);
    goto corral_source_split_15043;

  corral_source_split_15043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4157} vslice_dummy_var_233 := printk.ref.ref.i32(.str.73, .str.59, $i15);
    goto corral_source_split_15044;

  corral_source_split_15044:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_15034;

  corral_source_split_15034:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, $i9);
    goto corral_source_split_15035;

  corral_source_split_15035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4153} vslice_dummy_var_232 := printk.ref.ref.i32(.str.72, .str.59, $i11);
    goto corral_source_split_15036;

  corral_source_split_15036:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_15027;

  corral_source_split_15027:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const gru1_intr: ref;

axiom gru1_intr == $sub.ref(0, 799473);

procedure gru1_intr($i0: i32, $p1: ref) returns ($r: i32);



const cpumask_next: ref;

axiom cpumask_next == $sub.ref(0, 800505);

procedure cpumask_next($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_next($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var vslice_dummy_var_234: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4158} {:cexpr "cpumask_next:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_15055;

  corral_source_split_15055:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_15056;

  corral_source_split_15056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_15061;

  corral_source_split_15061:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_15062;

  corral_source_split_15062:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.3, nr_cpu_ids);
    goto corral_source_split_15063;

  corral_source_split_15063:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_15064;

  corral_source_split_15064:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i0, 1);
    goto corral_source_split_15065;

  corral_source_split_15065:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_15066;

  corral_source_split_15066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4160} $i10 := find_next_bit($p5, $i7, $i9);
    call {:si_unique_call 4161} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_15067;

  corral_source_split_15067:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_15068;

  corral_source_split_15068:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_15058;

  corral_source_split_15058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4159} vslice_dummy_var_234 := cpumask_check($i0);
    goto corral_source_split_15059;

  corral_source_split_15059:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_intr_mblade: ref;

axiom gru_intr_mblade == $sub.ref(0, 801537);

procedure gru_intr_mblade($i0: i32, $p1: ref) returns ($r: i32);



const gru_teardown_tlb_irqs: ref;

axiom gru_teardown_tlb_irqs == $sub.ref(0, 802569);

procedure gru_teardown_tlb_irqs();
  free requires assertsPassed;
  modifies $M.108, $CurrAddr;



implementation gru_teardown_tlb_irqs()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i4: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15070;

  corral_source_split_15070:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.3, cpu_online_mask);
    goto corral_source_split_15071;

  corral_source_split_15071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4162} $i1 := cpumask_next($sub.i32(0, 1), $p0);
    call {:si_unique_call 4163} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_15072;

  corral_source_split_15072:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.3, nr_cpu_ids);
    goto corral_source_split_15073;

  corral_source_split_15073:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, $i2);
    goto corral_source_split_15074;

  corral_source_split_15074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4170} $i10 := uv_num_possible_blades();
    call {:si_unique_call 4171} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_15090;

  corral_source_split_15090:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_15091;

  corral_source_split_15091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_15093;

  corral_source_split_15093:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    call $i13, $i14, $i15, $i16, $i17, $i12 := gru_teardown_tlb_irqs_loop_$bb12($i13, $i14, $i15, $i16, $i17, $i12);
    goto $bb12_last;

  corral_source_split_15095:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4172} $i13 := uv_blade_nr_possible_cpus($i12);
    call {:si_unique_call 4173} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_15097;

  corral_source_split_15097:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_15098;

  corral_source_split_15098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4177} gru_chiplet_teardown_tlb_irq(0, 0, $i12);
    goto corral_source_split_15106;

  corral_source_split_15106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4178} gru_chiplet_teardown_tlb_irq(1, 0, $i12);
    goto corral_source_split_15107;

  corral_source_split_15107:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i12, 1);
    call {:si_unique_call 4174} {:cexpr "blade"} boogie_si_record_i32($i15);
    goto corral_source_split_15102;

  corral_source_split_15102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4175} $i16 := uv_num_possible_blades();
    call {:si_unique_call 4176} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_15103;

  corral_source_split_15103:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, $i15);
    goto corral_source_split_15104;

  corral_source_split_15104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i17 == 1);
    goto corral_source_split_15109;

  corral_source_split_15109:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb18:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb18_dummy;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_15100;

  corral_source_split_15100:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15076;

  corral_source_split_15076:
    assume {:verifier.code 0} true;
    $i4 := $i1;
    goto $bb4;

  $bb4:
    call $i5, $p6, $i7, $i8, $i9, $i4 := gru_teardown_tlb_irqs_loop_$bb4($i5, $p6, $i7, $i8, $i9, $i4);
    goto $bb4_last;

  corral_source_split_15078:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4164} $i5 := uv_cpu_to_blade_id($i4);
    call {:si_unique_call 4165} {:cexpr "blade"} boogie_si_record_i32($i5);
    goto corral_source_split_15080;

  corral_source_split_15080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4166} gru_chiplet_teardown_tlb_irq(0, $i4, $i5);
    goto corral_source_split_15081;

  corral_source_split_15081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4167} gru_chiplet_teardown_tlb_irq(1, $i4, $i5);
    goto corral_source_split_15082;

  corral_source_split_15082:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.3, cpu_online_mask);
    goto corral_source_split_15083;

  corral_source_split_15083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4168} $i7 := cpumask_next($i4, $p6);
    call {:si_unique_call 4169} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_15084;

  corral_source_split_15084:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.3, nr_cpu_ids);
    goto corral_source_split_15085;

  corral_source_split_15085:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, $i8);
    goto corral_source_split_15086;

  corral_source_split_15086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_15088;

  corral_source_split_15088:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb6_dummy;

  $bb18_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_15095;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_15078;
}



const gru_chiplet_teardown_tlb_irq: ref;

axiom gru_chiplet_teardown_tlb_irq == $sub.ref(0, 803601);

procedure gru_chiplet_teardown_tlb_irq($i0: i32, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.108, $CurrAddr;



implementation gru_chiplet_teardown_tlb_irq($i0: i32, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4179} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 4180} {:cexpr "gru_chiplet_teardown_tlb_irq:arg:chiplet"} boogie_si_record_i32($i0);
    call {:si_unique_call 4181} {:cexpr "gru_chiplet_teardown_tlb_irq:arg:cpu"} boogie_si_record_i32($i1);
    call {:si_unique_call 4182} {:cexpr "gru_chiplet_teardown_tlb_irq:arg:blade"} boogie_si_record_i32($i2);
    goto corral_source_split_15111;

  corral_source_split_15111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4183} $i4 := gru_chiplet_cpu_to_mmr($i0, $i1, $p3);
    call {:si_unique_call 4184} {:cexpr "mmr"} boogie_si_record_i64($i4);
    goto corral_source_split_15112;

  corral_source_split_15112:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_15113;

  corral_source_split_15113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_15115;

  corral_source_split_15115:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.108, $p3);
    goto corral_source_split_15116;

  corral_source_split_15116:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_15117;

  corral_source_split_15117:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i0);
    goto corral_source_split_15118;

  corral_source_split_15118:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i2);
    goto corral_source_split_15119;

  corral_source_split_15119:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i9, 8));
    goto corral_source_split_15120;

  corral_source_split_15120:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.4, $p10);
    goto corral_source_split_15121;

  corral_source_split_15121:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 1136)), $mul.ref(288, 1)), $mul.ref($i8, 424)), $mul.ref(360, 1)), $mul.ref($i7, 4));
    goto corral_source_split_15122;

  corral_source_split_15122:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 4185} {:cexpr "irq"} boogie_si_record_i32($i16);
    goto corral_source_split_15123;

  corral_source_split_15123:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_15124;

  corral_source_split_15124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_15126;

  corral_source_split_15126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4186} free_irq($i16, $0.ref);
    goto corral_source_split_15127;

  corral_source_split_15127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4187} uv_teardown_irq($i16);
    goto corral_source_split_15128;

  corral_source_split_15128:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const gru_chiplet_cpu_to_mmr: ref;

axiom gru_chiplet_cpu_to_mmr == $sub.ref(0, 804633);

procedure gru_chiplet_cpu_to_mmr($i0: i32, $i1: i32, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.108;



implementation gru_chiplet_cpu_to_mmr($i0: i32, $i1: i32, $p2: ref) returns ($r: i64)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i52: i64;
  var $i37: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4188} {:cexpr "gru_chiplet_cpu_to_mmr:arg:chiplet"} boogie_si_record_i32($i0);
    call {:si_unique_call 4189} {:cexpr "gru_chiplet_cpu_to_mmr:arg:cpu"} boogie_si_record_i32($i1);
    call {:si_unique_call 4190} $i3 := devirtbounce.7(0, x86_cpu_to_apicid);
    call {:si_unique_call 4191} {:cexpr "__ptr"} boogie_si_record_i64($i3);
    call {:si_unique_call 4192} $i4 := devirtbounce.7(0, x86_cpu_to_apicid);
    call {:si_unique_call 4193} {:cexpr "__ptr___0"} boogie_si_record_i64($i4);
    call {:si_unique_call 4194} $i5 := devirtbounce.7(0, x86_cpu_to_apicid);
    call {:si_unique_call 4195} {:cexpr "__ptr___1"} boogie_si_record_i64($i5);
    goto corral_source_split_15130;

  corral_source_split_15130:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i1);
    goto corral_source_split_15131;

  corral_source_split_15131:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i6, 8));
    goto corral_source_split_15132;

  corral_source_split_15132:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.3, $p7);
    goto corral_source_split_15133;

  corral_source_split_15133:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, $i3);
    goto corral_source_split_15134;

  corral_source_split_15134:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_15135;

  corral_source_split_15135:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.3, $p10);
    goto corral_source_split_15136;

  corral_source_split_15136:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_15137;

  corral_source_split_15137:
    assume {:verifier.code 0} true;
    $i13 := $ashr.i32($i12, 2);
    goto corral_source_split_15138;

  corral_source_split_15138:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 4);
    goto corral_source_split_15139;

  corral_source_split_15139:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i1);
    goto corral_source_split_15140;

  corral_source_split_15140:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i15, 8));
    goto corral_source_split_15141;

  corral_source_split_15141:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.3, $p16);
    goto corral_source_split_15142;

  corral_source_split_15142:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, $i4);
    goto corral_source_split_15143;

  corral_source_split_15143:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_15144;

  corral_source_split_15144:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.3, $p19);
    goto corral_source_split_15145;

  corral_source_split_15145:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_15146;

  corral_source_split_15146:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i32($i21, 1);
    goto corral_source_split_15147;

  corral_source_split_15147:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 3);
    goto corral_source_split_15148;

  corral_source_split_15148:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i14, $i23);
    goto corral_source_split_15149;

  corral_source_split_15149:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i1);
    goto corral_source_split_15150;

  corral_source_split_15150:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i25, 8));
    goto corral_source_split_15151;

  corral_source_split_15151:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.3, $p26);
    goto corral_source_split_15152;

  corral_source_split_15152:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, $i5);
    goto corral_source_split_15153;

  corral_source_split_15153:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_15154;

  corral_source_split_15154:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.3, $p29);
    goto corral_source_split_15155;

  corral_source_split_15155:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_15156;

  corral_source_split_15156:
    assume {:verifier.code 0} true;
    $i32 := $ashr.i32($i31, 5);
    goto corral_source_split_15157;

  corral_source_split_15157:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 1);
    goto corral_source_split_15158;

  corral_source_split_15158:
    assume {:verifier.code 0} true;
    $i34 := $mul.i32($i33, 8);
    goto corral_source_split_15159;

  corral_source_split_15159:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i24, $i34);
    call {:si_unique_call 4196} {:cexpr "core"} boogie_si_record_i32($i35);
    goto corral_source_split_15160;

  corral_source_split_15160:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, 15);
    goto corral_source_split_15161;

  corral_source_split_15161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i36 == 1);
    call {:si_unique_call 4197} $i38 := devirtbounce.7(0, x86_cpu_to_apicid);
    call {:si_unique_call 4198} {:cexpr "__ptr___2"} boogie_si_record_i64($i38);
    goto corral_source_split_15165;

  corral_source_split_15165:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i1);
    goto corral_source_split_15166;

  corral_source_split_15166:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i39, 8));
    goto corral_source_split_15167;

  corral_source_split_15167:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.3, $p40);
    goto corral_source_split_15168;

  corral_source_split_15168:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, $i38);
    goto corral_source_split_15169;

  corral_source_split_15169:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_15170;

  corral_source_split_15170:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.3, $p43);
    goto corral_source_split_15171;

  corral_source_split_15171:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_15172;

  corral_source_split_15172:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 1);
    goto corral_source_split_15173;

  corral_source_split_15173:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_15174;

  corral_source_split_15174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i0, 0);
    goto corral_source_split_15180;

  corral_source_split_15180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i48 == 1);
    goto corral_source_split_15187;

  corral_source_split_15187:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i0, 1);
    goto corral_source_split_15188;

  corral_source_split_15188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i53 == 1);
    call {:si_unique_call 4201} devirtbounce.6(0, .str.53, 345, 12);
    goto corral_source_split_15198;

  corral_source_split_15198:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call gru_chiplet_cpu_to_mmr_loop_$bb14();
    goto $bb14_last;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_15193;

  corral_source_split_15193:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i35);
    goto corral_source_split_15194;

  corral_source_split_15194:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 6268);
    goto corral_source_split_15195;

  corral_source_split_15195:
    assume {:verifier.code 0} true;
    $i56 := $mul.i64($i55, 64);
    call {:si_unique_call 4200} {:cexpr "mmr"} boogie_si_record_i64($i56);
    goto corral_source_split_15196;

  corral_source_split_15196:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i52 := $i56;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_15190;

  corral_source_split_15190:
    assume {:verifier.code 0} true;
    $M.108 := $store.i32($M.108, $p2, $i35);
    goto corral_source_split_15191;

  corral_source_split_15191:
    assume {:verifier.code 0} true;
    $i37 := $i52;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15176;

  corral_source_split_15176:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb8:
    assume $i48 == 1;
    goto corral_source_split_15182;

  corral_source_split_15182:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i35);
    goto corral_source_split_15183;

  corral_source_split_15183:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 6252);
    goto corral_source_split_15184;

  corral_source_split_15184:
    assume {:verifier.code 0} true;
    $i51 := $mul.i64($i50, 64);
    call {:si_unique_call 4199} {:cexpr "mmr"} boogie_si_record_i64($i51);
    goto corral_source_split_15185;

  corral_source_split_15185:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb10;

  $bb4:
    assume $i47 == 1;
    goto corral_source_split_15178;

  corral_source_split_15178:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb3;

  $bb1:
    assume $i36 == 1;
    goto corral_source_split_15163;

  corral_source_split_15163:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 805665);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4202} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_15200;

  corral_source_split_15200:
    assume {:verifier.code 0} true;
    return;
}



const uv_teardown_irq: ref;

axiom uv_teardown_irq == $sub.ref(0, 806697);

procedure uv_teardown_irq($i0: i32);
  free requires assertsPassed;



implementation uv_teardown_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4203} {:cexpr "uv_teardown_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_15202;

  corral_source_split_15202:
    assume {:verifier.code 0} true;
    return;
}



const gru_intr: ref;

axiom gru_intr == $sub.ref(0, 807729);

procedure gru_intr($i0: i32, $i1: i32) returns ($r: i32);



const dev_err: ref;

axiom dev_err == $sub.ref(0, 808761);

procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);



const get_clear_fault_map: ref;

axiom get_clear_fault_map == $sub.ref(0, 809793);

procedure get_clear_fault_map($p0: ref, $p1: ref, $p2: ref);



const complete_: ref;

axiom complete_ == $sub.ref(0, 810825);

procedure complete_($p0: ref);



const down_read_trylock: ref;

axiom down_read_trylock == $sub.ref(0, 811857);

procedure down_read_trylock($p0: ref) returns ($r: i32);



const cpumask_check: ref;

axiom cpumask_check == $sub.ref(0, 812889);

procedure cpumask_check($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_check($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var vslice_dummy_var_235: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4204} {:cexpr "cpumask_check:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_15204;

  corral_source_split_15204:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.3, nr_cpu_ids);
    goto corral_source_split_15205;

  corral_source_split_15205:
    assume {:verifier.code 0} true;
    $i2 := $ule.i32($i1, $i0);
    goto corral_source_split_15206;

  corral_source_split_15206:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 4205} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i3);
    goto corral_source_split_15207;

  corral_source_split_15207:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_15208;

  corral_source_split_15208:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_15209;

  corral_source_split_15209:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_15210;

  corral_source_split_15210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4206} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 4207} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_15211;

  corral_source_split_15211:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_15212;

  corral_source_split_15212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i3, 0);
    goto corral_source_split_15235;

  corral_source_split_15235:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_15236;

  corral_source_split_15236:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_15237;

  corral_source_split_15237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4214} vslice_dummy_var_235 := ldv__builtin_expect($i24, 0);
    goto corral_source_split_15238;

  corral_source_split_15238:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_15214;

  corral_source_split_15214:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_15215;

  corral_source_split_15215:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_15216;

  corral_source_split_15216:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 4208} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_15217;

  corral_source_split_15217:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_15218;

  corral_source_split_15218:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_15219;

  corral_source_split_15219:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_15220;

  corral_source_split_15220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4209} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 4210} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_15221;

  corral_source_split_15221:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_15222;

  corral_source_split_15222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_15227;

  corral_source_split_15227:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_15228;

  corral_source_split_15228:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_15229;

  corral_source_split_15229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4212} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 4213} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_15230;

  corral_source_split_15230:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_15231;

  corral_source_split_15231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_15233;

  corral_source_split_15233:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_15224;

  corral_source_split_15224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4211} warn_slowpath_null(.str.54, 117);
    goto corral_source_split_15225;

  corral_source_split_15225:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 813921);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4215} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_15240;

  corral_source_split_15240:
    assume {:verifier.code 0} true;
    return;
}



const uv_setup_irq: ref;

axiom uv_setup_irq == $sub.ref(0, 814953);

procedure uv_setup_irq($p0: ref, $i1: i32, $i2: i32, $i3: i64, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uv_setup_irq($p0: ref, $i1: i32, $i2: i32, $i3: i64, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4216} {:cexpr "uv_setup_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 4217} {:cexpr "uv_setup_irq:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 4218} {:cexpr "uv_setup_irq:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 4219} {:cexpr "uv_setup_irq:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_15242;

  corral_source_split_15242:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4220} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 4221} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_15243;

  corral_source_split_15243:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 815985);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4222} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 4223} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_15245;

  corral_source_split_15245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4224} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 4225} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_15246;

  corral_source_split_15246:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 817017);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4226} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 4227} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_15248;

  corral_source_split_15248:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4228} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 4229} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_15249;

  corral_source_split_15249:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const uv_blade_to_pnode: ref;

axiom uv_blade_to_pnode == $sub.ref(0, 818049);

procedure uv_blade_to_pnode($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uv_blade_to_pnode($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4230} {:cexpr "uv_blade_to_pnode:arg:bid"} boogie_si_record_i32($i0);
    goto corral_source_split_15251;

  corral_source_split_15251:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.3, uv_blade_info);
    goto corral_source_split_15252;

  corral_source_split_15252:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i0);
    goto corral_source_split_15253;

  corral_source_split_15253:
    assume {:verifier.code 0} true;
    goto corral_source_split_15254;

  corral_source_split_15254:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($i2, 88)), $mul.ref(4, 1));
    goto corral_source_split_15255;

  corral_source_split_15255:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.3, $p4);
    goto corral_source_split_15256;

  corral_source_split_15256:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_15257;

  corral_source_split_15257:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const uv_blade_to_memory_nid: ref;

axiom uv_blade_to_memory_nid == $sub.ref(0, 819081);

procedure uv_blade_to_memory_nid($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uv_blade_to_memory_nid($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4231} {:cexpr "uv_blade_to_memory_nid:arg:bid"} boogie_si_record_i32($i0);
    goto corral_source_split_15259;

  corral_source_split_15259:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.3, uv_blade_info);
    goto corral_source_split_15260;

  corral_source_split_15260:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i0);
    goto corral_source_split_15261;

  corral_source_split_15261:
    assume {:verifier.code 0} true;
    goto corral_source_split_15262;

  corral_source_split_15262:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($i2, 88)), $mul.ref(6, 1));
    goto corral_source_split_15263;

  corral_source_split_15263:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.3, $p4);
    goto corral_source_split_15264;

  corral_source_split_15264:
    assume {:verifier.code 0} true;
    $i6 := $sext.i16.i32($i5);
    goto corral_source_split_15265;

  corral_source_split_15265:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const alloc_pages_node: ref;

axiom alloc_pages_node == $sub.ref(0, 820113);

procedure alloc_pages_node($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages_node($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4232} {:cexpr "alloc_pages_node:arg:nid"} boogie_si_record_i32($i0);
    call {:si_unique_call 4233} {:cexpr "alloc_pages_node:arg:gfp_mask"} boogie_si_record_i32($i1);
    call {:si_unique_call 4234} {:cexpr "alloc_pages_node:arg:order"} boogie_si_record_i32($i2);
    goto corral_source_split_15267;

  corral_source_split_15267:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 0);
    goto corral_source_split_15268;

  corral_source_split_15268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15273;

  corral_source_split_15273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4237} $p6 := node_zonelist($i5, $i1);
    goto corral_source_split_15274;

  corral_source_split_15274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4238} $p7 := __alloc_pages($i1, $i2, $p6);
    goto corral_source_split_15275;

  corral_source_split_15275:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15270;

  corral_source_split_15270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4235} $i4 := numa_node_id();
    call {:si_unique_call 4236} {:cexpr "nid"} boogie_si_record_i32($i4);
    goto corral_source_split_15271;

  corral_source_split_15271:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 821145);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15277;

  corral_source_split_15277:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_15278;

  corral_source_split_15278:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_15279;

  corral_source_split_15279:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_15280;

  corral_source_split_15280:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_15281;

  corral_source_split_15281:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_15282;

  corral_source_split_15282:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_15283;

  corral_source_split_15283:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __init_rwsem: ref;

axiom __init_rwsem == $sub.ref(0, 822177);

procedure __init_rwsem($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_rwsem($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15285;

  corral_source_split_15285:
    assume {:verifier.code 0} true;
    return;
}



const gru_chiplet_paddr: ref;

axiom gru_chiplet_paddr == $sub.ref(0, 823209);

procedure gru_chiplet_paddr($i0: i64, $i1: i32, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation gru_chiplet_paddr($i0: i64, $i1: i32, $i2: i32) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4239} {:cexpr "gru_chiplet_paddr:arg:paddr"} boogie_si_record_i64($i0);
    call {:si_unique_call 4240} {:cexpr "gru_chiplet_paddr:arg:pnode"} boogie_si_record_i32($i1);
    call {:si_unique_call 4241} {:cexpr "gru_chiplet_paddr:arg:chiplet"} boogie_si_record_i32($i2);
    goto corral_source_split_15287;

  corral_source_split_15287:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32($i1, 2);
    goto corral_source_split_15288;

  corral_source_split_15288:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i2);
    goto corral_source_split_15289;

  corral_source_split_15289:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_15290;

  corral_source_split_15290:
    assume {:verifier.code 0} true;
    $i6 := $mul.i64($i5, 134217728);
    goto corral_source_split_15291;

  corral_source_split_15291:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, $i0);
    goto corral_source_split_15292;

  corral_source_split_15292:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const gru_chiplet_vaddr: ref;

axiom gru_chiplet_vaddr == $sub.ref(0, 824241);

procedure gru_chiplet_vaddr($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation gru_chiplet_vaddr($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4242} {:cexpr "gru_chiplet_vaddr:arg:pnode"} boogie_si_record_i32($i1);
    call {:si_unique_call 4243} {:cexpr "gru_chiplet_vaddr:arg:chiplet"} boogie_si_record_i32($i2);
    goto corral_source_split_15294;

  corral_source_split_15294:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32($i1, 2);
    goto corral_source_split_15295;

  corral_source_split_15295:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i2);
    goto corral_source_split_15296;

  corral_source_split_15296:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_15297;

  corral_source_split_15297:
    assume {:verifier.code 0} true;
    $i6 := $mul.i64($i5, 134217728);
    goto corral_source_split_15298;

  corral_source_split_15298:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p0, $mul.ref($i6, 1));
    goto corral_source_split_15299;

  corral_source_split_15299:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const gru_init_chiplet: ref;

axiom gru_init_chiplet == $sub.ref(0, 825273);

procedure gru_init_chiplet($p0: ref, $i1: i64, $p2: ref, $i3: i32, $i4: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, $CurrAddr;



implementation gru_init_chiplet($p0: ref, $i1: i64, $p2: ref, $i3: i32, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $p32: ref;
  var $i33: i8;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i59: i32;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var vslice_dummy_var_236: ref;
  var vslice_dummy_var_237: ref;
  var vslice_dummy_var_238: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4244} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4245} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 4246} {:cexpr "gru_init_chiplet:arg:paddr"} boogie_si_record_i64($i1);
    call {:si_unique_call 4247} {:cexpr "gru_init_chiplet:arg:blade_id"} boogie_si_record_i32($i3);
    call {:si_unique_call 4248} {:cexpr "gru_init_chiplet:arg:chiplet_id"} boogie_si_record_i32($i4);
    goto corral_source_split_15301;

  corral_source_split_15301:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_15302;

  corral_source_split_15302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4249} vslice_dummy_var_236 := spinlock_check($p7);
    goto corral_source_split_15303;

  corral_source_split_15303:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_15304;

  corral_source_split_15304:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_15305;

  corral_source_split_15305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4250} __raw_spin_lock_init($p11, .str.66, $p5);
    goto corral_source_split_15306;

  corral_source_split_15306:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(32, 1));
    goto corral_source_split_15307;

  corral_source_split_15307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4251} vslice_dummy_var_237 := spinlock_check($p12);
    goto corral_source_split_15308;

  corral_source_split_15308:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_15309;

  corral_source_split_15309:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_15310;

  corral_source_split_15310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4252} __raw_spin_lock_init($p16, .str.67, $p6);
    goto corral_source_split_15311;

  corral_source_split_15311:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(8, 1));
    goto corral_source_split_15312;

  corral_source_split_15312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, $i1);
    goto corral_source_split_15313;

  corral_source_split_15313:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_15314;

  corral_source_split_15314:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p2);
    goto corral_source_split_15315;

  corral_source_split_15315:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i3);
    goto corral_source_split_15316;

  corral_source_split_15316:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_15317;

  corral_source_split_15317:
    assume {:verifier.code 0} true;
    $i21 := $mul.i32($i20, 2);
    goto corral_source_split_15318;

  corral_source_split_15318:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i4);
    goto corral_source_split_15319;

  corral_source_split_15319:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_15320;

  corral_source_split_15320:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i21, $i23);
    goto corral_source_split_15321;

  corral_source_split_15321:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_15322;

  corral_source_split_15322:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_15323;

  corral_source_split_15323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, $i25);
    goto corral_source_split_15324;

  corral_source_split_15324:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i3);
    goto corral_source_split_15325;

  corral_source_split_15325:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref($i27, 8));
    goto corral_source_split_15326;

  corral_source_split_15326:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.4, $p28);
    goto corral_source_split_15327;

  corral_source_split_15327:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(0, 1));
    goto corral_source_split_15328;

  corral_source_split_15328:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p29);
    goto corral_source_split_15329;

  corral_source_split_15329:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i3);
    goto corral_source_split_15330;

  corral_source_split_15330:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(26, 1));
    goto corral_source_split_15331;

  corral_source_split_15331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $i31);
    goto corral_source_split_15332;

  corral_source_split_15332:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i4);
    goto corral_source_split_15333;

  corral_source_split_15333:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(28, 1));
    goto corral_source_split_15334;

  corral_source_split_15334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i33);
    goto corral_source_split_15335;

  corral_source_split_15335:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(200, 1));
    goto corral_source_split_15336;

  corral_source_split_15336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, $sub.i64(0, 1));
    goto corral_source_split_15337;

  corral_source_split_15337:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(208, 1));
    goto corral_source_split_15338;

  corral_source_split_15338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, 4294967295);
    goto corral_source_split_15339;

  corral_source_split_15339:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(180, 1));
    goto corral_source_split_15340;

  corral_source_split_15340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 16777200);
    goto corral_source_split_15341;

  corral_source_split_15341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4253} gru_tgh_flush_init($p0);
    goto corral_source_split_15342;

  corral_source_split_15342:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_15343;

  corral_source_split_15343:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_15344;

  corral_source_split_15344:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_15345;

  corral_source_split_15345:
    assume {:verifier.code 0} true;
    $i41 := $M.22;
    goto corral_source_split_15346;

  corral_source_split_15346:
    assume {:verifier.code 0} true;
    $i42 := $uge.i32($i40, $i41);
    goto corral_source_split_15347;

  corral_source_split_15347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i47 := $M.1;
    goto corral_source_split_15356;

  corral_source_split_15356:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i47);
    goto corral_source_split_15357;

  corral_source_split_15357:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 1);
    goto corral_source_split_15358;

  corral_source_split_15358:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_15359;

  corral_source_split_15359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i51 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4264} __bad_size_call_parameter();
    goto corral_source_split_15379;

  corral_source_split_15379:
    assume {:verifier.code 0} true;
    $i59 := $u0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_15369;

  corral_source_split_15369:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_15370;

  corral_source_split_15370:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.0, $p63);
    goto corral_source_split_15371;

  corral_source_split_15371:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_15372;

  corral_source_split_15372:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_15373;

  corral_source_split_15373:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_15374;

  corral_source_split_15374:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(8, 1));
    goto corral_source_split_15375;

  corral_source_split_15375:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_15376;

  corral_source_split_15376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4263} vslice_dummy_var_238 := printk.ref.i32.ref.i32.i32.ref.i64(.str.68, $i59, .str.69, $i3, $i65, $p67, $i69);
    goto corral_source_split_15377;

  corral_source_split_15377:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb11:
    assume $i53 == 1;
    call {:si_unique_call 4255} $i62 := devirtbounce(0, cpu_number);
    call {:si_unique_call 4256} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i62);
    goto corral_source_split_15361;

  corral_source_split_15361:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i59 := $i62;
    goto $bb23;

  $bb9:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i54 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb13;

  $bb14:
    assume $i54 == 1;
    call {:si_unique_call 4257} $i61 := devirtbounce(0, cpu_number);
    call {:si_unique_call 4258} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i61);
    goto corral_source_split_15363;

  corral_source_split_15363:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i59 := $i61;
    goto $bb23;

  $bb7:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i55 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb13;

  $bb18:
    assume $i56 == 1;
    call {:si_unique_call 4259} $i60 := devirtbounce(0, cpu_number);
    call {:si_unique_call 4260} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i60);
    goto corral_source_split_15365;

  corral_source_split_15365:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i59 := $i60;
    goto $bb23;

  $bb16:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i57 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb13;

  $bb20:
    assume $i57 == 1;
    call {:si_unique_call 4261} $i58 := devirtbounce(0, cpu_number);
    call {:si_unique_call 4262} {:cexpr "pfo_ret__"} boogie_si_record_i32($i58);
    goto corral_source_split_15367;

  corral_source_split_15367:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb23;

  $bb1:
    assume $i42 == 1;
    goto corral_source_split_15349;

  corral_source_split_15349:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_15350;

  corral_source_split_15350:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_15351;

  corral_source_split_15351:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_15352;

  corral_source_split_15352:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 1);
    goto corral_source_split_15353;

  corral_source_split_15353:
    assume {:verifier.code 0} true;
    $M.22 := $i46;
    call {:si_unique_call 4254} {:cexpr "gru_max_gids"} boogie_si_record_i32($i46);
    goto corral_source_split_15354;

  corral_source_split_15354:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gru_tgh_flush_init: ref;

axiom gru_tgh_flush_init == $sub.ref(0, 826305);

procedure gru_tgh_flush_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gru_tgh_flush_init($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15381;

  corral_source_split_15381:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(26, 1));
    goto corral_source_split_15382;

  corral_source_split_15382:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_15383;

  corral_source_split_15383:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_15384;

  corral_source_split_15384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4265} $i4 := uv_blade_nr_possible_cpus($i3);
    call {:si_unique_call 4266} {:cexpr "cpus"} boogie_si_record_i32($i4);
    goto corral_source_split_15385;

  corral_source_split_15385:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_15386;

  corral_source_split_15386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_15404;

  corral_source_split_15404:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_15405;

  corral_source_split_15405:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(29, 1));
    goto corral_source_split_15406;

  corral_source_split_15406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i16);
    goto corral_source_split_15407;

  corral_source_split_15407:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32(1, $i15);
    goto corral_source_split_15408;

  corral_source_split_15408:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, $i4);
    goto corral_source_split_15409;

  corral_source_split_15409:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, $sub.i32(0, 1));
    goto corral_source_split_15410;

  corral_source_split_15410:
    assume {:verifier.code 0} true;
    $i21 := $ashr.i32($i20, $i15);
    goto corral_source_split_15411;

  corral_source_split_15411:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_15412;

  corral_source_split_15412:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 424)), $mul.ref(30, 1));
    goto corral_source_split_15413;

  corral_source_split_15413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_15414;

  corral_source_split_15414:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_15388;

  corral_source_split_15388:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i4, $sub.i32(0, 1));
    goto corral_source_split_15389;

  corral_source_split_15389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4267} $i7 := fls($i6);
    call {:si_unique_call 4268} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_15390;

  corral_source_split_15390:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32(1, $i7);
    call {:si_unique_call 4269} {:cexpr "n"} boogie_si_record_i32($i8);
    goto corral_source_split_15391;

  corral_source_split_15391:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $sub.i32(0, 1));
    goto corral_source_split_15392;

  corral_source_split_15392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4270} $i10 := fls($i9);
    call {:si_unique_call 4271} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_15393;

  corral_source_split_15393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4272} $i11 := fls(15);
    call {:si_unique_call 4273} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_15394;

  corral_source_split_15394:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i10, $i11);
    call {:si_unique_call 4274} {:cexpr "_max2"} boogie_si_record_i32($i12);
    goto corral_source_split_15395;

  corral_source_split_15395:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32(0, $i12);
    goto corral_source_split_15396;

  corral_source_split_15396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    goto corral_source_split_15400;

  corral_source_split_15400:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_15402;

  corral_source_split_15402:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_15398;

  corral_source_split_15398:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb5;
}



const fls: ref;

axiom fls == $sub.ref(0, 827337);

procedure fls($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fls($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4275} {:cexpr "fls:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 4276} $i1 := devirtbounce.22(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 4277} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_15416;

  corral_source_split_15416:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_15417;

  corral_source_split_15417:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const numa_node_id: ref;

axiom numa_node_id == $sub.ref(0, 828369);

procedure numa_node_id() returns ($r: i32);
  free requires assertsPassed;



implementation numa_node_id() returns ($r: i32)
{
  var $i0: i1;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i0 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i0} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i0 == 1);
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4286} __bad_size_call_parameter();
    goto corral_source_split_15429;

  corral_source_split_15429:
    assume {:verifier.code 0} true;
    $i8 := $u0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_15427;

  corral_source_split_15427:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb6:
    assume $i2 == 1;
    call {:si_unique_call 4278} $i11 := devirtbounce(0, numa_node);
    call {:si_unique_call 4279} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i11);
    goto corral_source_split_15419;

  corral_source_split_15419:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb18;

  $bb4:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb9:
    assume $i3 == 1;
    call {:si_unique_call 4280} $i10 := devirtbounce(0, numa_node);
    call {:si_unique_call 4281} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i10);
    goto corral_source_split_15421;

  corral_source_split_15421:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb18;

  $bb2:
    assume $i0 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb13:
    assume $i5 == 1;
    call {:si_unique_call 4282} $i9 := devirtbounce(0, numa_node);
    call {:si_unique_call 4283} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i9);
    goto corral_source_split_15423;

  corral_source_split_15423:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb18;

  $bb11:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb15:
    assume $i6 == 1;
    call {:si_unique_call 4284} $i7 := devirtbounce(0, numa_node);
    call {:si_unique_call 4285} {:cexpr "pfo_ret__"} boogie_si_record_i32($i7);
    goto corral_source_split_15425;

  corral_source_split_15425:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb18;
}



const node_zonelist: ref;

axiom node_zonelist == $sub.ref(0, 829401);

procedure node_zonelist($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation node_zonelist($i0: i32, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4287} {:cexpr "node_zonelist:arg:nid"} boogie_si_record_i32($i0);
    call {:si_unique_call 4288} {:cexpr "node_zonelist:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_15431;

  corral_source_split_15431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4289} $i2 := gfp_zonelist($i1);
    call {:si_unique_call 4290} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_15432;

  corral_source_split_15432:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i0);
    goto corral_source_split_15433;

  corral_source_split_15433:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(node_data, $mul.ref(0, 0)), $mul.ref($i3, 8));
    goto corral_source_split_15434;

  corral_source_split_15434:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.3, $p4);
    goto corral_source_split_15435;

  corral_source_split_15435:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 157328)), $mul.ref(8384, 1));
    goto corral_source_split_15436;

  corral_source_split_15436:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_15437;

  corral_source_split_15437:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i2);
    goto corral_source_split_15438;

  corral_source_split_15438:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 74272));
    goto corral_source_split_15439;

  corral_source_split_15439:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;
}



const __alloc_pages: ref;

axiom __alloc_pages == $sub.ref(0, 830433);

procedure __alloc_pages($i0: i32, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_pages($i0: i32, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4291} {:cexpr "__alloc_pages:arg:gfp_mask"} boogie_si_record_i32($i0);
    call {:si_unique_call 4292} {:cexpr "__alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_15441;

  corral_source_split_15441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4293} $p3 := __alloc_pages_nodemask($i0, $i1, $p2, $0.ref);
    goto corral_source_split_15442;

  corral_source_split_15442:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __alloc_pages_nodemask: ref;

axiom __alloc_pages_nodemask == $sub.ref(0, 831465);

procedure __alloc_pages_nodemask($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_pages_nodemask($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4294} {:cexpr "__alloc_pages_nodemask:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 4295} {:cexpr "__alloc_pages_nodemask:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_15444;

  corral_source_split_15444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4296} $p4 := external_alloc();
    goto corral_source_split_15445;

  corral_source_split_15445:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_15446;

  corral_source_split_15446:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const gfp_zonelist: ref;

axiom gfp_zonelist == $sub.ref(0, 832497);

procedure gfp_zonelist($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gfp_zonelist($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4297} {:cexpr "gfp_zonelist:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_15448;

  corral_source_split_15448:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 262144);
    goto corral_source_split_15449;

  corral_source_split_15449:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_15450;

  corral_source_split_15450:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_15451;

  corral_source_split_15451:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_15452;

  corral_source_split_15452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4298} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 4299} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_15453;

  corral_source_split_15453:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_15454;

  corral_source_split_15454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15458;

  corral_source_split_15458:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_15456;

  corral_source_split_15456:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const proc_mkdir: ref;

axiom proc_mkdir == $sub.ref(0, 833529);

procedure proc_mkdir($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_mkdir($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15460;

  corral_source_split_15460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4300} $p2 := external_alloc();
    goto corral_source_split_15461;

  corral_source_split_15461:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_15462;

  corral_source_split_15462:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const create_proc_file: ref;

axiom create_proc_file == $sub.ref(0, 834561);

procedure create_proc_file($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.107;



implementation create_proc_file($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15464;

  corral_source_split_15464:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_15465;

  corral_source_split_15465:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.106, $p1);
    goto corral_source_split_15466;

  corral_source_split_15466:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_15467;

  corral_source_split_15467:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.110, $p3);
    goto corral_source_split_15468;

  corral_source_split_15468:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_15469;

  corral_source_split_15469:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_15470;

  corral_source_split_15470:
    assume {:verifier.code 0} true;
    $p7 := $M.105;
    goto corral_source_split_15471;

  corral_source_split_15471:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_15472;

  corral_source_split_15472:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.111, $p8);
    goto corral_source_split_15473;

  corral_source_split_15473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4301} $p10 := proc_create($p2, $i6, $p7, $p9);
    goto corral_source_split_15474;

  corral_source_split_15474:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_15475;

  corral_source_split_15475:
    assume {:verifier.code 0} true;
    $M.107 := $store.ref($M.107, $p11, $p10);
    goto corral_source_split_15476;

  corral_source_split_15476:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_15477;

  corral_source_split_15477:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.107, $p12);
    goto corral_source_split_15478;

  corral_source_split_15478:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_15479;

  corral_source_split_15479:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_15480;

  corral_source_split_15480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15484;

  corral_source_split_15484:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_15482;

  corral_source_split_15482:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 1);
    goto $bb3;
}



const proc_create: ref;

axiom proc_create == $sub.ref(0, 835593);

procedure proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4302} {:cexpr "proc_create:arg:mode"} boogie_si_record_i16($i1);
    goto corral_source_split_15486;

  corral_source_split_15486:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_15487;

  corral_source_split_15487:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_15488;

  corral_source_split_15488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4303} $p6 := proc_create_data($p0, $i5, $p2, $p3, $0.ref);
    goto corral_source_split_15489;

  corral_source_split_15489:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const proc_create_data: ref;

axiom proc_create_data == $sub.ref(0, 836625);

procedure proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4304} {:cexpr "proc_create_data:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_15491;

  corral_source_split_15491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4305} $p5 := external_alloc();
    goto corral_source_split_15492;

  corral_source_split_15492:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_15493;

  corral_source_split_15493:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const misc_register: ref;

axiom misc_register == $sub.ref(0, 837657);

procedure misc_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation misc_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15495;

  corral_source_split_15495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4306} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4307} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_15496;

  corral_source_split_15496:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_file_operations_3: ref;

axiom ldv_file_operations_3 == $sub.ref(0, 838689);

procedure ldv_file_operations_3();
  free requires assertsPassed;
  modifies $M.81, $M.80, $M.0, $CurrAddr;



implementation ldv_file_operations_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15498;

  corral_source_split_15498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4308} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_15499;

  corral_source_split_15499:
    assume {:verifier.code 0} true;
    goto corral_source_split_15500;

  corral_source_split_15500:
    assume {:verifier.code 0} true;
    $M.81 := $p0;
    goto corral_source_split_15501;

  corral_source_split_15501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4309} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_15502;

  corral_source_split_15502:
    assume {:verifier.code 0} true;
    goto corral_source_split_15503;

  corral_source_split_15503:
    assume {:verifier.code 0} true;
    $M.80 := $p2;
    goto corral_source_split_15504;

  corral_source_split_15504:
    assume {:verifier.code 0} true;
    return;
}



const uv_local_mmr_address: ref;

axiom uv_local_mmr_address == $sub.ref(0, 839721);

procedure uv_local_mmr_address($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation uv_local_mmr_address($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var vslice_dummy_var_239: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4310} {:cexpr "uv_local_mmr_address:arg:offset"} boogie_si_record_i64($i0);
    goto corral_source_split_15506;

  corral_source_split_15506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4311} $i1 := is_uv1_hub();
    call {:si_unique_call 4312} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_15507;

  corral_source_split_15507:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_15508;

  corral_source_split_15508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i4 := 4093640704;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15513;

  corral_source_split_15513:
    assume {:verifier.code 0} true;
    $i5 := $or.i64($i4, $i0);
    goto corral_source_split_15514;

  corral_source_split_15514:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, $sub.i64(0, 131941395333120));
    goto corral_source_split_15515;

  corral_source_split_15515:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_15516;

  corral_source_split_15516:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_15510;

  corral_source_split_15510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4313} vslice_dummy_var_239 := is_uv2_hub();
    goto corral_source_split_15511;

  corral_source_split_15511:
    assume {:verifier.code 0} true;
    $i4 := 4194304000;
    goto $bb3;
}



const readq: ref;

axiom readq == $sub.ref(0, 840753);

procedure readq($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation readq($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15518;

  corral_source_split_15518:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 4314} $i2 := devirtbounce.23(0, $p1);
    call {:si_unique_call 4315} {:cexpr "ret"} boogie_si_record_i64($i2);
    goto corral_source_split_15519;

  corral_source_split_15519:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const is_uv1_hub: ref;

axiom is_uv1_hub == $sub.ref(0, 841785);

procedure is_uv1_hub() returns ($r: i32);
  free requires assertsPassed;



implementation is_uv1_hub() returns ($r: i32)
{
  var $i0: i64;
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4316} $i0 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 4317} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i0);
    goto corral_source_split_15521;

  corral_source_split_15521:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_15522;

  corral_source_split_15522:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(20, 1));
    goto corral_source_split_15523;

  corral_source_split_15523:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.3, $p2);
    goto corral_source_split_15524;

  corral_source_split_15524:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_15525;

  corral_source_split_15525:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, 2);
    goto corral_source_split_15526;

  corral_source_split_15526:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_15527;

  corral_source_split_15527:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const is_uv2_hub: ref;

axiom is_uv2_hub == $sub.ref(0, 842817);

procedure is_uv2_hub() returns ($r: i32);
  free requires assertsPassed;



implementation is_uv2_hub() returns ($r: i32)
{
  var $i0: i64;
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4318} $i0 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 4319} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i0);
    goto corral_source_split_15529;

  corral_source_split_15529:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_15530;

  corral_source_split_15530:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(20, 1));
    goto corral_source_split_15531;

  corral_source_split_15531:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.3, $p2);
    goto corral_source_split_15532;

  corral_source_split_15532:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_15533;

  corral_source_split_15533:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 2);
    goto corral_source_split_15534;

  corral_source_split_15534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_15547;

  corral_source_split_15547:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i5 == 1;
    call {:si_unique_call 4320} $i6 := devirtbounce.15(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 4321} {:cexpr "tcp_ptr_____0"} boogie_si_record_i64($i6);
    goto corral_source_split_15536;

  corral_source_split_15536:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_15537;

  corral_source_split_15537:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 232)), $mul.ref(20, 1));
    goto corral_source_split_15538;

  corral_source_split_15538:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.3, $p8);
    goto corral_source_split_15539;

  corral_source_split_15539:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_15540;

  corral_source_split_15540:
    assume {:verifier.code 0} true;
    $i11 := $ule.i32($i10, 4);
    goto corral_source_split_15541;

  corral_source_split_15541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_15545;

  corral_source_split_15545:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_15543;

  corral_source_split_15543:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb5;
}



const is_uv_system: ref;

axiom is_uv_system == $sub.ref(0, 843849);

procedure is_uv_system() returns ($r: i32);
  free requires assertsPassed;



implementation is_uv_system() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15549;

  corral_source_split_15549:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4322} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4323} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15550;

  corral_source_split_15550:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const gru_kservices_exit: ref;

axiom gru_kservices_exit == $sub.ref(0, 844881);

procedure gru_kservices_exit();
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation gru_kservices_exit()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15552;

  corral_source_split_15552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4324} $i0 := gru_free_kernel_contexts();
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    call {:si_unique_call 4325} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_15553;

  corral_source_split_15553:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15554;

  corral_source_split_15554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 4326} devirtbounce.6(0, .str.46, 1160, 12);
    goto corral_source_split_15556;

  corral_source_split_15556:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call gru_kservices_exit_loop_$bb3();
    goto $bb3_last;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_misc_deregister_16: ref;

axiom ldv_misc_deregister_16 == $sub.ref(0, 845913);

procedure ldv_misc_deregister_16($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.62;



implementation ldv_misc_deregister_16($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15558;

  corral_source_split_15558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4327} $i1 := misc_deregister($p0);
    call {:si_unique_call 4328} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_15559;

  corral_source_split_15559:
    assume {:verifier.code 0} true;
    $M.62 := 0;
    call {:si_unique_call 4329} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_15560;

  corral_source_split_15560:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_seq_release_116: ref;

axiom ldv_seq_release_116 == $sub.ref(0, 846945);

procedure ldv_seq_release_116($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.56;



implementation ldv_seq_release_116($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15562;

  corral_source_split_15562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4330} $i2 := seq_release($p0, $p1);
    call {:si_unique_call 4331} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_15563;

  corral_source_split_15563:
    assume {:verifier.code 0} true;
    $M.56 := 0;
    call {:si_unique_call 4332} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_15564;

  corral_source_split_15564:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_probe_8: ref;

axiom ldv_probe_8 == $sub.ref(0, 847977);

procedure ldv_probe_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15566;

  corral_source_split_15566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4333} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15567;

  corral_source_split_15567:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_seq_release_117: ref;

axiom ldv_seq_release_117 == $sub.ref(0, 849009);

procedure ldv_seq_release_117($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.56;



implementation ldv_seq_release_117($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15569;

  corral_source_split_15569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4335} $i2 := seq_release($p0, $p1);
    call {:si_unique_call 4336} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_15570;

  corral_source_split_15570:
    assume {:verifier.code 0} true;
    $M.56 := 0;
    call {:si_unique_call 4337} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_15571;

  corral_source_split_15571:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 850041);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4338} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_15573;

  corral_source_split_15573:
    assume {:verifier.code 1} true;
    goto corral_source_split_15574;

  corral_source_split_15574:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_15575;

  corral_source_split_15575:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 851073);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 852105);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 853137);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15577;

  corral_source_split_15577:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_15578;

  corral_source_split_15578:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 854169);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 855201);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 856233);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 857265);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 858297);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 859329);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 860361);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 861393);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 862425);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 863457);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15580;

  corral_source_split_15580:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4339} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 4340} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 4341} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15581;

  corral_source_split_15581:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_15582;

  corral_source_split_15582:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15586;

  corral_source_split_15586:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_15587;

  corral_source_split_15587:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4342} __VERIFIER_assume($i4);
    goto corral_source_split_15588;

  corral_source_split_15588:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15584;

  corral_source_split_15584:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 864489);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 865521);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 866553);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 867585);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 868617);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15590;

  corral_source_split_15590:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4343} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 4344} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 4345} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15591;

  corral_source_split_15591:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_15592;

  corral_source_split_15592:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15596;

  corral_source_split_15596:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_15597;

  corral_source_split_15597:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4346} __VERIFIER_assume($i4);
    goto corral_source_split_15598;

  corral_source_split_15598:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15594;

  corral_source_split_15594:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 869649);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 870681);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 871713);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 872745);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 873777);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15600;

  corral_source_split_15600:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4347} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 4348} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 4349} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15601;

  corral_source_split_15601:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4350} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 4351} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 4352} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_15602;

  corral_source_split_15602:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4353} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 4354} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 4355} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_15603;

  corral_source_split_15603:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_15604;

  corral_source_split_15604:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15609;

  corral_source_split_15609:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_15610;

  corral_source_split_15610:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4356} __VERIFIER_assume($i7);
    goto corral_source_split_15611;

  corral_source_split_15611:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_15612;

  corral_source_split_15612:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_15618;

  corral_source_split_15618:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_15619;

  corral_source_split_15619:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4357} __VERIFIER_assume($i11);
    goto corral_source_split_15620;

  corral_source_split_15620:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_15616;

  corral_source_split_15616:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15606;

  corral_source_split_15606:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_15607;

  corral_source_split_15607:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15614;

  corral_source_split_15614:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 874809);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 875841);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 876873);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 877905);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 878937);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 879969);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 881001);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 882033);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 883065);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15622;

  corral_source_split_15622:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4358} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 4359} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15623;

  corral_source_split_15623:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15624;

  corral_source_split_15624:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 4360} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_15625;

  corral_source_split_15625:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_15626;

  corral_source_split_15626:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_15627;

  corral_source_split_15627:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_15628;

  corral_source_split_15628:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_15635;

  corral_source_split_15635:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_15636;

  corral_source_split_15636:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_15637;

  corral_source_split_15637:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_15638;

  corral_source_split_15638:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_15630;

  corral_source_split_15630:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_15631;

  corral_source_split_15631:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4361} __VERIFIER_assume($i10);
    goto corral_source_split_15632;

  corral_source_split_15632:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_15633;

  corral_source_split_15633:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 884097);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15640;

  corral_source_split_15640:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4362} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 4363} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 4364} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15641;

  corral_source_split_15641:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 885129);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15643;

  corral_source_split_15643:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4365} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 4366} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_15644;

  corral_source_split_15644:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 886161);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 887193);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 4367} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 4368} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 888225);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 889257);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15646;

  corral_source_split_15646:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_15647;

  corral_source_split_15647:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 890289);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4369} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 4370} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_15649;

  corral_source_split_15649:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4371} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 4372} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_15650;

  corral_source_split_15650:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_15651;

  corral_source_split_15651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_15655;

  corral_source_split_15655:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_15656;

  corral_source_split_15656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4373} $p6 := malloc($i5);
    goto corral_source_split_15657;

  corral_source_split_15657:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_15658;

  corral_source_split_15658:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_87 := $M.0;
    call {:si_unique_call 4374} cmdloc_dummy_var_88 := $memset.i8(cmdloc_dummy_var_87, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_88;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15660;

  corral_source_split_15660:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15653;

  corral_source_split_15653:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 891321);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 892353);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.104, $M.103, $M.102, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.106, $M.110, $M.111, $M.107, $M.151, $M.20, $M.21, $M.97, $M.87, $M.94, $M.77, $M.85, $M.90, $M.79, $M.82, $M.101, $M.105, $M.75, $M.73, $M.1, $M.22, $M.98, $M.32, $M.31, $M.4, $M.91, $M.68, $M.63, $M.67, $M.69, $M.99, $M.81, $M.62, $M.76, $M.83, $M.64, $M.84, $M.57, $M.80, $M.61, $M.100, $M.74, $M.96, $M.65, $M.88, $M.86, $M.72, $M.70, $M.56, $M.89, $M.92, $M.78, $M.95, $M.93, $M.71, $M.66, $M.202, $M.203, $M.204;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 4375} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.0 := $store.ref($M.0, gru_vm_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_vm_ops, $mul.ref(0, 88)), $mul.ref(8, 1)), gru_vma_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_vm_ops, $mul.ref(0, 88)), $mul.ref(16, 1)), gru_fault);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_vm_ops, $mul.ref(0, 88)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_vm_ops, $mul.ref(0, 88)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_vm_ops, $mul.ref(0, 88)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_vm_ops, $mul.ref(0, 88)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_vm_ops, $mul.ref(0, 88)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_vm_ops, $mul.ref(0, 88)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_vm_ops, $mul.ref(0, 88)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_vm_ops, $mul.ref(0, 88)), $mul.ref(80, 1)), $0.ref);
    $M.6 := 1;
    call {:si_unique_call 4376} {:cexpr "ldv_mutex_ts_ctxlock_of_gru_thread_state"} boogie_si_record_i32(1);
    $M.104 := 1;
    call {:si_unique_call 4377} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    $M.103 := 1;
    call {:si_unique_call 4378} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    $M.102 := 1;
    call {:si_unique_call 4379} {:cexpr "ldv_mutex_i_mutex_of_inode"} boogie_si_record_i32(1);
    $M.113 := $store.i8($M.113, __kstrtab_gru_copy_gpa, 103);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_gru_copy_gpa, $mul.ref(0, 13)), $mul.ref(1, 1)), 114);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_gru_copy_gpa, $mul.ref(0, 13)), $mul.ref(2, 1)), 117);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_gru_copy_gpa, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_gru_copy_gpa, $mul.ref(0, 13)), $mul.ref(4, 1)), 99);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_gru_copy_gpa, $mul.ref(0, 13)), $mul.ref(5, 1)), 111);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_gru_copy_gpa, $mul.ref(0, 13)), $mul.ref(6, 1)), 112);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_gru_copy_gpa, $mul.ref(0, 13)), $mul.ref(7, 1)), 121);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_gru_copy_gpa, $mul.ref(0, 13)), $mul.ref(8, 1)), 95);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_gru_copy_gpa, $mul.ref(0, 13)), $mul.ref(9, 1)), 103);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_gru_copy_gpa, $mul.ref(0, 13)), $mul.ref(10, 1)), 112);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_gru_copy_gpa, $mul.ref(0, 13)), $mul.ref(11, 1)), 97);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(__kstrtab_gru_copy_gpa, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.114 := $store.i8($M.114, __kstrtab_gru_read_gpa, 103);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_gru_read_gpa, $mul.ref(0, 13)), $mul.ref(1, 1)), 114);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_gru_read_gpa, $mul.ref(0, 13)), $mul.ref(2, 1)), 117);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_gru_read_gpa, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_gru_read_gpa, $mul.ref(0, 13)), $mul.ref(4, 1)), 114);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_gru_read_gpa, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_gru_read_gpa, $mul.ref(0, 13)), $mul.ref(6, 1)), 97);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_gru_read_gpa, $mul.ref(0, 13)), $mul.ref(7, 1)), 100);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_gru_read_gpa, $mul.ref(0, 13)), $mul.ref(8, 1)), 95);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_gru_read_gpa, $mul.ref(0, 13)), $mul.ref(9, 1)), 103);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_gru_read_gpa, $mul.ref(0, 13)), $mul.ref(10, 1)), 112);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_gru_read_gpa, $mul.ref(0, 13)), $mul.ref(11, 1)), 97);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(__kstrtab_gru_read_gpa, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.115 := $store.i8($M.115, __kstrtab_gru_get_next_message, 103);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(1, 1)), 114);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(2, 1)), 117);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(4, 1)), 103);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(5, 1)), 101);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(6, 1)), 116);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(8, 1)), 110);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(10, 1)), 120);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(11, 1)), 116);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(13, 1)), 109);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(15, 1)), 115);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(16, 1)), 115);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(18, 1)), 103);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(__kstrtab_gru_get_next_message, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.116 := $store.i8($M.116, __kstrtab_gru_free_message, 103);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(1, 1)), 114);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(2, 1)), 117);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(4, 1)), 102);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(5, 1)), 114);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(6, 1)), 101);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(7, 1)), 101);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(8, 1)), 95);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(9, 1)), 109);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(12, 1)), 115);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(13, 1)), 97);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(14, 1)), 103);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(__kstrtab_gru_free_message, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i8($M.117, __kstrtab_gru_send_message_gpa, 103);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(1, 1)), 114);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(2, 1)), 117);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(4, 1)), 115);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(5, 1)), 101);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(6, 1)), 110);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(7, 1)), 100);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(8, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(9, 1)), 109);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(11, 1)), 115);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(12, 1)), 115);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(13, 1)), 97);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(14, 1)), 103);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(16, 1)), 95);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(17, 1)), 103);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(18, 1)), 112);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(19, 1)), 97);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(__kstrtab_gru_send_message_gpa, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, __kstrtab_gru_create_message_queue, 103);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(1, 1)), 114);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(2, 1)), 117);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(4, 1)), 99);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(5, 1)), 114);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(6, 1)), 101);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(7, 1)), 97);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(8, 1)), 116);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(9, 1)), 101);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(10, 1)), 95);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(11, 1)), 109);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(13, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(14, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(15, 1)), 97);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(16, 1)), 103);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(17, 1)), 101);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(18, 1)), 95);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(19, 1)), 113);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(20, 1)), 117);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(21, 1)), 101);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(22, 1)), 117);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(__kstrtab_gru_create_message_queue, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.119 := $store.ref($M.119, cch_seq_ops, seq_start);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(cch_seq_ops, $mul.ref(0, 32)), $mul.ref(8, 1)), seq_stop);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(cch_seq_ops, $mul.ref(0, 32)), $mul.ref(16, 1)), seq_next);
    $M.122 := $store.ref($M.122, $add.ref($add.ref(cch_seq_ops, $mul.ref(0, 32)), $mul.ref(24, 1)), cch_seq_show);
    $M.119 := $store.ref($M.119, gru_seq_ops, seq_start);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(gru_seq_ops, $mul.ref(0, 32)), $mul.ref(8, 1)), seq_stop);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(gru_seq_ops, $mul.ref(0, 32)), $mul.ref(16, 1)), seq_next);
    $M.122 := $store.ref($M.122, $add.ref($add.ref(gru_seq_ops, $mul.ref(0, 32)), $mul.ref(24, 1)), gru_seq_show);
    $M.123 := $store.ref($M.123, gru_fops___0, $0.ref);
    $M.124 := $store.ref($M.124, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.127 := $store.ref($M.127, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.128 := $store.ref($M.128, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.130 := $store.ref($M.130, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.133 := $store.ref($M.133, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(96, 1)), gru_open);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(112, 1)), seq_release);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(gru_fops___0, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.123 := $store.ref($M.123, cch_fops, $0.ref);
    $M.124 := $store.ref($M.124, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.127 := $store.ref($M.127, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.128 := $store.ref($M.128, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.130 := $store.ref($M.130, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.133 := $store.ref($M.133, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), cch_open);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), seq_release);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(cch_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.123 := $store.ref($M.123, options_fops, $0.ref);
    $M.124 := $store.ref($M.124, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), options_write);
    $M.127 := $store.ref($M.127, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.128 := $store.ref($M.128, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.130 := $store.ref($M.130, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.133 := $store.ref($M.133, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), options_open);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), single_release);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(options_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.123 := $store.ref($M.123, mcs_statistics_fops, $0.ref);
    $M.124 := $store.ref($M.124, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), mcs_statistics_write);
    $M.127 := $store.ref($M.127, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.128 := $store.ref($M.128, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.130 := $store.ref($M.130, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.133 := $store.ref($M.133, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), mcs_statistics_open);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), single_release);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(mcs_statistics_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.123 := $store.ref($M.123, statistics_fops, $0.ref);
    $M.124 := $store.ref($M.124, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), statistics_write);
    $M.127 := $store.ref($M.127, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.128 := $store.ref($M.128, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.130 := $store.ref($M.130, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.133 := $store.ref($M.133, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), statistics_open);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), single_release);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(statistics_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.106 := $store.ref($M.106, proc_files, .str.124);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(8, 1)), 420);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(16, 1)), statistics_fops);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.106 := $store.ref($M.106, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(0, 1)), .str.125);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(8, 1)), 420);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(16, 1)), mcs_statistics_fops);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(24, 1)), $0.ref);
    $M.106 := $store.ref($M.106, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(0, 1)), .str.126);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(8, 1)), 420);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(16, 1)), options_fops);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(24, 1)), $0.ref);
    $M.106 := $store.ref($M.106, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(0, 1)), .str.127);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(8, 1)), 292);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(16, 1)), cch_fops);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(24, 1)), $0.ref);
    $M.106 := $store.ref($M.106, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(0, 1)), .str.128);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(8, 1)), 292);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(16, 1)), gru_fops___0);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(24, 1)), $0.ref);
    $M.106 := $store.ref($M.106, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(0, 1)), $0.ref);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(16, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(proc_files, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, gru_mmuops, gru_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_mmuops, $mul.ref(0, 64)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_mmuops, $mul.ref(0, 64)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_mmuops, $mul.ref(0, 64)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_mmuops, $mul.ref(0, 64)), $mul.ref(32, 1)), gru_invalidate_page);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_mmuops, $mul.ref(0, 64)), $mul.ref(40, 1)), gru_invalidate_range_start);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_mmuops, $mul.ref(0, 64)), $mul.ref(48, 1)), gru_invalidate_range_end);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_mmuops, $mul.ref(0, 64)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, gru_driver, .str.55);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(36, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gru_driver, $mul.ref(0, 120)), $mul.ref(112, 1)), $0.ref);
    $M.151 := $store.ref($M.151, gru_device, $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(44, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(312, 1)), .str.20);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(320, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(488, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(496, 1)), gru_driver);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(504, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(512, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(9, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(10, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(11, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(44, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(520, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(528, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(532, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(537, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(548, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(584, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(600, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(608, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1136, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1144, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1152, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1160, 1)), $0.ref);
    $M.151 := $store.i64($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1168, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1176, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1184, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1192, 1)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1208, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1216, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1240, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1248, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1256, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1260, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1336, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1336, 1)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1352, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1352, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1384, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1392, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1400, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1408, 1)), $0.ref);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1416, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(gru_device, $mul.ref(0, 1424)), $mul.ref(1417, 1)), 0);
    $M.20 := 0;
    call {:si_unique_call 4380} {:cexpr "max_user_dsr_bytes"} boogie_si_record_i32(0);
    $M.21 := 0;
    call {:si_unique_call 4381} {:cexpr "max_user_cbrs"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 4382} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.87 := $0.ref;
    $M.94 := 0;
    call {:si_unique_call 4383} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.77 := $0.ref;
    $M.85 := $0.ref;
    $M.90 := 0;
    call {:si_unique_call 4384} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.79 := $0.ref;
    $M.82 := 0;
    call {:si_unique_call 4385} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.101 := 0;
    call {:si_unique_call 4386} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.105 := $0.ref;
    $M.0 := $store.i64($M.0, mcs_op_statistics, 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(2, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(2, 24)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(3, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(3, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(3, 24)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(4, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(4, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(4, 24)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(5, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(5, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(5, 24)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(6, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(6, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(6, 24)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(7, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(7, 24)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(mcs_op_statistics, $mul.ref(0, 192)), $mul.ref(7, 24)), $mul.ref(16, 1)), 0);
    $M.75 := 0;
    call {:si_unique_call 4387} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 4388} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.1 := 0;
    call {:si_unique_call 4389} {:cexpr "gru_options"} boogie_si_record_i64(0);
    $M.22 := 0;
    call {:si_unique_call 4390} {:cexpr "gru_max_gids"} boogie_si_record_i32(0);
    $M.98 := $0.ref;
    $M.32 := 0;
    call {:si_unique_call 4391} {:cexpr "gru_end_paddr"} boogie_si_record_i64(0);
    $M.31 := 0;
    call {:si_unique_call 4392} {:cexpr "gru_start_paddr"} boogie_si_record_i64(0);
    $M.4 := $store.ref($M.4, gru_base, $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(2, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(3, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(4, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(5, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(6, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(7, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(8, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(9, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(10, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(11, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(12, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(13, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(14, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(15, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(16, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(17, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(18, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(19, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(20, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(21, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(22, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(23, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(24, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(25, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(26, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(27, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(28, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(29, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(30, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(31, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(32, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(33, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(34, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(35, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(36, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(37, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(38, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(39, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(40, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(41, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(42, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(43, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(44, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(45, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(46, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(47, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(48, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(49, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(50, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(51, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(52, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(53, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(54, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(55, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(56, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(57, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(58, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(59, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(60, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(61, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(62, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(63, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(64, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(65, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(66, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(67, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(68, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(69, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(70, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(71, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(72, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(73, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(74, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(75, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(76, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(77, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(78, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(79, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(80, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(81, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(82, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(83, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(84, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(85, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(86, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(87, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(88, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(89, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(90, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(91, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(92, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(93, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(94, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(95, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(96, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(97, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(98, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(99, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(100, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(101, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(102, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(103, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(104, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(105, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(106, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(107, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(108, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(109, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(110, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(111, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(112, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(113, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(114, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(115, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(116, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(117, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(118, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(119, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(120, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(121, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(122, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(123, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(124, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(125, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(126, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(127, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(128, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(129, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(130, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(131, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(132, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(133, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(134, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(135, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(136, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(137, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(138, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(139, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(140, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(141, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(142, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(143, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(144, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(145, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(146, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(147, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(148, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(149, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(150, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(151, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(152, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(153, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(154, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(155, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(156, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(157, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(158, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(159, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(160, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(161, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(162, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(163, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(164, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(165, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(166, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(167, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(168, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(169, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(170, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(171, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(172, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(173, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(174, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(175, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(176, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(177, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(178, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(179, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(180, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(181, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(182, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(183, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(184, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(185, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(186, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(187, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(188, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(189, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(190, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(191, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(192, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(193, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(194, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(195, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(196, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(197, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(198, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(199, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(200, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(201, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(202, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(203, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(204, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(205, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(206, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(207, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(208, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(209, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(210, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(211, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(212, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(213, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(214, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(215, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(216, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(217, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(218, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(219, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(220, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(221, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(222, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(223, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(224, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(225, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(226, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(227, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(228, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(229, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(230, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(231, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(232, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(233, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(234, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(235, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(236, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(237, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(238, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(239, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(240, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(241, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(242, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(243, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(244, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(245, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(246, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(247, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(248, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(249, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(250, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(251, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(252, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(253, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(254, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(255, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(256, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(257, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(258, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(259, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(260, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(261, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(262, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(263, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(264, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(265, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(266, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(267, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(268, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(269, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(270, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(271, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(272, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(273, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(274, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(275, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(276, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(277, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(278, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(279, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(280, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(281, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(282, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(283, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(284, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(285, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(286, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(287, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(288, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(289, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(290, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(291, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(292, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(293, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(294, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(295, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(296, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(297, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(298, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(299, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(300, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(301, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(302, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(303, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(304, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(305, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(306, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(307, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(308, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(309, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(310, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(311, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(312, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(313, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(314, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(315, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(316, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(317, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(318, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(319, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(320, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(321, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(322, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(323, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(324, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(325, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(326, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(327, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(328, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(329, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(330, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(331, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(332, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(333, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(334, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(335, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(336, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(337, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(338, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(339, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(340, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(341, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(342, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(343, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(344, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(345, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(346, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(347, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(348, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(349, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(350, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(351, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(352, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(353, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(354, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(355, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(356, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(357, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(358, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(359, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(360, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(361, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(362, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(363, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(364, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(365, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(366, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(367, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(368, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(369, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(370, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(371, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(372, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(373, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(374, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(375, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(376, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(377, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(378, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(379, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(380, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(381, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(382, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(383, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(384, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(385, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(386, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(387, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(388, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(389, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(390, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(391, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(392, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(393, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(394, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(395, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(396, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(397, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(398, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(399, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(400, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(401, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(402, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(403, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(404, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(405, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(406, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(407, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(408, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(409, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(410, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(411, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(412, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(413, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(414, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(415, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(416, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(417, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(418, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(419, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(420, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(421, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(422, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(423, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(424, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(425, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(426, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(427, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(428, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(429, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(430, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(431, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(432, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(433, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(434, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(435, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(436, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(437, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(438, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(439, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(440, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(441, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(442, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(443, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(444, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(445, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(446, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(447, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(448, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(449, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(450, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(451, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(452, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(453, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(454, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(455, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(456, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(457, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(458, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(459, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(460, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(461, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(462, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(463, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(464, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(465, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(466, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(467, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(468, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(469, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(470, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(471, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(472, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(473, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(474, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(475, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(476, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(477, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(478, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(479, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(480, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(481, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(482, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(483, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(484, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(485, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(486, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(487, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(488, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(489, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(490, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(491, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(492, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(493, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(494, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(495, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(496, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(497, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(498, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(499, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(500, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(501, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(502, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(503, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(504, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(505, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(506, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(507, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(508, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(509, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(510, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(511, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(512, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(513, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(514, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(515, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(516, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(517, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(518, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(519, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(520, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(521, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(522, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(523, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(524, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(525, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(526, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(527, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(528, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(529, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(530, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(531, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(532, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(533, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(534, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(535, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(536, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(537, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(538, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(539, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(540, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(541, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(542, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(543, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(544, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(545, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(546, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(547, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(548, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(549, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(550, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(551, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(552, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(553, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(554, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(555, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(556, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(557, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(558, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(559, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(560, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(561, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(562, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(563, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(564, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(565, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(566, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(567, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(568, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(569, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(570, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(571, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(572, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(573, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(574, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(575, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(576, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(577, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(578, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(579, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(580, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(581, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(582, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(583, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(584, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(585, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(586, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(587, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(588, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(589, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(590, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(591, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(592, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(593, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(594, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(595, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(596, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(597, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(598, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(599, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(600, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(601, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(602, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(603, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(604, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(605, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(606, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(607, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(608, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(609, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(610, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(611, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(612, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(613, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(614, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(615, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(616, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(617, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(618, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(619, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(620, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(621, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(622, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(623, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(624, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(625, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(626, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(627, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(628, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(629, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(630, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(631, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(632, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(633, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(634, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(635, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(636, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(637, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(638, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(639, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(640, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(641, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(642, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(643, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(644, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(645, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(646, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(647, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(648, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(649, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(650, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(651, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(652, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(653, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(654, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(655, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(656, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(657, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(658, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(659, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(660, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(661, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(662, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(663, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(664, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(665, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(666, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(667, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(668, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(669, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(670, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(671, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(672, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(673, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(674, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(675, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(676, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(677, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(678, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(679, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(680, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(681, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(682, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(683, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(684, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(685, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(686, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(687, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(688, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(689, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(690, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(691, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(692, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(693, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(694, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(695, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(696, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(697, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(698, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(699, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(700, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(701, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(702, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(703, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(704, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(705, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(706, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(707, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(708, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(709, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(710, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(711, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(712, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(713, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(714, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(715, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(716, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(717, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(718, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(719, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(720, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(721, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(722, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(723, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(724, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(725, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(726, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(727, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(728, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(729, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(730, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(731, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(732, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(733, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(734, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(735, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(736, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(737, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(738, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(739, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(740, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(741, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(742, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(743, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(744, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(745, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(746, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(747, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(748, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(749, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(750, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(751, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(752, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(753, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(754, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(755, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(756, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(757, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(758, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(759, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(760, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(761, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(762, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(763, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(764, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(765, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(766, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(767, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(768, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(769, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(770, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(771, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(772, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(773, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(774, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(775, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(776, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(777, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(778, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(779, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(780, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(781, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(782, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(783, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(784, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(785, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(786, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(787, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(788, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(789, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(790, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(791, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(792, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(793, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(794, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(795, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(796, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(797, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(798, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(799, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(800, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(801, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(802, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(803, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(804, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(805, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(806, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(807, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(808, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(809, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(810, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(811, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(812, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(813, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(814, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(815, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(816, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(817, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(818, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(819, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(820, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(821, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(822, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(823, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(824, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(825, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(826, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(827, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(828, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(829, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(830, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(831, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(832, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(833, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(834, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(835, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(836, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(837, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(838, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(839, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(840, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(841, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(842, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(843, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(844, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(845, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(846, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(847, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(848, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(849, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(850, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(851, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(852, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(853, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(854, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(855, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(856, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(857, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(858, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(859, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(860, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(861, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(862, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(863, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(864, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(865, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(866, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(867, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(868, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(869, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(870, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(871, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(872, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(873, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(874, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(875, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(876, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(877, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(878, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(879, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(880, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(881, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(882, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(883, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(884, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(885, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(886, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(887, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(888, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(889, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(890, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(891, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(892, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(893, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(894, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(895, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(896, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(897, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(898, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(899, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(900, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(901, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(902, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(903, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(904, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(905, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(906, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(907, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(908, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(909, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(910, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(911, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(912, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(913, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(914, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(915, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(916, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(917, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(918, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(919, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(920, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(921, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(922, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(923, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(924, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(925, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(926, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(927, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(928, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(929, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(930, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(931, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(932, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(933, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(934, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(935, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(936, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(937, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(938, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(939, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(940, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(941, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(942, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(943, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(944, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(945, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(946, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(947, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(948, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(949, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(950, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(951, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(952, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(953, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(954, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(955, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(956, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(957, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(958, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(959, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(960, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(961, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(962, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(963, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(964, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(965, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(966, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(967, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(968, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(969, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(970, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(971, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(972, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(973, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(974, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(975, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(976, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(977, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(978, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(979, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(980, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(981, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(982, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(983, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(984, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(985, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(986, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(987, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(988, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(989, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(990, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(991, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(992, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(993, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(994, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(995, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(996, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(997, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(998, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(999, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1000, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1001, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1002, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1003, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1004, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1005, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1006, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1007, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1008, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1009, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1010, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1011, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1012, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1013, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1014, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1015, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1016, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1017, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1018, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1019, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1020, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1021, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1022, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(1023, 8)), $0.ref);
    $M.0 := $store.i64($M.0, gru_stats, 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(40, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(56, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(72, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(80, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(88, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(96, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(112, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(120, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(128, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(136, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(144, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(152, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(160, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(168, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(176, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(184, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(192, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(200, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(208, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(216, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(224, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(232, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(240, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(248, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(256, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(264, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(272, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(280, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(288, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(296, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(304, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(320, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(328, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(336, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(344, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(352, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(360, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(368, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(376, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(384, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(392, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(400, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(408, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(416, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(424, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(432, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(440, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(448, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(456, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(464, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(472, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(480, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(488, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(496, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(504, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(512, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(520, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(528, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(536, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(544, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(552, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(560, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(568, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(576, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(584, 1)), $mul.ref(0, 1)), 0);
    $M.91 := $0.ref;
    $M.68 := 0;
    call {:si_unique_call 4393} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 4394} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 4395} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 4396} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.99 := $0.ref;
    $M.81 := $0.ref;
    $M.62 := 0;
    call {:si_unique_call 4397} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.76 := $0.ref;
    $M.83 := $0.ref;
    $M.64 := 0;
    call {:si_unique_call 4398} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.84 := $0.ref;
    $M.57 := $0.ref;
    $M.80 := $0.ref;
    $M.61 := $0.ref;
    $M.100 := $0.ref;
    $M.74 := $0.ref;
    $M.96 := $0.ref;
    $M.65 := 0;
    call {:si_unique_call 4399} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.88 := $0.ref;
    $M.86 := $0.ref;
    $M.72 := 0;
    call {:si_unique_call 4400} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 4401} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 4402} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.89 := $0.ref;
    $M.92 := $0.ref;
    $M.78 := $0.ref;
    $M.95 := $0.ref;
    $M.93 := $0.ref;
    $M.71 := 0;
    call {:si_unique_call 4403} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 4404} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.202 := $store.i8($M.202, .str.47, 71);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(1, 1)), 82);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(2, 1)), 85);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(3, 1)), 58);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(4, 1)), 37);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(5, 1)), 100);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(6, 1)), 32);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(7, 1)), 101);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(8, 1)), 120);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(9, 1)), 99);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(10, 1)), 101);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(11, 1)), 112);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(12, 1)), 116);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(13, 1)), 105);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(14, 1)), 111);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(15, 1)), 110);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(16, 1)), 58);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(17, 1)), 32);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(18, 1)), 99);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(19, 1)), 98);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(20, 1)), 32);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(21, 1)), 37);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(22, 1)), 112);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(23, 1)), 44);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(24, 1)), 32);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(25, 1)), 111);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(26, 1)), 112);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(27, 1)), 99);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(28, 1)), 32);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(29, 1)), 37);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(30, 1)), 100);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(31, 1)), 44);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(32, 1)), 32);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(33, 1)), 101);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(34, 1)), 120);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(35, 1)), 111);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(36, 1)), 112);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(37, 1)), 99);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(38, 1)), 32);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(39, 1)), 37);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(40, 1)), 100);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(41, 1)), 44);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(42, 1)), 32);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(43, 1)), 101);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(44, 1)), 99);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(45, 1)), 97);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(46, 1)), 117);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(47, 1)), 115);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(48, 1)), 101);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(49, 1)), 32);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(50, 1)), 48);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(51, 1)), 120);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(52, 1)), 37);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(53, 1)), 120);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(54, 1)), 44);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(55, 1)), 101);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(56, 1)), 120);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(57, 1)), 99);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(58, 1)), 100);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(59, 1)), 101);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(60, 1)), 116);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(61, 1)), 48);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(62, 1)), 32);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(63, 1)), 48);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(64, 1)), 120);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(65, 1)), 37);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(66, 1)), 108);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(67, 1)), 120);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(68, 1)), 44);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(69, 1)), 32);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(70, 1)), 101);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(71, 1)), 120);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(72, 1)), 99);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(73, 1)), 100);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(74, 1)), 101);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(75, 1)), 116);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(76, 1)), 49);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(77, 1)), 32);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(78, 1)), 48);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(79, 1)), 120);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(80, 1)), 37);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(81, 1)), 120);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(.str.47, $mul.ref(0, 83)), $mul.ref(82, 1)), 0);
    $M.203 := $store.i8($M.203, .str.48, 78);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(1, 1)), 111);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(2, 1)), 32);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(3, 1)), 101);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(4, 1)), 120);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(5, 1)), 99);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(6, 1)), 101);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(7, 1)), 112);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(8, 1)), 116);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(9, 1)), 105);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(10, 1)), 111);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(11, 1)), 110);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(.str.48, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.204 := $store.i8($M.204, .str.50, 103);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(1, 1)), 114);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(2, 1)), 117);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(4, 1)), 119);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(5, 1)), 97);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(6, 1)), 105);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(7, 1)), 116);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(9, 1)), 97);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(10, 1)), 98);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(11, 1)), 111);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(12, 1)), 114);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(13, 1)), 116);
    $M.204 := $store.i8($M.204, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    call {:si_unique_call 4405} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 893385);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 4406} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 894417);

procedure devirtbounce.1(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 895449);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 896481);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(seq_stop, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(gru_release, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(gru_free_message, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4407} gru_free_message($p1, $p2);
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4408} gru_release($p3, $p4);
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4409} seq_stop($p5, $p6);
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 897513);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 898545);

procedure devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(gru_get_next_message, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 4410} $p2 := gru_get_next_message($p1);
    $r := $p2;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 899577);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 900609);

procedure devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 901641);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 902673);

procedure devirtbounce.9(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 903705);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i7 := $eq.ref(seq_stop, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i7 == 1);
    $i6 := $eq.ref(gru_release, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i6 == 1);
    $i5 := $eq.ref(gru_free_message, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 4411} gru_free_message($p1, arg1);
    return;

  $bb3:
    assume $i6 == 1;
    $p2 := $bitcast.ref.ref(arg);
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4412} gru_release($p2, $p3);
    return;

  $bb4:
    assume $i7 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 4413} seq_stop($p4, arg1);
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 904737);

procedure devirtbounce.11(funcPtr: ref, arg: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 905769);

procedure devirtbounce.12(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 906801);

procedure devirtbounce.13(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 4414} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 907833);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.0, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(gru_read_gpa, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 4415} $i1 := gru_read_gpa(arg, arg1);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    $r := $i1;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 4416} $i2 := __builtinx_object_size();
    $r := $i2;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 908865);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 909897);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 910929);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 4417} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 911961);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(seq_stop, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(gru_release, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(gru_free_message, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4418} gru_free_message($p1, $p2);
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4419} gru_release($p3, $p4);
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4420} seq_stop($p5, $p6);
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 912993);

procedure devirtbounce.19(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64, arg4: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64, arg4: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 914025);

procedure devirtbounce.20(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 915057);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 916089);

procedure devirtbounce.22(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 4421} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 917121);

procedure devirtbounce.23(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.104, $M.103, $M.102, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.106, $M.110, $M.111, $M.107, $M.151, $M.20, $M.21, $M.97, $M.87, $M.94, $M.77, $M.85, $M.90, $M.79, $M.82, $M.101, $M.105, $M.75, $M.73, $M.1, $M.22, $M.98, $M.32, $M.31, $M.4, $M.91, $M.68, $M.63, $M.67, $M.69, $M.99, $M.81, $M.62, $M.76, $M.83, $M.64, $M.84, $M.57, $M.80, $M.61, $M.100, $M.74, $M.96, $M.65, $M.88, $M.86, $M.72, $M.70, $M.56, $M.89, $M.92, $M.78, $M.95, $M.93, $M.71, $M.66, $M.202, $M.203, $M.204, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 4422} __SMACK_static_init();
    call {:si_unique_call 4423} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.60, $M.56, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.0, $M.2, $M.73, $M.61, $M.75, $M.6, $M.104, $M.103, $M.102, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.106, $M.110, $M.111, $M.107, $M.151, $M.20, $M.21, $M.97, $M.87, $M.94, $M.77, $M.85, $M.90, $M.79, $M.82, $M.101, $M.105, $M.1, $M.22, $M.98, $M.32, $M.31, $M.4, $M.91, $M.99, $M.81, $M.76, $M.83, $M.84, $M.57, $M.80, $M.100, $M.74, $M.96, $M.88, $M.86, $M.89, $M.92, $M.78, $M.95, $M.93, $M.202, $M.203, $M.204, $CurrAddr, $M.58, $M.59, $M.5, $M.3, $M.10, $M.9, $M.23, $M.24, $M.25, $M.8, $M.26, $M.27, $M.108, $M.11, $M.28, $M.14, $M.15, $M.12, $M.16, $M.17, $M.29, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.53, $M.51, $M.50, $M.48, $M.47, $M.46, $M.44, $M.42, $M.41, $M.52, $M.49, $M.45, $M.43;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation gru_vma_close_loop_$bb33(in_$i34: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p37: ref, in_$p38: ref) returns (out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p37: ref, out_$p38: ref)
{

  entry:
    out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p37, out_$p38 := in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$p37, in_$p38;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  $bb38:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p37, out_$p38 := out_$p48, out_$p37;
    goto $bb38_dummy;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(in_$i34, out_$i49);
    goto corral_source_split_66;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_65;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_64;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p37, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_63;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} gts_drop(out_$p39);
    goto corral_source_split_62;

  SeqInstr_9:
    goto corral_source_split_61;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} ldv_mutex_unlock_13(out_$p46);
    goto SeqInstr_8;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p39, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_60;

  $bb36:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_6:
    goto corral_source_split_58;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} gru_unload_context(out_$p39, 0);
    goto SeqInstr_5;

  $bb35:
    assume out_$i45 == 1;
    goto corral_source_split_57;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_55;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_54;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_53;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p39, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_52;

  SeqInstr_3:
    goto corral_source_split_51;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} ldv_mutex_lock_12(out_$p41);
    goto SeqInstr_2;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p39, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_50;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} list_del(out_$p40);
    goto corral_source_split_49;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_48;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_47;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p37, out_$p38 := gru_vma_close_loop_$bb33(in_$i34, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p37, out_$p38);
    return;

  exit:
    return;
}



procedure gru_vma_close_loop_$bb33(in_$i34: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p37: ref, in_$p38: ref) returns (out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p37: ref, out_$p38: ref);
  modifies $M.0, $M.6, assertsPassed, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_fault_loop_$bb36(in_$p2: ref, in_$p32: ref, in_$p36: ref, in_$p37: ref, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$p55: ref, in_$i56: i64, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_vslice_dummy_var_91: i64) returns (out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$p55: ref, out_$i56: i64, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_vslice_dummy_var_91: i64)
{

  entry:
    out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_vslice_dummy_var_91 := in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$p52, in_$i53, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_vslice_dummy_var_91;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i41 := $M.1;
    goto corral_source_split_133;

  $bb46:
    assume {:verifier.code 0} true;
    assume out_$i62 == 1;
    goto $bb46_dummy;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i64(out_$i61, 0);
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_171;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, in_$p37);
    goto corral_source_split_170;

  SeqInstr_27:
    goto corral_source_split_169;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} gru_check_context_placement(in_$p32);
    goto SeqInstr_26;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} __preempt_count_add(1);
    call {:si_unique_call 47} devirtbounce.1(0);
    goto corral_source_split_168;

  SeqInstr_24:
    goto corral_source_split_167;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} ldv_mutex_lock_42(in_$p36);
    goto SeqInstr_23;

  $bb44:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_21:
    goto corral_source_split_165;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} gru_steal_context(in_$p32);
    goto SeqInstr_20;

  $bb43:
    assume out_$i59 == 1;
    goto corral_source_split_164;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    out_$i59 := $ult.i64(out_$i57, out_$i58);
    goto corral_source_split_162;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i64($M.3, jiffies);
    goto corral_source_split_161;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i64(out_$i56, 50);
    goto corral_source_split_160;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i64($M.0, out_$p55);
    goto corral_source_split_159;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p32, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_158;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} out_vslice_dummy_var_91 := schedule_timeout(5);
    goto corral_source_split_157;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, in_$p2, out_$i53);
    goto corral_source_split_155;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p50, $mul.ref(0, 11712)), $mul.ref(0, 1));
    call {:si_unique_call 42} out_$i53 := devirtbounce.2(0, out_$p52, out_$i51, out_$p52);
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.2, in_$p2);
    goto corral_source_split_153;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} out_$p50 := get_current();
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, in_$p2, 1);
    goto corral_source_split_151;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p49, 0);
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 11712)), $mul.ref(11696, 1));
    goto corral_source_split_149;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} out_$p48 := get_current();
    goto corral_source_split_148;

  SeqInstr_18:
    goto corral_source_split_147;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} ldv_mutex_unlock_43(out_$p47);
    goto SeqInstr_17;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p32, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} __preempt_count_sub(1);
    goto corral_source_split_145;

  $bb40:
    assume out_$i46 == 1;
    call {:si_unique_call 37} devirtbounce.1(0);
    goto corral_source_split_144;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i64(out_$i45, 0);
    goto corral_source_split_142;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_141;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} out_$p44 := gru_assign_gru_context(in_$p32);
    goto corral_source_split_140;

  $bb38:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(80, 1)));
    goto corral_source_split_138;

  $bb37:
    assume out_$i43 == 1;
    goto corral_source_split_137;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_135;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i64(out_$i41, 2);
    goto corral_source_split_134;

  $bb46_dummy:
    call {:si_unique_call 1} out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_vslice_dummy_var_91 := gru_fault_loop_$bb36(in_$p2, in_$p32, in_$p36, in_$p37, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_vslice_dummy_var_91);
    return;

  exit:
    return;
}



procedure gru_fault_loop_$bb36(in_$p2: ref, in_$p32: ref, in_$p36: ref, in_$p37: ref, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$p55: ref, in_$i56: i64, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_vslice_dummy_var_91: i64) returns (out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$p55: ref, out_$i56: i64, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_vslice_dummy_var_91: i64);
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed, $M.2;



implementation gru_assign_gru_context_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p16: ref, in_$i17: i8, in_$i18: i32, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i30: i32, in_$p31: ref, in_$i14: i32, in_$p15: ref, in_$p32: ref, in_$p29: ref, in_$i34: i64, in_$i35: i1, in_$p37: ref, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p47: ref, in_$p46: ref, in_$p36: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i8, in_$i129: i32, in_$p130: ref, in_$i131: i8, in_$i132: i32, in_$i133: i32, in_$i134: i1, in_$p136: ref, in_$i137: i16, in_$i138: i32, in_$i139: i1, in_$p135: ref, in_$p33: ref) returns (out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p16: ref, out_$i17: i8, out_$i18: i32, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i30: i32, out_$p31: ref, out_$i14: i32, out_$p15: ref, out_$p32: ref, out_$p29: ref, out_$i34: i64, out_$i35: i1, out_$p37: ref, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p47: ref, out_$p46: ref, out_$p36: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i8, out_$i129: i32, out_$p130: ref, out_$i131: i8, out_$i132: i32, out_$i133: i32, out_$i134: i1, out_$p136: ref, out_$i137: i16, out_$i138: i32, out_$i139: i1, out_$p135: ref, out_$p33: ref)
{

  entry:
    out_$i7, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i30, out_$p31, out_$i14, out_$p15, out_$p32, out_$p29, out_$i34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$p46, out_$p36, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$i133, out_$i134, out_$p136, out_$i137, out_$i138, out_$i139, out_$p135, out_$p33 := in_$i7, in_$p8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i27, in_$p28, in_$i30, in_$p31, in_$i14, in_$p15, in_$p32, in_$p29, in_$i34, in_$i35, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p47, in_$p46, in_$p36, in_$i125, in_$i126, in_$p127, in_$i128, in_$i129, in_$p130, in_$i131, in_$i132, in_$i133, in_$i134, in_$p136, in_$i137, in_$i138, in_$i139, in_$p135, in_$p33;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(in_$i6);
    goto corral_source_split_421;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    goto corral_source_split_481_dummy;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} spin_unlock(out_$p47);
    goto corral_source_split_481;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p29, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_480;

  $bb23:
    assume out_$i45 == 1;
    goto corral_source_split_479;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p29;
    assume true;
    goto $bb23;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} out_$i44 := check_gru_resources(out_$p29, out_$i40, out_$i43, 16);
    call {:si_unique_call 179} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_470;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_469;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.0, out_$p41);
    goto corral_source_split_468;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_467;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_466;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p38);
    goto corral_source_split_465;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_464;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} spin_lock(out_$p37);
    goto corral_source_split_463;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p29, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_462;

  $bb21:
    assume out_$i35 == 1;
    goto corral_source_split_461;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    out_$p36 := out_$p29;
    assume true;
    goto $bb21;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_454;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_453;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_452;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p29 := out_$p33;
    goto $bb16;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    out_$p29 := out_$p28;
    goto $bb16;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_450;

  $bb89:
    assume {:verifier.code 0} true;
    assume out_$i139 == 1;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i27 == 1;
    goto $bb14;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    out_$p28 := out_$p10;
    assume true;
    goto $bb13, $bb15;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 0);
    goto corral_source_split_448;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i16.i32(out_$i25);
    call {:si_unique_call 175} {:cexpr "max_active_contexts"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_447;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i16($M.0, out_$p24);
    goto corral_source_split_446;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p11, $mul.ref(0, 424)), $mul.ref(224, 1));
    goto corral_source_split_445;

  $bb11:
    assume out_$i23 == 1;
    goto corral_source_split_444;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_442;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} out_$i22 := check_gru_resources(out_$p11, out_$i18, out_$i21, 16);
    call {:si_unique_call 174} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_441;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_440;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.0, out_$p19);
    goto corral_source_split_439;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_438;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i8.i32(out_$i17);
    goto corral_source_split_437;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i8($M.0, out_$p16);
    goto corral_source_split_436;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_435;

  $bb8:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_428;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} out_$i12 := gru_check_chiplet_assignment(out_$p11, in_$p0);
    call {:si_unique_call 172} {:cexpr "tmp"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_427;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_424;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.4, out_$p8);
    goto corral_source_split_423;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i7, 8));
    goto corral_source_split_422;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    out_$p28 := out_$p32;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 0);
    goto corral_source_split_587;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$i138 := $zext.i16.i32(out_$i137);
    goto corral_source_split_586;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i16($M.0, out_$p136);
    goto corral_source_split_585;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(out_$p11, $mul.ref(1, 424)), $mul.ref(224, 1));
    goto corral_source_split_584;

  $bb86:
    assume out_$i134 == 1;
    goto corral_source_split_583;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    out_$i134 := $ne.i32(out_$i133, 0);
    goto corral_source_split_581;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} out_$i133 := check_gru_resources(out_$p32, out_$i129, out_$i132, out_$i14);
    goto corral_source_split_580;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i8.i32(out_$i131);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i8($M.0, out_$p130);
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_577;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$i129 := $zext.i8.i32(out_$i128);
    goto corral_source_split_576;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i8($M.0, out_$p127);
    goto corral_source_split_575;

  $bb85:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_574;

  $bb84:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 0);
    goto corral_source_split_459;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} out_$i125 := gru_check_chiplet_assignment(out_$p32, in_$p0);
    goto corral_source_split_458;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p11, $mul.ref(1, 424));
    goto corral_source_split_433;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_432;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    out_$i14, out_$p15 := out_$i30, out_$p31;
    goto $bb9;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$i14, out_$p15 := 16, $0.ref;
    goto $bb9;

  $bb7:
    assume out_$i13 == 1;
    goto corral_source_split_430;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  $bb12:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i30, out_$p31 := 16, $0.ref;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i30, out_$p31 := out_$i26, out_$p10;
    goto $bb18;

  $bb15:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb92:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    out_$p33 := out_$p135;
    goto $bb92;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    out_$p33 := out_$p15;
    goto $bb92;

  $bb83:
    assume out_$i126 == 1;
    goto corral_source_split_572;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_589;

  $bb87:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    out_$p135 := out_$p15;
    goto $bb88;

  $bb91:
    assume {:verifier.code 0} true;
    out_$p135 := out_$p32;
    goto $bb88;

  $bb90:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_481_dummy:
    call {:si_unique_call 1} out_$i7, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i30, out_$p31, out_$i14, out_$p15, out_$p32, out_$p29, out_$i34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$p46, out_$p36, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$i133, out_$i134, out_$p136, out_$i137, out_$i138, out_$i139, out_$p135, out_$p33 := gru_assign_gru_context_loop_$bb4(in_$p0, in_$i6, out_$i7, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i30, out_$p31, out_$i14, out_$p15, out_$p32, out_$p29, out_$i34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$p46, out_$p36, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$i133, out_$i134, out_$p136, out_$i137, out_$i138, out_$i139, out_$p135, out_$p33);
    return;

  exit:
    return;
}



procedure gru_assign_gru_context_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$p16: ref, in_$i17: i8, in_$i18: i32, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i30: i32, in_$p31: ref, in_$i14: i32, in_$p15: ref, in_$p32: ref, in_$p29: ref, in_$i34: i64, in_$i35: i1, in_$p37: ref, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p47: ref, in_$p46: ref, in_$p36: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i8, in_$i129: i32, in_$p130: ref, in_$i131: i8, in_$i132: i32, in_$i133: i32, in_$i134: i1, in_$p136: ref, in_$i137: i16, in_$i138: i32, in_$i139: i1, in_$p135: ref, in_$p33: ref) returns (out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$p16: ref, out_$i17: i8, out_$i18: i32, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i30: i32, out_$p31: ref, out_$i14: i32, out_$p15: ref, out_$p32: ref, out_$p29: ref, out_$i34: i64, out_$i35: i1, out_$p37: ref, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p47: ref, out_$p46: ref, out_$p36: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i8, out_$i129: i32, out_$p130: ref, out_$i131: i8, out_$i132: i32, out_$i133: i32, out_$i134: i1, out_$p136: ref, out_$i137: i16, out_$i138: i32, out_$i139: i1, out_$p135: ref, out_$p33: ref);



implementation gru_steal_context_loop_$bb23(in_$p15: ref, in_$i23: i32, in_$p37: ref, in_$i42: i32, in_$p43: ref, in_$i60: i1, in_$i61: i64, in_$i62: i64, in_$i63: i1, in_$i64: i1, in_$i65: i32, in_$p66: ref, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p58: ref, in_$i59: i32, in_$i81: i32, in_$p82: ref) returns (out_$i60: i1, out_$i61: i64, out_$i62: i64, out_$i63: i1, out_$i64: i1, out_$i65: i32, out_$p66: ref, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p58: ref, out_$i59: i32, out_$i81: i32, out_$p82: ref)
{

  entry:
    out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p58, out_$i59, out_$i81, out_$p82 := in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i69, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$p58, in_$i59, in_$i81, in_$p82;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  $bb40:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$p58, out_$i59 := $0.ref, out_$i79;
    goto $bb40_dummy;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    out_$i81, out_$p82 := out_$i79, $0.ref;
    assume true;
    goto $bb40;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    out_$i80 := $sle.i32(out_$i79, 15);
    goto corral_source_split_727;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i59, 1);
    call {:si_unique_call 233} {:cexpr "ctxnum"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_726;

  $bb35:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    out_$i77, out_$p78 := out_$i59, out_$p72;
    assume true;
    goto $bb37;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i75, 0);
    goto corral_source_split_722;

  SeqInstr_45:
    call {:si_unique_call 232} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_721;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} out_$i75 := is_gts_stealable(out_$p72, in_$p15);
    goto SeqInstr_44;

  $bb34:
    assume out_$i74 == 1;
    goto corral_source_split_720;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, 0);
    goto corral_source_split_718;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_717;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_716;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(in_$p43, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i69, 8));
    goto corral_source_split_715;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i59);
    goto corral_source_split_714;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i63 == 1);
    goto $bb27;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb27;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    out_$i65, out_$p66 := out_$i59, out_$p58;
    assume true;
    goto $bb31;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i59, in_$i23);
    goto corral_source_split_704;

  $bb28:
    assume out_$i63 == 1;
    goto corral_source_split_703;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i64(out_$i61, out_$i62);
    goto corral_source_split_701;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(in_$p37);
    goto corral_source_split_700;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(in_$p43);
    goto corral_source_split_699;

  $bb25:
    assume out_$i60 == 1;
    goto corral_source_split_698;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(in_$i42, 0);
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p58, out_$i59, out_$i81, out_$p82 := gru_steal_context_loop_$bb23(in_$p15, in_$i23, in_$p37, in_$i42, in_$p43, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p58, out_$i59, out_$i81, out_$p82);
    return;

  exit:
    return;
}



procedure gru_steal_context_loop_$bb23(in_$p15: ref, in_$i23: i32, in_$p37: ref, in_$i42: i32, in_$p43: ref, in_$i60: i1, in_$i61: i64, in_$i62: i64, in_$i63: i1, in_$i64: i1, in_$i65: i32, in_$p66: ref, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p58: ref, in_$i59: i32, in_$i81: i32, in_$p82: ref) returns (out_$i60: i1, out_$i61: i64, out_$i62: i64, out_$i63: i1, out_$i64: i1, out_$i65: i32, out_$p66: ref, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p58: ref, out_$i59: i32, out_$i81: i32, out_$p82: ref);
  modifies $M.6, assertsPassed;



implementation gru_steal_context_loop_$bb13(in_$p0: ref, in_$i9: i32, in_$i12: i32, in_$p15: ref, in_$i23: i32, in_$p37: ref, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p54: ref, in_$i55: i1, in_$i60: i1, in_$i61: i64, in_$i62: i64, in_$i63: i1, in_$i64: i1, in_$i65: i32, in_$p66: ref, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p58: ref, in_$i59: i32, in_$i81: i32, in_$p82: ref, in_$i56: i32, in_$p57: ref, in_$i67: i32, in_$p68: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$i89: i1, in_$i90: i64, in_$i91: i64, in_$i92: i1, in_$i93: i1, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i94: i32, in_$p95: ref, in_$i96: i1, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p111: ref, in_$p110: ref) returns (out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p54: ref, out_$i55: i1, out_$i60: i1, out_$i61: i64, out_$i62: i64, out_$i63: i1, out_$i64: i1, out_$i65: i32, out_$p66: ref, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p58: ref, out_$i59: i32, out_$i81: i32, out_$p82: ref, out_$i56: i32, out_$p57: ref, out_$i67: i32, out_$p68: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$i89: i1, out_$i90: i64, out_$i91: i64, out_$i92: i1, out_$i93: i1, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i94: i32, out_$p95: ref, out_$i96: i1, out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p111: ref, out_$p110: ref)
{

  entry:
    out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p54, out_$i55, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p58, out_$i59, out_$i81, out_$p82, out_$i56, out_$p57, out_$i67, out_$p68, out_$p83, out_$i84, out_$i85, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p86, out_$p87, out_$i88, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p111, out_$p110 := in_$i40, in_$p41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p54, in_$i55, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i69, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$p58, in_$i59, in_$i81, in_$p82, in_$i56, in_$p57, in_$i67, in_$p68, in_$p83, in_$i84, in_$i85, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p86, in_$p87, in_$i88, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i101, in_$p102, in_$p103, in_$p104, in_$p105, in_$i106, in_$i107, in_$i108, in_$p109, in_$p111, in_$p110;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    out_$i40, out_$p41, out_$i42, out_$p43 := 0, out_$p95, 1, out_$p110;
    goto corral_source_split_768_dummy;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    out_$p110 := out_$p111;
    goto $bb63;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    out_$p110 := out_$p109;
    goto $bb63;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref(out_$p43, $mul.ref(1, 424));
    goto corral_source_split_762;

  $bb61:
    assume out_$i108 == 1;
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$i108 := $ugt.i64(out_$i106, out_$i107);
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_758;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    out_$i106 := $p2i.ref.i64(out_$p105);
    goto corral_source_split_757;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref(out_$p104, $mul.ref(1, 424));
    goto corral_source_split_756;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(out_$p103);
    goto corral_source_split_755;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p15, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_754;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i96 == 1);
    goto $bb57;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i99 == 1);
    goto $bb57;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    out_$p100, out_$i101, out_$p102 := out_$p43, out_$i94, out_$p95;
    assume true;
    goto $bb59;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i64(out_$i97, out_$i98);
    goto corral_source_split_750;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i98 := $p2i.ref.i64(in_$p37);
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$i97 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_748;

  $bb55:
    assume out_$i96 == 1;
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(out_$i42, 0);
    goto corral_source_split_745;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_744;

  $bb15:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i94, out_$p95 := out_$i40, out_$p41;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i94, out_$p95 := out_$i67, out_$p68;
    goto $bb54;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i89 == 1);
    goto $bb48;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i92 == 1);
    goto $bb48;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i93 == 1);
    goto $bb48;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    out_$p86, out_$p87, out_$i88 := out_$p43, out_$p68, out_$i67;
    assume true;
    goto $bb52;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i67, in_$i23);
    goto corral_source_split_742;

  $bb49:
    assume out_$i92 == 1;
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i64(out_$i90, out_$i91);
    goto corral_source_split_739;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    out_$i91 := $p2i.ref.i64(in_$p37);
    goto corral_source_split_738;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    out_$i90 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_737;

  $bb46:
    assume out_$i89 == 1;
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i42, 0);
    goto corral_source_split_734;

  $bb45:
    assume !(out_$i85 == 1);
    goto corral_source_split_733;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    out_$p86, out_$p87, out_$i88 := out_$p43, out_$p68, out_$i67;
    assume true;
    goto $bb45;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i64(out_$i84, 0);
    goto corral_source_split_712;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    out_$i84 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_711;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} spin_unlock(out_$p83);
    goto corral_source_split_710;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p43, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_709;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_708;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i67, out_$p68 := out_$i56, out_$p57;
    goto $bb32;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    out_$i67, out_$p68 := out_$i77, out_$p78;
    goto $bb32;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    out_$i67, out_$p68 := out_$i65, out_$p66;
    goto $bb32;

  $bb30:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_706;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    out_$i65, out_$p66 := out_$i59, out_$p58;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i59, in_$i23);
    goto corral_source_split_704;

  $bb28:
    assume out_$i63 == 1;
    goto corral_source_split_703;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i64(out_$i61, out_$i62);
    goto corral_source_split_701;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(in_$p37);
    goto corral_source_split_700;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_699;

  $bb25:
    assume out_$i60 == 1;
    goto corral_source_split_698;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i42, 0);
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    call out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p58, out_$i59, out_$i81, out_$p82 := gru_steal_context_loop_$bb23(in_$p15, in_$i23, in_$p37, out_$i42, out_$p43, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p58, out_$i59, out_$i81, out_$p82);
    goto $bb23_last;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$p58, out_$i59 := out_$p41, out_$i40;
    goto $bb23;

  $bb40:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$p58, out_$i59 := $0.ref, out_$i79;
    assume false;
    return;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    out_$i81, out_$p82 := out_$i79, $0.ref;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    out_$i80 := $sle.i32(out_$i79, 15);
    goto corral_source_split_727;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i59, 1);
    call {:si_unique_call 233} {:cexpr "ctxnum"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_726;

  $bb35:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    out_$i77, out_$p78 := out_$i59, out_$p72;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i75, 0);
    goto corral_source_split_722;

  SeqInstr_45:
    call {:si_unique_call 232} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_721;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} out_$i75 := is_gts_stealable(out_$p72, in_$p15);
    goto SeqInstr_44;

  $bb34:
    assume out_$i74 == 1;
    goto corral_source_split_720;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, 0);
    goto corral_source_split_718;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_717;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_716;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i69, 8));
    goto corral_source_split_715;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i59);
    goto corral_source_split_714;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i63 == 1);
    goto $bb27;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb27;

  $bb20:
    assume out_$i55 == 1;
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    out_$i56, out_$p57 := out_$i40, out_$p41;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$i55 := $sle.i32(out_$i40, 15);
    goto corral_source_split_690;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} spin_lock(out_$p54);
    goto corral_source_split_689;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p43, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_688;

  $bb17:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    out_$i48, out_$p49, out_$p50 := out_$i40, out_$p41, out_$p43;
    assume true;
    goto $bb17;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_678;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} out_$i46 := check_gru_resources(out_$p43, in_$i9, in_$i12, 16);
    call {:si_unique_call 227} {:cexpr "tmp"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_677;

  $bb14:
    assume out_$i45 == 1;
    goto corral_source_split_676;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_674;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} out_$i44 := gru_check_chiplet_assignment(out_$p43, in_$p0);
    call {:si_unique_call 225} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_673;

  $bb36:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_724;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb22;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    out_$i56, out_$p57 := out_$i81, out_$p82;
    goto $bb22;

  $bb41:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    goto corral_source_split_766;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p15, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_765;

  $bb62:
    assume !(out_$i108 == 1);
    goto corral_source_split_764;

  corral_source_split_768_dummy:
    call {:si_unique_call 1} out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p54, out_$i55, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p58, out_$i59, out_$i81, out_$p82, out_$i56, out_$p57, out_$i67, out_$p68, out_$p83, out_$i84, out_$i85, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p86, out_$p87, out_$i88, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p111, out_$p110 := gru_steal_context_loop_$bb13(in_$p0, in_$i9, in_$i12, in_$p15, in_$i23, in_$p37, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p54, out_$i55, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i69, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p58, out_$i59, out_$i81, out_$p82, out_$i56, out_$p57, out_$i67, out_$p68, out_$p83, out_$i84, out_$i85, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p86, out_$p87, out_$i88, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p111, out_$p110);
    return;

  exit:
    return;
}



procedure gru_steal_context_loop_$bb13(in_$p0: ref, in_$i9: i32, in_$i12: i32, in_$p15: ref, in_$i23: i32, in_$p37: ref, in_$i40: i32, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p54: ref, in_$i55: i1, in_$i60: i1, in_$i61: i64, in_$i62: i64, in_$i63: i1, in_$i64: i1, in_$i65: i32, in_$p66: ref, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p58: ref, in_$i59: i32, in_$i81: i32, in_$p82: ref, in_$i56: i32, in_$p57: ref, in_$i67: i32, in_$p68: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$i89: i1, in_$i90: i64, in_$i91: i64, in_$i92: i1, in_$i93: i1, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i94: i32, in_$p95: ref, in_$i96: i1, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p111: ref, in_$p110: ref) returns (out_$i40: i32, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p54: ref, out_$i55: i1, out_$i60: i1, out_$i61: i64, out_$i62: i64, out_$i63: i1, out_$i64: i1, out_$i65: i32, out_$p66: ref, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p58: ref, out_$i59: i32, out_$i81: i32, out_$p82: ref, out_$i56: i32, out_$p57: ref, out_$i67: i32, out_$p68: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$i89: i1, out_$i90: i64, out_$i91: i64, out_$i92: i1, out_$i93: i1, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i94: i32, out_$p95: ref, out_$i96: i1, out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p111: ref, out_$p110: ref);
  modifies $M.6, assertsPassed;



implementation gru_load_context_loop_$bb48()
{

  entry:
    goto $bb48, exit;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb48_dummy;

  $bb48_dummy:
    call {:si_unique_call 1} gru_load_context_loop_$bb48();
    return;

  exit:
    return;
}



procedure gru_load_context_loop_$bb48();



implementation gru_load_context_loop_$bb44()
{

  entry:
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb44_dummy;

  $bb44_dummy:
    call {:si_unique_call 1} gru_load_context_loop_$bb44();
    return;

  exit:
    return;
}



procedure gru_load_context_loop_$bb44();



implementation gru_load_mm_tracker_loop_$bb18()
{

  entry:
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb18_dummy;

  $bb18_dummy:
    call {:si_unique_call 1} gru_load_mm_tracker_loop_$bb18();
    return;

  exit:
    return;
}



procedure gru_load_mm_tracker_loop_$bb18();



implementation gru_load_context_data_loop_$bb4(in_$p1: ref, in_$i5: i32, in_$p6: ref, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i38: i32, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$p37: ref, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$p25: ref, in_$p26: ref, in_$i48: i32, in_$i49: i64, in_$i50: i64, in_$i51: i32, in_$i52: i1, in_$p18: ref, in_$i19: i32, in_$p20: ref, in_$p53: ref, in_$i61: i1, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i64, in_$i71: i64, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$p75: ref, in_$p66: ref, in_$i76: i32, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$i80: i64, in_$p81: ref, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8) returns (out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i38: i32, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$p37: ref, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$p25: ref, out_$p26: ref, out_$i48: i32, out_$i49: i64, out_$i50: i64, out_$i51: i32, out_$i52: i1, out_$p18: ref, out_$i19: i32, out_$p20: ref, out_$p53: ref, out_$i61: i1, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i64, out_$i71: i64, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$p75: ref, out_$p66: ref, out_$i76: i32, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$i80: i64, out_$p81: ref, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8)
{

  entry:
    out_$i21, out_$i22, out_$i23, out_$i24, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i38, out_$i39, out_$i40, out_$p41, out_$p37, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$p25, out_$p26, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p18, out_$i19, out_$p20, out_$p53, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p66, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$p81, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12 := in_$i21, in_$i22, in_$i23, in_$i24, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$i38, in_$i39, in_$i40, in_$p41, in_$p37, in_$i42, in_$i43, in_$i44, in_$p45, in_$p46, in_$i47, in_$p25, in_$p26, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p18, in_$i19, in_$p20, in_$p53, in_$i61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$p75, in_$p66, in_$i76, in_$i77, in_$i78, in_$p79, in_$i80, in_$p81, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_cmdloc_dummy_var_11, in_cmdloc_dummy_var_12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1347;

  $bb16:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$p18, out_$i19, out_$p20 := out_$p26, out_$i51, out_$p25;
    goto $bb16_dummy;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    out_$p53 := out_$p26;
    assume true;
    goto $bb16;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$i52 := $sle.i32(out_$i51, 63);
    goto corral_source_split_1387;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i64.i32(out_$i50);
    call {:si_unique_call 372} {:cexpr "scr"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} out_$i50 := find_next_bit(in_$p6, 64, out_$i49);
    call {:si_unique_call 371} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_1385;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i48);
    goto corral_source_split_1384;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i19, 1);
    goto corral_source_split_1383;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb8;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    out_$p25, out_$p26 := out_$p81, out_$p66;
    goto $bb8;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref(out_$p20, $mul.ref(out_$i80, 1));
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} gru_flush_cache(out_$p79);
    out_$i80 := $add.i64(256, 256);
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref(in_$p1, $mul.ref(out_$i78, 1));
    goto corral_source_split_1420;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i76);
    out_$i78 := $add.i64(67174400, out_$i77);
    goto corral_source_split_1419;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$i76 := $mul.i32(out_$i47, 256);
    goto corral_source_split_1418;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} devirtbounce.1(0);
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 379} out_cmdloc_dummy_var_12 := $memset.i8(out_cmdloc_dummy_var_11, out_$p65, 0, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_12;
    assume {:verifier.code 0} true;
    out_$p66 := out_$p37;
    goto $bb24;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    out_$p66 := out_$p75;
    goto $bb24;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(out_$p37, $mul.ref(out_$i74, 1));
    goto corral_source_split_1409;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} out_$i73 := gru_copy_handle(out_$p72, out_$p68);
    out_$i74 := $add.i64(out_$i67, out_$i73);
    goto corral_source_split_1408;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(in_$p1, $mul.ref(out_$i71, 1));
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i69);
    out_$i71 := $add.i64(67174400, out_$i70);
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$i69 := $mul.i32(out_$i47, 256);
    goto corral_source_split_1405;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p37, $mul.ref(out_$i67, 1));
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} out_$i67 := gru_copy_handle(out_$p46, out_$p37);
    goto corral_source_split_1403;

  $bb22:
    assume out_$i61 == 1;
    goto corral_source_split_1402;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(in_$i5, 0);
    goto corral_source_split_1381;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i21, 1);
    call {:si_unique_call 369} {:cexpr "i"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_1379;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p20, $mul.ref(256, 1));
    goto corral_source_split_1378;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} gru_flush_cache(out_$p45);
    goto corral_source_split_1377;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(in_$p1, $mul.ref(out_$i44, 1));
    goto corral_source_split_1376;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i42);
    out_$i44 := $add.i64(67174400, out_$i43);
    goto corral_source_split_1375;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    out_$i42 := $mul.i32(out_$i21, 256);
    goto corral_source_split_1374;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} devirtbounce.1(0);
    goto corral_source_split_1373;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 366} out_cmdloc_dummy_var_3 := $memset.i8(out_cmdloc_dummy_var_2, out_$p41, 0, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_3;
    assume {:verifier.code 0} true;
    out_$p37 := out_$p18;
    goto $bb13;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    out_$p37 := out_$p36;
    goto $bb13;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p18, $mul.ref(out_$i35, 1));
    goto corral_source_split_1365;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} out_$i34 := gru_copy_handle(out_$p33, out_$p29);
    call {:si_unique_call 364} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i34);
    out_$i35 := $add.i64(out_$i28, out_$i34);
    goto corral_source_split_1364;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(in_$p1, $mul.ref(out_$i32, 1));
    goto corral_source_split_1363;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    out_$i32 := $add.i64(67174400, out_$i31);
    goto corral_source_split_1362;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    out_$i30 := $mul.i32(out_$i21, 256);
    goto corral_source_split_1361;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p18, $mul.ref(out_$i28, 1));
    goto corral_source_split_1360;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} out_$i28 := gru_copy_handle(out_$p20, out_$p18);
    call {:si_unique_call 362} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_1359;

  $bb11:
    assume out_$i27 == 1;
    goto corral_source_split_1358;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(in_$i5, 0);
    goto corral_source_split_1356;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume out_$i24 == 1;
    goto corral_source_split_1354;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    out_$p25, out_$p26 := out_$p20, out_$p18;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    out_$i24 := $sgt.i32(out_$i23, out_$i21);
    goto corral_source_split_1352;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$i23 := $mul.i32(out_$i22, 2);
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i19, 1);
    goto corral_source_split_1350;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i21 := $mul.i32(out_$i19, 2);
    call {:si_unique_call 360} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(in_$p1, $mul.ref(out_$i40, 1));
    goto corral_source_split_1371;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i38);
    out_$i40 := $add.i64(67174400, out_$i39);
    goto corral_source_split_1370;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    out_$i38 := $mul.i32(out_$i21, 256);
    goto corral_source_split_1369;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 365} out_cmdloc_dummy_var_1 := $memset.i8(out_cmdloc_dummy_var_0, out_$p20, 0, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_1;
    goto corral_source_split_1368;

  $bb12:
    assume !(out_$i27 == 1);
    goto corral_source_split_1367;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(in_$p1, $mul.ref(out_$i64, 1));
    goto corral_source_split_1415;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i62);
    out_$i64 := $add.i64(67174400, out_$i63);
    goto corral_source_split_1414;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$i62 := $mul.i32(out_$i47, 256);
    goto corral_source_split_1413;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 378} out_cmdloc_dummy_var_10 := $memset.i8(out_cmdloc_dummy_var_9, out_$p46, 0, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_10;
    goto corral_source_split_1412;

  $bb23:
    assume !(out_$i61 == 1);
    goto corral_source_split_1411;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22, out_$i23, out_$i24, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i38, out_$i39, out_$i40, out_$p41, out_$p37, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$p25, out_$p26, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p18, out_$i19, out_$p20, out_$p53, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p66, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$p81, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12 := gru_load_context_data_loop_$bb4(in_$p1, in_$i5, in_$p6, out_$i21, out_$i22, out_$i23, out_$i24, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i38, out_$i39, out_$i40, out_$p41, out_$p37, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$p25, out_$p26, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p18, out_$i19, out_$p20, out_$p53, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p66, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$p81, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12);
    return;

  exit:
    return;
}



procedure gru_load_context_data_loop_$bb4(in_$p1: ref, in_$i5: i32, in_$p6: ref, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i27: i1, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i38: i32, in_$i39: i64, in_$i40: i64, in_$p41: ref, in_$p37: ref, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$p25: ref, in_$p26: ref, in_$i48: i32, in_$i49: i64, in_$i50: i64, in_$i51: i32, in_$i52: i1, in_$p18: ref, in_$i19: i32, in_$p20: ref, in_$p53: ref, in_$i61: i1, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i64, in_$i71: i64, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$p75: ref, in_$p66: ref, in_$i76: i32, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$i80: i64, in_$p81: ref, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8) returns (out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i27: i1, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i38: i32, out_$i39: i64, out_$i40: i64, out_$p41: ref, out_$p37: ref, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$p25: ref, out_$p26: ref, out_$i48: i32, out_$i49: i64, out_$i50: i64, out_$i51: i32, out_$i52: i1, out_$p18: ref, out_$i19: i32, out_$p20: ref, out_$p53: ref, out_$i61: i1, out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i64, out_$i71: i64, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$p75: ref, out_$p66: ref, out_$i76: i32, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$i80: i64, out_$p81: ref, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8);
  modifies $M.0;



implementation wait_instruction_complete_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i12: i64, in_$i13: i32, in_$i11: i64, in_$i14: i64, in_$i15: i32, in_$i16: i64, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$i24: i32, in_$i25: i32, in_$i26: i1) returns (out_$i12: i64, out_$i13: i32, out_$i11: i64, out_$i14: i64, out_$i15: i32, out_$i16: i64, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$i24: i32, out_$i25: i32, out_$i26: i1)
{

  entry:
    out_$i12, out_$i13, out_$i11, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26 := in_$i12, in_$i13, in_$i11, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := out_$i21;
    goto $bb11_dummy;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    out_$i12, out_$i13 := out_$i21, out_$i25;
    assume true;
    goto $bb11;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 2);
    goto corral_source_split_1489;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    out_$i25 := $and.i32(out_$i24, 3);
    call {:si_unique_call 402} {:cexpr "status"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_1488;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i64.i32(out_$i23);
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    out_$i23 := $lshr.i64(out_$i22, 16);
    goto corral_source_split_1486;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.0, in_$p3);
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} cpu_relax();
    goto corral_source_split_1484;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := out_$i11;
    goto $bb10;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i20;
    goto $bb10;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} out_$i20 := get_cycles___1();
    call {:si_unique_call 400} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} report_instruction_timeout(in_$p0);
    goto corral_source_split_1480;

  $bb8:
    assume out_$i19 == 1;
    goto corral_source_split_1479;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    out_$i19 := $ult.i64(out_$i17, out_$i18);
    goto corral_source_split_1477;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    out_$i18 := $sub.i64(out_$i14, out_$i11);
    goto corral_source_split_1476;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    out_$i17 := $mul.i64(out_$i16, 10000);
    goto corral_source_split_1475;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i15);
    goto corral_source_split_1474;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.3, tsc_khz);
    goto corral_source_split_1473;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} out_$i14 := get_cycles___1();
    call {:si_unique_call 397} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_1472;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i11, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26 := wait_instruction_complete_loop_$bb4(in_$p0, in_$p3, out_$i12, out_$i13, out_$i11, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26);
    return;

  exit:
    return;
}



procedure wait_instruction_complete_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i12: i64, in_$i13: i32, in_$i11: i64, in_$i14: i64, in_$i15: i32, in_$i16: i64, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$i24: i32, in_$i25: i32, in_$i26: i1) returns (out_$i12: i64, out_$i13: i32, out_$i11: i64, out_$i14: i64, out_$i15: i32, out_$i16: i64, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$i24: i32, out_$i25: i32, out_$i26: i1);



implementation paravirt_read_tsc___1_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} paravirt_read_tsc___1_loop_$bb3();
    return;

  exit:
    return;
}



procedure paravirt_read_tsc___1_loop_$bb3();



implementation gru_prefetch_context_loop_$bb4(in_$p2: ref, in_$p5: ref, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i19: i32, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$p18: ref, in_$i24: i32, in_$i25: i64, in_$i26: i64, in_$i27: i32, in_$i28: i1, in_$i12: i32, in_$p13: ref, in_$i29: i32, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref) returns (out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i19: i32, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$p18: ref, out_$i24: i32, out_$i25: i64, out_$i26: i64, out_$i27: i32, out_$i28: i1, out_$i12: i32, out_$p13: ref, out_$i29: i32, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref)
{

  entry:
    out_$i14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$p18, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i12, out_$p13, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33 := in_$i14, in_$i15, in_$i16, in_$i17, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$p18, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i12, in_$p13, in_$i29, in_$i30, in_$p31, in_$i32, in_$p33;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1607;

  $bb13:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$p13 := out_$i27, out_$p18;
    goto $bb13_dummy;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    out_$i28 := $sle.i32(out_$i27, 63);
    goto corral_source_split_1635;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i64.i32(out_$i26);
    call {:si_unique_call 447} {:cexpr "scr"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} out_$i26 := find_next_bit(in_$p5, 64, out_$i25);
    call {:si_unique_call 446} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_1632;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i12, 1);
    goto corral_source_split_1631;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb8;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p33;
    goto $bb8;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p13, $mul.ref(out_$i32, 1));
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} prefetch_data(out_$p31, 1, 64);
    out_$i32 := $add.i64(256, 256);
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(in_$p2, $mul.ref(out_$i30, 1));
    goto corral_source_split_1627;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i29);
    goto corral_source_split_1626;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    out_$i29 := $mul.i32(out_$i23, 256);
    goto corral_source_split_1625;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} prefetch_data(out_$p22, 1, 64);
    goto corral_source_split_1624;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i14, 1);
    call {:si_unique_call 442} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p13, $mul.ref(256, 1));
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} prefetch_data(out_$p21, 1, 64);
    goto corral_source_split_1620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(in_$p2, $mul.ref(out_$i20, 1));
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i19);
    goto corral_source_split_1618;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    out_$i19 := $mul.i32(out_$i14, 256);
    goto corral_source_split_1617;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} prefetch_data(out_$p13, 1, 64);
    goto corral_source_split_1616;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_1614;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p13;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    out_$i17 := $sgt.i32(out_$i16, out_$i14);
    goto corral_source_split_1612;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$i16 := $mul.i32(out_$i15, 2);
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i12, 1);
    goto corral_source_split_1610;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i14 := $mul.i32(out_$i12, 2);
    call {:si_unique_call 439} {:cexpr "i"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$p18, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i12, out_$p13, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33 := gru_prefetch_context_loop_$bb4(in_$p2, in_$p5, out_$i14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$p18, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i12, out_$p13, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33);
    return;

  exit:
    return;
}



procedure gru_prefetch_context_loop_$bb4(in_$p2: ref, in_$p5: ref, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i19: i32, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$p18: ref, in_$i24: i32, in_$i25: i64, in_$i26: i64, in_$i27: i32, in_$i28: i1, in_$i12: i32, in_$p13: ref, in_$i29: i32, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref) returns (out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i19: i32, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$p18: ref, out_$i24: i32, out_$i25: i64, out_$i26: i64, out_$i27: i32, out_$i28: i1, out_$i12: i32, out_$p13: ref, out_$i29: i32, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref);



implementation prefetch_data_loop_$bb4(in_$i2: i32, in_$i7: i64, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$i5: i32, in_$p6: ref) returns (out_$i7: i64, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$i5: i32, out_$p6: ref)
{

  entry:
    out_$i7, out_$p8, out_$i9, out_$i10, out_$i5, out_$p6 := in_$i7, in_$p8, in_$i9, in_$i10, in_$i5, in_$p6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1666;

  $bb6:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i5, out_$p6 := out_$i9, out_$p8;
    goto $bb6_dummy;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    out_$i10 := $sgt.i32(out_$i5, 0);
    goto corral_source_split_1672;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    out_$i9 := $sub.i32(out_$i5, 1);
    call {:si_unique_call 464} {:cexpr "num"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p6, $mul.ref(out_$i7, 1));
    goto corral_source_split_1670;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(in_$i2);
    goto corral_source_split_1669;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} prefetchw(out_$p6);
    goto corral_source_split_1668;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i7, out_$p8, out_$i9, out_$i10, out_$i5, out_$p6 := prefetch_data_loop_$bb4(in_$i2, out_$i7, out_$p8, out_$i9, out_$i10, out_$i5, out_$p6);
    return;

  exit:
    return;
}



procedure prefetch_data_loop_$bb4(in_$i2: i32, in_$i7: i64, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$i5: i32, in_$p6: ref) returns (out_$i7: i64, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$i5: i32, out_$p6: ref);



implementation gru_reset_asid_limit_loop_$bb33(in_$p0: ref, in_$i30: i32, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i64, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i32, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$i78: i32, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i32, in_$i106: i32, in_$i107: i1, in_$i108: i1, in_$i109: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i110: i32, in_$i111: i1, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i112: i32, in_$i113: i32, in_vslice_dummy_var_102: i32) returns (out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i64, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i32, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$i78: i32, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i32, out_$i106: i32, out_$i107: i1, out_$i108: i1, out_$i109: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i110: i32, out_$i111: i1, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i112: i32, out_$i113: i32, out_vslice_dummy_var_102: i32)
{

  entry:
    out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i47, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i78, out_$p82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p91, out_$p92, out_$p93, out_$p94, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i106, out_$i107, out_$i108, out_$i109, out_$i43, out_$i44, out_$i45, out_$i46, out_$i110, out_$i111, out_$i33, out_$i34, out_$i35, out_$i36, out_$i112, out_$i113, out_vslice_dummy_var_102 := in_$i37, in_$p39, in_$p40, in_$i41, in_$i42, in_$i47, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p56, in_$p57, in_$p58, in_$p59, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i79, in_$i80, in_$i81, in_$i78, in_$p82, in_$i83, in_$i84, in_$i85, in_$p87, in_$p88, in_$i89, in_$p91, in_$p92, in_$p93, in_$p94, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i106, in_$i107, in_$i108, in_$i109, in_$i43, in_$i44, in_$i45, in_$i46, in_$i110, in_$i111, in_$i33, in_$i34, in_$i35, in_$i36, in_$i112, in_$i113, in_vslice_dummy_var_102;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1775;

  $bb82:
    assume out_$i111 == 1;
    assume {:verifier.code 0} true;
    out_$i33, out_$i34, out_$i35, out_$i36 := out_$i46, out_$i110, out_$i45, out_$i44;
    goto $bb82_dummy;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$i112, out_$i113 := out_$i44, out_$i46;
    assume true;
    goto $bb82;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$i111 := $sle.i32(out_$i110, 15);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$i110 := $add.i32(out_$i43, 1);
    call {:si_unique_call 506} {:cexpr "i"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_1793;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1792;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44, out_$i45, out_$i46 := out_$i96, out_$i109, out_$i97, out_$i106;
    goto $bb37;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44, out_$i45, out_$i46 := out_$i34, out_$i36, out_$i35, out_$i33;
    goto $bb37;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44, out_$i45, out_$i46 := out_$i34, out_$i36, out_$i35, out_$i33;
    goto $bb37;

  $bb35:
    assume out_$i42 == 1;
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i64(out_$i41, 0);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i37, 8));
    goto corral_source_split_1778;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i34);
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb38:
    assume out_$i52 == 1;
    goto corral_source_split_1796;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} out_$i51 := is_kernel_context(out_$p50);
    call {:si_unique_call 505} {:cexpr "tmp"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_1788;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i47, 8));
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i34);
    goto corral_source_split_1786;

  $bb36:
    assume !(out_$i42 == 1);
    goto corral_source_split_1785;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_1860;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i109 := out_$i36;
    goto $bb81;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$i109 := out_$i65;
    goto $bb81;

  $bb79:
    assume out_$i108 == 1;
    goto corral_source_split_1858;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i65, out_$i36);
    goto corral_source_split_1856;

  $bb76:
    assume out_$i107 == 1;
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$i107 := $sgt.i32(out_$i65, out_$i106);
    goto corral_source_split_1853;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_1852;

  $bb68:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := out_$i33;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i106 := out_$i99;
    goto $bb75;

  $bb70:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$i101, out_$i102 := out_$i97, out_$i99;
    assume true;
    goto $bb70;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$i100 := $sge.i32(out_$i99, out_$i36);
    goto corral_source_split_1842;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i33, 8);
    call {:si_unique_call 518} {:cexpr "asid"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_1841;

  $bb67:
    assume out_$i98 == 1;
    goto corral_source_split_1840;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i65, out_$i33);
    goto corral_source_split_1838;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  $bb43:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i96, out_$i97 := out_$i34, out_$i35;
    goto $bb66;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    out_$i96, out_$i97 := out_$i34, out_$i78;
    goto $bb66;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} out_vslice_dummy_var_102 := printk.ref.i32.ref.i32.ref.ref.i32.i32(.str.88, out_$i78, .str.87, out_$i84, out_$p88, out_$p94, out_$i65, out_$i34);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.0, out_$p93);
    goto corral_source_split_1832;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p92, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i89, 8));
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i34);
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i85, 8));
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i34);
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i16.i32(out_$i83);
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i16($M.0, out_$p82);
    goto corral_source_split_1823;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1822;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_1821;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i35;
    goto $bb61;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i81;
    goto $bb61;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i80;
    goto $bb61;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i79;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i77;
    goto $bb61;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb58:
    assume out_$i76 == 1;
    call {:si_unique_call 514} out_$i77 := devirtbounce(0, cpu_number);
    call {:si_unique_call 515} {:cexpr "pfo_ret_____3"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_1819;

  $bb54:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb45:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb42:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i67, 1);
    goto corral_source_split_1810;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i67 := $trunc.i64.i32(out_$i66);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$i66 := $M.1;
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i32(out_$i64, 16777215);
    call {:si_unique_call 507} {:cexpr "inuse_asid"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.0, out_$p63);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p62);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref($add.ref(out_$p59, $mul.ref(0, 25032)), $mul.ref(456, 1)), $mul.ref(out_$i53, 12)), $mul.ref(4, 1));
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i54, 8));
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i34);
    goto corral_source_split_1799;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(in_$i30);
    goto corral_source_split_1798;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb56:
    assume out_$i75 == 1;
    call {:si_unique_call 512} out_$i79 := devirtbounce(0, cpu_number);
    call {:si_unique_call 513} {:cexpr "pfo_ret_____4"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_1817;

  $bb55:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb52:
    assume out_$i73 == 1;
    call {:si_unique_call 510} out_$i80 := devirtbounce(0, cpu_number);
    call {:si_unique_call 511} {:cexpr "pfo_ret_____5"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_1815;

  $bb47:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb46:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb49:
    assume out_$i72 == 1;
    call {:si_unique_call 508} out_$i81 := devirtbounce(0, cpu_number);
    call {:si_unique_call 509} {:cexpr "pfo_ret_____6"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_1813;

  $bb48:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} __bad_size_call_parameter();
    goto corral_source_split_1835;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb51;

  $bb53:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb51;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb51;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i76 == 1);
    goto $bb51;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i107 == 1);
    goto $bb78;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i108 == 1);
    goto $bb78;

  $bb82_dummy:
    call {:si_unique_call 1} out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i47, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i78, out_$p82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p91, out_$p92, out_$p93, out_$p94, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i106, out_$i107, out_$i108, out_$i109, out_$i43, out_$i44, out_$i45, out_$i46, out_$i110, out_$i111, out_$i33, out_$i34, out_$i35, out_$i36, out_$i112, out_$i113, out_vslice_dummy_var_102 := gru_reset_asid_limit_loop_$bb33(in_$p0, in_$i30, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i47, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i78, out_$p82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p91, out_$p92, out_$p93, out_$p94, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i106, out_$i107, out_$i108, out_$i109, out_$i43, out_$i44, out_$i45, out_$i46, out_$i110, out_$i111, out_$i33, out_$i34, out_$i35, out_$i36, out_$i112, out_$i113, out_vslice_dummy_var_102);
    return;

  exit:
    return;
}



procedure gru_reset_asid_limit_loop_$bb33(in_$p0: ref, in_$i30: i32, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i64, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i32, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$i78: i32, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i32, in_$i106: i32, in_$i107: i1, in_$i108: i1, in_$i109: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i110: i32, in_$i111: i1, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i112: i32, in_$i113: i32, in_vslice_dummy_var_102: i32) returns (out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i64, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i32, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$i78: i32, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i32, out_$i106: i32, out_$i107: i1, out_$i108: i1, out_$i109: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i110: i32, out_$i111: i1, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i112: i32, out_$i113: i32, out_vslice_dummy_var_102: i32);



implementation gru_reset_asid_limit_loop_$bb32(in_$p0: ref, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i64, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i32, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$i78: i32, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i108: i1, in_$i109: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i110: i32, in_$i111: i1, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i112: i32, in_$i113: i32, in_vslice_dummy_var_102: i32) returns (out_$i31: i32, out_$i32: i32, out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i64, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i32, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$i78: i32, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i108: i1, out_$i109: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i110: i32, out_$i111: i1, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i112: i32, out_$i113: i32, out_vslice_dummy_var_102: i32)
{

  entry:
    out_$i31, out_$i32, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i47, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i78, out_$p82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p91, out_$p92, out_$p93, out_$p94, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i43, out_$i44, out_$i45, out_$i46, out_$i110, out_$i111, out_$i33, out_$i34, out_$i35, out_$i36, out_$i112, out_$i113, out_vslice_dummy_var_102 := in_$i31, in_$i32, in_$i37, in_$p39, in_$p40, in_$i41, in_$i42, in_$i47, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p56, in_$p57, in_$p58, in_$p59, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i79, in_$i80, in_$i81, in_$i78, in_$p82, in_$i83, in_$i84, in_$i85, in_$p87, in_$p88, in_$i89, in_$p91, in_$p92, in_$p93, in_$p94, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i43, in_$i44, in_$i45, in_$i46, in_$i110, in_$i111, in_$i33, in_$i34, in_$i35, in_$i36, in_$i112, in_$i113, in_vslice_dummy_var_102;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1773;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i31, out_$i32 := out_$i101, out_$i105;
    goto corral_source_split_1850_dummy;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_1850;

  $bb72:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := out_$i102;
    goto $bb73;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i104;
    goto $bb73;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} out_$i104 := gru_wrap_asid(in_$p0);
    call {:si_unique_call 520} {:cexpr "asid"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_1848;

  $bb71:
    assume out_$i103 == 1;
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$i103 := $sgt.i32(out_$i102, 16777199);
    goto corral_source_split_1845;

  $bb69:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$i101, out_$i102 := out_$i97, out_$i99;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$i100 := $sge.i32(out_$i99, out_$i36);
    goto corral_source_split_1842;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i33, 8);
    call {:si_unique_call 518} {:cexpr "asid"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_1841;

  $bb67:
    assume out_$i98 == 1;
    goto corral_source_split_1840;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i65, out_$i33);
    goto corral_source_split_1838;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  $bb43:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i96, out_$i97 := out_$i34, out_$i35;
    goto $bb66;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    out_$i96, out_$i97 := out_$i34, out_$i78;
    goto $bb66;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} out_vslice_dummy_var_102 := printk.ref.i32.ref.i32.ref.ref.i32.i32(.str.88, out_$i78, .str.87, out_$i84, out_$p88, out_$p94, out_$i65, out_$i34);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.0, out_$p93);
    goto corral_source_split_1832;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p92, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i89, 8));
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i34);
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i85, 8));
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i34);
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i16.i32(out_$i83);
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i16($M.0, out_$p82);
    goto corral_source_split_1823;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_1822;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_1821;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i35;
    goto $bb61;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i81;
    goto $bb61;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i80;
    goto $bb61;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i79;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i77;
    goto $bb61;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb58:
    assume out_$i76 == 1;
    call {:si_unique_call 514} out_$i77 := devirtbounce(0, cpu_number);
    call {:si_unique_call 515} {:cexpr "pfo_ret_____3"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_1819;

  $bb54:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb45:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb42:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i67, 1);
    goto corral_source_split_1810;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i67 := $trunc.i64.i32(out_$i66);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$i66 := $M.1;
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i32(out_$i64, 16777215);
    call {:si_unique_call 507} {:cexpr "inuse_asid"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.0, out_$p63);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p62);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref($add.ref(out_$p59, $mul.ref(0, 25032)), $mul.ref(456, 1)), $mul.ref(out_$i53, 12)), $mul.ref(4, 1));
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i54, 8));
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i34);
    goto corral_source_split_1799;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(in_$i30);
    goto corral_source_split_1798;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} out_$i51 := is_kernel_context(out_$p50);
    call {:si_unique_call 505} {:cexpr "tmp"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_1788;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i47, 8));
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i34);
    goto corral_source_split_1786;

  $bb36:
    assume !(out_$i42 == 1);
    goto corral_source_split_1785;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i64(out_$i41, 0);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i37, 8));
    goto corral_source_split_1778;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i34);
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    call out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i47, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i78, out_$p82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p91, out_$p92, out_$p93, out_$p94, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i106, out_$i107, out_$i108, out_$i109, out_$i43, out_$i44, out_$i45, out_$i46, out_$i110, out_$i111, out_$i33, out_$i34, out_$i35, out_$i36, out_$i112, out_$i113, out_vslice_dummy_var_102 := gru_reset_asid_limit_loop_$bb33(in_$p0, in_$i30, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i47, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i78, out_$p82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p91, out_$p92, out_$p93, out_$p94, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i106, out_$i107, out_$i108, out_$i109, out_$i43, out_$i44, out_$i45, out_$i46, out_$i110, out_$i111, out_$i33, out_$i34, out_$i35, out_$i36, out_$i112, out_$i113, out_vslice_dummy_var_102);
    goto $bb33_last;

  $bb33_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34, out_$i35, out_$i36 := out_$i32, 0, out_$i31, 16777200;
    goto $bb33;

  $bb82:
    assume out_$i111 == 1;
    assume {:verifier.code 0} true;
    out_$i33, out_$i34, out_$i35, out_$i36 := out_$i46, out_$i110, out_$i45, out_$i44;
    assume false;
    return;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$i112, out_$i113 := out_$i44, out_$i46;
    assume true;
    goto $bb82;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$i111 := $sle.i32(out_$i110, 15);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$i110 := $add.i32(out_$i43, 1);
    call {:si_unique_call 506} {:cexpr "i"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_1793;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1792;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44, out_$i45, out_$i46 := out_$i96, out_$i109, out_$i97, out_$i106;
    goto $bb37;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44, out_$i45, out_$i46 := out_$i34, out_$i36, out_$i35, out_$i33;
    goto $bb37;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44, out_$i45, out_$i46 := out_$i34, out_$i36, out_$i35, out_$i33;
    goto $bb37;

  $bb35:
    assume out_$i42 == 1;
    goto corral_source_split_1783;

  $bb38:
    assume out_$i52 == 1;
    goto corral_source_split_1796;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_1860;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i109 := out_$i36;
    goto $bb81;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$i109 := out_$i65;
    goto $bb81;

  $bb79:
    assume out_$i108 == 1;
    goto corral_source_split_1858;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i65, out_$i36);
    goto corral_source_split_1856;

  $bb76:
    assume out_$i107 == 1;
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$i107 := $sgt.i32(out_$i65, out_$i106);
    goto corral_source_split_1853;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_1852;

  $bb68:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := out_$i33;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i106 := out_$i99;
    goto $bb75;

  $bb70:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i107 == 1);
    goto $bb78;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i108 == 1);
    goto $bb78;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb56:
    assume out_$i75 == 1;
    call {:si_unique_call 512} out_$i79 := devirtbounce(0, cpu_number);
    call {:si_unique_call 513} {:cexpr "pfo_ret_____4"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_1817;

  $bb55:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb52:
    assume out_$i73 == 1;
    call {:si_unique_call 510} out_$i80 := devirtbounce(0, cpu_number);
    call {:si_unique_call 511} {:cexpr "pfo_ret_____5"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_1815;

  $bb47:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb46:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb49:
    assume out_$i72 == 1;
    call {:si_unique_call 508} out_$i81 := devirtbounce(0, cpu_number);
    call {:si_unique_call 509} {:cexpr "pfo_ret_____6"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_1813;

  $bb48:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} __bad_size_call_parameter();
    goto corral_source_split_1835;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb51;

  $bb53:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb51;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb51;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i76 == 1);
    goto $bb51;

  corral_source_split_1850_dummy:
    call {:si_unique_call 1} out_$i31, out_$i32, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i47, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i78, out_$p82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p91, out_$p92, out_$p93, out_$p94, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i43, out_$i44, out_$i45, out_$i46, out_$i110, out_$i111, out_$i33, out_$i34, out_$i35, out_$i36, out_$i112, out_$i113, out_vslice_dummy_var_102 := gru_reset_asid_limit_loop_$bb32(in_$p0, in_$i30, out_$i31, out_$i32, out_$i37, out_$p39, out_$p40, out_$i41, out_$i42, out_$i47, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i78, out_$p82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p88, out_$i89, out_$p91, out_$p92, out_$p93, out_$p94, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i43, out_$i44, out_$i45, out_$i46, out_$i110, out_$i111, out_$i33, out_$i34, out_$i35, out_$i36, out_$i112, out_$i113, out_vslice_dummy_var_102);
    return;

  exit:
    return;
}



procedure gru_reset_asid_limit_loop_$bb32(in_$p0: ref, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i37: i64, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i64, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i32, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$i78: i32, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i108: i1, in_$i109: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i110: i32, in_$i111: i1, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i112: i32, in_$i113: i32, in_vslice_dummy_var_102: i32) returns (out_$i31: i32, out_$i32: i32, out_$i37: i64, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i64, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i32, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$i78: i32, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i108: i1, out_$i109: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i110: i32, out_$i111: i1, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i112: i32, out_$i113: i32, out_vslice_dummy_var_102: i32);
  modifies $M.0;



implementation __lock_handle___0_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$i4, out_$i5 := in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb6_dummy;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_2101;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} out_$i4 := test_and_set_bit(1, in_$p1);
    call {:si_unique_call 602} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_2100;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} cpu_relax();
    goto corral_source_split_2099;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5 := __lock_handle___0_loop_$bb4(in_$p1, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure __lock_handle___0_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr;



implementation paravirt_read_tsc_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} paravirt_read_tsc_loop_$bb3();
    return;

  exit:
    return;
}



procedure paravirt_read_tsc_loop_$bb3();



implementation __lock_handle_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$i4, out_$i5 := in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb6_dummy;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_2145;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} out_$i4 := test_and_set_bit(1, in_$p1);
    call {:si_unique_call 619} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_2144;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} cpu_relax();
    goto corral_source_split_2143;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5 := __lock_handle_loop_$bb4(in_$p1, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure __lock_handle_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr;



implementation gru_unload_context_loop_$bb41()
{

  entry:
    goto $bb41, exit;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb41_dummy;

  $bb41_dummy:
    call {:si_unique_call 1} gru_unload_context_loop_$bb41();
    return;

  exit:
    return;
}



procedure gru_unload_context_loop_$bb41();



implementation gru_unload_context_loop_$bb31()
{

  entry:
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;

  $bb31_dummy:
    call {:si_unique_call 1} gru_unload_context_loop_$bb31();
    return;

  exit:
    return;
}



procedure gru_unload_context_loop_$bb31();



implementation gru_unload_mm_tracker_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} gru_unload_mm_tracker_loop_$bb3();
    return;

  exit:
    return;
}



procedure gru_unload_mm_tracker_loop_$bb3();



implementation gru_unload_context_data_loop_$bb19(in_$p1: ref, in_$p5: ref, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i44: i64, in_$p45: ref, in_$i46: i32, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p42: ref, in_$p43: ref, in_$i55: i32, in_$i56: i64, in_$i57: i64, in_$i58: i32, in_$i59: i1, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p60: ref, in_$i65: i64, in_$i66: i64, in_$p67: ref, in_$i68: i32, in_$i69: i64, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$i73: i64, in_$p74: ref, in_$i75: i64, in_$p76: ref) returns (out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i44: i64, out_$p45: ref, out_$i46: i32, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p42: ref, out_$p43: ref, out_$i55: i32, out_$i56: i64, out_$i57: i64, out_$i58: i32, out_$i59: i1, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p60: ref, out_$i65: i64, out_$i66: i64, out_$p67: ref, out_$i68: i32, out_$i69: i64, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$i73: i64, out_$p74: ref, out_$i75: i64, out_$p76: ref)
{

  entry:
    out_$i38, out_$i39, out_$i40, out_$i41, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$p42, out_$p43, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p35, out_$i36, out_$p37, out_$p60, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$p76 := in_$i38, in_$i39, in_$i40, in_$i41, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$p52, in_$p53, in_$i54, in_$p42, in_$p43, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p35, in_$i36, in_$p37, in_$p60, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$p71, in_$i72, in_$i73, in_$p74, in_$i75, in_$p76;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2466;

  $bb28:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$p35, out_$i36, out_$p37 := out_$p43, out_$i58, out_$p42;
    goto $bb28_dummy;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    out_$p60 := out_$p43;
    assume true;
    goto $bb28;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    out_$i59 := $sle.i32(out_$i58, 63);
    goto corral_source_split_2498;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i64.i32(out_$i57);
    call {:si_unique_call 730} {:cexpr "scr"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_2497;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} out_$i57 := find_next_bit(in_$p5, 64, out_$i56);
    call {:si_unique_call 729} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_2496;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i55);
    goto corral_source_split_2495;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i36, 1);
    goto corral_source_split_2494;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb23;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    out_$p42, out_$p43 := out_$p76, out_$p74;
    goto $bb23;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(out_$p37, $mul.ref(out_$i75, 1));
    goto corral_source_split_2492;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref(out_$p35, $mul.ref(out_$i73, 1));
    out_$i75 := $add.i64(256, 256);
    goto corral_source_split_2491;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} out_$i72 := gru_copy_handle(out_$p67, out_$p71);
    out_$i73 := $add.i64(out_$i66, out_$i72);
    goto corral_source_split_2490;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(in_$p1, $mul.ref(out_$i70, 1));
    goto corral_source_split_2489;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i68);
    out_$i70 := $add.i64(67174400, out_$i69);
    goto corral_source_split_2488;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    out_$i68 := $mul.i32(out_$i54, 256);
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(out_$p35, $mul.ref(out_$i66, 1));
    goto corral_source_split_2486;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} out_$i65 := gru_copy_handle(out_$p52, out_$p53);
    out_$i66 := $add.i64(out_$i51, out_$i65);
    goto corral_source_split_2485;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i38, 1);
    call {:si_unique_call 725} {:cexpr "i"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p37, $mul.ref(256, 1));
    goto corral_source_split_2482;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p35, $mul.ref(out_$i51, 1));
    goto corral_source_split_2481;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} out_$i50 := gru_copy_handle(out_$p45, out_$p49);
    call {:si_unique_call 724} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i50);
    out_$i51 := $add.i64(out_$i44, out_$i50);
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(in_$p1, $mul.ref(out_$i48, 1));
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i46);
    out_$i48 := $add.i64(67174400, out_$i47);
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$i46 := $mul.i32(out_$i38, 256);
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p35, $mul.ref(out_$i44, 1));
    goto corral_source_split_2476;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} out_$i44 := gru_copy_handle(out_$p35, out_$p37);
    call {:si_unique_call 722} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_2475;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume out_$i41 == 1;
    goto corral_source_split_2473;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    out_$p42, out_$p43 := out_$p37, out_$p35;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$i41 := $sgt.i32(out_$i40, out_$i38);
    goto corral_source_split_2471;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    out_$i40 := $mul.i32(out_$i39, 2);
    goto corral_source_split_2470;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i36, 1);
    goto corral_source_split_2469;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i38 := $mul.i32(out_$i36, 2);
    call {:si_unique_call 720} {:cexpr "i"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_2468;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i38, out_$i39, out_$i40, out_$i41, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$p42, out_$p43, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p35, out_$i36, out_$p37, out_$p60, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$p76 := gru_unload_context_data_loop_$bb19(in_$p1, in_$p5, out_$i38, out_$i39, out_$i40, out_$i41, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$p42, out_$p43, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p35, out_$i36, out_$p37, out_$p60, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$p76);
    return;

  exit:
    return;
}



procedure gru_unload_context_data_loop_$bb19(in_$p1: ref, in_$p5: ref, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i44: i64, in_$p45: ref, in_$i46: i32, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p42: ref, in_$p43: ref, in_$i55: i32, in_$i56: i64, in_$i57: i64, in_$i58: i32, in_$i59: i1, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p60: ref, in_$i65: i64, in_$i66: i64, in_$p67: ref, in_$i68: i32, in_$i69: i64, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$i73: i64, in_$p74: ref, in_$i75: i64, in_$p76: ref) returns (out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i44: i64, out_$p45: ref, out_$i46: i32, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p42: ref, out_$p43: ref, out_$i55: i32, out_$i56: i64, out_$i57: i64, out_$i58: i32, out_$i59: i1, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p60: ref, out_$i65: i64, out_$i66: i64, out_$p67: ref, out_$i68: i32, out_$i69: i64, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$i73: i64, out_$p74: ref, out_$i75: i64, out_$p76: ref);
  modifies $M.0;



implementation gru_unload_context_data_loop_$bb4(in_$p1: ref, in_$p5: ref, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i64, in_$i27: i64, in_$i28: i32, in_$i29: i1, in_$i15: i32, in_$i77: i32, in_$i78: i64, in_$i79: i64, in_$p80: ref) returns (out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i64, out_$i27: i64, out_$i28: i32, out_$i29: i1, out_$i15: i32, out_$i77: i32, out_$i78: i64, out_$i79: i64, out_$p80: ref)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i15, out_$i77, out_$i78, out_$i79, out_$p80 := in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i15, in_$i77, in_$i78, in_$i79, in_$p80;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2429;

  $bb13:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i28;
    goto $bb13_dummy;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    out_$i29 := $sle.i32(out_$i28, 63);
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i64.i32(out_$i27);
    call {:si_unique_call 714} {:cexpr "scr"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2452;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} out_$i27 := find_next_bit(in_$p5, 64, out_$i26);
    call {:si_unique_call 713} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_2451;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i25);
    goto corral_source_split_2450;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i15, 1);
    goto corral_source_split_2449;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb8;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} gru_flush_cache(out_$p80);
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref(in_$p1, $mul.ref(out_$i79, 1));
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i77);
    out_$i79 := $add.i64(67174400, out_$i78);
    goto corral_source_split_2445;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i77 := $mul.i32(out_$i24, 256);
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i16, 1);
    call {:si_unique_call 710} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} gru_flush_cache(out_$p23);
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(in_$p1, $mul.ref(out_$i22, 1));
    goto corral_source_split_2440;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    out_$i22 := $add.i64(67174400, out_$i21);
    goto corral_source_split_2439;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i20 := $mul.i32(out_$i16, 256);
    goto corral_source_split_2438;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume out_$i19 == 1;
    goto corral_source_split_2436;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, out_$i16);
    goto corral_source_split_2434;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    out_$i18 := $mul.i32(out_$i17, 2);
    goto corral_source_split_2433;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i15, 1);
    goto corral_source_split_2432;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i16 := $mul.i32(out_$i15, 2);
    call {:si_unique_call 708} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i15, out_$i77, out_$i78, out_$i79, out_$p80 := gru_unload_context_data_loop_$bb4(in_$p1, in_$p5, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i15, out_$i77, out_$i78, out_$i79, out_$p80);
    return;

  exit:
    return;
}



procedure gru_unload_context_data_loop_$bb4(in_$p1: ref, in_$p5: ref, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i64, in_$i27: i64, in_$i28: i32, in_$i29: i1, in_$i15: i32, in_$i77: i32, in_$i78: i64, in_$i79: i64, in_$p80: ref) returns (out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i64, out_$i27: i64, out_$i28: i32, out_$i29: i1, out_$i15: i32, out_$i77: i32, out_$i78: i64, out_$i79: i64, out_$p80: ref);
  modifies $M.0;



implementation gru_free_gru_context_loop_$bb28()
{

  entry:
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  $bb28_dummy:
    call {:si_unique_call 1} gru_free_gru_context_loop_$bb28();
    return;

  exit:
    return;
}



procedure gru_free_gru_context_loop_$bb28();



implementation reserve_resources_loop_$bb8()
{

  entry:
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    call {:si_unique_call 1} reserve_resources_loop_$bb8();
    return;

  exit:
    return;
}



procedure reserve_resources_loop_$bb8();



implementation reserve_resources_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$p4: ref, in_$i9: i64, in_$i10: i64, in_$i11: i32, in_$i12: i1, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$i18: i8, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i7: i32, in_$p8: ref) returns (out_$i9: i64, out_$i10: i64, out_$i11: i32, out_$i12: i1, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$i18: i8, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i7: i32, out_$p8: ref)
{

  entry:
    out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i7, out_$p8 := in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i7, in_$p8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2791;

  $bb13:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i7, out_$p8 := out_$i20, out_$p19;
    goto $bb13_dummy;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i7, 0);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i7, 1);
    call {:si_unique_call 834} {:cexpr "n"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_2813;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2812;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$p19 := out_$p8;
    goto $bb12;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p17;
    goto $bb12;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p8, out_$i18);
    goto corral_source_split_2810;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i32.i8(out_$i11);
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p8, $mul.ref(1, 1));
    goto corral_source_split_2808;

  $bb10:
    assume out_$i16 == 1;
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} __set_bit(out_$i14, in_$p4);
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i11);
    goto corral_source_split_2802;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} __clear_bit(out_$i13, in_$p0);
    goto corral_source_split_2801;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i11);
    goto corral_source_split_2800;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, in_$i2);
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i64.i32(out_$i10);
    call {:si_unique_call 830} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} out_$i10 := find_first_bit(in_$p0, out_$i9);
    call {:si_unique_call 829} {:cexpr "tmp"} boogie_si_record_i64(out_$i10);
    goto corral_source_split_2794;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(in_$i2);
    goto corral_source_split_2793;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i7, out_$p8 := reserve_resources_loop_$bb4(in_$p0, in_$i2, in_$p4, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i7, out_$p8);
    return;

  exit:
    return;
}



procedure reserve_resources_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$p4: ref, in_$i9: i64, in_$i10: i64, in_$i11: i32, in_$i12: i1, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$i18: i8, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i7: i32, in_$p8: ref) returns (out_$i9: i64, out_$i10: i64, out_$i11: i32, out_$i12: i1, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$i18: i8, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i7: i32, out_$p8: ref);
  modifies $M.0;



implementation gru_update_cch_loop_$bb20()
{

  entry:
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb20_dummy;

  $bb20_dummy:
    call {:si_unique_call 1} gru_update_cch_loop_$bb20();
    return;

  exit:
    return;
}



procedure gru_update_cch_loop_$bb20();



implementation gru_update_cch_loop_$bb9()
{

  entry:
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;

  $bb9_dummy:
    call {:si_unique_call 1} gru_update_cch_loop_$bb9();
    return;

  exit:
    return;
}



procedure gru_update_cch_loop_$bb9();



implementation gru_find_current_gts_nolock_loop_$bb4(in_$i1: i32, in_$i9: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p11: ref)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$p15, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p11 := in_$p12, in_$i13, in_$i14, in_$p15, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3008;

  $bb10:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p19;
    goto $bb10_dummy;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, in_$i9);
    goto corral_source_split_3023;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_3022;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3021;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_3020;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_3019;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 464)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3018;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    out_$p15 := out_$p11;
    assume true;
    goto $bb7;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, in_$i1);
    goto corral_source_split_3012;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_3011;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 464)), $mul.ref(260, 1));
    goto corral_source_split_3010;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$p15, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p11 := gru_find_current_gts_nolock_loop_$bb4(in_$i1, in_$i9, out_$p12, out_$i13, out_$i14, out_$p15, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p11);
    return;

  exit:
    return;
}



procedure gru_find_current_gts_nolock_loop_$bb4(in_$i1: i32, in_$i9: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p11: ref);



implementation gru_send_message_gpa_loop_$bb18(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i16: i32, in_$p25: ref, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i50: i32) returns (out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i50: i32)
{

  entry:
    out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50 := in_$p35, in_$i36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(in_$p25);
    goto corral_source_split_3209;

  $bb22:
    assume {:verifier.code 0} true;
    assume out_$i49 == 1;
    goto $bb22_dummy;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i48;
    assume true;
    goto $bb22;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, $sub.i32(0, 1));
    goto corral_source_split_3227;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3226;

  $bb20:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := 0;
    goto $bb21;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i47;
    goto $bb21;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} out_$i47 := send_message_failure(out_$p45, in_$p0, out_$p46, in_$i16);
    call {:si_unique_call 932} {:cexpr "ret"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.9, in_$p4);
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.10, in_$p3);
    goto corral_source_split_3222;

  $bb19:
    assume out_$i44 == 1;
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_3219;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} out_$i43 := gru_wait(out_$p42);
    call {:si_unique_call 930} {:cexpr "istatus"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.10, in_$p3);
    goto corral_source_split_3217;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} gru_mesq(out_$p37, out_$i39, out_$i40, out_$i41, 1);
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(in_$i16);
    goto corral_source_split_3215;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i36);
    goto corral_source_split_3214;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i64($M.0, out_$p38);
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3212;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.10, in_$p3);
    goto corral_source_split_3211;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} out_$i36 := gru_get_tri(out_$p35);
    call {:si_unique_call 927} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3210;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50 := gru_send_message_gpa_loop_$bb18(in_$p0, in_$p3, in_$p4, in_$i16, in_$p25, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50);
    return;

  exit:
    return;
}



procedure gru_send_message_gpa_loop_$bb18(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i16: i32, in_$p25: ref, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i50: i32) returns (out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i50: i32);
  modifies $M.8, $M.11, $M.0, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_send_message_gpa_loop_$bb9()
{

  entry:
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;

  $bb9_dummy:
    call {:si_unique_call 1} gru_send_message_gpa_loop_$bb9();
    return;

  exit:
    return;
}



procedure gru_send_message_gpa_loop_$bb9();



implementation gru_get_cpu_resources_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} gru_get_cpu_resources_loop_$bb3();
    return;

  exit:
    return;
}



procedure gru_get_cpu_resources_loop_$bb3();



implementation send_message_failure_loop_$bb37()
{

  entry:
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb37_dummy;

  $bb37_dummy:
    call {:si_unique_call 1} send_message_failure_loop_$bb37();
    return;

  exit:
    return;
}



procedure send_message_failure_loop_$bb37();



implementation send_noop_message_loop_$bb45()
{

  entry:
    goto $bb45, exit;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb45_dummy;

  $bb45_dummy:
    call {:si_unique_call 1} send_noop_message_loop_$bb45();
    return;

  exit:
    return;
}



procedure send_noop_message_loop_$bb45();



implementation gru_wait_idle_or_exception_loop_$bb4(in_$p1: ref, in_$i8: i64, in_$i9: i64, in_$i10: i64, in_$i11: i8, in_$i12: i32, in_$i13: i1) returns (out_$i8: i64, out_$i9: i64, out_$i10: i64, out_$i11: i8, out_$i12: i32, out_$i13: i1)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i13 == 1;
    goto $bb6_dummy;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$i13 := $sgt.i32(out_$i12, 1);
    goto corral_source_split_3871;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i8.i32(out_$i11);
    goto corral_source_split_3870;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i64.i8(out_$i10);
    goto corral_source_split_3869;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$i10 := $and.i64(out_$i9, 3);
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i9 := $lshr.i64(out_$i8, 56);
    goto corral_source_split_3867;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i64($M.0, in_$p1);
    goto corral_source_split_3866;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} cpu_relax();
    call {:si_unique_call 1130} devirtbounce.1(0);
    goto corral_source_split_3865;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := gru_wait_idle_or_exception_loop_$bb4(in_$p1, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure gru_wait_idle_or_exception_loop_$bb4(in_$p1: ref, in_$i8: i64, in_$i9: i64, in_$i10: i64, in_$i11: i8, in_$i12: i32, in_$i13: i1) returns (out_$i8: i64, out_$i9: i64, out_$i10: i64, out_$i11: i8, out_$i12: i32, out_$i13: i1);



implementation gru_retry_exception_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i5: i32, in_$i7: i32, in_$i8: i1, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_vslice_dummy_var_113: i32) returns (out_$i5: i32, out_$i7: i32, out_$i8: i1, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_vslice_dummy_var_113: i32)
{

  entry:
    out_$i5, out_$i7, out_$i8, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_vslice_dummy_var_113 := in_$i5, in_$i7, in_$i8, in_$p10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_vslice_dummy_var_113;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb21:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := out_$i18;
    goto $bb21_dummy;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 0);
    goto corral_source_split_3923;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} out_$i25 := gru_wait_idle_or_exception(in_$p2);
    call {:si_unique_call 1140} {:cexpr "tmp"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_3922;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} gru_flush_cache(out_$p24);
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p20, out_$i23);
    goto corral_source_split_3919;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$i23 := $or.i64(out_$i22, 1);
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i64(out_$i21, $sub.i64(0, 2));
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_3916;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3915;

  $bb19:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i5, 0);
    goto corral_source_split_3911;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i18 := $sub.i32(out_$i5, 1);
    call {:si_unique_call 1137} {:cexpr "retry"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_3910;

  $bb15:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_3908;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i32(out_$i15, 1);
    goto corral_source_split_3907;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.13, out_$p14);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3905;

  $bb13:
    assume !(out_$i13 == 1);
    goto corral_source_split_3904;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_3902;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$i12 := $and.i32(out_$i11, $sub.i32(0, 414593));
    goto corral_source_split_3901;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.12, out_$p10);
    goto corral_source_split_3900;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_3899;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} out_vslice_dummy_var_113 := gru_get_cb_exception_detail(in_$p0, in_$p1);
    goto corral_source_split_3898;

  $bb9:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_3894;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} out_$i7 := gru_get_cb_message_queue_substatus(in_$p0);
    call {:si_unique_call 1135} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_3893;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i5, out_$i7, out_$i8, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_vslice_dummy_var_113 := gru_retry_exception_loop_$bb4(in_$p0, in_$p1, in_$p2, out_$i5, out_$i7, out_$i8, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_vslice_dummy_var_113);
    return;

  exit:
    return;
}



procedure gru_retry_exception_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i5: i32, in_$i7: i32, in_$i8: i1, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_vslice_dummy_var_113: i32) returns (out_$i5: i32, out_$i7: i32, out_$i8: i1, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_vslice_dummy_var_113: i32);
  modifies $M.0, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_get_cb_exception_detail_loop_$bb25()
{

  entry:
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb25_dummy:
    call {:si_unique_call 1} gru_get_cb_exception_detail_loop_$bb25();
    return;

  exit:
    return;
}



procedure gru_get_cb_exception_detail_loop_$bb25();



implementation gru_get_cb_exception_detail_loop_$bb4(in_$p0: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p25: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i5: i32, in_$p6: ref, in_$p38: ref) returns (out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p25: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i5: i32, out_$p6: ref, out_$p38: ref)
{

  entry:
    out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p25, out_$i35, out_$i36, out_$i37, out_$i5, out_$p6, out_$p38 := in_$i7, in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$i14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i26, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p25, in_$i35, in_$i36, in_$i37, in_$i5, in_$p6, in_$p38;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;

  $bb20:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i5, out_$p6 := out_$i35, out_$p25;
    goto $bb20_dummy;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$p38 := out_$p25;
    assume true;
    goto $bb20;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    out_$i37 := $sgt.i32(out_$i36, out_$i35);
    goto corral_source_split_3966;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} out_$i36 := uv_num_possible_blades();
    call {:si_unique_call 1147} {:cexpr "tmp"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3965;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1145} {:cexpr "bid"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3964;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3963;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p25 := $0.ref;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p25 := out_$p18;
    goto $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i24 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i20 == 1;
    goto $bb11;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_3955;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_3954;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_3953;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_3952;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.4, out_$p15);
    goto corral_source_split_3951;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i14, 8));
    goto corral_source_split_3950;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i5);
    goto corral_source_split_3949;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$p12 := out_$p6;
    assume true;
    goto $bb7;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i10, 0);
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.4, out_$p8);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i7, 8));
    goto corral_source_split_3934;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i5);
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i64(out_$i23, 0);
    goto corral_source_split_3961;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_3960;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_3959;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_3958;

  $bb12:
    assume !(out_$i20 == 1);
    goto corral_source_split_3957;

  $bb18:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    out_$p34 := out_$p18;
    assume true;
    goto $bb18;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    out_$i33 := $ule.i64(out_$i32, 134217727);
    goto corral_source_split_3975;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i64(out_$i26, out_$i31);
    call {:si_unique_call 1148} {:cexpr "off"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_3973;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_3972;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 424)), $mul.ref(16, 1));
    goto corral_source_split_3971;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p18, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_3969;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_3968;

  $bb14:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p25, out_$i35, out_$i36, out_$i37, out_$i5, out_$p6, out_$p38 := gru_get_cb_exception_detail_loop_$bb4(in_$p0, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p25, out_$i35, out_$i36, out_$i37, out_$i5, out_$p6, out_$p38);
    return;

  exit:
    return;
}



procedure gru_get_cb_exception_detail_loop_$bb4(in_$p0: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p25: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i5: i32, in_$p6: ref, in_$p38: ref) returns (out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p25: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i5: i32, out_$p6: ref, out_$p38: ref);



implementation gru_lock_kernel_context_loop_$bb4(in_$i0: i32, in_$i4: i1, in_$i5: i32, in_$i6: i32, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i1, in_$i14: i32, in_$i15: i1, in_$p18: ref, in_$i16: i32, in_$p17: ref, in_$i12: i32, in_$p13: ref) returns (out_$i4: i1, out_$i5: i32, out_$i6: i32, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i1, out_$i14: i32, out_$i15: i1, out_$p18: ref, out_$i16: i32, out_$p17: ref, out_$i12: i32, out_$p13: ref)
{

  entry:
    out_$i4, out_$i5, out_$i6, out_$i7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i14, out_$i15, out_$p18, out_$i16, out_$p17, out_$i12, out_$p13 := in_$i4, in_$i5, in_$i6, in_$i7, in_$p8, in_$p9, in_$p10, in_$i11, in_$i14, in_$i15, in_$p18, in_$i16, in_$p17, in_$i12, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(in_$i0, 0);
    goto corral_source_split_4054;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    goto corral_source_split_4073_dummy;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} up_read(out_$p18);
    goto corral_source_split_4073;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p9, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_4072;

  $bb10:
    assume out_$i15 == 1;
    goto corral_source_split_4071;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    out_$i16, out_$p17 := out_$i6, out_$p9;
    assume true;
    goto $bb10;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, out_$i6);
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} out_$i14 := uv_numa_blade_id();
    call {:si_unique_call 1167} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_4068;

  $bb8:
    assume out_$i11 == 1;
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$i12, out_$p13 := out_$i6, out_$p9;
    assume true;
    goto $bb8;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(in_$i0, 0);
    goto corral_source_split_4065;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} down_read(out_$p10);
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_4063;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.4, out_$p8);
    goto corral_source_split_4062;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i7, 8));
    goto corral_source_split_4061;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    goto corral_source_split_4060;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4059;

  $bb6:
    assume !(out_$i4 == 1);
    call {:si_unique_call 1164} {:cexpr "gru_lock_kernel_context:arg:bid"} boogie_si_record_i32(in_$i0);
    assume {:verifier.code 0} true;
    out_$i6 := in_$i0;
    goto $bb7;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    out_$i6 := out_$i5;
    goto $bb7;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} out_$i5 := uv_numa_blade_id();
    call {:si_unique_call 1163} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_4057;

  $bb5:
    assume out_$i4 == 1;
    goto corral_source_split_4056;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_4073_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$i6, out_$i7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i14, out_$i15, out_$p18, out_$i16, out_$p17, out_$i12, out_$p13 := gru_lock_kernel_context_loop_$bb4(in_$i0, out_$i4, out_$i5, out_$i6, out_$i7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i14, out_$i15, out_$p18, out_$i16, out_$p17, out_$i12, out_$p13);
    return;

  exit:
    return;
}



procedure gru_lock_kernel_context_loop_$bb4(in_$i0: i32, in_$i4: i1, in_$i5: i32, in_$i6: i32, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i1, in_$i14: i32, in_$i15: i1, in_$p18: ref, in_$i16: i32, in_$p17: ref, in_$i12: i32, in_$p13: ref) returns (out_$i4: i1, out_$i5: i32, out_$i6: i32, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i1, out_$i14: i32, out_$i15: i1, out_$p18: ref, out_$i16: i32, out_$p17: ref, out_$i12: i32, out_$p13: ref);



implementation gru_load_kernel_context_loop_$bb12(in_$p15: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1) returns (out_$p42: ref, out_$i43: i64, out_$i44: i1)
{

  entry:
    out_$p42, out_$i43, out_$i44 := in_$p42, in_$i43, in_$i44;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    goto $bb14_dummy;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i64(out_$i43, 0);
    goto corral_source_split_4158;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_4157;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} out_$p42 := gru_assign_gru_context(in_$p15);
    goto corral_source_split_4156;

  SeqInstr_105:
    goto corral_source_split_4155;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} gru_steal_context(in_$p15);
    goto SeqInstr_104;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} msleep(1);
    goto corral_source_split_4154;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p42, out_$i43, out_$i44 := gru_load_kernel_context_loop_$bb12(in_$p15, out_$p42, out_$i43, out_$i44);
    return;

  exit:
    return;
}



procedure gru_load_kernel_context_loop_$bb12(in_$p15: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1) returns (out_$p42: ref, out_$i43: i64, out_$i44: i1);
  modifies $M.0, $CurrAddr, $M.6, $M.10, $M.9, assertsPassed, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation mmu_find_ops_loop_$bb9(in_$p1: ref, in_$p3: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$i41: i1, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$i41: i1, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p24: ref)
{

  entry:
    out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$p24 := in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p43, in_$i44, in_$i45, in_$p24;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4443;

  $bb18:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$p24 := out_$p43;
    goto $bb18_dummy;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_4472;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_4471;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4470;

  $bb16:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$p43 := $0.ref;
    goto $bb17;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p38;
    goto $bb17;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    goto corral_source_split_4468;

  $bb15:
    assume out_$i41 == 1;
    goto corral_source_split_4467;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_4464;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} out_$i39 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1270} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_4463;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_4462;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4461;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} __read_once_size(out_$p34, out_$p36, 8);
    goto corral_source_split_4460;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_4459;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4458;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_4457;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p24, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4456;

  $bb12:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p24;
    assume true;
    goto $bb12;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i27, out_$i28);
    goto corral_source_split_4449;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_4448;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_4447;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_4446;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4445;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$p24 := mmu_find_ops_loop_$bb9(in_$p1, in_$p3, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$p24);
    return;

  exit:
    return;
}



procedure mmu_find_ops_loop_$bb9(in_$p1: ref, in_$p3: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$i41: i1, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$i41: i1, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p24: ref);
  modifies $M.0;



implementation gru_get_next_message_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$p13: ref, in_$p22: ref, in_$i23: i32) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$p13: ref, out_$p22: ref, out_$i23: i32)
{

  entry:
    out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p13, out_$p22, out_$i23 := in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p13, in_$p22, in_$i23;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4674;

  $bb6:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p16;
    goto $bb6_dummy;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    out_$p22, out_$i23 := out_$p16, out_$i20;
    assume true;
    goto $bb6;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 2);
    goto corral_source_split_4684;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i8.i32(out_$i19);
    call {:si_unique_call 1323} {:cexpr "present"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_4683;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i8($M.0, out_$p18);
    goto corral_source_split_4682;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4681;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_4680;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_4679;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p3, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_4678;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} gru_free_message(in_$p0, out_$p14);
    goto corral_source_split_4677;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_4676;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p13, out_$p22, out_$i23 := gru_get_next_message_loop_$bb4(in_$p0, in_$p3, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p13, out_$p22, out_$i23);
    return;

  exit:
    return;
}



procedure gru_get_next_message_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$p13: ref, in_$p22: ref, in_$i23: i32) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$p13: ref, out_$p22: ref, out_$i23: i32);
  modifies $M.0;



implementation gru_dump_chiplet_request_loop_$bb18(in_$p1: ref, in_$p32: ref, in_$p39: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i60: i8, in_$i61: i32, in_$i62: i8, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i8, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i8, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i81: i32) returns (out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i60: i8, out_$i61: i32, out_$i62: i8, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i8, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i8, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i81: i32)
{

  entry:
    out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i50, out_$p51, out_$i52, out_$i81 := in_$p53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i50, in_$p51, in_$i52, in_$i81;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5822;

  $bb29:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i50, out_$p51, out_$i52 := out_$i78, out_$p77, out_$i79;
    goto $bb29_dummy;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    out_$i81 := out_$i78;
    assume true;
    goto $bb29;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    out_$i80 := $sle.i32(out_$i79, 15);
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i52, 1);
    call {:si_unique_call 1620} {:cexpr "ctxnum"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_5855;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5854;

  $bb24:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    out_$p77, out_$i78 := out_$p51, out_$i50;
    goto $bb28;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    out_$p77, out_$i78 := out_$p75, out_$i76;
    goto $bb28;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i50, 1);
    call {:si_unique_call 1619} {:cexpr "cnt"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_5852;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(out_$p51, $mul.ref(out_$i74, 1));
    goto corral_source_split_5851;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i71);
    goto corral_source_split_5850;

  $bb26:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i71;
    assume true;
    goto $bb26;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i71, 0);
    goto corral_source_split_5841;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} out_$i71 := gru_dump_context(in_$p32, out_$i52, out_$p51, in_$p39, out_$i62, out_$i66, out_$i70);
    call {:si_unique_call 1618} {:cexpr "ret"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_5840;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_$i70 := $trunc.i32.i8(out_$i69);
    goto corral_source_split_5839;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i8.i32(out_$i68);
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.0, out_$p67);
    goto corral_source_split_5837;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p1, $mul.ref(0, 56)), $mul.ref(14, 1));
    goto corral_source_split_5836;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i8(out_$i65);
    goto corral_source_split_5835;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i8.i32(out_$i64);
    goto corral_source_split_5834;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.0, out_$p63);
    goto corral_source_split_5833;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p1, $mul.ref(0, 56)), $mul.ref(13, 1));
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.i32.i8(out_$i61);
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i8.i32(out_$i60);
    goto corral_source_split_5830;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i8($M.0, out_$p59);
    goto corral_source_split_5829;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p1, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_5828;

  $bb23:
    assume {:verifier.code 0} true;
    assume out_$i58 == 1;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i55 == 1;
    goto $bb21;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, out_$i52);
    goto corral_source_split_5826;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    goto corral_source_split_5825;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i57, 0);
    goto corral_source_split_5846;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_5845;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5844;

  $bb22:
    assume !(out_$i55 == 1);
    goto corral_source_split_5843;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i50, out_$p51, out_$i52, out_$i81 := gru_dump_chiplet_request_loop_$bb18(in_$p1, in_$p32, in_$p39, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i50, out_$p51, out_$i52, out_$i81);
    return;

  exit:
    return;
}



procedure gru_dump_chiplet_request_loop_$bb18(in_$p1: ref, in_$p32: ref, in_$p39: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i60: i8, in_$i61: i32, in_$i62: i8, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i8, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i8, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i81: i32) returns (out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i60: i8, out_$i61: i32, out_$i62: i8, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i8, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i8, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i81: i32);
  modifies $M.23, $M.3, $M.0, $CurrAddr;



implementation gru_dump_context_loop_$bb1(in_$p14: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i20: i32, in_$i21: i1, in_$i15: i32, in_$i22: i32) returns (out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i20: i32, out_$i21: i1, out_$i15: i32, out_$i22: i32)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i15, out_$i22 := in_$i16, in_$i17, in_$i18, in_$i20, in_$i21, in_$i15, in_$i22;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_6203;

  $bb7:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i20;
    goto $bb7_dummy;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i16;
    assume true;
    goto $bb7;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    out_$i21 := $sle.i32(out_$i20, 9);
    goto corral_source_split_6222;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i15, 1);
    call {:si_unique_call 1730} {:cexpr "try"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_6221;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} msleep(1);
    goto corral_source_split_6220;

  $bb4:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i16;
    assume true;
    goto $bb4;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_6206;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} out_$i16 := trylock_cch_handle(in_$p14);
    call {:si_unique_call 1726} {:cexpr "cch_locked"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_6205;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i15, out_$i22 := gru_dump_context_loop_$bb1(in_$p14, out_$i16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i15, out_$i22);
    return;

  exit:
    return;
}



procedure gru_dump_context_loop_$bb1(in_$p14: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i20: i32, in_$i21: i1, in_$i15: i32, in_$i22: i32) returns (out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i20: i32, out_$i21: i1, out_$i15: i32, out_$i22: i32);
  modifies $CurrAddr;



implementation gru_dump_context_data_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i32, in_$p6: ref, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$p22: ref, in_$p40: ref, in_$i41: i32, in_$i42: i64, in_$i43: i64, in_$i44: i32, in_$i45: i1, in_$i16: i32, in_$p17: ref, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i64, in_$i69: i64, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i73: i64, in_$p74: ref) returns (out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$p22: ref, out_$p40: ref, out_$i41: i32, out_$i42: i64, out_$i43: i64, out_$i44: i32, out_$i45: i1, out_$i16: i32, out_$p17: ref, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i64, out_$i69: i64, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$i73: i64, out_$p74: ref)
{

  entry:
    out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$p22, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i16, out_$p17, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74 := in_$i18, in_$i19, in_$i20, in_$i21, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$p38, in_$i39, in_$p22, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i16, in_$p17, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$p74;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6412;

  $bb29:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$p17 := out_$i44, out_$p22;
    goto $bb29_dummy;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    out_$i45 := $sle.i32(out_$i44, 63);
    goto corral_source_split_6451;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i64.i32(out_$i43);
    call {:si_unique_call 1783} {:cexpr "scr"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_6450;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} out_$i43 := find_next_bit(out_$p40, 64, out_$i42);
    call {:si_unique_call 1782} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_6449;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i41);
    goto corral_source_split_6448;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i16, 1);
    goto corral_source_split_6447;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6446;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb8;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p74;
    goto $bb8;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref(out_$p17, $mul.ref(out_$i73, 1));
    goto corral_source_split_6490;

  $bb47:
    out_$i73 := $add.i64(256, 256);
    goto corral_source_split_6489;

  $bb46:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_6487;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} out_$i71 := gru_user_copy_handle(in_$p6, out_$p70);
    goto corral_source_split_6486;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(in_$p0, $mul.ref(out_$i69, 1));
    goto corral_source_split_6485;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i67);
    out_$i69 := $add.i64(67174400, out_$i68);
    goto corral_source_split_6484;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i67 := $mul.i32(out_$i39, 256);
    goto corral_source_split_6483;

  $bb43:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_6481;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} out_$i65 := gru_user_copy_handle(in_$p6, out_$p64);
    goto corral_source_split_6480;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(in_$p0, $mul.ref(out_$i63, 1));
    goto corral_source_split_6479;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i61);
    out_$i63 := $add.i64(67207168, out_$i62);
    goto corral_source_split_6478;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i61 := $mul.i32(out_$i39, 256);
    goto corral_source_split_6477;

  $bb40:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_6475;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} out_$i59 := gru_user_copy_handle(in_$p6, out_$p38);
    goto corral_source_split_6474;

  $bb37:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} gru_flush_cache(out_$p38);
    goto corral_source_split_6472;

  $bb36:
    assume out_$i58 == 1;
    goto corral_source_split_6471;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(in_$i5, 0);
    goto corral_source_split_6444;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i18, 1);
    call {:si_unique_call 1780} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_6442;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p17, $mul.ref(256, 1));
    goto corral_source_split_6441;

  $bb25:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_6439;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} out_$i36 := gru_user_copy_handle(in_$p6, out_$p35);
    call {:si_unique_call 1779} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_6438;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(in_$p0, $mul.ref(out_$i34, 1));
    goto corral_source_split_6437;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i32);
    out_$i34 := $add.i64(67174400, out_$i33);
    goto corral_source_split_6436;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i32 := $mul.i32(out_$i18, 256);
    goto corral_source_split_6435;

  $bb21:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_6433;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} out_$i30 := gru_user_copy_handle(in_$p6, out_$p29);
    call {:si_unique_call 1777} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_6432;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(in_$p0, $mul.ref(out_$i28, 1));
    goto corral_source_split_6431;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    out_$i28 := $add.i64(67207168, out_$i27);
    goto corral_source_split_6430;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i26 := $mul.i32(out_$i18, 256);
    goto corral_source_split_6429;

  $bb16:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_6427;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} out_$i24 := gru_user_copy_handle(in_$p6, out_$p17);
    call {:si_unique_call 1775} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_6426;

  $bb12:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} gru_flush_cache(out_$p17);
    goto corral_source_split_6424;

  $bb11:
    assume out_$i23 == 1;
    goto corral_source_split_6423;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(in_$i5, 0);
    goto corral_source_split_6421;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume out_$i21 == 1;
    goto corral_source_split_6419;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p17;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    out_$i21 := $sgt.i32(out_$i20, out_$i18);
    goto corral_source_split_6417;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    out_$i20 := $mul.i32(out_$i19, 2);
    goto corral_source_split_6416;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i16, 1);
    goto corral_source_split_6415;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i18 := $mul.i32(out_$i16, 2);
    call {:si_unique_call 1772} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_6414;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$p22, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i16, out_$p17, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74 := gru_dump_context_data_loop_$bb4(in_$p0, in_$p1, in_$i5, in_$p6, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$p22, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i16, out_$p17, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74);
    return;

  exit:
    return;
}



procedure gru_dump_context_data_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i32, in_$p6: ref, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$p22: ref, in_$p40: ref, in_$i41: i32, in_$i42: i64, in_$i43: i64, in_$i44: i32, in_$i45: i1, in_$i16: i32, in_$p17: ref, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i64, in_$i69: i64, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i73: i64, in_$p74: ref) returns (out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$p22: ref, out_$p40: ref, out_$i41: i32, out_$i42: i64, out_$i43: i64, out_$i44: i32, out_$i45: i1, out_$i16: i32, out_$p17: ref, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i64, out_$i69: i64, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$i73: i64, out_$p74: ref);
  modifies $M.23, $M.0;



implementation quicktest1_loop_$bb147(in_$p1: ref, in_$p2: ref, in_$p131: ref, in_$i132: i32, in_$i133: i1, in_$i23: i32) returns (out_$p131: ref, out_$i132: i32, out_$i133: i1, out_$i23: i32)
{

  entry:
    out_$p131, out_$i132, out_$i133, out_$i23 := in_$p131, in_$i132, in_$i133, in_$i23;
    goto $bb147, exit;

  $bb147:
    assume {:verifier.code 0} true;
    out_$p131 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_6828;

  $bb148:
    assume {:verifier.code 0} true;
    assume out_$i133 == 1;
    goto $bb148_dummy;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i132;
    assume true;
    goto $bb148;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 1);
    goto corral_source_split_6830;

  SeqInstr_222:
    goto corral_source_split_6829;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} out_$i132 := gru_send_message_gpa(in_$p1, out_$p131, 64);
    goto SeqInstr_221;

  $bb148_dummy:
    call {:si_unique_call 1} out_$p131, out_$i132, out_$i133, out_$i23 := quicktest1_loop_$bb147(in_$p1, in_$p2, out_$p131, out_$i132, out_$i133, out_$i23);
    return;

  exit:
    return;
}



procedure quicktest1_loop_$bb147(in_$p1: ref, in_$p2: ref, in_$p131: ref, in_$i132: i32, in_$i133: i1, in_$i23: i32) returns (out_$p131: ref, out_$i132: i32, out_$i133: i1, out_$i23: i32);
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.8, $M.11, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation quicktest1_loop_$bb139(in_$p1: ref, in_$p2: ref, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$i128: i32) returns (out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$i128: i32)
{

  entry:
    out_$p125, out_$i126, out_$i127, out_$i128 := in_$p125, in_$i126, in_$i127, in_$i128;
    goto $bb139, exit;

  $bb139:
    assume {:verifier.code 0} true;
    out_$p125 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_6819;

  $bb140:
    assume {:verifier.code 0} true;
    assume out_$i127 == 1;
    goto $bb140_dummy;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    out_$i128 := out_$i126;
    assume true;
    goto $bb140;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 1);
    goto corral_source_split_6821;

  SeqInstr_219:
    goto corral_source_split_6820;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} out_$i126 := gru_send_message_gpa(in_$p1, out_$p125, 64);
    goto SeqInstr_218;

  $bb140_dummy:
    call {:si_unique_call 1} out_$p125, out_$i126, out_$i127, out_$i128 := quicktest1_loop_$bb139(in_$p1, in_$p2, out_$p125, out_$i126, out_$i127, out_$i128);
    return;

  exit:
    return;
}



procedure quicktest1_loop_$bb139(in_$p1: ref, in_$p2: ref, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$i128: i32) returns (out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$i128: i32);
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.8, $M.11, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation quicktest1_loop_$bb131(in_$p1: ref, in_$p2: ref, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i32) returns (out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i32)
{

  entry:
    out_$p119, out_$i120, out_$i121, out_$i122 := in_$p119, in_$i120, in_$i121, in_$i122;
    goto $bb131, exit;

  $bb131:
    assume {:verifier.code 0} true;
    out_$p119 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_6810;

  $bb132:
    assume {:verifier.code 0} true;
    assume out_$i121 == 1;
    goto $bb132_dummy;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$i122 := out_$i120;
    assume true;
    goto $bb132;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 1);
    goto corral_source_split_6812;

  SeqInstr_216:
    goto corral_source_split_6811;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} out_$i120 := gru_send_message_gpa(in_$p1, out_$p119, 64);
    goto SeqInstr_215;

  $bb132_dummy:
    call {:si_unique_call 1} out_$p119, out_$i120, out_$i121, out_$i122 := quicktest1_loop_$bb131(in_$p1, in_$p2, out_$p119, out_$i120, out_$i121, out_$i122);
    return;

  exit:
    return;
}



procedure quicktest1_loop_$bb131(in_$p1: ref, in_$p2: ref, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i32) returns (out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i32);
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.8, $M.11, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation quicktest1_loop_$bb123(in_$p1: ref, in_$p2: ref, in_$p113: ref, in_$i114: i32, in_$i115: i1, in_$i116: i32) returns (out_$p113: ref, out_$i114: i32, out_$i115: i1, out_$i116: i32)
{

  entry:
    out_$p113, out_$i114, out_$i115, out_$i116 := in_$p113, in_$i114, in_$i115, in_$i116;
    goto $bb123, exit;

  $bb123:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_6801;

  $bb124:
    assume {:verifier.code 0} true;
    assume out_$i115 == 1;
    goto $bb124_dummy;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$i116 := out_$i114;
    assume true;
    goto $bb124;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 1);
    goto corral_source_split_6803;

  SeqInstr_213:
    goto corral_source_split_6802;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} out_$i114 := gru_send_message_gpa(in_$p1, out_$p113, 64);
    goto SeqInstr_212;

  $bb124_dummy:
    call {:si_unique_call 1} out_$p113, out_$i114, out_$i115, out_$i116 := quicktest1_loop_$bb123(in_$p1, in_$p2, out_$p113, out_$i114, out_$i115, out_$i116);
    return;

  exit:
    return;
}



procedure quicktest1_loop_$bb123(in_$p1: ref, in_$p2: ref, in_$p113: ref, in_$i114: i32, in_$i115: i1, in_$i116: i32) returns (out_$p113: ref, out_$i114: i32, out_$i115: i1, out_$i116: i32);
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.8, $M.11, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation quicktest1_loop_$bb115(in_$p1: ref, in_$p2: ref, in_$p107: ref, in_$i108: i32, in_$i109: i1, in_$i110: i32) returns (out_$p107: ref, out_$i108: i32, out_$i109: i1, out_$i110: i32)
{

  entry:
    out_$p107, out_$i108, out_$i109, out_$i110 := in_$p107, in_$i108, in_$i109, in_$i110;
    goto $bb115, exit;

  $bb115:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_6792;

  $bb116:
    assume {:verifier.code 0} true;
    assume out_$i109 == 1;
    goto $bb116_dummy;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    out_$i110 := out_$i108;
    assume true;
    goto $bb116;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 1);
    goto corral_source_split_6794;

  SeqInstr_210:
    goto corral_source_split_6793;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} out_$i108 := gru_send_message_gpa(in_$p1, out_$p107, 64);
    goto SeqInstr_209;

  $bb116_dummy:
    call {:si_unique_call 1} out_$p107, out_$i108, out_$i109, out_$i110 := quicktest1_loop_$bb115(in_$p1, in_$p2, out_$p107, out_$i108, out_$i109, out_$i110);
    return;

  exit:
    return;
}



procedure quicktest1_loop_$bb115(in_$p1: ref, in_$p2: ref, in_$p107: ref, in_$i108: i32, in_$i109: i1, in_$i110: i32) returns (out_$p107: ref, out_$i108: i32, out_$i109: i1, out_$i110: i32);
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.8, $M.11, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation quicktest1_loop_$bb7(in_$p1: ref, in_$p2: ref, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i17: i32) returns (out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i17: i32)
{

  entry:
    out_$p14, out_$i15, out_$i16, out_$i17 := in_$p14, in_$i15, in_$i16, in_$i17;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_6660;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i16 == 1;
    goto $bb8_dummy;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i15;
    assume true;
    goto $bb8;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, 1);
    goto corral_source_split_6662;

  SeqInstr_207:
    call {:si_unique_call 1880} {:cexpr "ret"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_6661;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} out_$i15 := gru_send_message_gpa(in_$p1, out_$p14, 64);
    goto SeqInstr_206;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p14, out_$i15, out_$i16, out_$i17 := quicktest1_loop_$bb7(in_$p1, in_$p2, out_$p14, out_$i15, out_$i16, out_$i17);
    return;

  exit:
    return;
}



procedure quicktest1_loop_$bb7(in_$p1: ref, in_$p2: ref, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i17: i32) returns (out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i17: i32);
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.8, $M.11, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation quicktest2_loop_$bb92()
{

  entry:
    goto $bb92, exit;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb92_dummy;

  $bb92_dummy:
    call {:si_unique_call 1} quicktest2_loop_$bb92();
    return;

  exit:
    return;
}



procedure quicktest2_loop_$bb92();



implementation quicktest2_loop_$bb14(in_$p2: ref, in_$p94: ref, in_$i95: i32, in_$i96: i64, in_$p97: ref, in_$i98: i32, in_$i99: i1, in_$i100: i1, in_$i101: i32, in_$p102: ref, in_$i103: i32, in_$i107: i32, in_$i108: i1, in_$i93: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32) returns (out_$p94: ref, out_$i95: i32, out_$i96: i64, out_$p97: ref, out_$i98: i32, out_$i99: i1, out_$i100: i1, out_$i101: i32, out_$p102: ref, out_$i103: i32, out_$i107: i32, out_$i108: i1, out_$i93: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32)
{

  entry:
    out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i107, out_$i108, out_$i93, out_$p109, out_$i110, out_$i111 := in_$p94, in_$i95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p102, in_$i103, in_$i107, in_$i108, in_$i93, in_$p109, in_$i110, in_$i111;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6923;

  $bb23:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$i93 := out_$i107;
    goto $bb23_dummy;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    out_$p109, out_$i110, out_$i111 := out_$p97, out_$i107, out_$i98;
    assume true;
    goto $bb23;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i107, 4);
    goto corral_source_split_6941;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i107 := $add.i32(out_$i93, 1);
    call {:si_unique_call 1937} {:cexpr "i"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_6940;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i99 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i100 == 1);
    goto $bb18;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$i101, out_$p102, out_$i103 := out_$i93, out_$p97, out_$i98;
    assume true;
    goto $bb20;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i98, 3);
    goto corral_source_split_6933;

  $bb16:
    assume out_$i99 == 1;
    goto corral_source_split_6932;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i98, 2);
    goto corral_source_split_6930;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} out_$i98 := gru_check_status(out_$p97);
    call {:si_unique_call 1936} {:cexpr "istatus"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_6929;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref(out_$p94, $mul.ref(out_$i96, 1));
    goto corral_source_split_6928;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    out_$i96 := $sext.i32.i64(out_$i95);
    goto corral_source_split_6927;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    out_$i95 := $mul.i32(out_$i93, 256);
    goto corral_source_split_6926;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.24, in_$p2);
    goto corral_source_split_6925;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i107, out_$i108, out_$i93, out_$p109, out_$i110, out_$i111 := quicktest2_loop_$bb14(in_$p2, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i107, out_$i108, out_$i93, out_$p109, out_$i110, out_$i111);
    return;

  exit:
    return;
}



procedure quicktest2_loop_$bb14(in_$p2: ref, in_$p94: ref, in_$i95: i32, in_$i96: i64, in_$p97: ref, in_$i98: i32, in_$i99: i1, in_$i100: i1, in_$i101: i32, in_$p102: ref, in_$i103: i32, in_$i107: i32, in_$i108: i1, in_$i93: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32) returns (out_$p94: ref, out_$i95: i32, out_$i96: i64, out_$p97: ref, out_$i98: i32, out_$i99: i1, out_$i100: i1, out_$i101: i32, out_$p102: ref, out_$i103: i32, out_$i107: i32, out_$i108: i1, out_$i93: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32);
  modifies $M.0, $M.14, $M.15, $M.12, $M.16, $M.17, $CurrAddr;



implementation {:SIextraRecBound 4} quicktest2_loop_$bb13(in_$p2: ref, in_$p77: ref, in_$i81: i64, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$p94: ref, in_$i95: i32, in_$i96: i64, in_$p97: ref, in_$i98: i32, in_$i99: i1, in_$i100: i1, in_$i101: i32, in_$p102: ref, in_$i103: i32, in_$i107: i32, in_$i108: i1, in_$i93: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i104: i32, in_$p105: ref, in_$i106: i32, in_$i112: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i32, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i126: i32, in_$i134: i32, in_$i135: i64, in_$p136: ref, in_$i137: i64, in_$i138: i1, in_$i139: i32, in_$i140: i64, in_$i141: i64, in_$p142: ref, in_$i143: i64, in_$i144: i1, in_$i145: i32, in_$i146: i64, in_$i147: i64, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$i151: i32, in_$i152: i64, in_$i153: i64, in_$p154: ref, in_$i155: i64, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i161: i1, in_$i162: i1, in_$i163: i1, in_$i164: i32, in_$i166: i32, in_$i167: i32, in_$i168: i32, in_$i165: i32, in_$i169: i32, in_$i170: i64, in_$p171: ref, in_$i172: i64, in_$i173: i32, in_$i174: i64, in_$i175: i64, in_$p176: ref, in_$i177: i64, in_$i178: i32, in_$i179: i64, in_$i180: i64, in_$p181: ref, in_$i182: i64, in_$i183: i32, in_$i184: i64, in_$i185: i64, in_$p186: ref, in_$i187: i64, in_$i189: i32, in_$i190: i32, in_$i131: i32, in_$i132: i32, in_$i133: i32, in_$i191: i32, in_$p192: ref, in_$p193: ref, in_$i194: i64, in_$i195: i64, in_$i196: i64, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i32, in_$i197: i1, in_$i198: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32) returns (out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$p94: ref, out_$i95: i32, out_$i96: i64, out_$p97: ref, out_$i98: i32, out_$i99: i1, out_$i100: i1, out_$i101: i32, out_$p102: ref, out_$i103: i32, out_$i107: i32, out_$i108: i1, out_$i93: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i104: i32, out_$p105: ref, out_$i106: i32, out_$i112: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i32, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i126: i32, out_$i134: i32, out_$i135: i64, out_$p136: ref, out_$i137: i64, out_$i138: i1, out_$i139: i32, out_$i140: i64, out_$i141: i64, out_$p142: ref, out_$i143: i64, out_$i144: i1, out_$i145: i32, out_$i146: i64, out_$i147: i64, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$i151: i32, out_$i152: i64, out_$i153: i64, out_$p154: ref, out_$i155: i64, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i161: i1, out_$i162: i1, out_$i163: i1, out_$i164: i32, out_$i166: i32, out_$i167: i32, out_$i168: i32, out_$i165: i32, out_$i169: i32, out_$i170: i64, out_$p171: ref, out_$i172: i64, out_$i173: i32, out_$i174: i64, out_$i175: i64, out_$p176: ref, out_$i177: i64, out_$i178: i32, out_$i179: i64, out_$i180: i64, out_$p181: ref, out_$i182: i64, out_$i183: i32, out_$i184: i64, out_$i185: i64, out_$p186: ref, out_$i187: i64, out_$i189: i32, out_$i190: i32, out_$i131: i32, out_$i132: i32, out_$i133: i32, out_$i191: i32, out_$p192: ref, out_$p193: ref, out_$i194: i64, out_$i195: i64, out_$i196: i64, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i32, out_$i197: i1, out_$i198: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32)
{

  entry:
    out_$i89, out_$i90, out_$i91, out_$i92, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i107, out_$i108, out_$i93, out_$p109, out_$i110, out_$i111, out_$i104, out_$p105, out_$i106, out_$i112, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i127, out_$i128, out_$i129, out_$i126, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i166, out_$i167, out_$i168, out_$i165, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i189, out_$i190, out_$i131, out_$i132, out_$i133, out_$i191, out_$p192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i113, out_$i114, out_$i115, out_$i116, out_$i197, out_$i198, out_vslice_dummy_var_135, out_vslice_dummy_var_136 := in_$i89, in_$i90, in_$i91, in_$i92, in_$p94, in_$i95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p102, in_$i103, in_$i107, in_$i108, in_$i93, in_$p109, in_$i110, in_$i111, in_$i104, in_$p105, in_$i106, in_$i112, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i127, in_$i128, in_$i129, in_$i126, in_$i134, in_$i135, in_$p136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$p142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$p148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$p154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i166, in_$i167, in_$i168, in_$i165, in_$i169, in_$i170, in_$p171, in_$i172, in_$i173, in_$i174, in_$i175, in_$p176, in_$i177, in_$i178, in_$i179, in_$i180, in_$p181, in_$i182, in_$i183, in_$i184, in_$i185, in_$p186, in_$i187, in_$i189, in_$i190, in_$i131, in_$i132, in_$i133, in_$i191, in_$p192, in_$p193, in_$i194, in_$i195, in_$i196, in_$i113, in_$i114, in_$i115, in_$i116, in_$i197, in_$i198, in_vslice_dummy_var_135, in_vslice_dummy_var_136;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6920;

  $bb87:
    assume out_$i197 == 1;
    assume {:verifier.code 0} true;
    out_$i89, out_$i90, out_$i91, out_$i92 := out_$i113, out_$i114, out_$i115, out_$i116;
    goto $bb87_dummy;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    out_$i198 := out_$i113;
    assume true;
    goto $bb87;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    out_$i197 := $ne.i32(out_$i114, 0);
    goto corral_source_split_6946;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6945;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    out_$i113, out_$i114, out_$i115, out_$i116 := out_$i131, out_$i191, out_$i132, out_$i133;
    goto $bb28;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    out_$i113, out_$i114, out_$i115, out_$i116 := out_$i89, out_$i90, out_$i91, out_$i92;
    goto $bb28;

  $bb26:
    assume out_$i112 == 1;
    goto corral_source_split_6943;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i104, 4);
    goto corral_source_split_6938;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6937;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i104, out_$p105, out_$i106 := out_$i110, out_$p109, out_$i111;
    goto $bb21;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    out_$i104, out_$p105, out_$i106 := out_$i101, out_$p102, out_$i103;
    goto $bb21;

  $bb19:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6935;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$i101, out_$p102, out_$i103 := out_$i93, out_$p97, out_$i98;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i98, 3);
    goto corral_source_split_6933;

  $bb16:
    assume out_$i99 == 1;
    goto corral_source_split_6932;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i98, 2);
    goto corral_source_split_6930;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} out_$i98 := gru_check_status(out_$p97);
    call {:si_unique_call 1936} {:cexpr "istatus"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_6929;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref(out_$p94, $mul.ref(out_$i96, 1));
    goto corral_source_split_6928;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    out_$i96 := $sext.i32.i64(out_$i95);
    goto corral_source_split_6927;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    out_$i95 := $mul.i32(out_$i93, 256);
    goto corral_source_split_6926;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.24, in_$p2);
    goto corral_source_split_6925;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    call out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i107, out_$i108, out_$i93, out_$p109, out_$i110, out_$i111 := quicktest2_loop_$bb14(in_$p2, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i107, out_$i108, out_$i93, out_$p109, out_$i110, out_$i111);
    goto $bb14_last;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$i93 := 0;
    goto $bb14;

  $bb23:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$i93 := out_$i107;
    assume false;
    return;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    out_$p109, out_$i110, out_$i111 := out_$p97, out_$i107, out_$i98;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i107, 4);
    goto corral_source_split_6941;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i107 := $add.i32(out_$i93, 1);
    call {:si_unique_call 1937} {:cexpr "i"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_6940;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i99 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i100 == 1);
    goto $bb18;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} gru_wait_async_cbr(in_$i81);
    goto corral_source_split_6921;

  $bb24:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p193, out_$i196);
    goto corral_source_split_6977;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    out_$i196 := $or.i64(out_$i195, 216172782113783808);
    goto corral_source_split_6976;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    out_$i195 := $and.i64(out_$i194, $sub.i64(0, 216172782113783809));
    goto corral_source_split_6975;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i64($M.0, out_$p193);
    goto corral_source_split_6974;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    out_$p193 := $bitcast.ref.ref(out_$p192);
    goto corral_source_split_6973;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    out_$p192 := $bitcast.ref.ref(out_$p105);
    goto corral_source_split_6972;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    out_$i191 := $sub.i32(out_$i90, 1);
    call {:si_unique_call 1948} {:cexpr "k"} boogie_si_record_i32(out_$i191);
    goto corral_source_split_6971;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6970;

  $bb86:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i131, out_$i132, out_$i133 := out_$i189, out_$i91, out_$i190;
    goto $bb54;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    out_$i131, out_$i132, out_$i133 := $sub.i32(0, 14), out_$i126, out_$i92;
    goto $bb54;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} out_vslice_dummy_var_135 := printk.ref.i32.i32(.str.253, out_$i126, out_$i104);
    goto corral_source_split_6966;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_6965;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    out_$i126 := out_$i91;
    goto $bb49;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i126 := out_$i129;
    goto $bb49;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i126 := out_$i128;
    goto $bb49;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i126 := out_$i127;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i126 := out_$i125;
    goto $bb49;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume out_$i124 == 1;
    call {:si_unique_call 1944} out_$i125 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1945} {:cexpr "pfo_ret__"} boogie_si_record_i32(out_$i125);
    goto corral_source_split_6963;

  $bb42:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb33:
    assume out_$i118 == 1;
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i118 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb30:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i32(out_$i106, 0);
    goto corral_source_split_6948;

  $bb27:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume out_$i123 == 1;
    call {:si_unique_call 1942} out_$i127 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1943} {:cexpr "pfo_ret_____0"} boogie_si_record_i32(out_$i127);
    goto corral_source_split_6961;

  $bb43:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb40:
    assume out_$i121 == 1;
    call {:si_unique_call 1940} out_$i128 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1941} {:cexpr "pfo_ret_____1"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_6959;

  $bb35:
    assume out_$i119 == 1;
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb34:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    out_$i119 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb37:
    assume out_$i120 == 1;
    call {:si_unique_call 1938} out_$i129 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1939} {:cexpr "pfo_ret_____2"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_6957;

  $bb36:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} __bad_size_call_parameter();
    goto corral_source_split_6968;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i120 == 1);
    goto $bb39;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i121 == 1);
    goto $bb39;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i123 == 1);
    goto $bb39;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb39;

  $bb63:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    out_$i189, out_$i190 := out_$i89, out_$i92;
    goto $bb86;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    out_$i189, out_$i190 := $sub.i32(0, 5), out_$i165;
    goto $bb86;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} out_vslice_dummy_var_136 := printk.ref.i32.i32.i64.i64.i64.i64(.str.254, out_$i165, out_$i104, out_$i172, out_$i177, out_$i182, out_$i187);
    goto corral_source_split_7031;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    out_$i187 := $load.i64($M.0, out_$p186);
    goto corral_source_split_7030;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref(in_$p77, $mul.ref(out_$i185, 8));
    goto corral_source_split_7029;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    out_$i185 := $add.i64(out_$i184, 3);
    goto corral_source_split_7028;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    out_$i184 := $sext.i32.i64(out_$i183);
    goto corral_source_split_7027;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    out_$i183 := $mul.i32(out_$i104, 4);
    goto corral_source_split_7026;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i64($M.0, out_$p181);
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref(in_$p77, $mul.ref(out_$i180, 8));
    goto corral_source_split_7024;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    out_$i180 := $add.i64(out_$i179, 2);
    goto corral_source_split_7023;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    out_$i179 := $sext.i32.i64(out_$i178);
    goto corral_source_split_7022;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    out_$i178 := $mul.i32(out_$i104, 4);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i64($M.0, out_$p176);
    goto corral_source_split_7020;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref(in_$p77, $mul.ref(out_$i175, 8));
    goto corral_source_split_7019;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    out_$i175 := $add.i64(out_$i174, 1);
    goto corral_source_split_7018;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    out_$i174 := $sext.i32.i64(out_$i173);
    goto corral_source_split_7017;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    out_$i173 := $mul.i32(out_$i104, 4);
    goto corral_source_split_7016;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i64($M.0, out_$p171);
    goto corral_source_split_7015;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref(in_$p77, $mul.ref(out_$i170, 8));
    goto corral_source_split_7014;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    out_$i170 := $sext.i32.i64(out_$i169);
    goto corral_source_split_7013;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    out_$i169 := $mul.i32(out_$i104, 4);
    goto corral_source_split_7012;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_7011;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    out_$i165 := out_$i92;
    goto $bb81;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i165 := out_$i168;
    goto $bb81;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i165 := out_$i167;
    goto $bb81;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i165 := out_$i166;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    out_$i165 := out_$i164;
    goto $bb81;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb78:
    assume out_$i163 == 1;
    call {:si_unique_call 1955} out_$i164 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1956} {:cexpr "pfo_ret_____3"} boogie_si_record_i32(out_$i164);
    goto corral_source_split_7009;

  $bb74:
    assume out_$i161 == 1;
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb65:
    assume out_$i157 == 1;
    assume {:verifier.code 0} true;
    out_$i161 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i157 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb62:
    assume {:verifier.code 0} true;
    assume out_$i156 == 1;
    goto $bb56;

  $bb60:
    assume {:verifier.code 0} true;
    assume out_$i150 == 1;
    goto $bb56;

  $bb58:
    assume {:verifier.code 0} true;
    assume out_$i144 == 1;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    assume out_$i138 == 1;
    goto $bb56;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb57;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    out_$i138 := $ne.i64(out_$i137, 0);
    goto corral_source_split_6955;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i64($M.0, out_$p136);
    goto corral_source_split_6954;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref(in_$p77, $mul.ref(out_$i135, 8));
    goto corral_source_split_6953;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    out_$i135 := $sext.i32.i64(out_$i134);
    goto corral_source_split_6952;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    out_$i134 := $mul.i32(out_$i104, 4);
    goto corral_source_split_6951;

  $bb31:
    assume !(out_$i117 == 1);
    goto corral_source_split_6950;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.i64(out_$i143, 0);
    goto corral_source_split_6985;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i64($M.0, out_$p142);
    goto corral_source_split_6984;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref(in_$p77, $mul.ref(out_$i141, 8));
    goto corral_source_split_6983;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    out_$i141 := $add.i64(out_$i140, 1);
    goto corral_source_split_6982;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    out_$i140 := $sext.i32.i64(out_$i139);
    goto corral_source_split_6981;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    out_$i139 := $mul.i32(out_$i104, 4);
    goto corral_source_split_6980;

  $bb57:
    assume !(out_$i138 == 1);
    goto corral_source_split_6979;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    out_$i150 := $ne.i64(out_$i149, 0);
    goto corral_source_split_6993;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i64($M.0, out_$p148);
    goto corral_source_split_6992;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref(in_$p77, $mul.ref(out_$i147, 8));
    goto corral_source_split_6991;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    out_$i147 := $add.i64(out_$i146, 2);
    goto corral_source_split_6990;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    out_$i146 := $sext.i32.i64(out_$i145);
    goto corral_source_split_6989;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    out_$i145 := $mul.i32(out_$i104, 4);
    goto corral_source_split_6988;

  $bb59:
    assume !(out_$i144 == 1);
    goto corral_source_split_6987;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    out_$i156 := $ne.i64(out_$i155, 0);
    goto corral_source_split_7001;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i64($M.0, out_$p154);
    goto corral_source_split_7000;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref(in_$p77, $mul.ref(out_$i153, 8));
    goto corral_source_split_6999;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    out_$i153 := $add.i64(out_$i152, 3);
    goto corral_source_split_6998;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    out_$i152 := $sext.i32.i64(out_$i151);
    goto corral_source_split_6997;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    out_$i151 := $mul.i32(out_$i104, 4);
    goto corral_source_split_6996;

  $bb61:
    assume !(out_$i150 == 1);
    goto corral_source_split_6995;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb76:
    assume out_$i162 == 1;
    call {:si_unique_call 1953} out_$i166 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1954} {:cexpr "pfo_ret_____4"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_7007;

  $bb75:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb72:
    assume out_$i160 == 1;
    call {:si_unique_call 1951} out_$i167 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1952} {:cexpr "pfo_ret_____5"} boogie_si_record_i32(out_$i167);
    goto corral_source_split_7005;

  $bb67:
    assume out_$i158 == 1;
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb66:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    out_$i158 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb69:
    assume out_$i159 == 1;
    call {:si_unique_call 1949} out_$i168 := devirtbounce(0, cpu_number);
    call {:si_unique_call 1950} {:cexpr "pfo_ret_____6"} boogie_si_record_i32(out_$i168);
    goto corral_source_split_7003;

  $bb68:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} __bad_size_call_parameter();
    goto corral_source_split_7033;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb70:
    assume {:verifier.code 0} true;
    assume !(out_$i159 == 1);
    goto $bb71;

  $bb73:
    assume {:verifier.code 0} true;
    assume !(out_$i160 == 1);
    goto $bb71;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i162 == 1);
    goto $bb71;

  $bb79:
    assume {:verifier.code 0} true;
    assume !(out_$i163 == 1);
    goto $bb71;

  $bb87_dummy:
    call {:si_unique_call 1} out_$i89, out_$i90, out_$i91, out_$i92, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i107, out_$i108, out_$i93, out_$p109, out_$i110, out_$i111, out_$i104, out_$p105, out_$i106, out_$i112, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i127, out_$i128, out_$i129, out_$i126, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i166, out_$i167, out_$i168, out_$i165, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i189, out_$i190, out_$i131, out_$i132, out_$i133, out_$i191, out_$p192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i113, out_$i114, out_$i115, out_$i116, out_$i197, out_$i198, out_vslice_dummy_var_135, out_vslice_dummy_var_136 := quicktest2_loop_$bb13(in_$p2, in_$p77, in_$i81, out_$i89, out_$i90, out_$i91, out_$i92, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i107, out_$i108, out_$i93, out_$p109, out_$i110, out_$i111, out_$i104, out_$p105, out_$i106, out_$i112, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i127, out_$i128, out_$i129, out_$i126, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i166, out_$i167, out_$i168, out_$i165, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i189, out_$i190, out_$i131, out_$i132, out_$i133, out_$i191, out_$p192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i113, out_$i114, out_$i115, out_$i116, out_$i197, out_$i198, out_vslice_dummy_var_135, out_vslice_dummy_var_136);
    return;

  exit:
    return;
}



procedure quicktest2_loop_$bb13(in_$p2: ref, in_$p77: ref, in_$i81: i64, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$p94: ref, in_$i95: i32, in_$i96: i64, in_$p97: ref, in_$i98: i32, in_$i99: i1, in_$i100: i1, in_$i101: i32, in_$p102: ref, in_$i103: i32, in_$i107: i32, in_$i108: i1, in_$i93: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i104: i32, in_$p105: ref, in_$i106: i32, in_$i112: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i32, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i126: i32, in_$i134: i32, in_$i135: i64, in_$p136: ref, in_$i137: i64, in_$i138: i1, in_$i139: i32, in_$i140: i64, in_$i141: i64, in_$p142: ref, in_$i143: i64, in_$i144: i1, in_$i145: i32, in_$i146: i64, in_$i147: i64, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$i151: i32, in_$i152: i64, in_$i153: i64, in_$p154: ref, in_$i155: i64, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i161: i1, in_$i162: i1, in_$i163: i1, in_$i164: i32, in_$i166: i32, in_$i167: i32, in_$i168: i32, in_$i165: i32, in_$i169: i32, in_$i170: i64, in_$p171: ref, in_$i172: i64, in_$i173: i32, in_$i174: i64, in_$i175: i64, in_$p176: ref, in_$i177: i64, in_$i178: i32, in_$i179: i64, in_$i180: i64, in_$p181: ref, in_$i182: i64, in_$i183: i32, in_$i184: i64, in_$i185: i64, in_$p186: ref, in_$i187: i64, in_$i189: i32, in_$i190: i32, in_$i131: i32, in_$i132: i32, in_$i133: i32, in_$i191: i32, in_$p192: ref, in_$p193: ref, in_$i194: i64, in_$i195: i64, in_$i196: i64, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i32, in_$i197: i1, in_$i198: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32) returns (out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$p94: ref, out_$i95: i32, out_$i96: i64, out_$p97: ref, out_$i98: i32, out_$i99: i1, out_$i100: i1, out_$i101: i32, out_$p102: ref, out_$i103: i32, out_$i107: i32, out_$i108: i1, out_$i93: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i104: i32, out_$p105: ref, out_$i106: i32, out_$i112: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i32, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i126: i32, out_$i134: i32, out_$i135: i64, out_$p136: ref, out_$i137: i64, out_$i138: i1, out_$i139: i32, out_$i140: i64, out_$i141: i64, out_$p142: ref, out_$i143: i64, out_$i144: i1, out_$i145: i32, out_$i146: i64, out_$i147: i64, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$i151: i32, out_$i152: i64, out_$i153: i64, out_$p154: ref, out_$i155: i64, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i161: i1, out_$i162: i1, out_$i163: i1, out_$i164: i32, out_$i166: i32, out_$i167: i32, out_$i168: i32, out_$i165: i32, out_$i169: i32, out_$i170: i64, out_$p171: ref, out_$i172: i64, out_$i173: i32, out_$i174: i64, out_$i175: i64, out_$p176: ref, out_$i177: i64, out_$i178: i32, out_$i179: i64, out_$i180: i64, out_$p181: ref, out_$i182: i64, out_$i183: i32, out_$i184: i64, out_$i185: i64, out_$p186: ref, out_$i187: i64, out_$i189: i32, out_$i190: i32, out_$i131: i32, out_$i132: i32, out_$i133: i32, out_$i191: i32, out_$p192: ref, out_$p193: ref, out_$i194: i64, out_$i195: i64, out_$i196: i64, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i32, out_$i197: i1, out_$i198: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32);
  modifies $M.0, $M.14, $M.15, $M.12, $M.16, $M.17, $CurrAddr;



implementation gru_free_kernel_contexts_loop_$bb1(in_$i2: i64, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$i6: i1, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i23: i32, in_$i22: i32, in_$i7: i32, in_$i24: i32, in_$i25: i1, in_$i0: i32, in_$i1: i32, in_$i26: i32) returns (out_$i2: i64, out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$i6: i1, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i23: i32, out_$i22: i32, out_$i7: i32, out_$i24: i32, out_$i25: i1, out_$i0: i32, out_$i1: i32, out_$i26: i32)
{

  entry:
    out_$i2, out_$p3, out_$p4, out_$i5, out_$i6, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i23, out_$i22, out_$i7, out_$i24, out_$i25, out_$i0, out_$i1, out_$i26 := in_$i2, in_$p3, in_$p4, in_$i5, in_$i6, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$i13, in_$i14, in_$p15, in_$p16, in_$i17, in_$i18, in_$p19, in_$p20, in_$p21, in_$i23, in_$i22, in_$i7, in_$i24, in_$i25, in_$i0, in_$i1, in_$i26;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7097;

  $bb16:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i0, out_$i1 := out_$i7, out_$i24;
    goto $bb16_dummy;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i7;
    assume true;
    goto $bb16;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    out_$i25 := $sle.i32(out_$i24, 1023);
    goto corral_source_split_7109;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i1, 1);
    call {:si_unique_call 1992} {:cexpr "bid"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_7108;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7107;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    out_$i7 := out_$i22;
    goto $bb5;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    out_$i7 := out_$i0;
    goto $bb5;

  $bb3:
    assume out_$i6 == 1;
    goto corral_source_split_7105;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i64(out_$i5, 0);
    goto corral_source_split_7103;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    out_$i5 := $p2i.ref.i64(out_$p4);
    goto corral_source_split_7102;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    out_$p4 := $load.ref($M.4, out_$p3);
    goto corral_source_split_7101;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i2, 8));
    goto corral_source_split_7100;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i2 := $sext.i32.i64(out_$i1);
    goto corral_source_split_7099;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7139;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i0, 1);
    call {:si_unique_call 1995} {:cexpr "ret"} boogie_si_record_i32(out_$i23);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i23;
    goto $bb15;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i0;
    goto $bb15;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} kfree(out_$p21);
    goto corral_source_split_7137;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_7136;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} up_write(out_$p20);
    goto corral_source_split_7135;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p4, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_7134;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p19, $0.ref);
    goto corral_source_split_7133;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p4, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_7132;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_234:
    goto corral_source_split_7130;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} gru_unload_context(out_$p12, 0);
    goto SeqInstr_233;

  $bb12:
    assume out_$i18 == 1;
    goto corral_source_split_7129;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, 0);
    goto corral_source_split_7127;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_7126;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_7125;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p12, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_7124;

  $bb9:
    assume out_$i14 == 1;
    goto corral_source_split_7123;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_7119;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_7118;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_7117;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p4, $mul.ref(0, 1136)), $mul.ref(176, 1));
    goto corral_source_split_7116;

  $bb7:
    assume out_$i10 == 1;
    goto corral_source_split_7115;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_7113;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} out_$i9 := down_write_trylock(out_$p8);
    call {:si_unique_call 1994} {:cexpr "tmp"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_7112;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p4, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_7111;

  $bb4:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb11;

  $bb8:
    assume !(out_$i10 == 1);
    goto corral_source_split_7121;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i2, out_$p3, out_$p4, out_$i5, out_$i6, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i23, out_$i22, out_$i7, out_$i24, out_$i25, out_$i0, out_$i1, out_$i26 := gru_free_kernel_contexts_loop_$bb1(out_$i2, out_$p3, out_$p4, out_$i5, out_$i6, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i23, out_$i22, out_$i7, out_$i24, out_$i25, out_$i0, out_$i1, out_$i26);
    return;

  exit:
    return;
}



procedure gru_free_kernel_contexts_loop_$bb1(in_$i2: i64, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$i6: i1, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i23: i32, in_$i22: i32, in_$i7: i32, in_$i24: i32, in_$i25: i1, in_$i0: i32, in_$i1: i32, in_$i26: i32) returns (out_$i2: i64, out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$i6: i1, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i23: i32, out_$i22: i32, out_$i7: i32, out_$i24: i32, out_$i25: i1, out_$i0: i32, out_$i1: i32, out_$i26: i32);
  modifies $M.0, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17, $M.6, assertsPassed;



implementation paravirt_read_tsc___0_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} paravirt_read_tsc___0_loop_$bb3();
    return;

  exit:
    return;
}



procedure paravirt_read_tsc___0_loop_$bb3();



implementation gru_user_dropin_loop_$bb9(in_$p3: ref, in_$p17: ref, in_$p19: ref, in_$i22: i64, in_$i23: i32, in_$i24: i1) returns (out_$i22: i64, out_$i23: i32, out_$i24: i1)
{

  entry:
    out_$i22, out_$i23, out_$i24 := in_$i22, in_$i23, in_$i24;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb13_dummy;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 0);
    goto corral_source_split_7432;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} out_$i23 := atomic_read(in_$p19);
    call {:si_unique_call 2080} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_7431;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} out_$i22 := prepare_to_wait_event(in_$p17, in_$p3, 2);
    call {:si_unique_call 2078} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_7430;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} schedule();
    goto corral_source_split_7429;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i22, out_$i23, out_$i24 := gru_user_dropin_loop_$bb9(in_$p3, in_$p17, in_$p19, out_$i22, out_$i23, out_$i24);
    return;

  exit:
    return;
}



procedure gru_user_dropin_loop_$bb9(in_$p3: ref, in_$p17: ref, in_$p19: ref, in_$i22: i64, in_$i23: i32, in_$i24: i1) returns (out_$i22: i64, out_$i23: i32, out_$i24: i1);



implementation gru_user_dropin_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i64, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i64, in_$i34: i64, in_$i35: i1) returns (out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i64, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i64, out_$i34: i64, out_$i35: i1)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35 := in_$p12, in_$i13, in_$i14, in_$p15, in_$p16, in_$p17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} __might_sleep(.str.111, 632, 0);
    goto corral_source_split_7397;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb18:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(224, 1)));
    goto corral_source_split_7441;

  $bb17:
    assume out_$i35 == 1;
    goto corral_source_split_7440;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_7438;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i64(out_$i33, 2);
    goto corral_source_split_7437;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i33 := $M.1;
    goto corral_source_split_7436;

  $bb15:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i30;
    assume true;
    goto $bb15;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    out_$i31 := $sle.i32(out_$i30, 0);
    goto corral_source_split_7410;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} out_$i30 := gru_try_dropin(out_$p28, in_$p0, in_$p1, out_$p29);
    call {:si_unique_call 2069} {:cexpr "ret"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_7409;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_7407;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_7406;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} prefetchw(out_$p26);
    goto corral_source_split_7405;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_7404;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    goto $bb4;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i14 == 1;
    goto corral_source_split_7402;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 0);
    goto corral_source_split_7400;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} out_$i13 := atomic_read(out_$p12);
    call {:si_unique_call 2066} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_7399;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p5, $mul.ref(0, 25032)), $mul.ref(104, 1));
    goto corral_source_split_7398;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} finish_wait(out_$p25, in_$p3);
    goto corral_source_split_7427;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p5, $mul.ref(0, 25032)), $mul.ref(112, 1));
    goto corral_source_split_7426;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i21 == 1;
    goto $bb7;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 0);
    goto corral_source_split_7420;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} out_$i20 := atomic_read(out_$p19);
    call {:si_unique_call 2074} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_7419;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p5, $mul.ref(0, 25032)), $mul.ref(104, 1));
    goto corral_source_split_7418;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} out_$i18 := prepare_to_wait_event(out_$p17, in_$p3, 2);
    call {:si_unique_call 2072} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_7417;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p5, $mul.ref(0, 25032)), $mul.ref(112, 1));
    goto corral_source_split_7416;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p16, 0);
    goto corral_source_split_7415;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7414;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} INIT_LIST_HEAD(out_$p15);
    goto corral_source_split_7413;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7412;

  $bb3:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume out_$i24 == 1;
    goto corral_source_split_7424;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb13;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 0);
    goto corral_source_split_7432;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} out_$i23 := atomic_read(out_$p19);
    call {:si_unique_call 2080} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_7431;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} out_$i22 := prepare_to_wait_event(out_$p17, in_$p3, 2);
    call {:si_unique_call 2078} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_7430;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} schedule();
    goto corral_source_split_7429;

  $bb9:
    call out_$i22, out_$i23, out_$i24 := gru_user_dropin_loop_$bb9(in_$p3, out_$p17, out_$p19, out_$i22, out_$i23, out_$i24);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    assume false;
    return;

  $bb8:
    assume !(out_$i21 == 1);
    goto corral_source_split_7422;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35 := gru_user_dropin_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p5, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35);
    return;

  exit:
    return;
}



procedure gru_user_dropin_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i64, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i64, in_$i34: i64, in_$i35: i1) returns (out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i64, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i64, out_$i34: i64, out_$i35: i1);
  modifies $M.0, $M.26, $M.27, $M.28, $CurrAddr, $M.3, $M.29, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.53, $M.51, $M.50, $M.48, $M.47, $M.46, $M.44, $M.42, $M.41, $M.52, $M.49, $M.45, $M.43;



implementation gru_preload_tlb_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i4: i32, in_$i5: i32, in_$p7: ref, in_$p9: ref, in_$p10: ref, in_$i41: i64, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i60: i32, in_$i64: i32, in_$i65: i1, in_$i66: i64, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i32, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$i78: i32, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$i85: i16, in_$i86: i32, in_$i87: i32, in_$i88: i64, in_$i90: i32, in_$i91: i64, in_$i92: i64, in_$i93: i64, in_$i94: i1, in_$i95: i1, in_$i49: i32, in_$i50: i64, in_vslice_dummy_var_148: i32) returns (out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i60: i32, out_$i64: i32, out_$i65: i1, out_$i66: i64, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i32, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$i78: i32, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$i85: i16, out_$i86: i32, out_$i87: i32, out_$i88: i64, out_$i90: i32, out_$i91: i64, out_$i92: i64, out_$i93: i64, out_$i94: i1, out_$i95: i1, out_$i49: i32, out_$i50: i64, out_vslice_dummy_var_148: i32)
{

  entry:
    out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i61, out_$i62, out_$i63, out_$i60, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i78, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i49, out_$i50, out_vslice_dummy_var_148 := in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i61, in_$i62, in_$i63, in_$i60, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i79, in_$i80, in_$i81, in_$i78, in_$i82, in_$p83, in_$p84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i49, in_$i50, in_vslice_dummy_var_148;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8057;

  $bb56:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i49, out_$i50 := out_$i90, out_$i91;
    goto $bb56_dummy;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i95 := $ugt.i64(out_$i91, in_$i41);
    goto corral_source_split_8120;

  $bb54:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(288, 1)));
    goto corral_source_split_8118;

  $bb53:
    assume out_$i94 == 1;
    goto corral_source_split_8117;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i64(out_$i93, 0);
    goto corral_source_split_8115;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    out_$i93 := $and.i64(out_$i92, 2);
    goto corral_source_split_8114;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    out_$i92 := $M.1;
    goto corral_source_split_8113;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    out_$i91 := $sub.i64(out_$i50, 4096);
    call {:si_unique_call 2262} {:cexpr "vaddr"} boogie_si_record_i64(out_$i91);
    goto corral_source_split_8112;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_8111;

  $bb29:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i90 := out_$i49;
    goto $bb52;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    out_$i90 := out_$i78;
    goto $bb52;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} out_vslice_dummy_var_148 := printk.ref.i32.ref.ref.i32.ref.ref.i64.i32.i32.i32.i64(.str.109, out_$i78, .str.110, out_$p83, out_$i86, in_$p1, in_$p7, out_$i50, in_$i4, in_$i5, out_$i87, out_$i88);
    goto corral_source_split_8107;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i64($M.27, in_$p9);
    goto corral_source_split_8106;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.26, in_$p10);
    goto corral_source_split_8105;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i16.i32(out_$i85);
    goto corral_source_split_8104;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i16($M.0, out_$p84);
    goto corral_source_split_8103;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p0, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_8102;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    out_$p83 := (if out_$i82 == 1 then .str.99 else .str.100);
    goto corral_source_split_8101;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i32(in_$i2, 0);
    goto corral_source_split_8100;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_8099;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i49;
    goto $bb47;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i81;
    goto $bb47;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i80;
    goto $bb47;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i79;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i77;
    goto $bb47;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i76 == 1;
    call {:si_unique_call 2258} out_$i77 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2259} {:cexpr "pfo_ret__"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_8097;

  $bb40:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb31:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb28:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_8089;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i67, 1);
    goto corral_source_split_8088;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    out_$i67 := $trunc.i64.i32(out_$i66);
    goto corral_source_split_8087;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i66 := $M.1;
    goto corral_source_split_8086;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i64, 0);
    goto corral_source_split_8082;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} out_$i64 := tfh_write_only(in_$p7, out_$i53, 0, out_$i50, in_$i4, in_$i5, out_$i60);
    call {:si_unique_call 2251} {:cexpr "tmp"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_8081;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_8080;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i63;
    goto $bb23;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i59;
    goto $bb23;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i58, $sub.i32(0, 6));
    goto corral_source_split_8073;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    out_$i58 := $ashr.i32(out_$i57, 1);
    goto corral_source_split_8072;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i56, 2);
    goto corral_source_split_8071;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.26, in_$p10);
    goto corral_source_split_8070;

  $bb21:
    assume out_$i55 == 1;
    goto corral_source_split_8069;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    out_$i55 := $sgt.i32(out_$i54, 20);
    goto corral_source_split_8067;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.26, in_$p10);
    goto corral_source_split_8066;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i64($M.27, in_$p9);
    goto corral_source_split_8065;

  $bb20:
    assume !(out_$i52 == 1);
    goto corral_source_split_8064;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_8060;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} out_$i51 := gru_vtop(in_$p1, out_$i50, in_$i5, in_$i2, in_$p9, in_$p10);
    call {:si_unique_call 2249} {:cexpr "ret"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_8059;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i62, $sub.i32(0, 6));
    goto corral_source_split_8078;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    out_$i62 := $ashr.i32(out_$i61, 1);
    goto corral_source_split_8077;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.26, in_$p10);
    goto corral_source_split_8076;

  $bb22:
    assume !(out_$i55 == 1);
    goto corral_source_split_8075;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb42:
    assume out_$i75 == 1;
    call {:si_unique_call 2256} out_$i79 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2257} {:cexpr "pfo_ret_____0"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_8095;

  $bb41:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb38:
    assume out_$i73 == 1;
    call {:si_unique_call 2254} out_$i80 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2255} {:cexpr "pfo_ret_____1"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_8093;

  $bb33:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb32:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb35:
    assume out_$i72 == 1;
    call {:si_unique_call 2252} out_$i81 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2253} {:cexpr "pfo_ret_____2"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_8091;

  $bb34:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} __bad_size_call_parameter();
    goto corral_source_split_8109;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb37;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb37;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb37;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i76 == 1);
    goto $bb37;

  $bb56_dummy:
    call {:si_unique_call 1} out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i61, out_$i62, out_$i63, out_$i60, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i78, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i49, out_$i50, out_vslice_dummy_var_148 := gru_preload_tlb_loop_$bb17(in_$p0, in_$p1, in_$i2, in_$i4, in_$i5, in_$p7, in_$p9, in_$p10, in_$i41, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i61, out_$i62, out_$i63, out_$i60, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i81, out_$i78, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i49, out_$i50, out_vslice_dummy_var_148);
    return;

  exit:
    return;
}



procedure gru_preload_tlb_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i4: i32, in_$i5: i32, in_$p7: ref, in_$p9: ref, in_$p10: ref, in_$i41: i64, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i60: i32, in_$i64: i32, in_$i65: i1, in_$i66: i64, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i32, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$i78: i32, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$i85: i16, in_$i86: i32, in_$i87: i32, in_$i88: i64, in_$i90: i32, in_$i91: i64, in_$i92: i64, in_$i93: i64, in_$i94: i1, in_$i95: i1, in_$i49: i32, in_$i50: i64, in_vslice_dummy_var_148: i32) returns (out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i60: i32, out_$i64: i32, out_$i65: i1, out_$i66: i64, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i32, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$i78: i32, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$i85: i16, out_$i86: i32, out_$i87: i32, out_$i88: i64, out_$i90: i32, out_$i91: i64, out_$i92: i64, out_$i93: i64, out_$i94: i1, out_$i95: i1, out_$i49: i32, out_$i50: i64, out_vslice_dummy_var_148: i32);
  modifies $M.0, $M.28, $M.27, $M.26, $M.3, $M.29, $CurrAddr, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.53, $M.51, $M.50, $M.48, $M.47, $M.46, $M.44, $M.42, $M.41, $M.52, $M.49, $M.45, $M.43;



implementation pte_val_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} pte_val_loop_$bb10();
    return;

  exit:
    return;
}



procedure pte_val_loop_$bb10();



implementation pte_val_loop_$bb5()
{

  entry:
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb5_dummy;

  $bb5_dummy:
    call {:si_unique_call 1} pte_val_loop_$bb5();
    return;

  exit:
    return;
}



procedure pte_val_loop_$bb5();



implementation pmd_val_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} pmd_val_loop_$bb10();
    return;

  exit:
    return;
}



procedure pmd_val_loop_$bb10();



implementation pmd_val_loop_$bb5()
{

  entry:
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb5_dummy;

  $bb5_dummy:
    call {:si_unique_call 1} pmd_val_loop_$bb5();
    return;

  exit:
    return;
}



procedure pmd_val_loop_$bb5();



implementation pud_val_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} pud_val_loop_$bb10();
    return;

  exit:
    return;
}



procedure pud_val_loop_$bb10();



implementation pud_val_loop_$bb5()
{

  entry:
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb5_dummy;

  $bb5_dummy:
    call {:si_unique_call 1} pud_val_loop_$bb5();
    return;

  exit:
    return;
}



procedure pud_val_loop_$bb5();



implementation pgd_val_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} pgd_val_loop_$bb10();
    return;

  exit:
    return;
}



procedure pgd_val_loop_$bb10();



implementation pgd_val_loop_$bb5()
{

  entry:
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb5_dummy;

  $bb5_dummy:
    call {:si_unique_call 1} pgd_val_loop_$bb5();
    return;

  exit:
    return;
}



procedure pgd_val_loop_$bb5();



implementation gru_flush_tlb_range_loop_$bb38(in_$p0: ref, in_$i1: i64, in_$i10: i32, in_$i19: i64, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$i55: i32, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$i80: i16, in_$i81: i32, in_$i82: i1, in_$i83: i1, in_$i84: i64, in_$i85: i64, in_$i86: i1, in_$i87: i64, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i64, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i103: i32, in_$p107: ref, in_$i108: i16, in_$i109: i32, in_$i111: i32, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$p115: ref, in_$i116: i16, in_$i117: i32, in_$i118: i16, in_$i123: i64, in_$i124: i64, in_$i125: i1, in_$p126: ref, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$p130: ref, in_$i131: i16, in_$i132: i64, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i32, in_$i148: i32, in_$i149: i32, in_$i150: i32, in_$i147: i32, in_$p151: ref, in_$i152: i16, in_$i153: i32, in_$p155: ref, in_$i156: i64, in_$i158: i32, in_$i159: i32, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$p160: ref, in_$p161: ref, in_$i162: i32, in_$i163: i64, in_$i164: i64, in_$i165: i32, in_$i166: i1, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32) returns (out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$i55: i32, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$i80: i16, out_$i81: i32, out_$i82: i1, out_$i83: i1, out_$i84: i64, out_$i85: i64, out_$i86: i1, out_$i87: i64, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i64, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i103: i32, out_$p107: ref, out_$i108: i16, out_$i109: i32, out_$i111: i32, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$p115: ref, out_$i116: i16, out_$i117: i32, out_$i118: i16, out_$i123: i64, out_$i124: i64, out_$i125: i1, out_$p126: ref, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$p130: ref, out_$i131: i16, out_$i132: i64, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i32, out_$i148: i32, out_$i149: i32, out_$i150: i32, out_$i147: i32, out_$p151: ref, out_$i152: i16, out_$i153: i32, out_$p155: ref, out_$i156: i64, out_$i158: i32, out_$i159: i32, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$p160: ref, out_$p161: ref, out_$i162: i32, out_$i163: i64, out_$i164: i64, out_$i165: i32, out_$i166: i1, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32)
{

  entry:
    out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i103, out_$p107, out_$i108, out_$i109, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i148, out_$i149, out_$i150, out_$i147, out_$p151, out_$i152, out_$i153, out_$p155, out_$i156, out_$i158, out_$i159, out_$i120, out_$i121, out_$i122, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i49, out_$i50, out_$i51, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152 := in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$p69, in_$p70, in_$p71, in_$p72, in_$i73, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i104, in_$i105, in_$i106, in_$i103, in_$p107, in_$i108, in_$i109, in_$i111, in_$p112, in_$i113, in_$i114, in_$p115, in_$i116, in_$i117, in_$i118, in_$i123, in_$i124, in_$i125, in_$p126, in_$p127, in_$i128, in_$i129, in_$p130, in_$i131, in_$i132, in_$p133, in_$p134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i148, in_$i149, in_$i150, in_$i147, in_$p151, in_$i152, in_$i153, in_$p155, in_$i156, in_$i158, in_$i159, in_$i120, in_$i121, in_$i122, in_$p160, in_$p161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i49, in_$i50, in_$i51, in_vslice_dummy_var_150, in_vslice_dummy_var_151, in_vslice_dummy_var_152;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8786;

  $bb108:
    assume out_$i166 == 1;
    assume {:verifier.code 0} true;
    out_$i49, out_$i50, out_$i51 := out_$i122, out_$i121, out_$i165;
    goto $bb108_dummy;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    out_$i166 := $sle.i32(out_$i165, 2047);
    goto corral_source_split_8887;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    out_$i165 := $trunc.i64.i32(out_$i164);
    call {:si_unique_call 2481} {:cexpr "gid"} boogie_si_record_i32(out_$i165);
    goto corral_source_split_8886;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} out_$i164 := find_next_bit(out_$p161, 2048, out_$i163);
    call {:si_unique_call 2480} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i164);
    goto corral_source_split_8885;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    out_$i163 := $sext.i32.i64(out_$i162);
    goto corral_source_split_8884;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    out_$i162 := $add.i32(out_$i120, 1);
    goto corral_source_split_8883;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    out_$p161 := $bitcast.ref.ref(out_$p160);
    goto corral_source_split_8882;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(in_$p0, $mul.ref(0, 25032)), $mul.ref(200, 1));
    goto corral_source_split_8881;

  $bb79:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8880;

  $bb107:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i120, out_$i121, out_$i122 := out_$i158, out_$i50, out_$i159;
    goto $bb79;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    out_$i120, out_$i121, out_$i122 := out_$i51, out_$i111, out_$i49;
    goto $bb79;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} get_unlock_tgh_handle(out_$p112);
    goto corral_source_split_8878;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} out_vslice_dummy_var_151 := tgh_invalidate(out_$p112, in_$i1, $sub.i64(0, 1), out_$i90, in_$i10, 0, out_$i114, out_$i118);
    goto corral_source_split_8877;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i32.i16(out_$i117);
    goto corral_source_split_8876;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i16.i32(out_$i116);
    goto corral_source_split_8875;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i16($M.0, out_$p115);
    goto corral_source_split_8874;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p72, $mul.ref(out_$i73, 12)), $mul.ref(8, 1));
    goto corral_source_split_8873;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    out_$i114 := $sub.i32(out_$i113, 1);
    goto corral_source_split_8872;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    out_$i113 := $trunc.i64.i32(in_$i19);
    goto corral_source_split_8871;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} out_$p112 := get_lock_tgh_handle(out_$p70);
    goto corral_source_split_8870;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_8869;

  $bb55:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := out_$i50;
    goto $bb78;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i103;
    goto $bb78;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} out_vslice_dummy_var_150 := printk.ref.i32.ref.i32.i32.i64.i32.i64.i32(.str.35, out_$i103, .str.34, out_$i51, out_$i90, in_$i1, in_$i10, in_$i19, out_$i109);
    goto corral_source_split_8865;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i16.i32(out_$i108);
    goto corral_source_split_8864;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i16($M.0, out_$p107);
    goto corral_source_split_8863;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p72, $mul.ref(out_$i73, 12)), $mul.ref(8, 1));
    goto corral_source_split_8862;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_8861;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i50;
    goto $bb73;

  $bb76:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i106;
    goto $bb73;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i105;
    goto $bb73;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i104;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i102;
    goto $bb73;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb70:
    assume out_$i101 == 1;
    call {:si_unique_call 2472} out_$i102 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2473} {:cexpr "pfo_ret_____3"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_8859;

  $bb66:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb57:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb54:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 0);
    goto corral_source_split_8851;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    out_$i93 := $and.i32(out_$i92, 1);
    goto corral_source_split_8850;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    out_$i92 := $trunc.i64.i32(out_$i91);
    goto corral_source_split_8849;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    out_$i91 := $M.1;
    goto corral_source_split_8848;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i32(out_$i89, out_$i78);
    call {:si_unique_call 2465} {:cexpr "asid"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_8847;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    out_$i89 := $and.i32(out_$i88, 3);
    goto corral_source_split_8846;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    out_$i88 := $trunc.i64.i32(out_$i87);
    goto corral_source_split_8845;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i87 := $lshr.i64(in_$i1, 61);
    goto corral_source_split_8844;

  $bb52:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(392, 1)));
    goto corral_source_split_8842;

  $bb51:
    assume out_$i86 == 1;
    goto corral_source_split_8841;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i85, 0);
    goto corral_source_split_8839;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    out_$i85 := $and.i64(out_$i84, 2);
    goto corral_source_split_8838;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    out_$i84 := $M.1;
    goto corral_source_split_8837;

  $bb49:
    assume out_$i83 == 1;
    goto corral_source_split_8836;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i78, 0);
    goto corral_source_split_8830;

  $bb46:
    assume out_$i82 == 1;
    goto corral_source_split_8829;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i32(out_$i81, 0);
    goto corral_source_split_8827;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i16.i32(out_$i80);
    goto corral_source_split_8826;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i16($M.0, out_$p79);
    goto corral_source_split_8825;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p72, $mul.ref(out_$i73, 12)), $mul.ref(8, 1));
    goto corral_source_split_8824;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    out_$i78 := $and.i32(out_$i77, 16777215);
    call {:si_unique_call 2463} {:cexpr "asid"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_8823;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_8822;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_8821;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p72, $mul.ref(out_$i73, 12)), $mul.ref(4, 1));
    goto corral_source_split_8820;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    goto corral_source_split_8819;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i51);
    goto corral_source_split_8818;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p71);
    goto corral_source_split_8817;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p0, $mul.ref(0, 25032)), $mul.ref(456, 1));
    goto corral_source_split_8816;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_8815;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    out_$p70 := $0.ref;
    goto $bb45;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    out_$p70 := out_$p69;
    goto $bb45;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p66, $mul.ref(out_$i68, 424));
    goto corral_source_split_8811;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i67);
    goto corral_source_split_8810;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    out_$i67 := $srem.i32(out_$i51, 2);
    goto corral_source_split_8809;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_8808;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p64, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_8807;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.4, out_$p63);
    goto corral_source_split_8806;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i62, 8));
    goto corral_source_split_8805;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i61);
    goto corral_source_split_8804;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    out_$i61 := $sdiv.i32(out_$i51, 2);
    goto corral_source_split_8803;

  $bb43:
    assume out_$i60 == 1;
    goto corral_source_split_8802;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_8800;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p58);
    goto corral_source_split_8799;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.4, out_$p57);
    goto corral_source_split_8798;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i56, 8));
    goto corral_source_split_8797;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i55);
    goto corral_source_split_8796;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i55 := $sdiv.i32(out_$i51, 2);
    goto corral_source_split_8795;

  $bb41:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(384, 1)));
    goto corral_source_split_8793;

  $bb40:
    assume out_$i54 == 1;
    goto corral_source_split_8792;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_8790;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    out_$i53 := $and.i64(out_$i52, 2);
    goto corral_source_split_8789;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i52 := $M.1;
    goto corral_source_split_8788;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb44:
    assume !(out_$i60 == 1);
    goto corral_source_split_8813;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb68:
    assume out_$i100 == 1;
    call {:si_unique_call 2470} out_$i104 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2471} {:cexpr "pfo_ret_____4"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_8857;

  $bb67:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb64:
    assume out_$i98 == 1;
    call {:si_unique_call 2468} out_$i105 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2469} {:cexpr "pfo_ret_____5"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_8855;

  $bb59:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb58:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb61:
    assume out_$i97 == 1;
    call {:si_unique_call 2466} out_$i106 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2467} {:cexpr "pfo_ret_____6"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_8853;

  $bb60:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} __bad_size_call_parameter();
    goto corral_source_split_8867;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i97 == 1);
    goto $bb63;

  $bb65:
    assume {:verifier.code 0} true;
    assume !(out_$i98 == 1);
    goto $bb63;

  $bb69:
    assume {:verifier.code 0} true;
    assume !(out_$i100 == 1);
    goto $bb63;

  $bb71:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1);
    goto $bb63;

  $bb84:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    out_$i158, out_$i159 := out_$i51, out_$i49;
    goto $bb107;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    out_$i158, out_$i159 := out_$i51, out_$i147;
    goto $bb107;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2492} out_vslice_dummy_var_152 := printk.ref.i32.ref.i32.i32.i32.i64(.str.36, out_$i147, .str.34, out_$i51, out_$i78, out_$i153, out_$i156);
    goto corral_source_split_8922;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i64($M.0, out_$p155);
    goto corral_source_split_8921;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 25032)), $mul.ref(200, 1)), $mul.ref(0, 8));
    goto corral_source_split_8920;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    out_$i153 := $zext.i16.i32(out_$i152);
    goto corral_source_split_8919;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i16($M.0, out_$p151);
    goto corral_source_split_8918;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(out_$p72, $mul.ref(out_$i73, 12)), $mul.ref(8, 1));
    goto corral_source_split_8917;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_8916;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i49;
    goto $bb102;

  $bb105:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i150;
    goto $bb102;

  $bb104:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i149;
    goto $bb102;

  $bb103:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i148;
    goto $bb102;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i146;
    goto $bb102;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb99:
    assume out_$i145 == 1;
    call {:si_unique_call 2490} out_$i146 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2491} {:cexpr "pfo_ret_____7"} boogie_si_record_i32(out_$i146);
    goto corral_source_split_8914;

  $bb95:
    assume out_$i143 == 1;
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb86:
    assume out_$i139 == 1;
    assume {:verifier.code 0} true;
    out_$i143 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i139 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb83:
    assume out_$i138 == 1;
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    out_$i138 := $ne.i32(out_$i137, 0);
    goto corral_source_split_8906;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    out_$i137 := $and.i32(out_$i136, 1);
    goto corral_source_split_8905;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    out_$i136 := $trunc.i64.i32(out_$i135);
    goto corral_source_split_8904;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    out_$i135 := $M.1;
    goto corral_source_split_8903;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} __clear_bit(out_$i132, out_$p134);
    goto corral_source_split_8902;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    out_$p134 := $bitcast.ref.ref(out_$p133);
    goto corral_source_split_8901;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p0, $mul.ref(0, 25032)), $mul.ref(200, 1));
    goto corral_source_split_8900;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i16.i64(out_$i131);
    goto corral_source_split_8899;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i16($M.0, out_$p130);
    goto corral_source_split_8898;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(out_$p70, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_8897;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p127, out_$i129);
    goto corral_source_split_8896;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    out_$i129 := $and.i32(out_$i128, $sub.i32(0, 16777216));
    goto corral_source_split_8895;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i32($M.0, out_$p127);
    goto corral_source_split_8894;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    out_$p127 := $bitcast.ref.ref(out_$p126);
    goto corral_source_split_8893;

  $bb82:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(out_$p72, $mul.ref(out_$i73, 12)), $mul.ref(4, 1));
    goto corral_source_split_8892;

  $bb81:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} atomic_long_inc($add.ref($add.ref(gru_stats, $mul.ref(0, 592)), $mul.ref(400, 1)));
    goto corral_source_split_8890;

  $bb80:
    assume out_$i125 == 1;
    goto corral_source_split_8889;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i64(out_$i124, 0);
    goto corral_source_split_8834;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    out_$i124 := $and.i64(out_$i123, 2);
    goto corral_source_split_8833;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i123 := $M.1;
    goto corral_source_split_8832;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i82 == 1);
    goto $bb48;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i83 == 1);
    goto $bb48;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb97:
    assume out_$i144 == 1;
    call {:si_unique_call 2488} out_$i148 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2489} {:cexpr "pfo_ret_____8"} boogie_si_record_i32(out_$i148);
    goto corral_source_split_8912;

  $bb96:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb93:
    assume out_$i142 == 1;
    call {:si_unique_call 2486} out_$i149 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2487} {:cexpr "pfo_ret_____9"} boogie_si_record_i32(out_$i149);
    goto corral_source_split_8910;

  $bb88:
    assume out_$i140 == 1;
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb87:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    out_$i140 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb90:
    assume out_$i141 == 1;
    call {:si_unique_call 2484} out_$i150 := devirtbounce(0, cpu_number);
    call {:si_unique_call 2485} {:cexpr "pfo_ret_____10"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_8908;

  $bb89:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} __bad_size_call_parameter();
    goto corral_source_split_8924;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb91:
    assume {:verifier.code 0} true;
    assume !(out_$i141 == 1);
    goto $bb92;

  $bb94:
    assume {:verifier.code 0} true;
    assume !(out_$i142 == 1);
    goto $bb92;

  $bb98:
    assume {:verifier.code 0} true;
    assume !(out_$i144 == 1);
    goto $bb92;

  $bb100:
    assume {:verifier.code 0} true;
    assume !(out_$i145 == 1);
    goto $bb92;

  $bb108_dummy:
    call {:si_unique_call 1} out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i103, out_$p107, out_$i108, out_$i109, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i148, out_$i149, out_$i150, out_$i147, out_$p151, out_$i152, out_$i153, out_$p155, out_$i156, out_$i158, out_$i159, out_$i120, out_$i121, out_$i122, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i49, out_$i50, out_$i51, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152 := gru_flush_tlb_range_loop_$bb38(in_$p0, in_$i1, in_$i10, in_$i19, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i103, out_$p107, out_$i108, out_$i109, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i148, out_$i149, out_$i150, out_$i147, out_$p151, out_$i152, out_$i153, out_$p155, out_$i156, out_$i158, out_$i159, out_$i120, out_$i121, out_$i122, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i49, out_$i50, out_$i51, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152);
    return;

  exit:
    return;
}



procedure gru_flush_tlb_range_loop_$bb38(in_$p0: ref, in_$i1: i64, in_$i10: i32, in_$i19: i64, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$i55: i32, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$i80: i16, in_$i81: i32, in_$i82: i1, in_$i83: i1, in_$i84: i64, in_$i85: i64, in_$i86: i1, in_$i87: i64, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i64, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i103: i32, in_$p107: ref, in_$i108: i16, in_$i109: i32, in_$i111: i32, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$p115: ref, in_$i116: i16, in_$i117: i32, in_$i118: i16, in_$i123: i64, in_$i124: i64, in_$i125: i1, in_$p126: ref, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$p130: ref, in_$i131: i16, in_$i132: i64, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i32, in_$i148: i32, in_$i149: i32, in_$i150: i32, in_$i147: i32, in_$p151: ref, in_$i152: i16, in_$i153: i32, in_$p155: ref, in_$i156: i64, in_$i158: i32, in_$i159: i32, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$p160: ref, in_$p161: ref, in_$i162: i32, in_$i163: i64, in_$i164: i64, in_$i165: i32, in_$i166: i1, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32) returns (out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$i55: i32, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$i80: i16, out_$i81: i32, out_$i82: i1, out_$i83: i1, out_$i84: i64, out_$i85: i64, out_$i86: i1, out_$i87: i64, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i64, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i103: i32, out_$p107: ref, out_$i108: i16, out_$i109: i32, out_$i111: i32, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$p115: ref, out_$i116: i16, out_$i117: i32, out_$i118: i16, out_$i123: i64, out_$i124: i64, out_$i125: i1, out_$p126: ref, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$p130: ref, out_$i131: i16, out_$i132: i64, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i32, out_$i148: i32, out_$i149: i32, out_$i150: i32, out_$i147: i32, out_$p151: ref, out_$i152: i16, out_$i153: i32, out_$p155: ref, out_$i156: i64, out_$i158: i32, out_$i159: i32, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$p160: ref, out_$p161: ref, out_$i162: i32, out_$i163: i64, out_$i164: i64, out_$i165: i32, out_$i166: i1, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32);
  modifies $M.0, $CurrAddr;



implementation gru_unload_all_contexts_loop_$bb16(in_$p24: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i26: i32) returns (out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i26: i32)
{

  entry:
    out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i26 := in_$i27, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i26;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8976;

  $bb24:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i39;
    goto $bb24_dummy;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    out_$i40 := $sle.i32(out_$i39, 15);
    goto corral_source_split_8999;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i26, 1);
    call {:si_unique_call 2504} {:cexpr "ctxnum"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_8998;

  $bb19:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} spin_lock(out_$p38);
    goto corral_source_split_8996;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p24, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_8995;

  SeqInstr_261:
    goto corral_source_split_8994;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} ldv_mutex_unlock_72(out_$p37);
    goto SeqInstr_260;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p30, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_8993;

  SeqInstr_258:
    goto corral_source_split_8992;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} gru_unload_context(out_$p30, 1);
    goto SeqInstr_257;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} spin_unlock(out_$p36);
    goto corral_source_split_8991;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p24, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_8990;

  $bb20:
    assume out_$i35 == 1;
    goto corral_source_split_8989;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_8987;

  SeqInstr_255:
    call {:si_unique_call 2499} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_8986;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} out_$i34 := ldv_mutex_trylock_71(out_$p33);
    goto SeqInstr_254;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p30, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_8985;

  $bb18:
    assume out_$i32 == 1;
    goto corral_source_split_8984;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_8982;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_8981;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_8980;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p24, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i27, 8));
    goto corral_source_split_8979;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    goto corral_source_split_8978;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i26 := gru_unload_all_contexts_loop_$bb16(in_$p24, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i26);
    return;

  exit:
    return;
}



procedure gru_unload_all_contexts_loop_$bb16(in_$p24: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i26: i32) returns (out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i26: i32);
  modifies $M.6, assertsPassed, $M.0, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation gru_unload_all_contexts_loop_$bb11(in_$i9: i32, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$i15: i32, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i26: i32, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i8: i32) returns (out_$i9: i32, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$i15: i32, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i26: i32, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i8: i32)
{

  entry:
    out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i26, out_$p41, out_$i42, out_$i43, out_$i44, out_$i8 := in_$i9, in_$i10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$i27, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i26, in_$p41, in_$i42, in_$i43, in_$i44, in_$i8;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8950;

  $bb27:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i42;
    goto $bb27_dummy;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    out_$i44 := $ult.i32(out_$i42, out_$i43);
    goto corral_source_split_9005;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    out_$i43 := $M.22;
    goto corral_source_split_9004;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i8, 1);
    call {:si_unique_call 2506} {:cexpr "gid"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_9003;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} spin_unlock(out_$p41);
    goto corral_source_split_9002;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p24, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_9001;

  $bb25:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    out_$i40 := $sle.i32(out_$i39, 15);
    goto corral_source_split_8999;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i26, 1);
    call {:si_unique_call 2504} {:cexpr "ctxnum"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_8998;

  $bb19:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} spin_lock(out_$p38);
    goto corral_source_split_8996;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p24, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_8995;

  SeqInstr_261:
    goto corral_source_split_8994;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} ldv_mutex_unlock_72(out_$p37);
    goto SeqInstr_260;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p30, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_8993;

  SeqInstr_258:
    goto corral_source_split_8992;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} gru_unload_context(out_$p30, 1);
    goto SeqInstr_257;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} spin_unlock(out_$p36);
    goto corral_source_split_8991;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p24, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_8990;

  $bb20:
    assume out_$i35 == 1;
    goto corral_source_split_8989;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_8987;

  SeqInstr_255:
    call {:si_unique_call 2499} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_8986;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} out_$i34 := ldv_mutex_trylock_71(out_$p33);
    goto SeqInstr_254;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p30, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_8985;

  $bb18:
    assume out_$i32 == 1;
    goto corral_source_split_8984;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_8982;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_8981;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_8980;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p24, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i27, 8));
    goto corral_source_split_8979;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    goto corral_source_split_8978;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    call out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i26 := gru_unload_all_contexts_loop_$bb16(out_$p24, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i26);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8976;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    out_$i26 := 0;
    goto $bb16;

  $bb24:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i39;
    assume false;
    return;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} spin_lock(out_$p25);
    goto corral_source_split_8974;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 424)), $mul.ref(104, 1));
    goto corral_source_split_8973;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8972;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    out_$p24 := $0.ref;
    goto $bb15;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    out_$p24 := out_$p23;
    goto $bb15;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p20, $mul.ref(out_$i22, 424));
    goto corral_source_split_8968;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    goto corral_source_split_8967;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    out_$i21 := $srem.i32(out_$i8, 2);
    goto corral_source_split_8966;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_8965;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_8964;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.4, out_$p17);
    goto corral_source_split_8963;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i16, 8));
    goto corral_source_split_8962;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i15);
    goto corral_source_split_8961;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    out_$i15 := $sdiv.i32(out_$i8, 2);
    goto corral_source_split_8960;

  $bb13:
    assume out_$i14 == 1;
    goto corral_source_split_8959;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_8957;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_8956;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.4, out_$p11);
    goto corral_source_split_8955;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i10, 8));
    goto corral_source_split_8954;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i9);
    goto corral_source_split_8953;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i9 := $sdiv.i32(out_$i8, 2);
    goto corral_source_split_8952;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume !(out_$i14 == 1);
    goto corral_source_split_8970;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i26, out_$p41, out_$i42, out_$i43, out_$i44, out_$i8 := gru_unload_all_contexts_loop_$bb11(out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i26, out_$p41, out_$i42, out_$i43, out_$i44, out_$i8);
    return;

  exit:
    return;
}



procedure gru_unload_all_contexts_loop_$bb11(in_$i9: i32, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$i15: i32, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i26: i32, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i8: i32) returns (out_$i9: i32, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$i15: i32, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i26: i32, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i8: i32);
  modifies $M.6, assertsPassed, $M.0, $M.10, $M.9, $CurrAddr, $M.14, $M.15, $M.12, $M.16, $M.17;



implementation {:SIextraRecBound 16} cch_seq_show_loop_$bb9(in_$p0: ref, in_$p2: ref, in_$i4: i64, in_$p17: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i32, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$i65: i64, in_$i66: i64, in_$p67: ref, in_$p68: ref, in_$i33: i32, in_$i70: i32, in_$i71: i1, in_$i26: i32, in_vslice_dummy_var_163: i32) returns (out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i32, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$i65: i64, out_$i66: i64, out_$p67: ref, out_$p68: ref, out_$i33: i32, out_$i70: i32, out_$i71: i1, out_$i26: i32, out_vslice_dummy_var_163: i32)
{

  entry:
    out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i33, out_$i70, out_$i71, out_$i26, out_vslice_dummy_var_163 := in_$i27, in_$p29, in_$p30, in_$i31, in_$i32, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$p67, in_$p68, in_$i33, in_$i70, in_$i71, in_$i26, in_vslice_dummy_var_163;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9468;

  $bb21:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i70;
    goto $bb21_dummy;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    out_$i71 := $sle.i32(out_$i70, 15);
    goto corral_source_split_9480;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i33, 1);
    call {:si_unique_call 2678} {:cexpr "i"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_9479;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_9478;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i26;
    goto $bb13;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i26;
    goto $bb13;

  $bb11:
    assume out_$i32 == 1;
    goto corral_source_split_9476;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i64(out_$i31, 0);
    goto corral_source_split_9474;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_9473;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_9472;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p17, $mul.ref(0, 424)), $mul.ref(232, 1)), $mul.ref(out_$i27, 8));
    goto corral_source_split_9471;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    goto corral_source_split_9470;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} out_vslice_dummy_var_163 := seq_printf.ref.ref.i32.i32.i32.i32.i32.i32.i32.ref(in_$p0, .str.171, out_$i38, out_$i41, out_$i26, out_$i51, out_$i55, out_$i59, out_$i63, out_$p68);
    goto corral_source_split_9525;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.59, out_$p67);
    goto corral_source_split_9524;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(out_$i66, 8));
    goto corral_source_split_9523;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i64(out_$i65, 3);
    goto corral_source_split_9522;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i64($M.0, out_$p64);
    goto corral_source_split_9521;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p30, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_9520;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    out_$i63 := $mul.i32(out_$i62, 1024);
    goto corral_source_split_9519;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i8.i32(out_$i61);
    goto corral_source_split_9518;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i8($M.0, out_$p60);
    goto corral_source_split_9517;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p30, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_9516;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    out_$i59 := $mul.i32(out_$i58, 2);
    goto corral_source_split_9515;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    goto corral_source_split_9514;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.0, out_$p56);
    goto corral_source_split_9513;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p30, $mul.ref(0, 464)), $mul.ref(277, 1));
    goto corral_source_split_9512;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_9511;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    out_$i55 := 0;
    goto $bb20;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i54;
    goto $bb20;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    goto corral_source_split_9507;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p30, $mul.ref(0, 464)), $mul.ref(248, 1));
    goto corral_source_split_9506;

  $bb18:
    assume out_$i52 == 1;
    goto corral_source_split_9505;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i34, 0);
    goto corral_source_split_9503;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_9502;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    out_$i51 := 0;
    goto $bb17;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i50;
    goto $bb17;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i32(out_$i49, 16777215);
    goto corral_source_split_9498;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    goto corral_source_split_9497;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_9496;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref($add.ref(out_$p44, $mul.ref(0, 25032)), $mul.ref(456, 1)), $mul.ref(in_$i4, 12)), $mul.ref(4, 1));
    goto corral_source_split_9495;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_9494;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p30, $mul.ref(0, 464)), $mul.ref(200, 1));
    goto corral_source_split_9493;

  $bb15:
    assume out_$i42 == 1;
    goto corral_source_split_9492;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i35, 0);
    goto corral_source_split_9490;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_9489;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.0, out_$p39);
    goto corral_source_split_9488;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p17, $mul.ref(0, 424)), $mul.ref(26, 1));
    goto corral_source_split_9487;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_9486;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.0, out_$p36);
    goto corral_source_split_9485;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p17, $mul.ref(0, 424)), $mul.ref(24, 1));
    goto corral_source_split_9484;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} out_$i35 := is_kernel_context(out_$p30);
    call {:si_unique_call 2682} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_9483;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} out_$i34 := is_kernel_context(out_$p30);
    call {:si_unique_call 2680} {:cexpr "tmp"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_9482;

  $bb12:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb16:
    assume !(out_$i42 == 1);
    goto corral_source_split_9500;

  $bb19:
    assume !(out_$i52 == 1);
    goto corral_source_split_9509;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i33, out_$i70, out_$i71, out_$i26, out_vslice_dummy_var_163 := cch_seq_show_loop_$bb9(in_$p0, in_$p2, in_$i4, in_$p17, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i33, out_$i70, out_$i71, out_$i26, out_vslice_dummy_var_163);
    return;

  exit:
    return;
}



procedure cch_seq_show_loop_$bb9(in_$p0: ref, in_$p2: ref, in_$i4: i64, in_$p17: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i32, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$i65: i64, in_$i66: i64, in_$p67: ref, in_$p68: ref, in_$i33: i32, in_$i70: i32, in_$i71: i1, in_$i26: i32, in_vslice_dummy_var_163: i32) returns (out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i32, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$i65: i64, out_$i66: i64, out_$p67: ref, out_$p68: ref, out_$i33: i32, out_$i70: i32, out_$i71: i1, out_$i26: i32, out_vslice_dummy_var_163: i32);



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i103: i64, in_$i104: i32, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i109: i32, in_$i110: i64, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i122: i32, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i64, in_vslice_dummy_var_174: i64, in_vslice_dummy_var_175: i32) returns (out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i103: i64, out_$i104: i32, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i109: i32, out_$i110: i64, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i122: i32, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i64, out_vslice_dummy_var_174: i64, out_vslice_dummy_var_175: i32)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i46, out_$i47, out_$p48, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i123, out_$i124, out_$i125, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175 := in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i46, in_$i47, in_$p48, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p94, in_$i96, in_$i97, in_$p98, in_$i100, in_$i101, in_$p102, in_$i103, in_$i104, in_$i106, in_$i107, in_$p108, in_$i109, in_$i110, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i122, in_$i123, in_$i124, in_$i125, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170, in_vslice_dummy_var_171, in_vslice_dummy_var_172, in_vslice_dummy_var_173, in_vslice_dummy_var_174, in_vslice_dummy_var_175;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2718} out_$i16 := __VERIFIER_nondet_int();
    call {:si_unique_call 2719} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i16);
    call {:si_unique_call 2720} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i16);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} ldv_main_exported_6();
    goto corral_source_split_9619;

  $bb28:
    assume out_$i30 == 1;
    goto corral_source_split_9618;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_9616;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    out_$i29 := $M.56;
    goto corral_source_split_9615;

  $bb26:
    assume out_$i28 == 1;
    goto corral_source_split_9614;

  $bb24:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i16, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb18:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i16, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb3:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i16, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb33:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} ldv_main_exported_3();
    goto corral_source_split_9622;

  $bb32:
    assume out_$i32 == 1;
    goto corral_source_split_9621;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_9612;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    out_$i31 := $M.62;
    goto corral_source_split_9611;

  $bb25:
    assume !(out_$i27 == 1);
    goto corral_source_split_9610;

  $bb36:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} ldv_main_exported_7();
    goto corral_source_split_9625;

  $bb35:
    assume out_$i34 == 1;
    goto corral_source_split_9624;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_9600;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    out_$i33 := $M.63;
    goto corral_source_split_9599;

  $bb20:
    assume out_$i25 == 1;
    goto corral_source_split_9598;

  $bb19:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i16, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb39:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 2730} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9652;

  SeqInstr_285:
    goto corral_source_split_9651;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} out_vslice_dummy_var_169 := gru_fault(out_$p48, in_$p5);
    goto SeqInstr_284;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    out_$p48 := $M.61;
    goto corral_source_split_9650;

  $bb53:
    assume out_$i47 == 1;
    goto corral_source_split_9649;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 2);
    goto corral_source_split_9647;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i46 := $M.64;
    goto corral_source_split_9646;

  $bb51:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 2728} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9644;

  SeqInstr_282:
    goto corral_source_split_9643;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} out_vslice_dummy_var_168 := gru_fault(out_$p44, in_$p5);
    goto SeqInstr_281;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    out_$p44 := $M.61;
    goto corral_source_split_9642;

  $bb50:
    assume out_$i43 == 1;
    goto corral_source_split_9641;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 1);
    goto corral_source_split_9639;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    out_$i42 := $M.64;
    goto corral_source_split_9638;

  $bb48:
    assume out_$i41 == 1;
    goto corral_source_split_9637;

  $bb41:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_9627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2724} out_$i37 := __VERIFIER_nondet_int();
    call {:si_unique_call 2725} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i37);
    call {:si_unique_call 2726} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i37);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume out_$i36 == 1;
    goto corral_source_split_9627;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_9604;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    out_$i35 := $M.64;
    goto corral_source_split_9603;

  $bb22:
    assume out_$i26 == 1;
    goto corral_source_split_9602;

  $bb21:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i16, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb58:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 2732} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9657;

  SeqInstr_288:
    goto corral_source_split_9656;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} gru_vma_close(out_$p52);
    goto SeqInstr_287;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    out_$p52 := $M.61;
    goto corral_source_split_9655;

  $bb57:
    assume out_$i51 == 1;
    goto corral_source_split_9654;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 2);
    goto corral_source_split_9631;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    out_$i50 := $M.64;
    goto corral_source_split_9630;

  $bb43:
    assume out_$i39 == 1;
    goto corral_source_split_9629;

  $bb42:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb61:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $M.69 := out_$i57;
    call {:si_unique_call 2735} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_9664;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i56, 1);
    goto corral_source_split_9663;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    out_$i56 := $M.69;
    goto corral_source_split_9662;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 2734} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9661;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} out_vslice_dummy_var_170 := ldv_open_9();
    goto corral_source_split_9660;

  $bb60:
    assume out_$i54 == 1;
    goto corral_source_split_9659;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 1);
    goto corral_source_split_9635;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    out_$i53 := $M.64;
    goto corral_source_split_9634;

  $bb45:
    assume out_$i40 == 1;
    goto corral_source_split_9633;

  $bb44:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} ldv_stop();
    goto corral_source_split_9666;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb47;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb47;

  $bb67:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} ldv_main_exported_2();
    goto corral_source_split_9669;

  $bb66:
    assume out_$i59 == 1;
    goto corral_source_split_9668;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_9608;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    out_$i58 := $M.65;
    goto corral_source_split_9607;

  $bb23:
    assume !(out_$i26 == 1);
    goto corral_source_split_9606;

  $bb70:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} ldv_main_exported_8();
    goto corral_source_split_9672;

  $bb69:
    assume out_$i61 == 1;
    goto corral_source_split_9671;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_9588;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    out_$i60 := $M.66;
    goto corral_source_split_9587;

  $bb14:
    assume out_$i22 == 1;
    goto corral_source_split_9586;

  $bb5:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i16, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i16, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb73:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} ldv_main_exported_1();
    goto corral_source_split_9675;

  $bb72:
    assume out_$i63 == 1;
    goto corral_source_split_9674;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_9592;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    out_$i62 := $M.67;
    goto corral_source_split_9591;

  $bb16:
    assume out_$i23 == 1;
    goto corral_source_split_9590;

  $bb15:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i16, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb76:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} ldv_main_exported_4();
    goto corral_source_split_9678;

  $bb75:
    assume out_$i65 == 1;
    goto corral_source_split_9677;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i64, 0);
    goto corral_source_split_9596;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    out_$i64 := $M.68;
    goto corral_source_split_9595;

  $bb17:
    assume !(out_$i23 == 1);
    goto corral_source_split_9594;

  $bb79:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb89:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb90;

  $bb92:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb90;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 0);
    goto corral_source_split_9692;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    out_$i74 := $M.69;
    goto corral_source_split_9691;

  $bb88:
    assume out_$i73 == 1;
    goto corral_source_split_9690;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 2);
    goto corral_source_split_9688;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    out_$i72 := $M.70;
    goto corral_source_split_9687;

  $bb86:
    assume out_$i71 == 1;
    goto corral_source_split_9686;

  $bb81:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i68, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb80:
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i68, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_9680:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2741} out_$i68 := __VERIFIER_nondet_int();
    call {:si_unique_call 2742} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i68);
    call {:si_unique_call 2743} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i68);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb78:
    assume out_$i67 == 1;
    goto corral_source_split_9680;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_9576;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    out_$i66 := $M.70;
    goto corral_source_split_9575;

  $bb7:
    assume out_$i19 == 1;
    goto corral_source_split_9574;

  $bb6:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i16, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb97:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} ldv_initialize_mmu_notifier_ops_8();
    goto corral_source_split_9717;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 2753} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9716;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} ldv_initialize_vm_operations_struct_9();
    goto corral_source_split_9715;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 2751} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9714;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 2750} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9713;

  $bb101:
    assume out_$i82 == 1;
    goto corral_source_split_9712;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 0);
    goto corral_source_split_9710;

  $bb100:
    assume {:verifier.code 0} true;
    out_$i81 := $M.73;
    goto corral_source_split_9709;

  $bb99:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_9704;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    out_$i79 := $M.73;
    goto corral_source_split_9703;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $M.73 := out_$i78;
    call {:si_unique_call 2748} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_9702;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} out_$i78 := gru_init();
    goto corral_source_split_9701;

  $bb96:
    assume out_$i77 == 1;
    goto corral_source_split_9700;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 1);
    goto corral_source_split_9684;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    out_$i76 := $M.70;
    goto corral_source_split_9683;

  $bb83:
    assume out_$i70 == 1;
    goto corral_source_split_9682;

  $bb82:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i68, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} ldv_stop();
    goto corral_source_split_9719;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb84:
    assume {:verifier.code 0} true;
    assume !(out_$i70 == 1);
    goto $bb85;

  $bb87:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb85;

  $bb109:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb128:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 2762} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_9754;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} out_vslice_dummy_var_172 := gru_file_mmap(out_$p98, in_$p7);
    goto corral_source_split_9753;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    out_$p98 := $M.74;
    goto corral_source_split_9752;

  $bb127:
    assume out_$i97 == 1;
    goto corral_source_split_9751;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 2);
    goto corral_source_split_9749;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i96 := $M.71;
    goto corral_source_split_9748;

  $bb125:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 2760} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_9746;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} out_vslice_dummy_var_171 := gru_file_mmap(out_$p94, in_$p7);
    goto corral_source_split_9745;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    out_$p94 := $M.74;
    goto corral_source_split_9744;

  $bb124:
    assume out_$i93 == 1;
    goto corral_source_split_9743;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 1);
    goto corral_source_split_9741;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    out_$i92 := $M.71;
    goto corral_source_split_9740;

  $bb122:
    assume out_$i91 == 1;
    goto corral_source_split_9739;

  $bb120:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i85, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb111:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i85, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i85, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_9721:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2756} out_$i85 := __VERIFIER_nondet_int();
    call {:si_unique_call 2757} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i85);
    call {:si_unique_call 2758} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i85);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume out_$i84 == 1;
    goto corral_source_split_9721;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i83, 0);
    goto corral_source_split_9580;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    out_$i83 := $M.71;
    goto corral_source_split_9579;

  $bb9:
    assume out_$i20 == 1;
    goto corral_source_split_9578;

  $bb8:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i16, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb132:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 2764} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_9761;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} out_vslice_dummy_var_173 := noop_llseek(out_$p102, out_$i103, out_$i104);
    goto corral_source_split_9760;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i32($M.60, in_$p2);
    goto corral_source_split_9759;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i64($M.60, in_$p0);
    goto corral_source_split_9758;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    out_$p102 := $M.74;
    goto corral_source_split_9757;

  $bb131:
    assume out_$i101 == 1;
    goto corral_source_split_9756;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 2);
    goto corral_source_split_9737;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    out_$i100 := $M.71;
    goto corral_source_split_9736;

  $bb121:
    assume !(out_$i90 == 1);
    goto corral_source_split_9735;

  $bb135:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 2766} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_9768;

  SeqInstr_297:
    goto corral_source_split_9767;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2765} out_vslice_dummy_var_174 := gru_file_unlocked_ioctl(out_$p108, out_$i109, out_$i110);
    goto SeqInstr_296;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i64($M.60, in_$p1);
    goto corral_source_split_9766;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.60, in_$p3);
    goto corral_source_split_9765;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    out_$p108 := $M.74;
    goto corral_source_split_9764;

  $bb134:
    assume out_$i107 == 1;
    goto corral_source_split_9763;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i106, 2);
    goto corral_source_split_9725;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    out_$i106 := $M.71;
    goto corral_source_split_9724;

  $bb113:
    assume out_$i87 == 1;
    goto corral_source_split_9723;

  $bb112:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i85, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb138:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb140:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $M.69 := out_$i118;
    call {:si_unique_call 2770} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_9780;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    out_$i118 := $add.i32(out_$i117, 1);
    goto corral_source_split_9779;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    out_$i117 := $M.69;
    goto corral_source_split_9778;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 2769} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_9777;

  $bb139:
    assume out_$i116 == 1;
    goto corral_source_split_9776;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 0);
    goto corral_source_split_9774;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    out_$i115 := $M.75;
    goto corral_source_split_9773;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $M.75 := out_$i114;
    call {:si_unique_call 2768} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_9772;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} out_$i114 := ldv_open_10();
    goto corral_source_split_9771;

  $bb137:
    assume out_$i113 == 1;
    goto corral_source_split_9770;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 1);
    goto corral_source_split_9729;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    out_$i112 := $M.71;
    goto corral_source_split_9728;

  $bb115:
    assume out_$i88 == 1;
    goto corral_source_split_9727;

  $bb114:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i85, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb144:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $M.69 := out_$i123;
    call {:si_unique_call 2773} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_9787;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    out_$i123 := $sub.i32(out_$i122, 1);
    goto corral_source_split_9786;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    out_$i122 := $M.69;
    goto corral_source_split_9785;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 2772} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_9784;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} out_vslice_dummy_var_175 := ldv_release_10();
    goto corral_source_split_9783;

  $bb143:
    assume out_$i120 == 1;
    goto corral_source_split_9782;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 2);
    goto corral_source_split_9733;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    out_$i119 := $M.71;
    goto corral_source_split_9732;

  $bb117:
    assume out_$i89 == 1;
    goto corral_source_split_9731;

  $bb116:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i85, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} ldv_stop();
    goto corral_source_split_9789;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb118:
    assume {:verifier.code 0} true;
    assume !(out_$i89 == 1);
    goto $bb119;

  $bb123:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb119;

  $bb150:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} ldv_main_exported_5();
    goto corral_source_split_9792;

  $bb149:
    assume out_$i125 == 1;
    goto corral_source_split_9791;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i32(out_$i124, 0);
    goto corral_source_split_9584;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    out_$i124 := $M.72;
    goto corral_source_split_9583;

  $bb11:
    assume out_$i21 == 1;
    goto corral_source_split_9582;

  $bb10:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i16, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} ldv_stop();
    goto corral_source_split_9794;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb13;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb13;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i46, out_$i47, out_$p48, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i123, out_$i124, out_$i125, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p5, in_$p7, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i46, out_$i47, out_$p48, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i123, out_$i124, out_$i125, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i103: i64, in_$i104: i32, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i109: i32, in_$i110: i64, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i122: i32, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i64, in_vslice_dummy_var_174: i64, in_vslice_dummy_var_175: i32) returns (out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i103: i64, out_$i104: i32, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i109: i32, out_$i110: i64, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i122: i32, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i64, out_vslice_dummy_var_174: i64, out_vslice_dummy_var_175: i32);
  modifies $M.77, $M.56, $M.69, $M.58, $M.79, $M.60, $M.62, $M.82, $M.0, $CurrAddr, $M.85, $M.63, $M.59, $M.87, $M.64, $M.2, $M.5, $M.6, assertsPassed, $M.10, $M.9, $M.14, $M.15, $M.12, $M.16, $M.17, $M.65, $M.90, $M.57, $M.66, $M.67, $M.94, $M.68, $M.97, $M.91, $M.92, $M.61, $M.70, $M.73, $M.31, $M.98, $M.32, $M.105, $M.21, $M.20, $M.4, $M.81, $M.80, $M.107, $M.22, $M.108, $M.71, $M.3, $M.23, $M.24, $M.25, $M.8, $M.26, $M.27, $M.11, $M.28, $M.29, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.53, $M.51, $M.50, $M.48, $M.47, $M.46, $M.44, $M.42, $M.41, $M.52, $M.49, $M.45, $M.43, $M.75, $M.72, $M.101;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation gru_proc_init_loop_$bb4(in_$i5: i32, in_$i6: i1, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p4: ref) returns (out_$i5: i32, out_$i6: i1, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p4: ref)
{

  entry:
    out_$i5, out_$i6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p4 := in_$i5, in_$i6, in_$p7, in_$p8, in_$p9, in_$i10, in_$i11, in_$p4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_10649;

  $bb10:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p7;
    goto $bb10_dummy;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i64(out_$i10, 0);
    goto corral_source_split_10662;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_10661;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.106, out_$p8);
    goto corral_source_split_10660;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p4, $mul.ref(1, 32)), $mul.ref(0, 1));
    goto corral_source_split_10659;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref(out_$p4, $mul.ref(1, 32));
    goto corral_source_split_10658;

  $bb7:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_10652;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3047} out_$i5 := create_proc_file(out_$p4);
    call {:si_unique_call 3048} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_10651;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p4 := gru_proc_init_loop_$bb4(out_$i5, out_$i6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p4);
    return;

  exit:
    return;
}



procedure gru_proc_init_loop_$bb4(in_$i5: i32, in_$i6: i1, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p4: ref) returns (out_$i5: i32, out_$i6: i1, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p4: ref);
  modifies $M.107;



implementation gru_init_tables_loop_$bb10(in_$i0: i64, in_$p1: ref, in_$i7: i32, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$i72: i1, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i73: i32, in_$i74: i32, in_$i6: i32) returns (out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$i72: i1, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i73: i32, out_$i74: i32)
{

  entry:
    out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p50, out_$i51, out_$i52, out_$i53, out_$i73, out_$i74 := in_$i54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$i72, in_$p50, in_$i51, in_$i52, in_$i53, in_$i73, in_$i74;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10731;

  $bb18:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$p50, out_$i51, out_$i52, out_$i53 := out_$p71, out_$i69, out_$i62, out_$i70;
    goto $bb18_dummy;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    out_$i73, out_$i74 := out_$i62, out_$i69;
    assume true;
    goto $bb18;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    out_$i72 := $sle.i32(out_$i70, 1);
    goto corral_source_split_10762;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(out_$p50, $mul.ref(1, 424));
    goto corral_source_split_10761;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i53, 1);
    call {:si_unique_call 3078} {:cexpr "chip"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_10760;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_10759;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i67;
    goto $bb17;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i51;
    goto $bb17;

  $bb15:
    assume out_$i68 == 1;
    goto corral_source_split_10755;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i51, out_$i67);
    goto corral_source_split_10753;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    out_$i67 := $mul.i32(out_$i66, 1024);
    call {:si_unique_call 3077} {:cexpr "n"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_10752;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i64.i32(out_$i65);
    goto corral_source_split_10751;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3075} out_$i65 := __arch_hweight64(out_$i64);
    call {:si_unique_call 3076} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i65);
    goto corral_source_split_10750;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i64($M.0, out_$p63);
    goto corral_source_split_10749;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p50, $mul.ref(0, 424)), $mul.ref(208, 1));
    goto corral_source_split_10748;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_10747;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i60;
    goto $bb14;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i52;
    goto $bb14;

  $bb12:
    assume out_$i61 == 1;
    goto corral_source_split_10743;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    out_$i61 := $sgt.i32(out_$i52, out_$i60);
    goto corral_source_split_10741;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    out_$i60 := $mul.i32(out_$i59, 2);
    call {:si_unique_call 3074} {:cexpr "n"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_10740;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i64.i32(out_$i58);
    goto corral_source_split_10739;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3072} out_$i58 := __arch_hweight64(out_$i57);
    call {:si_unique_call 3073} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_10738;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i64($M.0, out_$p56);
    goto corral_source_split_10737;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p50, $mul.ref(0, 424)), $mul.ref(200, 1));
    goto corral_source_split_10736;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3071} gru_init_chiplet(out_$p50, out_$i54, out_$p55, in_$i6, out_$i53);
    goto corral_source_split_10735;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3070} out_$p55 := gru_chiplet_vaddr(in_$p1, in_$i7, out_$i53);
    goto corral_source_split_10734;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3068} out_$i54 := gru_chiplet_paddr(in_$i0, in_$i7, out_$i53);
    call {:si_unique_call 3069} {:cexpr "paddr"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_10733;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb13:
    assume !(out_$i61 == 1);
    goto corral_source_split_10745;

  $bb16:
    assume !(out_$i68 == 1);
    goto corral_source_split_10757;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p50, out_$i51, out_$i52, out_$i53, out_$i73, out_$i74 := gru_init_tables_loop_$bb10(in_$i0, in_$p1, in_$i7, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p50, out_$i51, out_$i52, out_$i53, out_$i73, out_$i74, in_$i6);
    return;

  exit:
    return;
}



procedure gru_init_tables_loop_$bb10(in_$i0: i64, in_$p1: ref, in_$i7: i32, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$i72: i1, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i73: i32, in_$i74: i32, in_$i6: i32) returns (out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$i72: i1, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i73: i32, out_$i74: i32);
  modifies $M.0, $M.22, $CurrAddr;



implementation gru_init_tables_loop_$bb34(in_$i88: i64, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i32, in_$i93: i1, in_$i87: i32) returns (out_$i88: i64, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i32, out_$i93: i1, out_$i87: i32)
{

  entry:
    out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i87 := in_$i88, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i87;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_10792;

  $bb36:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i87 := out_$i92;
    goto $bb36_dummy;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    out_$i93 := $sge.i32(out_$i92, 0);
    goto corral_source_split_10800;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    out_$i92 := $sub.i32(out_$i87, 1);
    call {:si_unique_call 3087} {:cexpr "bid"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_10799;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3086} free_pages(out_$i91, 0);
    goto corral_source_split_10798;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    out_$i91 := $p2i.ref.i64(out_$p90);
    goto corral_source_split_10797;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.4, out_$p89);
    goto corral_source_split_10796;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i88, 8));
    goto corral_source_split_10795;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i88 := $sext.i32.i64(out_$i87);
    goto corral_source_split_10794;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i87 := gru_init_tables_loop_$bb34(out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i87);
    return;

  exit:
    return;
}



procedure gru_init_tables_loop_$bb34(in_$i88: i64, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i32, in_$i93: i1, in_$i87: i32) returns (out_$i88: i64, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i32, out_$i93: i1, out_$i87: i32);



implementation gru_init_tables_loop_$bb4(in_$i0: i64, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$p13: ref, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$i72: i1, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i6: i32, in_cmdloc_dummy_var_85: [ref]i8, in_cmdloc_dummy_var_86: [ref]i8, in_vslice_dummy_var_231: ref) returns (out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$p13: ref, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$i72: i1, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i6: i32, out_cmdloc_dummy_var_85: [ref]i8, out_cmdloc_dummy_var_86: [ref]i8, out_vslice_dummy_var_231: ref)
{

  entry:
    out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i35, out_$p36, out_$p37, out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p50, out_$i51, out_$i52, out_$i53, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i6, out_cmdloc_dummy_var_85, out_cmdloc_dummy_var_86, out_vslice_dummy_var_231 := in_$i7, in_$i8, in_$p9, in_$i10, in_$i11, in_$i12, in_$p13, in_$i15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i26, in_$p27, in_$p28, in_$p29, in_$i30, in_$p31, in_$p32, in_$p33, in_$i35, in_$p36, in_$p37, in_$p39, in_$p40, in_$i41, in_$p42, in_$p43, in_$p44, in_$i45, in_$p46, in_$p47, in_$p48, in_$i54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$i72, in_$p50, in_$i51, in_$i52, in_$i53, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i6, in_cmdloc_dummy_var_85, in_cmdloc_dummy_var_86, in_vslice_dummy_var_231;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_10676;

  $bb27:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i81;
    goto $bb27_dummy;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    out_$i83 := $sgt.i32(out_$i82, out_$i81);
    goto corral_source_split_10784;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3084} out_$i82 := uv_num_possible_blades();
    call {:si_unique_call 3085} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_10783;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i6, 1);
    call {:si_unique_call 3083} {:cexpr "bid"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_10782;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $M.20 := out_$i80;
    call {:si_unique_call 3082} {:cexpr "max_user_dsr_bytes"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_10781;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_10780;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i74;
    goto $bb26;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i78;
    goto $bb26;

  $bb24:
    assume out_$i79 == 1;
    goto corral_source_split_10776;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i78, out_$i74);
    goto corral_source_split_10774;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    out_$i78 := $M.20;
    call {:si_unique_call 3081} {:cexpr "_min1___0"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_10773;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $M.21 := out_$i77;
    call {:si_unique_call 3080} {:cexpr "max_user_cbrs"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_10772;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_10771;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i73;
    goto $bb23;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i75;
    goto $bb23;

  $bb21:
    assume out_$i76 == 1;
    goto corral_source_split_10767;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i75, out_$i73);
    goto corral_source_split_10765;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i75 := $M.21;
    call {:si_unique_call 3079} {:cexpr "_min1"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_10764;

  $bb19:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    out_$i73, out_$i74 := out_$i62, out_$i69;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    out_$i72 := $sle.i32(out_$i70, 1);
    goto corral_source_split_10762;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(out_$p50, $mul.ref(1, 424));
    goto corral_source_split_10761;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i53, 1);
    call {:si_unique_call 3078} {:cexpr "chip"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_10760;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_10759;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i67;
    goto $bb17;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i51;
    goto $bb17;

  $bb15:
    assume out_$i68 == 1;
    goto corral_source_split_10755;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i51, out_$i67);
    goto corral_source_split_10753;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    out_$i67 := $mul.i32(out_$i66, 1024);
    call {:si_unique_call 3077} {:cexpr "n"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_10752;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i64.i32(out_$i65);
    goto corral_source_split_10751;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3075} out_$i65 := __arch_hweight64(out_$i64);
    call {:si_unique_call 3076} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i65);
    goto corral_source_split_10750;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i64($M.0, out_$p63);
    goto corral_source_split_10749;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p50, $mul.ref(0, 424)), $mul.ref(208, 1));
    goto corral_source_split_10748;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_10747;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i60;
    goto $bb14;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i52;
    goto $bb14;

  $bb12:
    assume out_$i61 == 1;
    goto corral_source_split_10743;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    out_$i61 := $sgt.i32(out_$i52, out_$i60);
    goto corral_source_split_10741;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    out_$i60 := $mul.i32(out_$i59, 2);
    call {:si_unique_call 3074} {:cexpr "n"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_10740;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i64.i32(out_$i58);
    goto corral_source_split_10739;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3072} out_$i58 := __arch_hweight64(out_$i57);
    call {:si_unique_call 3073} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_10738;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i64($M.0, out_$p56);
    goto corral_source_split_10737;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p50, $mul.ref(0, 424)), $mul.ref(200, 1));
    goto corral_source_split_10736;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3071} gru_init_chiplet(out_$p50, out_$i54, out_$p55, out_$i6, out_$i53);
    goto corral_source_split_10735;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3070} out_$p55 := gru_chiplet_vaddr(in_$p1, out_$i7, out_$i53);
    goto corral_source_split_10734;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3068} out_$i54 := gru_chiplet_paddr(in_$i0, out_$i7, out_$i53);
    call {:si_unique_call 3069} {:cexpr "paddr"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_10733;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    call out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p50, out_$i51, out_$i52, out_$i53, out_$i73, out_$i74 := gru_init_tables_loop_$bb10(in_$i0, in_$p1, out_$i7, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p50, out_$i51, out_$i52, out_$i53, out_$i73, out_$i74, out_$i6);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10731;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    out_$p50, out_$i51, out_$i52, out_$i53 := out_$p48, 0, 0, 0;
    goto $bb10;

  $bb18:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$p50, out_$i51, out_$i52, out_$i53 := out_$p71, out_$i69, out_$i62, out_$i70;
    assume false;
    return;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    goto corral_source_split_10729;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_10728;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.4, out_$p46);
    goto corral_source_split_10727;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i45, 8));
    goto corral_source_split_10726;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i6);
    goto corral_source_split_10725;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3067} __init_rwsem(out_$p44, .str.65, in_$p3);
    goto corral_source_split_10724;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 1136)), $mul.ref(16, 1));
    goto corral_source_split_10723;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.4, out_$p42);
    goto corral_source_split_10722;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i41, 8));
    goto corral_source_split_10721;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i6);
    goto corral_source_split_10720;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3066} __raw_spin_lock_init(out_$p40, .str.64, in_$p2);
    goto corral_source_split_10719;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_10718;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(out_$p37, $mul.ref(0, 1136)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_10717;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.4, out_$p36);
    goto corral_source_split_10716;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i35, 8));
    goto corral_source_split_10715;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i6);
    goto corral_source_split_10714;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} out_vslice_dummy_var_231 := spinlock_check(out_$p33);
    goto corral_source_split_10713;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 1136)), $mul.ref(200, 1));
    goto corral_source_split_10712;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.4, out_$p31);
    goto corral_source_split_10711;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i30, 8));
    goto corral_source_split_10710;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i6);
    goto corral_source_split_10709;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p29, out_$p24);
    goto corral_source_split_10708;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 1136)), $mul.ref(280, 1));
    goto corral_source_split_10707;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.4, out_$p27);
    goto corral_source_split_10706;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i26, 8));
    goto corral_source_split_10705;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i6);
    goto corral_source_split_10704;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    goto corral_source_split_10703;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 1136)), $mul.ref(288, 1));
    goto corral_source_split_10702;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.4, out_$p22);
    goto corral_source_split_10701;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i21, 8));
    goto corral_source_split_10700;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i6);
    goto corral_source_split_10699;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_85 := $M.0;
    call {:si_unique_call 3064} out_cmdloc_dummy_var_86 := $memset.i8(out_cmdloc_dummy_var_85, out_$p20, 0, 1136, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_86;
    goto corral_source_split_10698;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_10697;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.4, out_$p18);
    goto corral_source_split_10696;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i17, 8));
    goto corral_source_split_10695;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i6);
    goto corral_source_split_10694;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p16, out_$p13);
    goto corral_source_split_10693;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(gru_base, $mul.ref(0, 8192)), $mul.ref(out_$i15, 8));
    goto corral_source_split_10692;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i6);
    goto corral_source_split_10691;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    goto corral_source_split_10690;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3063} out_$p13 := lowmem_page_address(out_$p9);
    goto corral_source_split_10689;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i6;
    assume true;
    goto $bb7;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i10, 0);
    goto corral_source_split_10682;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_10681;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3061} out_$p9 := alloc_pages_node(out_$i8, 208, 0);
    goto corral_source_split_10680;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3059} out_$i8 := uv_blade_to_memory_nid(out_$i6);
    call {:si_unique_call 3060} {:cexpr "nid"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_10679;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3057} out_$i7 := uv_blade_to_pnode(out_$i6);
    call {:si_unique_call 3058} {:cexpr "pnode"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_10678;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13:
    assume !(out_$i61 == 1);
    goto corral_source_split_10745;

  $bb16:
    assume !(out_$i68 == 1);
    goto corral_source_split_10757;

  $bb22:
    assume !(out_$i76 == 1);
    goto corral_source_split_10769;

  $bb25:
    assume !(out_$i79 == 1);
    goto corral_source_split_10778;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i35, out_$p36, out_$p37, out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p50, out_$i51, out_$i52, out_$i53, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i6, out_cmdloc_dummy_var_85, out_cmdloc_dummy_var_86, out_vslice_dummy_var_231 := gru_init_tables_loop_$bb4(in_$i0, in_$p1, in_$p2, in_$p3, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i35, out_$p36, out_$p37, out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$p50, out_$i51, out_$i52, out_$i53, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i6, out_cmdloc_dummy_var_85, out_cmdloc_dummy_var_86, out_vslice_dummy_var_231);
    return;

  exit:
    return;
}



procedure gru_init_tables_loop_$bb4(in_$i0: i64, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$p13: ref, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$i72: i1, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i6: i32, in_cmdloc_dummy_var_85: [ref]i8, in_cmdloc_dummy_var_86: [ref]i8, in_vslice_dummy_var_231: ref) returns (out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$p13: ref, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$i72: i1, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i6: i32, out_cmdloc_dummy_var_85: [ref]i8, out_cmdloc_dummy_var_86: [ref]i8, out_vslice_dummy_var_231: ref);
  modifies $M.20, $M.21, $M.0, $M.22, $CurrAddr, $M.4;



implementation gru_setup_tlb_irqs_loop_$bb19(in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i19: i32) returns (out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i19: i32)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i19 := in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i19;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_10840;

  $bb31:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i28;
    goto $bb31_dummy;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    out_$i30 := $sgt.i32(out_$i29, out_$i28);
    goto corral_source_split_10849;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3104} out_$i29 := uv_num_possible_blades();
    call {:si_unique_call 3105} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_10848;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i19, 1);
    call {:si_unique_call 3103} {:cexpr "blade"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_10847;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i21 == 1;
    goto corral_source_split_10845;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_10843;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3101} out_$i20 := uv_blade_nr_possible_cpus(out_$i19);
    call {:si_unique_call 3102} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_10842;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb29:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i25;
    assume true;
    goto $bb29;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_10857;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3108} out_$i25 := gru_chiplet_setup_tlb_irq(1, .str.71, gru_intr_mblade, 0, out_$i19);
    call {:si_unique_call 3109} {:cexpr "ret"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_10856;

  $bb26:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i22;
    assume true;
    goto $bb26;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_10852;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3106} out_$i22 := gru_chiplet_setup_tlb_irq(0, .str.70, gru_intr_mblade, 0, out_$i19);
    call {:si_unique_call 3107} {:cexpr "ret"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_10851;

  $bb22:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i19 := gru_setup_tlb_irqs_loop_$bb19(out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i19);
    return;

  exit:
    return;
}



procedure gru_setup_tlb_irqs_loop_$bb19(in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i19: i32) returns (out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i19: i32);
  modifies $M.0, $M.108, $CurrAddr;



implementation gru_setup_tlb_irqs_loop_$bb4(in_$i5: i32, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i4: i32) returns (out_$i5: i32, out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i4: i32)
{

  entry:
    out_$i5, out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i4 := in_$i5, in_$i6, in_$i7, in_$i8, in_$i10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_10812;

  $bb13:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i14;
    goto $bb13_dummy;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i14, out_$i15);
    goto corral_source_split_10831;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.3, nr_cpu_ids);
    goto corral_source_split_10830;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3097} out_$i14 := cpumask_next(out_$i4, out_$p13);
    call {:si_unique_call 3098} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_10829;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.3, cpu_online_mask);
    goto corral_source_split_10828;

  $bb11:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i10;
    assume true;
    goto $bb11;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_10824;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3095} out_$i10 := gru_chiplet_setup_tlb_irq(1, .str.71, gru1_intr, out_$i4, out_$i5);
    call {:si_unique_call 3096} {:cexpr "ret"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_10823;

  $bb7:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i6;
    assume true;
    goto $bb7;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i32(out_$i6, 0);
    goto corral_source_split_10816;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3092} out_$i6 := gru_chiplet_setup_tlb_irq(0, .str.70, gru0_intr, out_$i4, out_$i5);
    call {:si_unique_call 3093} {:cexpr "ret"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_10815;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3090} out_$i5 := uv_cpu_to_blade_id(out_$i4);
    call {:si_unique_call 3091} {:cexpr "blade"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_10814;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i4 := gru_setup_tlb_irqs_loop_$bb4(out_$i5, out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i4);
    return;

  exit:
    return;
}



procedure gru_setup_tlb_irqs_loop_$bb4(in_$i5: i32, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i4: i32) returns (out_$i5: i32, out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i4: i32);
  modifies $M.0, $M.108, $CurrAddr;



implementation delete_proc_files_loop_$bb6(in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p6: ref)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p6 := in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$p6;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_14986;

  $bb11:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p14;
    goto $bb11_dummy;

  corral_source_split_15003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_15002:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, 0);
    goto corral_source_split_15003;

  corral_source_split_15001:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_15002;

  corral_source_split_15000:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.106, out_$p15);
    goto corral_source_split_15001;

  corral_source_split_14999:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p6, $mul.ref(1, 32)), $mul.ref(0, 1));
    goto corral_source_split_15000;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p6, $mul.ref(1, 32));
    goto corral_source_split_14999;

  $bb9:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_14996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4140} remove_proc_entry(out_$p12, out_$p13);
    goto corral_source_split_14997;

  corral_source_split_14995:
    assume {:verifier.code 0} true;
    out_$p13 := $M.105;
    goto corral_source_split_14996;

  corral_source_split_14994:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.106, out_$p11);
    goto corral_source_split_14995;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_14994;

  $bb8:
    assume out_$i10 == 1;
    goto corral_source_split_14993;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_14990:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_14991;

  corral_source_split_14989:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_14990;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.107, out_$p7);
    goto corral_source_split_14989;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_14988;

  corral_source_split_14986:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p6 := delete_proc_files_loop_$bb6(out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p6);
    return;

  exit:
    return;
}



procedure delete_proc_files_loop_$bb6(in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p6: ref);



implementation gru_teardown_tlb_irqs_loop_$bb12(in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i12: i32) returns (out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i12: i32)
{

  entry:
    out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i12 := in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i12;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_15095;

  $bb18:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i15;
    goto $bb18_dummy;

  corral_source_split_15104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_15103:
    assume {:verifier.code 0} true;
    out_$i17 := $sgt.i32(out_$i16, out_$i15);
    goto corral_source_split_15104;

  corral_source_split_15102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4175} out_$i16 := uv_num_possible_blades();
    call {:si_unique_call 4176} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_15103;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i12, 1);
    call {:si_unique_call 4174} {:cexpr "blade"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_15102;

  corral_source_split_15107:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_15100:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i14 == 1;
    goto corral_source_split_15100;

  corral_source_split_15098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_15097:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_15098;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4172} out_$i13 := uv_blade_nr_possible_cpus(out_$i12);
    call {:si_unique_call 4173} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_15097;

  corral_source_split_15095:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_15106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4178} gru_chiplet_teardown_tlb_irq(1, 0, out_$i12);
    goto corral_source_split_15107;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4177} gru_chiplet_teardown_tlb_irq(0, 0, out_$i12);
    goto corral_source_split_15106;

  $bb15:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i12 := gru_teardown_tlb_irqs_loop_$bb12(out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i12);
    return;

  exit:
    return;
}



procedure gru_teardown_tlb_irqs_loop_$bb12(in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i12: i32) returns (out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i12: i32);
  modifies $M.108, $CurrAddr;



implementation gru_teardown_tlb_irqs_loop_$bb4(in_$i5: i32, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i4: i32) returns (out_$i5: i32, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i4: i32)
{

  entry:
    out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i4 := in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_15078;

  $bb6:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i7;
    goto $bb6_dummy;

  corral_source_split_15086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_15085:
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i7, out_$i8);
    goto corral_source_split_15086;

  corral_source_split_15084:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.3, nr_cpu_ids);
    goto corral_source_split_15085;

  corral_source_split_15083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4168} out_$i7 := cpumask_next(out_$i4, out_$p6);
    call {:si_unique_call 4169} {:cexpr "tmp"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_15084;

  corral_source_split_15082:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.3, cpu_online_mask);
    goto corral_source_split_15083;

  corral_source_split_15081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4167} gru_chiplet_teardown_tlb_irq(1, out_$i4, out_$i5);
    goto corral_source_split_15082;

  corral_source_split_15080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4166} gru_chiplet_teardown_tlb_irq(0, out_$i4, out_$i5);
    goto corral_source_split_15081;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4164} out_$i5 := uv_cpu_to_blade_id(out_$i4);
    call {:si_unique_call 4165} {:cexpr "blade"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_15080;

  corral_source_split_15078:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i4 := gru_teardown_tlb_irqs_loop_$bb4(out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i4);
    return;

  exit:
    return;
}



procedure gru_teardown_tlb_irqs_loop_$bb4(in_$i5: i32, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i4: i32) returns (out_$i5: i32, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i4: i32);
  modifies $M.108, $CurrAddr;



implementation gru_chiplet_cpu_to_mmr_loop_$bb14()
{

  entry:
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb14_dummy:
    call {:si_unique_call 1} gru_chiplet_cpu_to_mmr_loop_$bb14();
    return;

  exit:
    return;
}



procedure gru_chiplet_cpu_to_mmr_loop_$bb14();



implementation gru_kservices_exit_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} gru_kservices_exit_loop_$bb3();
    return;

  exit:
    return;
}



procedure gru_kservices_exit_loop_$bb3();


