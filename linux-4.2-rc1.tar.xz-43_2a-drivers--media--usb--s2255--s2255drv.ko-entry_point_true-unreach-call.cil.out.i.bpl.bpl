var $M.0: [ref]i8;

var $M.1: [ref]i64;

var $M.2: i32;

var $M.3: i32;

var $M.4: [ref]i8;

var $M.5: i32;

var $M.6: ref;

var $M.7: i32;

var $M.8: ref;

var $M.9: i32;

var $M.10: ref;

var $M.11: i32;

var $M.12: ref;

var $M.13: i32;

var $M.14: [ref]i32;

var $M.15: [ref]i32;

var $M.16: [ref]ref;

var $M.17: [ref]ref;

var $M.18: [ref]ref;

var $M.19: [ref]ref;

var $M.20: [ref]i24;

var $M.21: [ref]i8;

var $M.22: i32;

var $M.23: [ref]i8;

var $M.24: [ref]i8;

var $M.25: ref;

var $M.26: ref;

var $M.27: ref;

var $M.28: ref;

var $M.30: ref;

var $M.31: ref;

var $M.32: ref;

var $M.33: ref;

var $M.34: ref;

var $M.35: ref;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: [ref]i16;

var $M.50: [ref]i16;

var $M.51: [ref]i16;

var $M.52: [ref]i16;

var $M.53: [ref]i16;

var $M.54: [ref]i8;

var $M.55: [ref]i8;

var $M.56: [ref]i8;

var $M.57: [ref]i8;

var $M.58: [ref]i8;

var $M.59: [ref]i8;

var $M.60: [ref]i8;

var $M.61: [ref]i64;

var $M.62: [ref]i8;

var $M.63: [ref]i8;

var $M.64: [ref]ref;

var $M.65: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 475475);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_timer_1_0: ref;

axiom ldv_timer_1_0 == $sub.ref(0, 2056);

const ldv_timer_1_1: ref;

axiom ldv_timer_1_1 == $sub.ref(0, 3084);

const ldv_timer_1_2: ref;

axiom ldv_timer_1_2 == $sub.ref(0, 4112);

const ldv_timer_1_3: ref;

axiom ldv_timer_1_3 == $sub.ref(0, 5140);

const s2255_driver_group1: ref;

axiom s2255_driver_group1 == $sub.ref(0, 6172);

const s2255_fops_v4l_group0: ref;

axiom s2255_fops_v4l_group0 == $sub.ref(0, 7204);

const ldv_timer_list_1_0: ref;

axiom ldv_timer_list_1_0 == $sub.ref(0, 8236);

const ldv_timer_list_1_1: ref;

axiom ldv_timer_list_1_1 == $sub.ref(0, 9268);

const ldv_timer_list_1_2: ref;

axiom ldv_timer_list_1_2 == $sub.ref(0, 10300);

const ldv_timer_list_1_3: ref;

axiom ldv_timer_list_1_3 == $sub.ref(0, 11332);

const s2255_video_qops_group1: ref;

axiom s2255_video_qops_group1 == $sub.ref(0, 12364);

const s2255_video_qops_group0: ref;

axiom s2255_video_qops_group0 == $sub.ref(0, 13396);

const s2255_ioctl_ops_group2: ref;

axiom s2255_ioctl_ops_group2 == $sub.ref(0, 14428);

const s2255_ioctl_ops_group0: ref;

axiom s2255_ioctl_ops_group0 == $sub.ref(0, 15460);

const s2255_ioctl_ops_group4: ref;

axiom s2255_ioctl_ops_group4 == $sub.ref(0, 16492);

const s2255_ioctl_ops_group3: ref;

axiom s2255_ioctl_ops_group3 == $sub.ref(0, 17524);

const s2255_ioctl_ops_group5: ref;

axiom s2255_ioctl_ops_group5 == $sub.ref(0, 18556);

const s2255_ioctl_ops_group1: ref;

axiom s2255_ioctl_ops_group1 == $sub.ref(0, 19588);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 20616);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 21644);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 22672);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 23700);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 24728);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 25756);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 26784);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 27812);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 28840);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 29868);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 30896);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 31924);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 32952);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 33980);

const {:count 3} __mod_usb__s2255_table_device_table: ref;

axiom __mod_usb__s2255_table_device_table == $sub.ref(0, 35100);

const {:count 3} pal_sizes: ref;

axiom pal_sizes == $sub.ref(0, 36148);

const {:count 3} ntsc_sizes: ref;

axiom ntsc_sizes == $sub.ref(0, 37196);

const jpeg_enable: ref;

axiom jpeg_enable == $sub.ref(0, 38224);

const {:count 3} s2255_table: ref;

axiom s2255_table == $sub.ref(0, 39344);

const s2255_driver: ref;

axiom s2255_driver == $sub.ref(0, 40672);

const s2255_ioctl_ops: ref;

axiom s2255_ioctl_ops == $sub.ref(0, 42608);

const s2255_fops_v4l: ref;

axiom s2255_fops_v4l == $sub.ref(0, 43712);

const template: ref;

axiom template == $sub.ref(0, 46576);

const s2255_video_qops: ref;

axiom s2255_video_qops == $sub.ref(0, 47680);

const color_filter_ctrl: ref;

axiom color_filter_ctrl == $sub.ref(0, 48832);

const s2255_ctrl_ops: ref;

axiom s2255_ctrl_ops == $sub.ref(0, 49880);

const video_nr: ref;

axiom video_nr == $sub.ref(0, 50908);

const {:count 4} G_chnmap: ref;

axiom G_chnmap == $sub.ref(0, 51964);

const {:count 6} formats: ref;

axiom formats == $sub.ref(0, 53084);

const debug: ref;

axiom debug == $sub.ref(0, 54112);

const {:count 20} .str.13: ref;

axiom .str.13 == $sub.ref(0, 55156);

const {:count 20} .str.14: ref;

axiom .str.14 == $sub.ref(0, 56200);

const {:count 23} .str.15: ref;

axiom .str.15 == $sub.ref(0, 57247);

const {:count 10} .str.16: ref;

axiom .str.16 == $sub.ref(0, 58281);

const {:count 4} .str.17: ref;

axiom .str.17 == $sub.ref(0, 59309);

const {:count 5} .str.18: ref;

axiom .str.18 == $sub.ref(0, 60338);

const {:count 21} .str.19: ref;

axiom .str.19 == $sub.ref(0, 61383);

const {:count 15} .str.20: ref;

axiom .str.20 == $sub.ref(0, 62422);

const {:count 22} .str.21: ref;

axiom .str.21 == $sub.ref(0, 63468);

const {:count 213} .str.4: ref;

axiom .str.4 == $sub.ref(0, 64705);

const {:count 34} .str.22: ref;

axiom .str.22 == $sub.ref(0, 65763);

const {:count 28} .str.23: ref;

axiom .str.23 == $sub.ref(0, 66815);

const {:count 50} .str.24: ref;

axiom .str.24 == $sub.ref(0, 67889);

const {:count 21} .str.25: ref;

axiom .str.25 == $sub.ref(0, 68934);

const {:count 19} .str.26: ref;

axiom .str.26 == $sub.ref(0, 69977);

const {:count 14} .str.27: ref;

axiom .str.27 == $sub.ref(0, 71015);

const {:count 13} .str.110: ref;

axiom .str.110 == $sub.ref(0, 72052);

const {:count 9} .str.28: ref;

axiom .str.28 == $sub.ref(0, 73085);

const {:count 13} .str.29: ref;

axiom .str.29 == $sub.ref(0, 74122);

const {:count 19} .str.30: ref;

axiom .str.30 == $sub.ref(0, 75165);

const {:count 16} .str.31: ref;

axiom .str.31 == $sub.ref(0, 76205);

const {:count 25} .str.32: ref;

axiom .str.32 == $sub.ref(0, 77254);

const {:count 19} .str.33: ref;

axiom .str.33 == $sub.ref(0, 78297);

const {:count 17} .str.34: ref;

axiom .str.34 == $sub.ref(0, 79338);

const {:count 32} .str.35: ref;

axiom .str.35 == $sub.ref(0, 80394);

const {:count 15} .str.36: ref;

axiom .str.36 == $sub.ref(0, 81433);

const {:count 29} .str.37: ref;

axiom .str.37 == $sub.ref(0, 82486);

const {:count 20} .str.119: ref;

axiom .str.119 == $sub.ref(0, 83530);

const {:count 27} .str.120: ref;

axiom .str.120 == $sub.ref(0, 84581);

const {:count 8} .str.114: ref;

axiom .str.114 == $sub.ref(0, 85613);

const {:count 14} .str.118: ref;

axiom .str.118 == $sub.ref(0, 86651);

const {:count 17} .str.112: ref;

axiom .str.112 == $sub.ref(0, 87692);

const {:count 21} .str.113: ref;

axiom .str.113 == $sub.ref(0, 88737);

const {:count 20} .str.115: ref;

axiom .str.115 == $sub.ref(0, 89781);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 16} .str.1: ref;

axiom .str.1 == $sub.ref(0, 90821);

const {:count 11} .str.2: ref;

axiom .str.2 == $sub.ref(0, 91856);

const {:count 41} .str.3: ref;

axiom .str.3 == $sub.ref(0, 92921);

const {:count 31} .str.5: ref;

axiom .str.5 == $sub.ref(0, 93976);

const {:count 28} .str.6: ref;

axiom .str.6 == $sub.ref(0, 95028);

const {:count 20} .str.7: ref;

axiom .str.7 == $sub.ref(0, 96072);

const {:count 40} .str.8: ref;

axiom .str.8 == $sub.ref(0, 97136);

const {:count 20} .str.9: ref;

axiom .str.9 == $sub.ref(0, 98180);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 27} .str.10: ref;

axiom .str.10 == $sub.ref(0, 99231);

const {:count 22} .str.11: ref;

axiom .str.11 == $sub.ref(0, 100277);

const {:count 19} .str.12: ref;

axiom .str.12 == $sub.ref(0, 101320);

const {:count 24} .str.130: ref;

axiom .str.130 == $sub.ref(0, 102368);

const {:count 27} .str.131: ref;

axiom .str.131 == $sub.ref(0, 103419);

const {:count 54} .str.144: ref;

axiom .str.144 == $sub.ref(0, 104497);

const {:count 14} .str.145: ref;

axiom .str.145 == $sub.ref(0, 105535);

const {:count 45} .str.135: ref;

axiom .str.135 == $sub.ref(0, 106604);

const {:count 14} .str.136: ref;

axiom .str.136 == $sub.ref(0, 107642);

const {:count 21} .str.132: ref;

axiom .str.132 == $sub.ref(0, 108687);

const {:count 18} .str.133: ref;

axiom .str.133 == $sub.ref(0, 109729);

const {:count 18} .str.134: ref;

axiom .str.134 == $sub.ref(0, 110771);

const {:count 40} .str.137: ref;

axiom .str.137 == $sub.ref(0, 111835);

const {:count 10} .str.138: ref;

axiom .str.138 == $sub.ref(0, 112869);

const {:count 8} .str.139: ref;

axiom .str.139 == $sub.ref(0, 113901);

const {:count 17} .str.140: ref;

axiom .str.140 == $sub.ref(0, 114942);

const {:count 17} .str.141: ref;

axiom .str.141 == $sub.ref(0, 115983);

const {:count 35} .str.142: ref;

axiom .str.142 == $sub.ref(0, 117042);

const {:count 24} .str.143: ref;

axiom .str.143 == $sub.ref(0, 118090);

const {:count 15} .str.125: ref;

axiom .str.125 == $sub.ref(0, 119129);

const {:count 13} .str.126: ref;

axiom .str.126 == $sub.ref(0, 120166);

const {:count 15} .str.127: ref;

axiom .str.127 == $sub.ref(0, 121205);

const {:count 50} .str.122: ref;

axiom .str.122 == $sub.ref(0, 122279);

const {:count 23} .str.123: ref;

axiom .str.123 == $sub.ref(0, 123326);

const {:count 42} .str.124: ref;

axiom .str.124 == $sub.ref(0, 124392);

const {:count 17} .str.128: ref;

axiom .str.128 == $sub.ref(0, 125433);

const {:count 6} .str.121: ref;

axiom .str.121 == $sub.ref(0, 126463);

const {:count 10} .str.129: ref;

axiom .str.129 == $sub.ref(0, 127497);

const {:count 4} .str.116: ref;

axiom .str.116 == $sub.ref(0, 128525);

const {:count 17} .str.117: ref;

axiom .str.117 == $sub.ref(0, 129566);

const {:count 23} .str.38: ref;

axiom .str.38 == $sub.ref(0, 130613);

const {:count 11} .str.39: ref;

axiom .str.39 == $sub.ref(0, 131648);

const {:count 14} .str.40: ref;

axiom .str.40 == $sub.ref(0, 132686);

const {:count 17} .str.41: ref;

axiom .str.41 == $sub.ref(0, 133727);

const {:count 9} .str.42: ref;

axiom .str.42 == $sub.ref(0, 134760);

const {:count 12} .str.43: ref;

axiom .str.43 == $sub.ref(0, 135796);

const {:count 31} .str.44: ref;

axiom .str.44 == $sub.ref(0, 136851);

const {:count 12} .str.45: ref;

axiom .str.45 == $sub.ref(0, 137887);

const {:count 33} .str.46: ref;

axiom .str.46 == $sub.ref(0, 138944);

const {:count 23} .str.47: ref;

axiom .str.47 == $sub.ref(0, 139991);

const {:count 18} .str.48: ref;

axiom .str.48 == $sub.ref(0, 141033);

const {:count 20} .str.49: ref;

axiom .str.49 == $sub.ref(0, 142077);

const {:count 21} .str.50: ref;

axiom .str.50 == $sub.ref(0, 143122);

const {:count 13} .str.51: ref;

axiom .str.51 == $sub.ref(0, 144159);

const {:count 16} .str.52: ref;

axiom .str.52 == $sub.ref(0, 145199);

const {:count 13} .str.53: ref;

axiom .str.53 == $sub.ref(0, 146236);

const {:count 38} .str.54: ref;

axiom .str.54 == $sub.ref(0, 147298);

const {:count 19} .str.55: ref;

axiom .str.55 == $sub.ref(0, 148341);

const {:count 26} .str.56: ref;

axiom .str.56 == $sub.ref(0, 149391);

const {:count 35} .str.57: ref;

axiom .str.57 == $sub.ref(0, 150450);

const {:count 34} .str.58: ref;

axiom .str.58 == $sub.ref(0, 151508);

const {:count 24} .str.59: ref;

axiom .str.59 == $sub.ref(0, 152556);

const {:count 41} .str.60: ref;

axiom .str.60 == $sub.ref(0, 153621);

const {:count 32} .str.101: ref;

axiom .str.101 == $sub.ref(0, 154677);

const {:count 27} .str.102: ref;

axiom .str.102 == $sub.ref(0, 155728);

const vb2_vmalloc_memops: ref;

axiom vb2_vmalloc_memops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 24} .str.103: ref;

axiom .str.103 == $sub.ref(0, 156776);

const {:count 16} .str.104: ref;

axiom .str.104 == $sub.ref(0, 157816);

const {:count 34} .str.105: ref;

axiom .str.105 == $sub.ref(0, 158874);

const {:count 35} .str.106: ref;

axiom .str.106 == $sub.ref(0, 159933);

const {:count 40} .str.107: ref;

axiom .str.107 == $sub.ref(0, 160997);

const {:count 7} .str.108: ref;

axiom .str.108 == $sub.ref(0, 162028);

const {:count 37} .str.109: ref;

axiom .str.109 == $sub.ref(0, 163089);

const {:count 20} .str.61: ref;

axiom .str.61 == $sub.ref(0, 164133);

const {:count 21} .str.62: ref;

axiom .str.62 == $sub.ref(0, 165178);

const {:count 36} .str.63: ref;

axiom .str.63 == $sub.ref(0, 166238);

const {:count 38} .str.64: ref;

axiom .str.64 == $sub.ref(0, 167300);

const {:count 18} .str.65: ref;

axiom .str.65 == $sub.ref(0, 168342);

const {:count 17} .str.66: ref;

axiom .str.66 == $sub.ref(0, 169383);

const {:count 16} .str.70: ref;

axiom .str.70 == $sub.ref(0, 170423);

const {:count 21} .str.71: ref;

axiom .str.71 == $sub.ref(0, 171468);

const {:count 33} .str.72: ref;

axiom .str.72 == $sub.ref(0, 172525);

const {:count 32} .str.73: ref;

axiom .str.73 == $sub.ref(0, 173581);

const {:count 13} .str.74: ref;

axiom .str.74 == $sub.ref(0, 174618);

const {:count 23} .str.75: ref;

axiom .str.75 == $sub.ref(0, 175665);

const {:count 21} .str.76: ref;

axiom .str.76 == $sub.ref(0, 176710);

const {:count 26} .str.77: ref;

axiom .str.77 == $sub.ref(0, 177760);

const {:count 24} .str.78: ref;

axiom .str.78 == $sub.ref(0, 178808);

const {:count 22} .str.79: ref;

axiom .str.79 == $sub.ref(0, 179854);

const {:count 27} .str.80: ref;

axiom .str.80 == $sub.ref(0, 180905);

const {:count 26} .str.81: ref;

axiom .str.81 == $sub.ref(0, 181955);

const {:count 17} .str.82: ref;

axiom .str.82 == $sub.ref(0, 182996);

const {:count 34} .str.83: ref;

axiom .str.83 == $sub.ref(0, 184054);

const {:count 31} .str.84: ref;

axiom .str.84 == $sub.ref(0, 185109);

const {:count 21} .str.85: ref;

axiom .str.85 == $sub.ref(0, 186154);

const {:count 34} .str.86: ref;

axiom .str.86 == $sub.ref(0, 187212);

const {:count 18} .str.87: ref;

axiom .str.87 == $sub.ref(0, 188254);

const {:count 21} .str.88: ref;

axiom .str.88 == $sub.ref(0, 189299);

const {:count 19} .str.89: ref;

axiom .str.89 == $sub.ref(0, 190342);

const {:count 23} .str.90: ref;

axiom .str.90 == $sub.ref(0, 191389);

const {:count 21} .str.91: ref;

axiom .str.91 == $sub.ref(0, 192434);

const {:count 44} .str.92: ref;

axiom .str.92 == $sub.ref(0, 193502);

const {:count 31} .str.93: ref;

axiom .str.93 == $sub.ref(0, 194557);

const {:count 38} .str.94: ref;

axiom .str.94 == $sub.ref(0, 195619);

const {:count 31} .str.95: ref;

axiom .str.95 == $sub.ref(0, 196674);

const {:count 21} .str.96: ref;

axiom .str.96 == $sub.ref(0, 197719);

const {:count 16} .str.97: ref;

axiom .str.97 == $sub.ref(0, 198759);

const {:count 25} .str.98: ref;

axiom .str.98 == $sub.ref(0, 199808);

const {:count 25} .str.99: ref;

axiom .str.99 == $sub.ref(0, 200857);

const {:count 45} .str.100: ref;

axiom .str.100 == $sub.ref(0, 201926);

const {:count 36} .str.69: ref;

axiom .str.69 == $sub.ref(0, 202986);

const {:count 23} .str.67: ref;

axiom .str.67 == $sub.ref(0, 204033);

const {:count 19} .str.68: ref;

axiom .str.68 == $sub.ref(0, 205076);

const .str: ref;

axiom .str == $sub.ref(0, 206126);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 207158);

const {:count 3} .str.1.268: ref;

axiom .str.1.268 == $sub.ref(0, 208185);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 209223);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 210251);

const memcpy_guard: ref;

axiom memcpy_guard == $sub.ref(0, 211283);

procedure memcpy_guard($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation memcpy_guard($p0: ref, $p1: ref, $i2: i64)
{
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "memcpy_guard:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p0, $mul.ref($i2, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i4 := $ule.ref($p3, $p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p1, $mul.ref($i2, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i6 := $ule.ref($p5, $p0);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} abort();
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 212315);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const abort: ref;

axiom abort == $sub.ref(0, 213347);

procedure abort();



const s2255_s_ctrl: ref;

axiom s2255_s_ctrl == $sub.ref(0, 214379);

procedure s2255_s_ctrl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation s2255_s_ctrl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p48: ref;
  var $i47: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p1 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 1840), 3704));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 1840), 3704)), $mul.ref(2256, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p6);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 3} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p7, $p8, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(72, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 9963779);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 9967920);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 10291459);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 10291459);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 22);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 1840), 3704)), $mul.ref(2312, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb22;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i10, 9967920);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, $sub.i32(0, 983041));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i41 := (if $i40 == 1 then 65536 else 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i37, $i41);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} vslice_dummy_var_41 := s2255_set_mode($p5, $p1);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb22;

  $bb4:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i10, 9963779);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i10, 9963777);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i10, 9963778);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i18 == 1);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i10, 9963776);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb19:
    assume $i19 == 1;
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 215411);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const s2255_set_mode: ref;

axiom s2255_set_mode == $sub.ref(0, 216443);

procedure s2255_set_mode($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation s2255_set_mode($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i8;
  var $i82: i1;
  var $i83: i1;
  var $i84: i64;
  var $i85: i1;
  var $i87: i1;
  var $i86: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i64;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $i95: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i99: i8;
  var $i100: i1;
  var $i101: i1;
  var $i102: i64;
  var $i103: i1;
  var $i105: i1;
  var $i104: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i1;
  var $p116: ref;
  var $p117: ref;
  var $i119: i32;
  var $i120: i32;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i32;
  var $p181: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(8, 1)), $mul.ref(1560, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p6 := to_s2255_dev($p5);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15568, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15176, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} mutex_lock_nested($p9, 0);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref($i12, 8));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.1, $p13);
    call {:si_unique_call 8} {:cexpr "chn_rev"} boogie_si_record_i64($i14);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i15 := $M.2;
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 2);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 255);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 5);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p1);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 10} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p47, $p48, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i49 := get_transfer_size($p1);
    call {:si_unique_call 12} {:cexpr "tmp___0"} boogie_si_record_i32($i49);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i49);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2368, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, $i50);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i52 := $M.2;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i53 := $sgt.i32($i52, 0);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 576045278);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i64.i32($i14);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p8, $mul.ref(1, 4));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p8, $mul.ref(2, 4));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $sub.i32(0, 1037742064));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p8, $mul.ref(3, 4));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p133, $mul.ref(1, 4));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p8, $mul.ref(4, 4));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, $i135);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(2, 4));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p8, $mul.ref(5, 4));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, $i140);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p143, $mul.ref(3, 4));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p8, $mul.ref(6, 4));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p146, $i145);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p148, $mul.ref(4, 4));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p8, $mul.ref(7, 4));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, $i150);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p153, $mul.ref(5, 4));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p8, $mul.ref(8, 4));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, $i155);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p158, $mul.ref(6, 4));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p8, $mul.ref(9, 4));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p161, $i160);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p163, $mul.ref(7, 4));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($p8, $mul.ref(10, 4));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, $i165);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p167);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p168, $mul.ref(8, 4));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.0, $p169);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p8, $mul.ref(11, 4));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p171, $i170);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p173, $mul.ref(9, 4));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p174);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p8, $mul.ref(12, 4));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p176, $i175);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($p178, $mul.ref(10, 4));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p8, $mul.ref(13, 4));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, $i180);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2496, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 0);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p8);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i71 := s2255_write_config($p69, $p70, 512);
    call {:si_unique_call 15} {:cexpr "res"} boogie_si_record_i32($i71);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i72 := $M.2;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i120 := $i71;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2256, 1)), $mul.ref(40, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, 0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i123 := $M.2;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i124 := $sgt.i32($i123, 0);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15176, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} mutex_unlock($p131);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $r := $i120;
    return;

  $bb52:
    assume $i124 == 1;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} vslice_dummy_var_45 := printk.ref.ref.ref.i32.i32(.str.23, $p127, .str.20, $i129, $i120);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb17:
    assume $i76 == 1;
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i77 := msecs_to_jiffies(500);
    call {:si_unique_call 18} {:cexpr "tmp___1"} boogie_si_record_i64($i77);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} __might_sleep(.str.4, 1050, 0);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2496, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i8($i80);
    call {:si_unique_call 20} {:cexpr "__cond___0"} boogie_si_record_i8($i81);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i8.i1($i81);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i84 := $i77;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i8.i1($i81);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i86 := 1;
    assume {:branchcond $i85} true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i85 == 1);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i84, 0);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i86 := $i87;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i32($i86);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2496, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 1);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i119 := $i71;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i120 := $i119;
    goto $bb51;

  $bb45:
    assume $i112 == 1;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i113 := $M.2;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i114 := $sge.i32($i113, 0);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i119 := $sub.i32(0, 14);
    goto $bb50;

  $bb47:
    assume $i114 == 1;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} vslice_dummy_var_44 := printk.ref.ref(.str.22, $p117);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb28:
    assume $i89 == 1;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i90 := msecs_to_jiffies(500);
    call {:si_unique_call 22} {:cexpr "tmp___2"} boogie_si_record_i64($i90);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} INIT_LIST_HEAD($p91);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, 0);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i93 := $i90;
    goto $bb30;

  $bb30:
    call $i93, $p94, $i95, $p96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i105, $i104, $i106, $i107, $i108 := s2255_set_mode_loop_$bb30($p0, $p2, $i93, $p94, $i95, $p96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i105, $i104, $i106, $i107, $i108);
    goto $bb30_last;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2408, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i95 := prepare_to_wait_event($p94, $p2, 2);
    call {:si_unique_call 25} {:cexpr "tmp___3"} boogie_si_record_i64($i95);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2496, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i99 := $zext.i1.i8($i98);
    call {:si_unique_call 26} {:cexpr "__cond"} boogie_si_record_i8($i99);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i8.i1($i99);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i102 := $i93;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i8.i1($i99);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i104 := 1;
    assume true;
    goto $bb37, $bb39;

  $bb39:
    assume !($i103 == 1);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i105 := $eq.i64($i102, 0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i104 := $i105;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i32($i104);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i108 := schedule_timeout($i102);
    call {:si_unique_call 29} {:cexpr "__ret___0"} boogie_si_record_i64($i108);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i93 := $i108;
    goto corral_source_split_242_dummy;

  $bb40:
    assume $i107 == 1;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2408, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} finish_wait($p109, $p2);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb38;

  $bb31:
    assume $i100 == 1;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i101 := $eq.i64($i93, 0);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb33;

  $bb34:
    assume $i101 == 1;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i102 := 1;
    goto $bb36;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb26;

  $bb19:
    assume $i82 == 1;
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i83 := $eq.i64($i77, 0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb21;

  $bb22:
    assume $i83 == 1;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i84 := 1;
    goto $bb24;

  $bb14:
    assume $i73 == 1;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} s2255_print_cfg($p6, $p1);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume $i53 == 1;
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2368, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} vslice_dummy_var_43 := printk.ref.ref.ref.i64(.str.21, $p56, .str.20, $i58);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, $sub.i32(0, 256));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 5);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, $sub.i32(0, 65281));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2312, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32($i42, 8);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i40, $i43);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} vslice_dummy_var_42 := printk.ref.ref.ref.i32(.str.19, $p19, .str.20, $i21);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_242_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_213;
}



const to_s2255_dev: ref;

axiom to_s2255_dev == $sub.ref(0, 217475);

procedure to_s2255_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_s2255_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 14784), 15576));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 218507);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 219539);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 1} true;
    call {:si_unique_call 34} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 35} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 1} true;
    call {:si_unique_call 36} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 37} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 1} true;
    call {:si_unique_call 38} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 39} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i32($p0: ref, p.1: ref, p.2: i64, p.3: i32) returns ($r: i32);



procedure printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 1} true;
    call {:si_unique_call 40} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 41} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 1} true;
    call {:si_unique_call 42} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 43} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: i64, p.3: i64) returns ($r: i32);



procedure printk.ref.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 44} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 45} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 1} true;
    call {:si_unique_call 46} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 47} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 1} true;
    call {:si_unique_call 48} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 49} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 1} true;
    call {:si_unique_call 50} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 51} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 1} true;
    call {:si_unique_call 52} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 53} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 1} true;
    call {:si_unique_call 54} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 55} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb15:
    assume {:verifier.code 1} true;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 1} true;
    call {:si_unique_call 56} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 57} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb16:
    assume {:verifier.code 1} true;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 1} true;
    call {:si_unique_call 58} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 59} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_transfer_size: ref;

axiom get_transfer_size == $sub.ref(0, 220571);

procedure get_transfer_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_transfer_size($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i16: i32;
  var $i17: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i30, $i31 := 240, 640;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i16, $i17 := $i30, $i31;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i17, $i16);
    call {:si_unique_call 60} {:cexpr "outImageSize"} boogie_si_record_i32($i32);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 255);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 4);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i32;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 512);
    call {:si_unique_call 62} {:cexpr "usbInSize"} boogie_si_record_i32($i39);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i40 := $xor.i32($sub.i32(0, 16384), $sub.i32(0, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, $i39);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i39;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i3 := $i45;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb44:
    assume $i42 == 1;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i39, $sub.i32(0, 16384));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 16384);
    call {:si_unique_call 63} {:cexpr "usbInSize"} boogie_si_record_i32($i44);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb46;

  $bb41:
    assume $i36 == 1;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i37 := $mul.i32($i32, 2);
    call {:si_unique_call 61} {:cexpr "outImageSize"} boogie_si_record_i32($i37);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb43;

  $bb23:
    assume $i20 == 1;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i22, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i22, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb30, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i28, $i29 := 240, 640;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i30, $i31 := $i28, $i29;
    goto $bb40;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i28, $i29 := 704, 576;
    goto $bb38;

  $bb28:
    assume $i24 == 1;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i28, $i29 := 352, 288;
    goto $bb38;

  $bb26:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i22, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i26 == 1);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i28, $i29 := 704, 288;
    goto $bb38;

  $bb34:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i22, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb33;

  $bb36:
    assume $i27 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i14, $i15 := 240, 640;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i16, $i17 := $i14, $i15;
    goto $bb22;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14, $i15 := 640, 480;
    goto $bb20;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i14, $i15 := 320, 240;
    goto $bb20;

  $bb8:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i12 == 1);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i14, $i15 := 640, 240;
    goto $bb20;

  $bb16:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb15;

  $bb18:
    assume $i13 == 1;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const s2255_write_config: ref;

axiom s2255_write_config == $sub.ref(0, 221603);

procedure s2255_write_config($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation s2255_write_config($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 65} {:cexpr "s2255_write_config:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i6 := __create_pipe($p0, 2);
    call {:si_unique_call 67} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, $sub.i32(0, 1073741824));
    call {:si_unique_call 68} {:cexpr "pipe"} boogie_si_record_i32($i7);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i8 := usb_bulk_msg($p0, $i7, $p1, $i2, $p3, 500);
    call {:si_unique_call 70} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    call {:si_unique_call 71} {:cexpr "retval"} boogie_si_record_i64($i9);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const s2255_print_cfg: ref;

axiom s2255_print_cfg == $sub.ref(0, 222635);

procedure s2255_print_cfg($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation s2255_print_cfg($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} _dev_info.ref.ref($p4, .str.24);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} _dev_info.ref.ref.i32.i32($p4, .str.25, $i6, $i8);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} _dev_info.ref.ref.i32.i32($p4, .str.26, $i10, $i12);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} _dev_info.ref.ref.i32($p4, .str.27, $i14);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} _dev_info.ref.ref($p4, .str.24);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 223667);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 79} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 224699);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 81} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 225731);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 226763);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 82} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 1} true;
    call {:si_unique_call 83} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 84} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 227795);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 85} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 86} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 87} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 228827);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 229859);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    return;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 230891);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 88} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 89} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 90} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 231923);

procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 232955);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_bulk_msg: ref;

axiom usb_bulk_msg == $sub.ref(0, 233987);

procedure usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 92} {:cexpr "usb_bulk_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 93} {:cexpr "usb_bulk_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 94} {:cexpr "usb_bulk_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 1} true;
    call {:si_unique_call 95} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 96} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const queue_setup: ref;

axiom queue_setup == $sub.ref(0, 235019);

procedure queue_setup($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation queue_setup($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $p6 := vb2_get_drv_priv($p0);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p2);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i9 := $ule.i32($i8, 1);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 3704)), $mul.ref(2596, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 3704)), $mul.ref(2600, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i11, $i13);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 3704)), $mul.ref(2608, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i19 := $ashr.i32($i18, 3);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32($i14, $i19);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i20);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 2);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vb2_ops_wait_prepare: ref;

axiom vb2_ops_wait_prepare == $sub.ref(0, 236051);

procedure vb2_ops_wait_prepare($p0: ref);
  free requires assertsPassed;



implementation vb2_ops_wait_prepare($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    return;
}



const vb2_ops_wait_finish: ref;

axiom vb2_ops_wait_finish == $sub.ref(0, 237083);

procedure vb2_ops_wait_finish($p0: ref);
  free requires assertsPassed;



implementation vb2_ops_wait_finish($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    return;
}



const buffer_prepare: ref;

axiom buffer_prepare == $sub.ref(0, 238115);

procedure buffer_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation buffer_prepare($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $i22: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(600, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $p3 := vb2_get_drv_priv($p2);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2596, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 99} {:cexpr "w"} boogie_si_record_i32($i7);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2600, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 100} {:cexpr "h"} boogie_si_record_i32($i9);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i10 := $M.2;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 3);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2608, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i23 := norm_minw($p4);
    call {:si_unique_call 103} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, $i7);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i25 := norm_maxw($p4);
    call {:si_unique_call 105} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, $i7);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i27 := norm_minh($p4);
    call {:si_unique_call 107} {:cexpr "tmp___2"} boogie_si_record_i32($i27);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, $i9);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i29 := norm_maxh($p4);
    call {:si_unique_call 109} {:cexpr "tmp___3"} boogie_si_record_i32($i29);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, $i9);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i39 := $mul.i32($i7, $i9);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2608, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i44 := $ashr.i32($i43, 3);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i45 := $mul.i32($i39, $i44);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    call {:si_unique_call 111} {:cexpr "size"} boogie_si_record_i64($i46);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i47 := vb2_plane_size($p0, 0);
    call {:si_unique_call 113} {:cexpr "tmp___4"} boogie_si_record_i64($i47);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i48 := $ult.i64($i47, $i46);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 944)), $mul.ref(0, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} vb2_set_plane_payload($p57, 0, $i46);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb24:
    assume $i48 == 1;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i49 := $M.2;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i49, 3);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb6;

  $bb26:
    assume $i50 == 1;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} vslice_dummy_var_48 := printk.ref.ref(.str.37, $p55);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i31 := $M.2;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 3);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb6;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} vslice_dummy_var_47 := printk.ref.ref(.str.37, $p37);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} vslice_dummy_var_46 := printk.ref.ref.ref(.str.28, $p16, .str.36);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const start_streaming: ref;

axiom start_streaming == $sub.ref(0, 239147);

procedure start_streaming($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation start_streaming($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p11: ref;
  var $p15: ref;
  var $i16: i32;
  var $p20: ref;
  var $p24: ref;
  var $p28: ref;
  var $p32: ref;
  var $p36: ref;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} {:cexpr "start_streaming:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $p2 := vb2_get_drv_priv($p0);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3704)), $mul.ref(2360, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $sub.i32(0, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 3704)), $mul.ref(2384, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 3704)), $mul.ref(2356, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 3704)), $mul.ref(2392, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, 0);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, 0);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, 0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(1, 32)), $mul.ref(8, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, 0);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(1, 32)), $mul.ref(24, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, 0);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(2, 32)), $mul.ref(8, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, 0);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(2, 32)), $mul.ref(24, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, 0);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(3, 32)), $mul.ref(8, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, 0);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(3, 32)), $mul.ref(24, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, 0);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i16 := s2255_start_acquire($p3);
    call {:si_unique_call 119} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const stop_streaming: ref;

axiom stop_streaming == $sub.ref(0, 240179);

procedure stop_streaming($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr;



implementation stop_streaming($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var $i33: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p19: ref;
  var $p20: ref;
  var $p43: ref;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $p1 := vb2_get_drv_priv($p0);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} vslice_dummy_var_49 := s2255_stop_acquire($p2);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} ldv_spin_lock();
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3704)), $mul.ref(2104, 1)), $mul.ref(0, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 928), 944));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p7, $mul.ref($sub.ref(0, 928), 944)), $mul.ref(928, 1)), $mul.ref(0, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 928), 944));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 928), 944)), $mul.ref(928, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 3704)), $mul.ref(2104, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i15, $i17);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 3704)), $mul.ref(3632, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} spin_unlock_irqrestore($p43, $u0);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p19, $p20 := $p13, $p8;
    goto $bb4;

  $bb4:
    call $p21, $p22, $i23, $i24, $p25, $p26, $p28, $p29, $p32, $i33, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $p19, $p20, vslice_dummy_var_50 := stop_streaming_loop_$bb4($p2, $i17, $p21, $p22, $i23, $i24, $p25, $p26, $p28, $p29, $p32, $i33, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $p19, $p20, vslice_dummy_var_50);
    goto $bb4_last;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 944)), $mul.ref(928, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} list_del($p21);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p20, $mul.ref(0, 944)), $mul.ref(0, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} vb2_buffer_done($p22, 6);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i23 := $M.2;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, 1);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 944)), $mul.ref(928, 1)), $mul.ref(0, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref($sub.ref(0, 928), 944));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p19, $mul.ref(0, 944)), $mul.ref(928, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, $i17);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $p19, $p20 := $p39, $p19;
    goto $bb9_dummy;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 944)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} vslice_dummy_var_50 := printk.ref.ref.ref.i32(.str.30, $p29, $p20, $i33);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_686;
}



const buffer_queue: ref;

axiom buffer_queue == $sub.ref(0, 241211);

procedure buffer_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation buffer_queue($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(600, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $p4 := vb2_get_drv_priv($p3);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} ldv_spin_lock();
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 944)), $mul.ref(928, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2104, 1));
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} list_add_tail($p14, $p15);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(3632, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} spin_unlock_irqrestore($p16, 0);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} vslice_dummy_var_51 := printk.ref.ref.ref(.str.28, $p12, .str.29);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vb2_get_drv_priv: ref;

axiom vb2_get_drv_priv == $sub.ref(0, 242243);

procedure vb2_get_drv_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vb2_get_drv_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 848)), $mul.ref(48, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 243275);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 132} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 244307);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} __list_add($p0, $p3, $p1);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 245339);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.3;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} ldv_spin_unlock();
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 246371);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 137} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 247403);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 248435);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 249467);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    return;
}



const s2255_stop_acquire: ref;

axiom s2255_stop_acquire == $sub.ref(0, 250499);

procedure s2255_stop_acquire($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation s2255_stop_acquire($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(8, 1)), $mul.ref(1560, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p4 := to_s2255_dev($p3);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 15576)), $mul.ref(15568, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 15576)), $mul.ref(15176, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} mutex_lock_nested($p7, 0);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref($i10, 8));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.1, $p11);
    call {:si_unique_call 143} {:cexpr "chn_rev"} boogie_si_record_i64($i12);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 576045278);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p6, $mul.ref(1, 4));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p6, $mul.ref(2, 4));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $sub.i32(0, 1037742032));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p6);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i19 := s2255_write_config($p17, $p18, 512);
    call {:si_unique_call 145} {:cexpr "res"} boogie_si_record_i32($i19);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i24 := $M.2;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 3);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 15576)), $mul.ref(15176, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} mutex_unlock($p32);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} vslice_dummy_var_52 := printk.ref.ref.ref.i32.i32(.str.32, $p28, .str.33, $i30, $i19);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} dev_err.ref.ref($p23, .str.31);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 251531);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    return;
}



const vb2_buffer_done: ref;

axiom vb2_buffer_done == $sub.ref(0, 252563);

procedure vb2_buffer_done($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation vb2_buffer_done($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} {:cexpr "vb2_buffer_done:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 253595);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);



const s2255_start_acquire: ref;

axiom s2255_start_acquire == $sub.ref(0, 254627);

procedure s2255_start_acquire($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation s2255_start_acquire($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p19: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $p47: ref;
  var $p51: ref;
  var $p55: ref;
  var $p59: ref;
  var $p63: ref;
  var $p67: ref;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(8, 1)), $mul.ref(1560, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $p4 := to_s2255_dev($p3);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 15576)), $mul.ref(15568, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 15576)), $mul.ref(15176, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} mutex_lock_nested($p7, 0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref($i10, 8));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.1, $p11);
    call {:si_unique_call 152} {:cexpr "chn_rev"} boogie_si_record_i64($i12);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2360, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $sub.i32(0, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2384, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2356, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, 0);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, 0);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(1, 32)), $mul.ref(8, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, 0);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(1, 32)), $mul.ref(24, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, 0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(2, 32)), $mul.ref(8, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p55, 0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(2, 32)), $mul.ref(24, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p59, 0);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(3, 32)), $mul.ref(8, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, 0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(3, 32)), $mul.ref(24, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p67, 0);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 576045278);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i12);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p6, $mul.ref(1, 4));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p6, $mul.ref(2, 4));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $sub.i32(0, 1037742048));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p6);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i30 := s2255_write_config($p28, $p29, 512);
    call {:si_unique_call 154} {:cexpr "res"} boogie_si_record_i32($i30);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i35 := $M.2;
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, 1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 15576)), $mul.ref(15176, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} mutex_unlock($p43);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} vslice_dummy_var_53 := printk.ref.ref.i32.i32(.str.35, $p39, $i41, $i30);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} dev_err.ref.ref($p34, .str.34);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const norm_minw: ref;

axiom norm_minw == $sub.ref(0, 255659);

procedure norm_minw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation norm_minw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2304, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 63744);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 320 else 352);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const norm_maxw: ref;

axiom norm_maxw == $sub.ref(0, 256691);

procedure norm_maxw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation norm_maxw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2304, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 63744);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 640 else 704);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const norm_minh: ref;

axiom norm_minh == $sub.ref(0, 257723);

procedure norm_minh($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation norm_minh($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2304, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 63744);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 240 else 288);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const norm_maxh: ref;

axiom norm_maxh == $sub.ref(0, 258755);

procedure norm_maxh($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation norm_maxh($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2304, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 63744);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 480 else 576);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const vb2_plane_size: ref;

axiom vb2_plane_size == $sub.ref(0, 259787);

procedure vb2_plane_size($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation vb2_plane_size($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} {:cexpr "vb2_plane_size:arg:plane_no"} boogie_si_record_i32($i1);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(608, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, $i1);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(88, 1)), $mul.ref($i5, 64)), $mul.ref(4, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const vb2_set_plane_payload: ref;

axiom vb2_set_plane_payload == $sub.ref(0, 260819);

procedure vb2_set_plane_payload($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation vb2_set_plane_payload($p0: ref, $i1: i32, $i2: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} {:cexpr "vb2_set_plane_payload:arg:plane_no"} boogie_si_record_i32($i1);
    call {:si_unique_call 160} {:cexpr "vb2_set_plane_payload:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(608, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, $i1);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i1);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(88, 1)), $mul.ref($i7, 64)), $mul.ref(0, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i6);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s2255_video_device_release: ref;

axiom s2255_video_device_release == $sub.ref(0, 261851);

procedure s2255_video_device_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.5, $M.7, $M.9, $M.11;



implementation s2255_video_device_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(1560, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p3 := to_s2255_dev($p2);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 3);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 8), 3704)), $mul.ref(1848, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} v4l2_ctrl_handler_free($p14);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(15008, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i16 := atomic_dec_and_test($p15);
    call {:si_unique_call 167} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} s2255_destroy($p3);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(15008, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $i9 := atomic_read($p8);
    call {:si_unique_call 163} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} vslice_dummy_var_54 := printk.ref.ref.ref.i32(.str.119, $p12, .str.120, $i9);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 262883);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_ctrl_handler_free: ref;

axiom v4l2_ctrl_handler_free == $sub.ref(0, 263915);

procedure v4l2_ctrl_handler_free($p0: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 264947);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 170} devirtbounce(0, $p2, $p1, $p2);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.4, $p1);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const s2255_destroy: ref;

axiom s2255_destroy == $sub.ref(0, 265979);

procedure s2255_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.9, $M.11, $CurrAddr;



implementation s2255_destroy($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} vslice_dummy_var_56 := s2255_board_shutdown($p0);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15360, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} vslice_dummy_var_57 := ldv_del_timer_sync_26($p8);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} release_firmware($p30);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} kfree($p34);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} kfree($p37);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} s2255_reset_dsppower($p0);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15016, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} mutex_destroy($p38);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} usb_put_dev($p40);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} v4l2_device_unregister($p41);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15568, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} kfree($p44);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p0);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} kfree($p45);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} usb_kill_urb($p19);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} usb_free_urb($p23);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $0.ref);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_55 := printk.ref.ref.ref(.str.114, $p5, .str.118);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s2255_board_shutdown: ref;

axiom s2255_board_shutdown == $sub.ref(0, 267011);

procedure s2255_board_shutdown($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation s2255_board_shutdown($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i22: i32;
  var $i23: i1;
  var $i16: i32;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p39: ref;
  var $i40: i1;
  var $i41: i8;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p49: ref;
  var $i50: i1;
  var $i51: i8;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(0, 3704)), $mul.ref(2624, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i10 := vb2_is_streaming($p9);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 187} {:cexpr "tmp"} boogie_si_record_i8($i11);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(1, 3704)), $mul.ref(2624, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i30 := vb2_is_streaming($p29);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(2, 3704)), $mul.ref(2624, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i40 := vb2_is_streaming($p39);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(3, 3704)), $mul.ref(2624, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i50 := vb2_is_streaming($p49);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i8($i50);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i51);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} s2255_stop_readpipe($p0);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb11;

  $bb11:
    call $p17, $p18, $i19, $p20, $i22, $i23, $i16, vslice_dummy_var_60 := s2255_board_shutdown_loop_$bb11($p0, $p17, $p18, $i19, $p20, $i22, $i23, $i16, vslice_dummy_var_60);
    goto $bb11_last;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(0, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i16);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p18, $mul.ref($i19, 3704));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} vslice_dummy_var_60 := s2255_release_sys_buffers($p20);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i16, 1);
    call {:si_unique_call 192} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i23 := $ule.i32($i22, 3);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(8, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} kfree($p26);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i22;
    goto $bb13_dummy;

  $bb24:
    assume $i52 == 1;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(0, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(3, 3704));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vslice_dummy_var_63 := s2255_stop_acquire($p55);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(0, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(2, 3704));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} vslice_dummy_var_62 := s2255_stop_acquire($p45);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(0, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(1, 3704));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} vslice_dummy_var_61 := s2255_stop_acquire($p35);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(0, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} vslice_dummy_var_59 := s2255_stop_acquire($p14);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} vslice_dummy_var_58 := printk.ref.ref.ref.ref(.str.112, $p5, .str.113, $p0);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1070;
}



const ldv_del_timer_sync_26: ref;

axiom ldv_del_timer_sync_26 == $sub.ref(0, 268043);

procedure ldv_del_timer_sync_26($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation ldv_del_timer_sync_26($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i1 := del_timer_sync($p0);
    call {:si_unique_call 200} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} disable_suitable_timer_1($p0);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 269075);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 270107);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    return;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 271139);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 272171);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} free_($p0);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    return;
}



const s2255_reset_dsppower: ref;

axiom s2255_reset_dsppower == $sub.ref(0, 273203);

procedure s2255_reset_dsppower($p0: ref);
  free requires assertsPassed;



implementation s2255_reset_dsppower($p0: ref)
{
  var vslice_dummy_var_64: i64;
  var vslice_dummy_var_65: i64;
  var vslice_dummy_var_66: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} vslice_dummy_var_64 := s2255_vendor_req($p0, 64, 0, 1, $0.ref, 0, 1);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} msleep(20);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} vslice_dummy_var_65 := s2255_vendor_req($p0, 80, 0, 0, $0.ref, 0, 1);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} msleep(600);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} vslice_dummy_var_66 := s2255_vendor_req($p0, 16, 0, 0, $0.ref, 0, 1);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    return;
}



const mutex_destroy: ref;

axiom mutex_destroy == $sub.ref(0, 274235);

procedure mutex_destroy($p0: ref);
  free requires assertsPassed;



implementation mutex_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_dev: ref;

axiom usb_put_dev == $sub.ref(0, 275267);

procedure usb_put_dev($p0: ref);
  free requires assertsPassed;



implementation usb_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_device_unregister: ref;

axiom v4l2_device_unregister == $sub.ref(0, 276299);

procedure v4l2_device_unregister($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    return;
}



const s2255_vendor_req: ref;

axiom s2255_vendor_req == $sub.ref(0, 277331);

procedure s2255_vendor_req($p0: ref, $i1: i8, $i2: i16, $i3: i16, $p4: ref, $i5: i32, $i6: i32) returns ($r: i64);
  free requires assertsPassed;



implementation s2255_vendor_req($p0: ref, $i1: i8, $i2: i16, $i3: i16, $p4: ref, $i5: i32, $i6: i32) returns ($r: i64)
{
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $i36: i16;
  var $i37: i16;
  var $i38: i32;
  var $i39: i16;
  var $i40: i32;
  var $i24: i32;
  var $i41: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} {:cexpr "s2255_vendor_req:arg:Request"} boogie_si_record_i8($i1);
    call {:si_unique_call 209} {:cexpr "s2255_vendor_req:arg:Index"} boogie_si_record_i16($i2);
    call {:si_unique_call 210} {:cexpr "s2255_vendor_req:arg:Value"} boogie_si_record_i16($i3);
    call {:si_unique_call 211} {:cexpr "s2255_vendor_req:arg:TransferBufferLength"} boogie_si_record_i32($i5);
    call {:si_unique_call 212} {:cexpr "s2255_vendor_req:arg:bOut"} boogie_si_record_i32($i6);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i27 := __create_pipe($p26, 0);
    call {:si_unique_call 218} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i27, $sub.i32(0, 2147483648));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i1);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i3);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i2);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i5);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i40 := usb_control_msg($p29, $i30, $i32, 64, $i34, $i36, $p4, $i39, 1250);
    call {:si_unique_call 220} {:cexpr "r"} boogie_si_record_i32($i40);
    assume {:verifier.code 0} true;
    $i24 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i24);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i10 := __create_pipe($p9, 0);
    call {:si_unique_call 214} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i10, $sub.i32(0, 2147483520));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i1);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i3);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i2);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i5);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i23 := usb_control_msg($p12, $i13, $i15, $sub.i8(0, 64), $i17, $i19, $p4, $i22, 1250);
    call {:si_unique_call 216} {:cexpr "r"} boogie_si_record_i32($i23);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb3;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 278363);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 279395);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 222} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 223} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 224} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 225} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 226} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 227} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 228} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 1} true;
    call {:si_unique_call 229} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 230} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 280427);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 231} $free($p0);
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 281459);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 1} true;
    call {:si_unique_call 232} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 233} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_1: ref;

axiom disable_suitable_timer_1 == $sub.ref(0, 282491);

procedure disable_suitable_timer_1($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation disable_suitable_timer_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.7;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.9;
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.11;
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p22 := $M.12;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 237} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p16 := $M.10;
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 236} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p10 := $M.8;
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 235} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p4 := $M.6;
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 234} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vb2_is_streaming: ref;

axiom vb2_is_streaming == $sub.ref(0, 283523);

procedure vb2_is_streaming($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation vb2_is_streaming($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 848)), $mul.ref(800, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i3 := $and.i8($i2, 1);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const s2255_stop_readpipe: ref;

axiom s2255_stop_readpipe == $sub.ref(0, 284555);

procedure s2255_stop_readpipe($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation s2255_stop_readpipe($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(16, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(24, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $M.2;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 3);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} vslice_dummy_var_67 := printk.ref.ref.ref(.str.114, $p18, .str.115);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(24, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} usb_kill_urb($p9);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(24, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} usb_free_urb($p12);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(24, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const s2255_release_sys_buffers: ref;

axiom s2255_release_sys_buffers == $sub.ref(0, 285587);

procedure s2255_release_sys_buffers($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation s2255_release_sys_buffers($p0: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i1 := 0;
    goto $bb1;

  $bb1:
    call $p5, $p6, $p10, $i11, $i12, $i1 := s2255_release_sys_buffers_loop_$bb1($p0, $p5, $p6, $p10, $i11, $i12, $i1);
    goto $bb1_last;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref($i1, 32)), $mul.ref(16, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} vfree($p6);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref($i1, 32)), $mul.ref(16, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i1, 1);
    call {:si_unique_call 242} {:cexpr "i"} boogie_si_record_i64($i11);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i12 := $ule.i64($i11, 3);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb3:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i1 := $i11;
    goto $bb3_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1269;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 286619);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    return;
}



const vb2_fop_read: ref;

axiom vb2_fop_read == $sub.ref(0, 287651);

procedure vb2_fop_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation vb2_fop_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} {:cexpr "vb2_fop_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 244} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 245} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vb2_fop_poll: ref;

axiom vb2_fop_poll == $sub.ref(0, 288683);

procedure vb2_fop_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_fop_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 246} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 247} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const video_ioctl2: ref;

axiom video_ioctl2 == $sub.ref(0, 289715);

procedure video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 248} {:cexpr "video_ioctl2:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 249} {:cexpr "video_ioctl2:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 1} true;
    call {:si_unique_call 250} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 251} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_fop_mmap: ref;

axiom vb2_fop_mmap == $sub.ref(0, 290747);

procedure vb2_fop_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_fop_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 1} true;
    call {:si_unique_call 252} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 253} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const s2255_open: ref;

axiom s2255_open == $sub.ref(0, 291779);

procedure s2255_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation s2255_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i35: i32;
  var $i42: i1;
  var $i43: i8;
  var $i44: i1;
  var $i45: i1;
  var $i46: i64;
  var $i47: i1;
  var $i49: i1;
  var $i48: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i65: i32;
  var $i72: i1;
  var $i73: i8;
  var $i74: i1;
  var $i75: i1;
  var $i76: i64;
  var $i77: i1;
  var $i79: i1;
  var $i78: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i92: i64;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i98: i32;
  var $i105: i1;
  var $i106: i8;
  var $i107: i1;
  var $i108: i1;
  var $i109: i64;
  var $i110: i1;
  var $i112: i1;
  var $i111: i1;
  var $i113: i32;
  var $i114: i1;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i128: i32;
  var $i135: i1;
  var $i136: i8;
  var $i137: i1;
  var $i138: i1;
  var $i139: i64;
  var $i140: i1;
  var $i142: i1;
  var $i141: i1;
  var $i143: i32;
  var $i144: i1;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i90: i32;
  var $i153: i1;
  var $i154: i1;
  var $i155: i1;
  var $i156: i1;
  var $i157: i1;
  var $i158: i1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $p172: ref;
  var $i9: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p3 := video_drvdata($p0);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i7 := v4l2_fh_open($p0);
    call {:si_unique_call 258} {:cexpr "rc"} boogie_si_record_i32($i7);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $M.2;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i19 := atomic_read($p18);
    call {:si_unique_call 261} {:cexpr "state"} boogie_si_record_i32($i19);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i19, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i19, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i90 := $i19;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i90, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    $i154 := $slt.i32($i90, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    $i155 := $slt.i32($i90, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i90, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} vslice_dummy_var_73 := printk.ref.ref(.str.9, .str.2);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb108:
    assume $i156 == 1;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} vslice_dummy_var_71 := printk.ref.ref(.str.7, .str.2);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb106:
    assume $i155 == 1;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} vslice_dummy_var_70 := printk.ref(.str.6);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb104:
    assume $i154 == 1;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2404, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb118:
    assume $i168 == 1;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2608, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p169, formats);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} vslice_dummy_var_74 := s2255_set_mode($p4, $p170);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2404, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, 1);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb102:
    assume $i153 == 1;
    assume {:verifier.code 0} true;
    $i157 := $slt.i32($i90, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i157 == 1);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} vslice_dummy_var_72 := printk.ref.ref(.str.8, .str.2);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p163, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} atomic_set($p164, 3);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 11);
    goto $bb3;

  $bb111:
    assume $i157 == 1;
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i90, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !($i158 == 1);
    goto $bb110;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb114;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} dev_err.ref.ref($p28, .str.3);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} s2255_fwload_start($p6, 1);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i29 := msecs_to_jiffies(5800);
    call {:si_unique_call 265} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} __might_sleep(.str.4, 1459, 0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i33 := atomic_read($p32);
    call {:si_unique_call 268} {:cexpr "tmp___6"} boogie_si_record_i32($i33);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 2);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i34 == 1);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i39 := atomic_read($p38);
    call {:si_unique_call 276} {:cexpr "tmp___7"} boogie_si_record_i32($i39);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 4);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i35 := $i41;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i35, 0);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i8($i42);
    call {:si_unique_call 277} {:cexpr "__cond___0"} boogie_si_record_i8($i43);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i43);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i46 := $i29;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i43);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i48 := 1;
    assume {:branchcond $i47} true;
    goto $bb35, $bb37;

  $bb37:
    assume !($i47 == 1);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i46, 0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i48 := $i49;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i48);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i89 := atomic_read($p88);
    call {:si_unique_call 292} {:cexpr "state"} boogie_si_record_i32($i89);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i90 := $i89;
    goto $bb61;

  $bb38:
    assume $i51 == 1;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i52 := msecs_to_jiffies(5800);
    call {:si_unique_call 279} {:cexpr "tmp___1"} boogie_si_record_i64($i52);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} INIT_LIST_HEAD($p53);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i55 := $i52;
    goto $bb40;

  $bb40:
    call $i55, $p56, $p57, $p58, $i59, $p60, $p61, $p62, $i63, $i64, $p66, $p67, $p68, $i69, $i70, $i71, $i65, $i72, $i73, $i74, $i75, $i76, $i77, $i79, $i78, $i80, $i81, $i82 := s2255_open_loop_$bb40($p1, $p6, $i55, $p56, $p57, $p58, $i59, $p60, $p61, $p62, $i63, $i64, $p66, $p67, $p68, $i69, $i70, $i71, $i65, $i72, $i73, $i74, $i75, $i76, $i77, $i79, $i78, $i80, $i81, $i82);
    goto $bb40_last;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i59 := prepare_to_wait_event($p58, $p1, 2);
    call {:si_unique_call 282} {:cexpr "tmp___2"} boogie_si_record_i64($i59);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i63 := atomic_read($p62);
    call {:si_unique_call 284} {:cexpr "tmp___3"} boogie_si_record_i32($i63);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 2);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i64 == 1);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i69 := atomic_read($p68);
    call {:si_unique_call 286} {:cexpr "tmp___4"} boogie_si_record_i32($i69);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 4);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i65 := $i71;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i65, 0);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i8($i72);
    call {:si_unique_call 287} {:cexpr "__cond"} boogie_si_record_i8($i73);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i8.i1($i73);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i76 := $i55;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i8.i1($i73);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i78 := 1;
    assume true;
    goto $bb53, $bb55;

  $bb55:
    assume !($i77 == 1);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i76, 0);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i78 := $i79;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i80 := $zext.i1.i32($i78);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i82 := schedule_timeout($i76);
    call {:si_unique_call 290} {:cexpr "__ret___0"} boogie_si_record_i64($i82);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i55 := $i82;
    goto corral_source_split_1433_dummy;

  $bb56:
    assume $i81 == 1;
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} finish_wait($p85, $p1);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb54;

  $bb47:
    assume $i74 == 1;
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i55, 0);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb49;

  $bb50:
    assume $i75 == 1;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i76 := 1;
    goto $bb52;

  $bb44:
    assume $i70 == 1;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i71 := 1;
    goto $bb46;

  $bb41:
    assume $i64 == 1;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i65 := 1;
    goto $bb43;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb36;

  $bb29:
    assume $i44 == 1;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i29, 0);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb31;

  $bb32:
    assume $i45 == 1;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i46 := 1;
    goto $bb34;

  $bb26:
    assume $i40 == 1;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i41 := 1;
    goto $bb28;

  $bb23:
    assume $i34 == 1;
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i35 := 1;
    goto $bb25;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb9:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i19, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_69 := printk.ref.ref(.str.5, .str.2);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i92 := msecs_to_jiffies(5800);
    call {:si_unique_call 271} {:cexpr "tmp___9"} boogie_si_record_i64($i92);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} __might_sleep(.str.4, 1473, 0);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i96 := atomic_read($p95);
    call {:si_unique_call 274} {:cexpr "tmp___15"} boogie_si_record_i32($i96);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 2);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i97 == 1);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i102 := atomic_read($p101);
    call {:si_unique_call 294} {:cexpr "tmp___16"} boogie_si_record_i32($i102);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 4);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := 0;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i98 := $i104;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i98, 0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i8($i105);
    call {:si_unique_call 295} {:cexpr "__cond___2"} boogie_si_record_i8($i106);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i8.i1($i106);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i109 := $i92;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i8.i1($i106);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i111 := 1;
    assume {:branchcond $i110} true;
    goto $bb74, $bb76;

  $bb76:
    assume !($i110 == 1);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i112 := $eq.i64($i109, 0);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i111 := $i112;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i113 := $zext.i1.i32($i111);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 0);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i152 := atomic_read($p151);
    call {:si_unique_call 310} {:cexpr "state"} boogie_si_record_i32($i152);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i90 := $i152;
    goto $bb61;

  $bb77:
    assume $i114 == 1;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i115 := msecs_to_jiffies(5800);
    call {:si_unique_call 297} {:cexpr "tmp___10"} boogie_si_record_i64($i115);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} INIT_LIST_HEAD($p116);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, 0);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i118 := $i115;
    goto $bb79;

  $bb79:
    call $i118, $p119, $p120, $p121, $i122, $p123, $p124, $p125, $i126, $i127, $p129, $p130, $p131, $i132, $i133, $i134, $i128, $i135, $i136, $i137, $i138, $i139, $i140, $i142, $i141, $i143, $i144, $i145 := s2255_open_loop_$bb79($p2, $p6, $i118, $p119, $p120, $p121, $i122, $p123, $p124, $p125, $i126, $i127, $p129, $p130, $p131, $i132, $i133, $i134, $i128, $i135, $i136, $i137, $i138, $i139, $i140, $i142, $i141, $i143, $i144, $i145);
    goto $bb79_last;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i122 := prepare_to_wait_event($p121, $p2, 2);
    call {:si_unique_call 300} {:cexpr "tmp___11"} boogie_si_record_i64($i122);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p124, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i126 := atomic_read($p125);
    call {:si_unique_call 302} {:cexpr "tmp___12"} boogie_si_record_i32($i126);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 2);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i127 == 1);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p130, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i132 := atomic_read($p131);
    call {:si_unique_call 304} {:cexpr "tmp___13"} boogie_si_record_i32($i132);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 4);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i134 := 0;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i128 := $i134;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i128, 0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i136 := $zext.i1.i8($i135);
    call {:si_unique_call 305} {:cexpr "__cond___1"} boogie_si_record_i8($i136);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i8.i1($i136);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i139 := $i118;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i8.i1($i136);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i141 := 1;
    assume true;
    goto $bb92, $bb94;

  $bb94:
    assume !($i140 == 1);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i142 := $eq.i64($i139, 0);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i141 := $i142;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i143 := $zext.i1.i32($i141);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i145 := schedule_timeout($i139);
    call {:si_unique_call 308} {:cexpr "__ret___2"} boogie_si_record_i64($i145);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i118 := $i145;
    goto corral_source_split_1527_dummy;

  $bb95:
    assume $i144 == 1;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} finish_wait($p148, $p2);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb93;

  $bb86:
    assume $i137 == 1;
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i138 := $eq.i64($i118, 0);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb88;

  $bb89:
    assume $i138 == 1;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i139 := 1;
    goto $bb91;

  $bb83:
    assume $i133 == 1;
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i134 := 1;
    goto $bb85;

  $bb80:
    assume $i127 == 1;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i128 := 1;
    goto $bb82;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb75;

  $bb68:
    assume $i107 == 1;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64($i92, 0);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb70;

  $bb71:
    assume $i108 == 1;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i109 := 1;
    goto $bb73;

  $bb65:
    assume $i103 == 1;
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i104 := 1;
    goto $bb67;

  $bb62:
    assume $i97 == 1;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i98 := 1;
    goto $bb64;

  $bb18:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i19, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb17;

  $bb21:
    assume $i25 == 1;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} vslice_dummy_var_68 := printk.ref.ref.ref(.str.1, $p14, .str.2);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  corral_source_split_1433_dummy:
    assume false;
    return;

  $bb40_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;

  corral_source_split_1527_dummy:
    assume false;
    return;

  $bb79_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1478;
}



const vb2_fop_release: ref;

axiom vb2_fop_release == $sub.ref(0, 292811);

procedure vb2_fop_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_fop_release($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 1} true;
    call {:si_unique_call 317} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 318} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const video_drvdata: ref;

axiom video_drvdata == $sub.ref(0, 293843);

procedure video_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p1 := video_devdata($p0);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p2 := video_get_drvdata($p1);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const v4l2_fh_open: ref;

axiom v4l2_fh_open == $sub.ref(0, 294875);

procedure v4l2_fh_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_open($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 1} true;
    call {:si_unique_call 321} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 322} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const s2255_fwload_start: ref;

axiom s2255_fwload_start == $sub.ref(0, 295907);

procedure s2255_fwload_start($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation s2255_fwload_start($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} {:cexpr "s2255_fwload_start:arg:reset"} boogie_si_record_i32($i1);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 128)), $mul.ref(4, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i9);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} atomic_set($p15, 0);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} memcpy_guard($p19, $p25, 512);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 327} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p29, $p35, 512, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 512);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i41 := __create_pipe($p40, 2);
    call {:si_unique_call 329} {:cexpr "tmp"} boogie_si_record_i32($i41);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i41, $sub.i32(0, 1073741824));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} usb_fill_bulk_urb($p45, $p47, $i48, $p52, 512, s2255_fwchunk_complete, $p55);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15360, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, jiffies);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 250);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} vslice_dummy_var_75 := ldv_mod_timer_31($p56, $i58);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} s2255_reset_dsppower($p0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 296939);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    return;
}



const s2255_fwchunk_complete: ref;

axiom s2255_fwchunk_complete == $sub.ref(0, 297971);

procedure s2255_fwchunk_complete($p0: ref);



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 299003);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 334} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mod_timer_31: ref;

axiom ldv_mod_timer_31 == $sub.ref(0, 300035);

procedure ldv_mod_timer_31($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation ldv_mod_timer_31($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "ldv_mod_timer_31:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 337} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 301067);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 339} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 1} true;
    call {:si_unique_call 340} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 341} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_1: ref;

axiom activate_pending_timer_1 == $sub.ref(0, 302099);

procedure activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} {:cexpr "activate_pending_timer_1:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 343} {:cexpr "activate_pending_timer_1:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p3 := $M.6;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.8;
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.10;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.12;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} activate_suitable_timer_1($p0, $i1);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i34 := $M.11;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.12 := $p0;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p37 := $M.12;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i1);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 347} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i25 := $M.9;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p28 := $M.10;
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i1);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 346} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i16 := $M.7;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.8 := $p0;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p19 := $M.8;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i1);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 345} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i7 := $M.5;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.6 := $p0;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p10 := $M.6;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 344} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_1: ref;

axiom activate_suitable_timer_1 == $sub.ref(0, 303131);

procedure activate_suitable_timer_1($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation activate_suitable_timer_1($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} {:cexpr "activate_suitable_timer_1:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i2 := $M.5;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i4 := $M.5;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.7;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i10 := $M.7;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.9;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i16 := $M.9;
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.11;
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i22 := $M.11;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.12 := $p0;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p24 := $M.12;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 353} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p18 := $M.10;
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 352} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.8 := $p0;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p12 := $M.8;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 351} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.6 := $p0;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p6 := $M.6;
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 350} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 304163);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 355} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 305195);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_usb_submit_urb_25: ref;

axiom ldv_usb_submit_urb_25 == $sub.ref(0, 306227);

procedure ldv_usb_submit_urb_25($p0: ref, $i1: i32) returns ($r: i32);



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 307259);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} ldv_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 308291);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 1} true;
    call {:si_unique_call 358} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 359} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 309323);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 360} __VERIFIER_error();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const video_devdata: ref;

axiom video_devdata == $sub.ref(0, 310355);

procedure video_devdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_devdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p1 := external_alloc();
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const video_get_drvdata: ref;

axiom video_get_drvdata == $sub.ref(0, 311387);

procedure video_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(128, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 312419);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 313451);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 1} true;
    call {:si_unique_call 363} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 364} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const vidioc_querycap: ref;

axiom vidioc_querycap == $sub.ref(0, 314483);

procedure vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var vslice_dummy_var_76: i64;
  var vslice_dummy_var_77: i64;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p3 := video_drvdata($p0);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} vslice_dummy_var_76 := strlcpy($p8, .str.121, 16);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} vslice_dummy_var_77 := strlcpy($p11, .str.121, 32);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} vslice_dummy_var_78 := usb_make_path($p14, $p16, 32);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 83886081);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, $sub.i32(0, 2147483648));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(84, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_enum_fmt_vid_cap: ref;

axiom vidioc_enum_fmt_vid_cap == $sub.ref(0, 315515);

procedure vidioc_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i6: i32;
  var vslice_dummy_var_79: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 369} {:cexpr "index"} boogie_si_record_i32($i4);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 5);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $M.13;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i4);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref($i21, 16)), $mul.ref(0, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} vslice_dummy_var_79 := strlcpy($p20, $p24, 32);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i4);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref($i26, 16)), $mul.ref(8, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i4);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref($i9, 16)), $mul.ref(8, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1195724874);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i13 == 1);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i4);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref($i14, 16)), $mul.ref(8, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1196444237);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_fmt_vid_cap: ref;

axiom vidioc_g_fmt_vid_cap == $sub.ref(0, 316547);

procedure vidioc_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $p3 := video_drvdata($p0);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2304, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 63744);
    call {:si_unique_call 372} {:cexpr "is_ntsc"} boogie_si_record_i32($i8);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2596, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i10);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2600, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i15);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i8, 0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i24 := (if $i23 == 1 then 480 else 576);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i25 := $uge.i32($i22, $i24);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2608, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i35);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2608, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i47 := $ashr.i32($i46, 3);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i48 := $mul.i32($i42, $i47);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i48);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i60 := $mul.i32($i55, $i59);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 48)), $mul.ref(20, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i60);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 1);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 48)), $mul.ref(28, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 0);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 4);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_s_fmt_vid_cap: ref;

axiom vidioc_s_fmt_vid_cap == $sub.ref(0, 317579);

procedure vidioc_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vidioc_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $p138: ref;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i10: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $p4 := video_drvdata($p0);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2624, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i8 := vidioc_try_fmt_vid_cap($p0, $p7, $p2);
    call {:si_unique_call 376} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p15 := format_by_fourcc($i14);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i18 := vb2_is_busy($p6);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 379} {:cexpr "tmp___0"} boogie_si_record_i8($i19);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p29);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 381} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p30, $p31, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2608, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p15);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2596, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2600, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2604, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i48 := norm_minw($p5);
    call {:si_unique_call 383} {:cexpr "tmp___2"} boogie_si_record_i32($i48);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2596, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i51 := $ugt.i32($i50, $i48);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i51 == 1);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 3);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2608, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 1448695129);
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i68, 1497715271);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i68, 1498831189);
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i68, 1498831189);
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb30, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i113 := $and.i32($i112, $sub.i32(0, 256));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, $i113);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i116, 2);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, $i117);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2256, 1)), $mul.ref(8, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i124 := $xor.i32($i120, $i123);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i125 := $and.i32($i124, 255);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i126 == 1);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2256, 1)), $mul.ref(4, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i129, $i132);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i133 == 1);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2256, 1)), $mul.ref(0, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i136, $i139);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p3);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 386} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p143, $p144, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} vslice_dummy_var_81 := s2255_set_mode($p5, $p3);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb57:
    assume $i140 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, 1);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i133 == 1;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p134, 1);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i126 == 1;
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, 1);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb28:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i68, 1497715271);
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb33;

  $bb34:
    assume $i73 == 1;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, $sub.i32(0, 256));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i86 := $or.i32($i85, 4);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i86);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb26:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i68, 1448695129);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb33;

  $bb36:
    assume $i74 == 1;
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb24:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i68, 1196444237);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i68, 1345466932);
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i68, 1345466932);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb33;

  $bb42:
    assume $i77 == 1;
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, $sub.i32(0, 256));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $i105);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i109 := $or.i32($i108, 1);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, $i109);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb40:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i68, 1196444237);
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb44, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb33;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, $sub.i32(0, 256));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, $i90);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i94 := $or.i32($i93, 5);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i94);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2312, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i100 := $shl.i32($i99, 8);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i101 := $or.i32($i97, $i100);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i101);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb38:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i68, 1195724874);
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb33;

  $bb47:
    assume $i79 == 1;
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb14:
    assume $i51 == 1;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i52 := norm_minh($p5);
    call {:si_unique_call 385} {:cexpr "tmp___1"} boogie_si_record_i32($i52);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2600, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i55 := $ugt.i32($i54, $i52);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 2);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2316, 1)), $mul.ref(4, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 1);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i60 == 1);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i60 == 1;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 4);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i21 := $M.2;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 0);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} vslice_dummy_var_80 := printk.ref.ref(.str.128, $p27);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const vidioc_try_fmt_vid_cap: ref;

axiom vidioc_try_fmt_vid_cap == $sub.ref(0, 318611);

procedure vidioc_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i42: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i82: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i73: i32;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i16: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $p3 := video_drvdata($p0);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2304, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 63744);
    call {:si_unique_call 389} {:cexpr "is_ntsc"} boogie_si_record_i32($i8);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $p13 := format_by_fourcc($i12);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $M.2;
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 49);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i8, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i78 := $ugt.i32($i77, 575);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i78 == 1);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 288);
    assume {:verifier.code 0} true;
    $i82 := 2;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i90 := $ugt.i32($i89, 703);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i90 == 1);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i98 := $ugt.i32($i97, 703);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i98 == 1);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i106 := $ugt.i32($i105, 351);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i106 == 1);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, 352);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i73 := $i82;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, $i73);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i122 := $mul.i32($i119, $i121);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i123 := $lshr.i32($i122, 3);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, $i123);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i135 := $mul.i32($i130, $i134);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 48)), $mul.ref(20, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p138, $i135);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p140, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, 1);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 48)), $mul.ref(28, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, 0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i145 := $M.2;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i146 := $sgt.i32($i145, 49);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb35:
    assume $i146 == 1;
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p148, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p161, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_83 := printk.ref.ref.ref.i32.i32.i32(.str.124, $p151, .str.123, $i155, $i159, $i163);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i106 == 1;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, 352);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i98 == 1;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, 704);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i90 == 1;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, 704);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i78 == 1;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 576);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i82 := 4;
    goto $bb25;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i32($i37, 479);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 240);
    assume {:verifier.code 0} true;
    $i42 := 2;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32($i49, 639);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i50 == 1);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i58 := $ugt.i32($i57, 639);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i58 == 1);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i66 := $ugt.i32($i65, 319);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i66 == 1);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 320);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i73 := $i42;
    goto $bb22;

  $bb19:
    assume $i66 == 1;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 320);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i58 == 1;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 640);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i50 == 1;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 640);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 480);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i42 := 4;
    goto $bb12;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} vslice_dummy_var_82 := printk.ref.ref.ref.i32.i32.i32(.str.122, $p23, .str.123, $i8, $i27, $i31);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb3;
}



const vb2_ioctl_reqbufs: ref;

axiom vb2_ioctl_reqbufs == $sub.ref(0, 319643);

procedure vb2_ioctl_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 393} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 394} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_querybuf: ref;

axiom vb2_ioctl_querybuf == $sub.ref(0, 320675);

procedure vb2_ioctl_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 395} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 396} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_qbuf: ref;

axiom vb2_ioctl_qbuf == $sub.ref(0, 321707);

procedure vb2_ioctl_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 1} true;
    call {:si_unique_call 397} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 398} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_dqbuf: ref;

axiom vb2_ioctl_dqbuf == $sub.ref(0, 322739);

procedure vb2_ioctl_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 1} true;
    call {:si_unique_call 399} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 400} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_streamon: ref;

axiom vb2_ioctl_streamon == $sub.ref(0, 323771);

procedure vb2_ioctl_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 401} {:cexpr "vb2_ioctl_streamon:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 1} true;
    call {:si_unique_call 402} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 403} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_streamoff: ref;

axiom vb2_ioctl_streamoff == $sub.ref(0, 324803);

procedure vb2_ioctl_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 404} {:cexpr "vb2_ioctl_streamoff:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 1} true;
    call {:si_unique_call 405} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 406} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vidioc_g_std: ref;

axiom vidioc_g_std == $sub.ref(0, 325835);

procedure vidioc_g_std($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_std($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p3 := video_drvdata($p0);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2304, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i6);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_std: ref;

axiom vidioc_s_std == $sub.ref(0, 326867);

procedure vidioc_s_std($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vidioc_s_std($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i10: i32;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    call {:si_unique_call 409} {:cexpr "vidioc_s_std:arg:i"} boogie_si_record_i64($i2);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $p4 := video_drvdata($p0);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2624, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i7 := vb2_is_busy($p6);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 412} {:cexpr "tmp___0"} boogie_si_record_i8($i8);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p11);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 413} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p12, $p13, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i2, 63744);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i2, 16713471);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i34 := $M.2;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, 3);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 2);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2304, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p50, $i2);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} vslice_dummy_var_86 := s2255_set_mode($p5, $p3);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 1);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 2);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 1);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2596, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 704);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2600, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 576);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_85 := printk.ref.ref.ref(.str.127, $p40, .str.126);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i16 := $M.2;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 3);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 1);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 1);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 1);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2596, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 640);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2600, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 480);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} vslice_dummy_var_84 := printk.ref.ref.ref(.str.125, $p22, .str.126);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;
}



const vidioc_enum_input: ref;

axiom vidioc_enum_input == $sub.ref(0, 327899);

procedure vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $CurrAddr;



implementation vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i11: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i64;
  var vslice_dummy_var_89: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $p4 := video_drvdata($p0);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p3, 0);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 2);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, 16777215);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 15576)), $mul.ref(15556, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 4);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 15576)), $mul.ref(15560, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 8791);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i34, 8791);
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vslice_dummy_var_89 := strlcpy($p39, .str.138, 32);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i45 := $sle.i32($i44, 1);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p46 := (if $i45 == 1 then .str.138 else .str.139);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} vslice_dummy_var_88 := strlcpy($p42, $p46, 32);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i34, 8789);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb19;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i18 := s2255_cmd_status($p5, $p3);
    call {:si_unique_call 420} {:cexpr "rc"} boogie_si_record_i32($i18);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i19 := $M.2;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, 3);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i18, 0);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.14, $p3);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 1);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i30 := (if $i29 == 1 then 0 else 2);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.14, $p3);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_87 := printk.ref.ref.i32.i32(.str.137, $p23, $i18, $i24);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_input: ref;

axiom vidioc_g_input == $sub.ref(0, 328931);

procedure vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_input: ref;

axiom vidioc_s_input == $sub.ref(0, 329963);

procedure vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} {:cexpr "vidioc_s_input:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_jpegcomp: ref;

axiom vidioc_g_jpegcomp == $sub.ref(0, 330995);

procedure vidioc_g_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p3 := video_drvdata($p0);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 426} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p5, 0, 140, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2312, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i9 := $M.2;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 1);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} vslice_dummy_var_90 := printk.ref.ref.ref.i32(.str.132, $p15, .str.134, $i17);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_s_jpegcomp: ref;

axiom vidioc_s_jpegcomp == $sub.ref(0, 332027);

procedure vidioc_s_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i11: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p3 := video_drvdata($p0);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 100);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2088, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_91 := v4l2_ctrl_s_ctrl($p13, $i15);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i17 := $M.2;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 1);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(0, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} vslice_dummy_var_92 := printk.ref.ref.ref.i32(.str.132, $p23, .str.133, $i25);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const vidioc_g_parm: ref;

axiom vidioc_g_parm == $sub.ref(0, 333059);

procedure vidioc_g_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $i83: i32;
  var $i8: i32;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p3 := video_drvdata($p0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(0, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 4096);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2316, 1)), $mul.ref(4, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i14);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 2);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2256, 1)), $mul.ref(0, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then 1001 else 1000);
    call {:si_unique_call 432} {:cexpr "def_num"} boogie_si_record_i32($i25);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2256, 1)), $mul.ref(0, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i30 := (if $i29 == 1 then 30000 else 25000);
    call {:si_unique_call 433} {:cexpr "def_dem"} boogie_si_record_i32($i30);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i30);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2256, 1)), $mul.ref(12, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i37, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i37, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i25);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i63 := $M.2;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i64 := $sgt.i32($i63, 3);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb22:
    assume $i64 == 1;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p66, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p80, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} vslice_dummy_var_93 := printk.ref.ref.ref.i32.i32.i32(.str.135, $p69, .str.136, $i73, $i78, $i83);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb10:
    assume $i40 == 1;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i58 := $mul.i32($i25, 5);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i58);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb8:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i37, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb12;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i53 := $mul.i32($i25, 3);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i53);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb6:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i48 := $mul.i32($i25, 2);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i48);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i37, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb12;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb18;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_s_parm: ref;

axiom vidioc_s_parm == $sub.ref(0, 334091);

procedure vidioc_s_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vidioc_s_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $i80: i32;
  var $i67: i32;
  var $i54: i32;
  var $i43: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $p114: ref;
  var $i115: i32;
  var $i9: i32;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $p4 := video_drvdata($p0);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(0, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 1);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p10);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 437} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p11, $p12, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2316, 1)), $mul.ref(4, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i15, $i19);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i28 := (if $i27 == 1 then 1001 else 1000);
    call {:si_unique_call 440} {:cexpr "def_num"} boogie_si_record_i32($i28);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i32 := (if $i31 == 1 then 30000 else 25000);
    call {:si_unique_call 441} {:cexpr "def_dem"} boogie_si_record_i32($i32);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, $i32);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i49 := $ule.i32($i48, $i28);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i49 == 1);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i60 := $mul.i32($i28, 2);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i61 := $ule.i32($i59, $i60);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i61 == 1);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i73 := $mul.i32($i28, 3);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i74 := $ule.i32($i72, $i73);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i74 == 1);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i81 := $mul.i32($i28, 5);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p83, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i81);
    assume {:verifier.code 0} true;
    $i80 := 5;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i67 := $i80;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i54 := $i67;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i43 := $i54;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i43);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p88, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i32);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, 2);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} vslice_dummy_var_94 := s2255_set_mode($p5, $p3);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i95 := $M.2;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i96 := $sgt.i32($i95, 3);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb23:
    assume $i96 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p98, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p107, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} vslice_dummy_var_95 := printk.ref.ref.ref.i32.i32.i32.i32(.str.144, $p101, .str.145, $i105, $i110, $i115, $i43);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i74 == 1;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i75 := $mul.i32($i28, 3);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i75);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i80 := 3;
    goto $bb22;

  $bb17:
    assume $i61 == 1;
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i62 := $mul.i32($i28, 2);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p64, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i62);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i67 := 2;
    goto $bb19;

  $bb14:
    assume $i49 == 1;
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i28);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i54 := 1;
    goto $bb16;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i28);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i43 := 1;
    goto $bb13;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2624, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i22 := vb2_is_streaming($p21);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 439} {:cexpr "tmp___0"} boogie_si_record_i8($i23);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const v4l2_ctrl_log_status: ref;

axiom v4l2_ctrl_log_status == $sub.ref(0, 335123);

procedure v4l2_ctrl_log_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_log_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 1} true;
    call {:si_unique_call 444} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 445} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vidioc_enum_framesizes: ref;

axiom vidioc_enum_framesizes == $sub.ref(0, 336155);

procedure vidioc_enum_framesizes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_framesizes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i12: i32;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p3 := video_drvdata($p0);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3704)), $mul.ref(2304, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 63744);
    call {:si_unique_call 447} {:cexpr "is_ntsc"} boogie_si_record_i32($i8);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, 2);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $p15 := format_by_fourcc($i14);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 1);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i8, 0);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref(pal_sizes, $mul.ref(0, 24)), $mul.ref($i30, 8));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p20);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p31);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 450} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p32, $p33, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref(ntsc_sizes, $mul.ref(0, 24)), $mul.ref($i24, 8));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p20);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p25);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 449} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p26, $p27, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_enum_frameintervals: ref;

axiom vidioc_enum_frameintervals == $sub.ref(0, 337187);

procedure vidioc_enum_frameintervals($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $CurrAddr;



implementation vidioc_enum_frameintervals($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i1;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i1;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i17: i32;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $i82: i64;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $p4 := video_drvdata($p0);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(2304, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 63744);
    call {:si_unique_call 453} {:cexpr "is_ntsc"} boogie_si_record_i32($i9);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p10, 1);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p11, 2);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p12, 3);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p13, 5);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i15, 3);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $p20 := format_by_fourcc($i19);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i9, 0);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p24 := (if $i23 == 1 then ntsc_sizes else pal_sizes);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i26, $i28);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p24, $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i73, $i75);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    $i82 := $add.i64(1, 1);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p24, $mul.ref($i82, 8)), $mul.ref(0, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i85, $i87);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i36 := 3;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i36, 3);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(16, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 1);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i9, 0);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i41 := (if $i40 == 1 then 30000 else 25000);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i41);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i9, 0);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i46 := (if $i45 == 1 then 1001 else 1000);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref($i49, 4));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.15, $p50);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i52 := $mul.i32($i46, $i51);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i52);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i56 := $M.2;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i56, 3);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb23:
    assume $i57 == 1;
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p59, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_96 := printk.ref.ref.ref.i32.i32(.str.130, $p62, .str.131, $i66, $i70);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb3;

  $bb33:
    assume $i88 == 1;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p24, $mul.ref($i82, 8)), $mul.ref(4, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i90, $i92);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i35 := 2;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb35;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb16;

  $bb26:
    assume $i76 == 1;
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p24, $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i78, $i80);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i35 := 1;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb28;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb14;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p24, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, $i33);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i35 := 0;
    assume {:branchcond $i34} true;
    goto $bb13, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb12;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb14;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb3;
}



const v4l2_ctrl_subscribe_event: ref;

axiom v4l2_ctrl_subscribe_event == $sub.ref(0, 338219);

procedure v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 456} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 457} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_event_unsubscribe: ref;

axiom v4l2_event_unsubscribe == $sub.ref(0, 339251);

procedure v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 1} true;
    call {:si_unique_call 458} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 459} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const format_by_fourcc: ref;

axiom format_by_fourcc == $sub.ref(0, 340283);

procedure format_by_fourcc($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation format_by_fourcc($i0: i32) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} {:cexpr "format_by_fourcc:arg:fourcc"} boogie_si_record_i32($i0);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i1 := $M.13;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32(1448695129, $i0);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb23, $bb24;

  $bb24:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $M.13;
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32(1498831189, $i0);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i10} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb40, $bb41;

  $bb41:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i11 := $M.13;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32(1345466932, $i0);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i4 := 2;
    assume {:branchcond $i13} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb57, $bb58;

  $bb58:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i14 := $M.13;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32(1497715271, $i0);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i4 := 3;
    assume {:branchcond $i16} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb74, $bb75;

  $bb75:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i17 := $M.13;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32(1195724874, $i0);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i4 := 4;
    assume {:branchcond $i19} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb91, $bb92;

  $bb92:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i20 := $M.13;
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32(1196444237, $i0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i4 := 5;
    assume {:branchcond $i22} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    $p6 := $add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref($i5, 16));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb19;

  $bb94:
    assume $i21 == 1;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb97, $bb99;

  $bb99:
    assume !(0 == 1);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb96;

  $bb100:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb97:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb98;

  $bb91:
    assume 0 == 1;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb17;

  $bb77:
    assume $i18 == 1;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb80, $bb82;

  $bb82:
    assume !(1 == 1);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb79;

  $bb83:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb80:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb81;

  $bb74:
    assume 0 == 1;
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb17;

  $bb60:
    assume $i15 == 1;
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb63, $bb65;

  $bb65:
    assume !(0 == 1);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb62;

  $bb66:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb63:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb64;

  $bb57:
    assume 0 == 1;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb17;

  $bb43:
    assume $i12 == 1;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb46, $bb48;

  $bb48:
    assume !(0 == 1);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb45;

  $bb49:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb46:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb47;

  $bb40:
    assume 0 == 1;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb17;

  $bb26:
    assume $i9 == 1;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb29, $bb31;

  $bb31:
    assume !(0 == 1);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb28;

  $bb32:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb29:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb30;

  $bb23:
    assume 0 == 1;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb17;

  $bb7:
    assume $i2 == 1;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb10, $bb12;

  $bb12:
    assume !(0 == 1);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb11;

  $bb3:
    assume 0 == 1;
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const v4l2_ctrl_s_ctrl: ref;

axiom v4l2_ctrl_s_ctrl == $sub.ref(0, 341315);

procedure v4l2_ctrl_s_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_s_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} {:cexpr "v4l2_ctrl_s_ctrl:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} v4l2_ctrl_lock($p0);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i2 := __v4l2_ctrl_s_ctrl($p0, $i1);
    call {:si_unique_call 464} {:cexpr "rval"} boogie_si_record_i32($i2);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} v4l2_ctrl_unlock($p0);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_ctrl_lock: ref;

axiom v4l2_ctrl_lock == $sub.ref(0, 342347);

procedure v4l2_ctrl_lock($p0: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(160, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} mutex_lock_nested($p4, 0);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    return;
}



const __v4l2_ctrl_s_ctrl: ref;

axiom __v4l2_ctrl_s_ctrl == $sub.ref(0, 343379);

procedure __v4l2_ctrl_s_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __v4l2_ctrl_s_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 467} {:cexpr "__v4l2_ctrl_s_ctrl:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 1} true;
    call {:si_unique_call 468} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 469} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_ctrl_unlock: ref;

axiom v4l2_ctrl_unlock == $sub.ref(0, 344411);

procedure v4l2_ctrl_unlock($p0: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(160, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} mutex_unlock($p4);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    return;
}



const s2255_cmd_status: ref;

axiom s2255_cmd_status == $sub.ref(0, 345443);

procedure s2255_cmd_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $CurrAddr;



implementation s2255_cmd_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $i37: i1;
  var $i38: i64;
  var $i39: i1;
  var $i41: i1;
  var $i40: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i8;
  var $i54: i1;
  var $i55: i1;
  var $i56: i64;
  var $i57: i1;
  var $i59: i1;
  var $i58: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $p71: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $p83: ref;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(8, 1)), $mul.ref(1560, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p6 := to_s2255_dev($p5);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15568, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15176, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} mutex_lock_nested($p9, 0);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref($i12, 8));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.1, $p13);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    call {:si_unique_call 474} {:cexpr "chn_rev"} boogie_si_record_i32($i15);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i16 := $M.2;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 3);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 576045278);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p8, $mul.ref(1, 4));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i15);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p8, $mul.ref(2, 4));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $sub.i32(0, 1037742016));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p1, 0);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2592, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p8);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i30 := s2255_write_config($p28, $p29, 512);
    call {:si_unique_call 477} {:cexpr "res"} boogie_si_record_i32($i30);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i31 := msecs_to_jiffies(350);
    call {:si_unique_call 479} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} __might_sleep(.str.4, 1082, 0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2592, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 481} {:cexpr "__cond___0"} boogie_si_record_i8($i35);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i38 := $i31;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i35);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i40 := 1;
    assume {:branchcond $i39} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i39 == 1);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i38, 0);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i40 := $i41;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i40);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2592, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 1);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i73 := $i30;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2500, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p1, $i75);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i76 := $M.2;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i32($i76, 3);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(15176, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} mutex_unlock($p83);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $r := $i73;
    return;

  $bb36:
    assume $i77 == 1;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.14, $p1);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_99 := printk.ref.ref.ref.i32(.str.143, $p80, .str.141, $i81);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i66 == 1;
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i67 := $M.2;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i68 := $sge.i32($i67, 0);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32(0, 14);
    goto $bb35;

  $bb32:
    assume $i68 == 1;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_98 := printk.ref.ref(.str.142, $p71);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i44 := msecs_to_jiffies(350);
    call {:si_unique_call 483} {:cexpr "tmp___1"} boogie_si_record_i64($i44);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} INIT_LIST_HEAD($p45);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 0);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i47 := $i44;
    goto $bb15;

  $bb15:
    call $i47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i59, $i58, $i60, $i61, $i62 := s2255_cmd_status_loop_$bb15($p0, $p2, $i47, $p48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i59, $i58, $i60, $i61, $i62);
    goto $bb15_last;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2504, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i49 := prepare_to_wait_event($p48, $p2, 2);
    call {:si_unique_call 486} {:cexpr "tmp___2"} boogie_si_record_i64($i49);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2592, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i8($i52);
    call {:si_unique_call 487} {:cexpr "__cond"} boogie_si_record_i8($i53);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1($i53);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i56 := $i47;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1($i53);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i58 := 1;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i57 == 1);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i56, 0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i58 := $i59;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i58);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i62 := schedule_timeout($i56);
    call {:si_unique_call 490} {:cexpr "__ret___0"} boogie_si_record_i64($i62);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i47 := $i62;
    goto corral_source_split_3218_dummy;

  $bb25:
    assume $i61 == 1;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2504, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} finish_wait($p63, $p2);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb23;

  $bb16:
    assume $i54 == 1;
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i47, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb18;

  $bb19:
    assume $i55 == 1;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i56 := 1;
    goto $bb21;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb11;

  $bb4:
    assume $i36 == 1;
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i31, 0);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb6;

  $bb7:
    assume $i37 == 1;
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i38 := 1;
    goto $bb9;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} vslice_dummy_var_97 := printk.ref.ref.ref.i32(.str.140, $p20, .str.141, $i22);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_3218_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3189;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 346475);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 494} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 495} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 496} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_is_busy: ref;

axiom vb2_is_busy == $sub.ref(0, 347507);

procedure vb2_is_busy($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation vb2_is_busy($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 848)), $mul.ref(496, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 348539);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(64, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 280)), $mul.ref(16, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(4, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.129, $p6, $p8);
    call {:si_unique_call 499} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 349571);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const s2255_probe: ref;

axiom s2255_probe == $sub.ref(0, 350603);

procedure s2255_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, assertsPassed;



implementation s2255_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i24;
  var $i55: i24;
  var $i56: i24;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i24;
  var $i77: i24;
  var $i78: i24;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i8;
  var $p110: ref;
  var $i111: i32;
  var $i112: i8;
  var $i113: i32;
  var $i114: i1;
  var $i96: i32;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $i129: i32;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i64;
  var $i167: i1;
  var $p168: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i64;
  var $i186: i32;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i64;
  var $i194: i64;
  var $p195: ref;
  var $p196: ref;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $i207: i64;
  var $i208: i64;
  var $p209: ref;
  var $p210: ref;
  var $i211: i32;
  var $i213: i32;
  var $p214: ref;
  var $p215: ref;
  var $i216: i32;
  var $i217: i1;
  var $p219: ref;
  var $i220: i16;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i224: i32;
  var $i225: i1;
  var $p227: ref;
  var $p228: ref;
  var $i230: i32;
  var $i231: i1;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $i232: i32;
  var $i200: i32;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $i179: i32;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $i169: i32;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $i157: i32;
  var $p249: ref;
  var $i120: i32;
  var $p251: ref;
  var $p252: ref;
  var $i47: i32;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $i25: i32;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $i16: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: ref;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $p11 := kzalloc(15544, 208);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $p17 := kzalloc(512, 208);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15568, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p17);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15568, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15008, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} atomic_set($p26, 0);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15560, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i28);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $p30 := kzalloc(128, 208);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p30);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15016, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} __mutex_init($p37, .str.39, $p2);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15176, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} __mutex_init($p38, .str.40, $p3);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p39 := interface_to_usbdev($p0);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $p40 := usb_get_dev($p39);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p40);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p48, .str.42);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $M.17 := $store.ref($M.17, $p49, .str.43);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p50, .str.4);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p51, .str.44);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i54 := $load.i24($M.20, $p53);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i55 := $and.i24($i54, $sub.i24(0, 262144));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i56 := $or.i24($i55, 2259);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $M.20 := $store.i24($M.20, $p53, $i56);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p57, 0);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.21, $p58);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i64($i59);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i61 := $and.i64($i60, 1);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i62 := ldv__builtin_expect($i61, 0);
    call {:si_unique_call 526} {:cexpr "tmp___3"} boogie_si_record_i64($i62);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15344, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p0);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p70, .str.42);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.17 := $store.ref($M.17, $p71, .str.43);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p72, .str.4);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p73, .str.45);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i76 := $load.i24($M.20, $p75);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i77 := $and.i24($i76, $sub.i24(0, 262144));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i78 := $or.i24($i77, 2264);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $M.20 := $store.i24($M.20, $p75, $i78);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p79, 0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.21, $p80);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i64($i81);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i83 := $and.i64($i82, 1);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i84 := ldv__builtin_expect($i83, 0);
    call {:si_unique_call 529} {:cexpr "tmp___4"} boogie_si_record_i64($i84);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i95 := $sgt.i32($i94, 0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15352, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 0);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15360, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p123);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_101 := reg_timer_1($p121, s2255_timer, $i124);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} __init_waitqueue_head($p128, .str.47, $p6);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i129 := 0;
    goto $bb40;

  $bb40:
    call $p130, $p131, $i132, $p134, $p135, $p136, $p137, $p138, $p141, $p142, $p143, $i144, $i145, $i129, vslice_dummy_var_102 := s2255_probe_loop_$bb40($p7, $p8, $p9, $p10, $p11, $p12, $p130, $p131, $i132, $p134, $p135, $p136, $p137, $p138, $p141, $p142, $p143, $i144, $i145, $i129, vslice_dummy_var_102);
    goto $bb40_last;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(0, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i129);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p131, $mul.ref($i132, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p134, $i129);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p131, $mul.ref($i132, 3704)), $mul.ref(0, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p135, $p11);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p131, $mul.ref($i132, 3704)), $mul.ref(2408, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} __init_waitqueue_head($p136, .str.48, $p7);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p131, $mul.ref($i132, 3704)), $mul.ref(2504, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} __init_waitqueue_head($p137, .str.49, $p8);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p131, $mul.ref($i132, 3704)), $mul.ref(3632, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} vslice_dummy_var_102 := spinlock_check($p138);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p131, $mul.ref($i132, 3704)), $mul.ref(3632, 1)), $mul.ref(0, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} __raw_spin_lock_init($p142, .str.50, $p9);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p131, $mul.ref($i132, 3704)), $mul.ref(3472, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} __mutex_init($p143, .str.51, $p10);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i129, 1);
    call {:si_unique_call 543} {:cexpr "i"} boogie_si_record_i32($i144);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i145 := $sle.i32($i144, 3);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $p146 := ldv_usb_alloc_urb_32(0, 208);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p149, $p146);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p153);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i155 := $eq.i64($i154, 0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $p158 := kzalloc(512, 208);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p160, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p161, $p158);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p163, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i166 := $p2i.ref.i64($p165);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i167 := $eq.i64($i166, 0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i176 := request_firmware($p172, .str.53, $p175);
    call {:si_unique_call 551} {:cexpr "tmp___6"} boogie_si_record_i32($i176);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p181, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p183, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i185 := $load.i64($M.0, $p184);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i64.i32($i185);
    call {:si_unique_call 554} {:cexpr "fw_size"} boogie_si_record_i32($i186);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p188, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p190, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i193 := $sext.i32.i64($i186);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i194 := $add.i64($i193, $sub.i64(0, 8));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($p192, $mul.ref($i194, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.0, $p196);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i198 := $ne.i32($i197, 576007983);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i198 == 1);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.0, $p201);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p202, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p204, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.0, $p205);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i207 := $sext.i32.i64($i186);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i208 := $add.i64($i207, $sub.i64(0, 4));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p206, $mul.ref($i208, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p210 := $bitcast.ref.ref($p209);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i211 := $load.i32($M.0, $p210);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_104 := printk.ref.i32(.str.56, $i211);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.0, $p210);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15556, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p214, $i213);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15556, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.0, $p215);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i217 := $sle.i32($i216, 10103);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15560, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i220 := $load.i16($M.0, $p219);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i221 := $zext.i16.i32($i220);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 8791);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i222 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.0, $p227);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_107 := usb_reset_device($p228);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i230 := s2255_board_init($p12);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 562} {:cexpr "retval"} boogie_si_record_i32($i230);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} s2255_fwload_start($p12, 0);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i233 := s2255_probe_v4l($p12);
    call {:si_unique_call 566} {:cexpr "retval"} boogie_si_record_i32($i233);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i233, 0);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} _dev_info.ref.ref($p235, .str.59);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb74:
    assume $i234 == 1;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i232 := $i233;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_108 := s2255_board_shutdown($p12);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i200 := $i232;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p238, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.0, $p239);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} release_firmware($p240);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i179 := $i200;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p242, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.0, $p243);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} kfree($p244);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i169 := $i179;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p246, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $p247);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} usb_free_urb($p248);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i157 := $i169;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15360, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_103 := ldv_del_timer_sync_33($p249);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i120 := $i157;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p252 := $load.ref($M.0, $p251);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} usb_put_dev($p252);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i47 := $i120;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.0, $p253);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p255 := $bitcast.ref.ref($p254);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} kfree($p255);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15016, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} mutex_destroy($p256);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i25 := $i47;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15568, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.0, $p257);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p259 := $bitcast.ref.ref($p258);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} kfree($p259);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p12);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} kfree($p260);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_100 := printk.ref.i32(.str.60, $i25);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i16 := $i25;
    goto $bb3;

  $bb70:
    assume $i231 == 1;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i232 := $i230;
    goto $bb72;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i222 == 1;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15556, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i225 := $sle.i32($i224, 7);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i225 == 1);
    goto $bb65;

  $bb66:
    assume $i225 == 1;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} vslice_dummy_var_106 := printk.ref.i32(.str.58, 8);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb60:
    assume $i217 == 1;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} vslice_dummy_var_105 := printk.ref(.str.57);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i198 == 1;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} dev_err.ref.ref($p199, .str.55);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i200 := $sub.i32(0, 19);
    goto $bb59;

  $bb53:
    assume $i177 == 1;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} dev_err.ref.ref($p178, .str.54);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i179 := $sub.i32(0, 12);
    goto $bb55;

  $bb49:
    assume $i167 == 1;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} dev_err.ref.ref($p168, .str.52);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i169 := $sub.i32(0, 12);
    goto $bb51;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i155 == 1;
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} dev_err.ref.ref($p156, .str.52);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i157 := $sub.i32(0, 12);
    goto $bb47;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i145 == 1;
    assume {:verifier.code 0} true;
    $i129 := $i144;
    goto $bb42_dummy;

  $bb36:
    assume $i118 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} dev_err.ref.ref($p119, .str.46);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32(0, 12);
    goto $bb38;

  $bb22:
    assume $i95 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i96 := 0;
    goto $bb25;

  $bb25:
    call $p97, $p98, $i99, $p101, $p102, $i103, $i104, $i105, $i106, $i107, $p108, $i109, $p110, $i111, $i112, $i113, $i114, $i96 := s2255_probe_loop_$bb25($p12, $p69, $p92, $p97, $p98, $i99, $p101, $p102, $i103, $i104, $i105, $i106, $i107, $p108, $i109, $p110, $i111, $i112, $i113, $i114, $i96);
    goto $bb25_last;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p69, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i96);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p98, $mul.ref($i99, 72)), $mul.ref(0, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15352, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 0);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i96, 1);
    call {:si_unique_call 533} {:cexpr "i"} boogie_si_record_i32($i111);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p92);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i114 := $sgt.i32($i113, $i111);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i114 == 1);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb33:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i96 := $i111;
    goto $bb33_dummy;

  $bb27:
    assume $i105 == 1;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i106 := usb_endpoint_is_bulk_in($p101);
    call {:si_unique_call 532} {:cexpr "tmp___5"} boogie_si_record_i32($i106);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i107 == 1;
    $p108 := $add.ref($add.ref($add.ref($p98, $mul.ref($i99, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15352, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, $i109);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb19:
    assume $i85 == 1;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p86, .str.45, $i90);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i63 == 1;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p12, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref($p4, $p64, .str.44, $p12, $p66, $p0);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i45 == 1;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} dev_err.ref.ref($p46, .str.41);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 19);
    goto $bb14;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb7;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} dev_err.ref.ref($p24, .str.38);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb7;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} dev_err.ref.ref($p15, .str.38);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb42_dummy:
    assume false;
    return;

  $bb40_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3472;

  $bb33_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3420;
}



const s2255_disconnect: ref;

axiom s2255_disconnect == $sub.ref(0, 351635);

procedure s2255_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.5, $M.7, $M.9, $M.11;



implementation s2255_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i12: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i11: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $p29: ref;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p42: ref;
  var $p45: ref;
  var $p48: ref;
  var $p51: ref;
  var $p54: ref;
  var $p57: ref;
  var $p60: ref;
  var $p63: ref;
  var $p66: ref;
  var $p69: ref;
  var $p72: ref;
  var $p75: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p3 := to_s2255_dev($p2);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(15008, 1));
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i5 := atomic_read($p4);
    call {:si_unique_call 571} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(15016, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} mutex_lock_nested($p6, 0);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(14816, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} v4l2_device_disconnect($p7);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(15016, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} mutex_unlock($p8);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(15008, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} atomic_inc($p9);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32(0, $i5);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} atomic_set($p20, 4);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} __wake_up($p23, 3, 1, $0.ref);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(0, 3704)), $mul.ref(2496, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 1);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(0, 3704)), $mul.ref(2408, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} __wake_up($p29, 3, 1, $0.ref);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(0, 3704)), $mul.ref(2592, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 1);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(0, 3704)), $mul.ref(2504, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} __wake_up($p35, 3, 1, $0.ref);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(1, 3704)), $mul.ref(2496, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 1);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(1, 3704)), $mul.ref(2408, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} __wake_up($p45, 3, 1, $0.ref);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(1, 3704)), $mul.ref(2592, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 1);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(1, 3704)), $mul.ref(2504, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} __wake_up($p51, 3, 1, $0.ref);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(2, 3704)), $mul.ref(2496, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 1);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(2, 3704)), $mul.ref(2408, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} __wake_up($p57, 3, 1, $0.ref);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(2, 3704)), $mul.ref(2592, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 1);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(2, 3704)), $mul.ref(2504, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} __wake_up($p63, 3, 1, $0.ref);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(3, 3704)), $mul.ref(2496, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 1);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(3, 3704)), $mul.ref(2408, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} __wake_up($p69, 3, 1, $0.ref);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(3, 3704)), $mul.ref(2592, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 1);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(3, 3704)), $mul.ref(2504, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} __wake_up($p75, 3, 1, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(15008, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i37 := atomic_dec_and_test($p36);
    call {:si_unique_call 585} {:cexpr "tmp___2"} boogie_si_record_i32($i37);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} _dev_info.ref.ref.ref($p39, .str.116, .str.117);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} s2255_destroy($p3);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb4;

  $bb4:
    call $i12, $p15, $i16, $i17, $i11 := s2255_disconnect_loop_$bb4($p3, $i5, $i12, $p15, $i16, $i17, $i11);
    goto $bb4_last;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref($i12, 3704)), $mul.ref(8, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} video_unregister_device($p15);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i11, 1);
    call {:si_unique_call 577} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, $i5);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3664;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 352667);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const v4l2_device_disconnect: ref;

axiom v4l2_device_disconnect == $sub.ref(0, 353699);

procedure v4l2_device_disconnect($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 354731);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 593} devirtbounce.1(0, $p1, $p1);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    return;
}



const video_unregister_device: ref;

axiom video_unregister_device == $sub.ref(0, 355763);

procedure video_unregister_device($p0: ref);
  free requires assertsPassed;



implementation video_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 356795);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 595} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} ldv_check_alloc_flags($i1);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p2 := ldv_undef_ptr();
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 357827);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 358859);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const usb_get_dev: ref;

axiom usb_get_dev == $sub.ref(0, 359891);

procedure usb_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $p1 := external_alloc();
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 360923);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 600} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 361955);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_is_bulk_in: ref;

axiom usb_endpoint_is_bulk_in == $sub.ref(0, 362987);

procedure usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 602} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 604} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const s2255_timer: ref;

axiom s2255_timer == $sub.ref(0, 364019);

procedure s2255_timer($i0: i64);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation s2255_timer($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} {:cexpr "s2255_timer:arg:user_data"} boogie_si_record_i64($i0);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i4 := ldv_usb_submit_urb_24($p3, 32);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 607} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} vslice_dummy_var_109 := printk.ref(.str);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} atomic_set($p7, 3);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} __wake_up($p8, 3, 1, $0.ref);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const reg_timer_1: ref;

axiom reg_timer_1 == $sub.ref(0, 365051);

procedure reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} {:cexpr "reg_timer_1:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(s2255_timer));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} activate_suitable_timer_1($p0, $i2);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 366083);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 367115);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 368147);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_urb_32: ref;

axiom ldv_usb_alloc_urb_32 == $sub.ref(0, 369179);

procedure ldv_usb_alloc_urb_32($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_32($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} {:cexpr "ldv_usb_alloc_urb_32:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 614} {:cexpr "ldv_usb_alloc_urb_32:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} ldv_check_alloc_flags($i1);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $p2 := ldv_undef_ptr();
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 370211);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 1} true;
    call {:si_unique_call 617} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 618} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_reset_device: ref;

axiom usb_reset_device == $sub.ref(0, 371243);

procedure usb_reset_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 1} true;
    call {:si_unique_call 619} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 620} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const s2255_board_init: ref;

axiom s2255_board_init == $sub.ref(0, 372275);

procedure s2255_board_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation s2255_board_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i46: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $i79: i32;
  var $i80: i1;
  var $i48: i32;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $p86: ref;
  var $i40: i32;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $p1 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 1);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 1);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 92);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 128);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(32, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(36, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 16384);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i14 := $M.2;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 3);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p13);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 623} cmdloc_dummy_var_30 := $memset.i8(cmdloc_dummy_var_29, $p20, 0, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(32, 1));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p0);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(4, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 16384);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(0, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 16384);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(0, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p28 := kzalloc($i27, 208);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(8, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p28);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(8, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i41 := s2255_get_fx2fw($p0);
    call {:si_unique_call 627} {:cexpr "fw_ver"} boogie_si_record_i32($i41);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i42 := $ashr.i32($i41, 8);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 255);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i41, 255);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} vslice_dummy_var_112 := printk.ref.i32.i32(.str.63, $i43, $i44);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i46 := $sle.i32($i41, 779);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb14;

  $bb14:
    call $p49, $p50, $i51, $p52, $p53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $p62, $i63, $i64, $p66, $p67, $p68, $p69, $p70, $p71, $p73, $i74, $i75, $p76, $p77, $i79, $i80, $i48, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, vslice_dummy_var_114 := s2255_board_init_loop_$bb14($p0, $p1, $p49, $p50, $i51, $p52, $p53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $p62, $i63, $i64, $p66, $p67, $p68, $p69, $p70, $p71, $p73, $i74, $i75, $p76, $p77, $i79, $i80, $i48, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, vslice_dummy_var_114);
    goto $bb14_last;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(0, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i48);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p50, $mul.ref($i51, 3704));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p50, $mul.ref($i51, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p1);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.0;
    cmdloc_dummy_var_32 := $M.0;
    call {:si_unique_call 630} cmdloc_dummy_var_33 := $memcpy.i8(cmdloc_dummy_var_31, cmdloc_dummy_var_32, $p54, $p55, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_33;
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15560, 1));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 8791);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p50, $mul.ref($i51, 3704)), $mul.ref(2312, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 50);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p50, $mul.ref($i51, 3704)), $mul.ref(2596, 1));
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 640);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p50, $mul.ref($i51, 3704)), $mul.ref(2600, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 480);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p50, $mul.ref($i51, 3704)), $mul.ref(2304, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p70, 4096);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p50, $mul.ref($i51, 3704)), $mul.ref(2608, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, formats);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 3704)), $mul.ref(2256, 1)), $mul.ref(40, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 1);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i74 := get_transfer_size($p1);
    call {:si_unique_call 632} {:cexpr "tmp___0"} boogie_si_record_i32($i74);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i74);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p50, $mul.ref($i51, 3704)), $mul.ref(2368, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, $i75);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p50, $mul.ref($i51, 3704)), $mul.ref(2392, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p77, 0);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} vslice_dummy_var_114 := s2255_create_sys_buffers($p52);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i48, 1);
    call {:si_unique_call 634} {:cexpr "j"} boogie_si_record_i32($i79);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i80 := $sle.i32($i79, 3);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} vslice_dummy_var_115 := s2255_start_readpipe($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i82 := $M.2;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i83 := $sgt.i32($i82, 0);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb25:
    assume $i83 == 1;
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_116 := printk.ref.ref.ref(.str.65, $p86, .str.66);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i48 := $i79;
    goto $bb22_dummy;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i59 == 1;
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i60 := $sgt.i32($i48, 1);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb18;

  $bb19:
    assume $i60 == 1;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 3704)), $mul.ref(2256, 1)), $mul.ref(8, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, 65536);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 3704)), $mul.ref(2256, 1)), $mul.ref(8, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i64);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i46 == 1;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} vslice_dummy_var_113 := printk.ref(.str.64);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i34 := $M.2;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, 0);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 12);
    goto $bb9;

  $bb6:
    assume $i35 == 1;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} vslice_dummy_var_111 := printk.ref.ref(.str.62, $p38);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} vslice_dummy_var_110 := printk.ref.ref.ref(.str.61, $p18, $p0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3882;
}



const s2255_probe_v4l: ref;

axiom s2255_probe_v4l == $sub.ref(0, 373307);

procedure s2255_probe_v4l($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation s2255_probe_v4l($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i91: i32;
  var $i95: i1;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p104: ref;
  var $p105: ref;
  var $i107: i32;
  var $i108: i1;
  var $i10: i32;
  var $i109: i32;
  var $i53: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i9: i32;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: ref;
  var vslice_dummy_var_119: ref;
  var vslice_dummy_var_120: ref;
  var vslice_dummy_var_121: ref;
  var vslice_dummy_var_122: ref;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i2 := $M.22;
    call {:si_unique_call 638} {:cexpr "cur_nr"} boogie_si_record_i32($i2);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15344, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i7 := v4l2_device_register($p5, $p6);
    call {:si_unique_call 640} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb5:
    call $p11, $p12, $i13, $p14, $p15, $p16, $p18, $p20, $p22, $p24, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $p36, $i37, $i38, $p39, $p42, $i43, $i44, $p45, $p54, $p55, $p56, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $i65, $i66, $i67, $p71, $p72, $p74, $p75, $p77, $p78, $p80, $p81, $p83, $p84, $p85, $i86, $i87, $p88, $i89, $i90, $p92, $i93, $i94, $i91, $i95, $i96, $p100, $p101, $p102, $p104, $p105, $i107, $i108, $i10, $i109, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_124 := s2255_probe_v4l_loop_$bb5($p0, $p1, $i2, $p11, $p12, $i13, $p14, $p15, $p16, $p18, $p20, $p22, $p24, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $p36, $i37, $i38, $p39, $p42, $i43, $i44, $p45, $p54, $p55, $p56, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $i65, $i66, $i67, $p71, $p72, $p74, $p75, $p77, $p78, $p80, $p81, $p83, $p84, $p85, $i86, $i87, $p88, $i89, $i90, $p92, $i93, $i94, $i91, $i95, $i96, $p100, $p101, $p102, $p104, $p105, $i107, $i108, $i10, $i109, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_124);
    goto $bb5_last;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(0, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i10);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 3704));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(2104, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} INIT_LIST_HEAD($p15);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} vslice_dummy_var_117 := v4l2_ctrl_handler_init_class($p16, 6, $p1, .str.101);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} vslice_dummy_var_118 := v4l2_ctrl_new_std($p18, s2255_ctrl_ops, 9963776, $sub.i64(0, 127), 127, 1, 0);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vslice_dummy_var_119 := v4l2_ctrl_new_std($p20, s2255_ctrl_ops, 9963777, 0, 255, 1, 92);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_120 := v4l2_ctrl_new_std($p22, s2255_ctrl_ops, 9963778, 0, 255, 1, 128);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_121 := v4l2_ctrl_new_std($p24, s2255_ctrl_ops, 9963779, 0, 255, 1, 0);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $p27 := v4l2_ctrl_new_std($p26, s2255_ctrl_ops, 10291459, 0, 100, 1, 50);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(2088, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p27);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15556, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, 7);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(1848, 1)), $mul.ref(236, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p45 := $p14;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(2624, 1));
    $p55 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(2624, 1)), $mul.ref(0, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 1);
    $p56 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(2624, 1)), $mul.ref(4, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 7);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(2624, 1)), $mul.ref(48, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p14);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(3472, 1));
    $p60 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(2624, 1)), $mul.ref(16, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p59);
    $p61 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(2624, 1)), $mul.ref(56, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 944);
    $p62 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(2624, 1)), $mul.ref(40, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, vb2_vmalloc_memops);
    $p63 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(2624, 1)), $mul.ref(32, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, s2255_video_qops);
    $p64 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(2624, 1)), $mul.ref(60, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 8192);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i65 := vb2_queue_init($p54);
    call {:si_unique_call 656} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i67 := $i65;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(8, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.0;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 658} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p72, template, 1840, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(8, 1)), $mul.ref(1584, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $p54);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(8, 1)), $mul.ref(1576, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, $p75);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15016, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(8, 1)), $mul.ref(1832, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $p78);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(8, 1)), $mul.ref(1560, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, $p81);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(8, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p14);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} video_set_drvdata($p84, $p85);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i86 := $M.22;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, $sub.i32(0, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i87 == 1);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(8, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i2, $i10);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i94 := video_register_device($p92, 0, $i93);
    call {:si_unique_call 663} {:cexpr "ret"} boogie_si_record_i32($i94);
    assume {:verifier.code 0} true;
    $i91 := $i94;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i91, 0);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i96 := $i91;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15008, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} atomic_inc($p100);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(8, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p102 := video_device_node_name($p101);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} vslice_dummy_var_124 := printk.ref.ref.ref(.str.106, $p105, $p102);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i10, 1);
    call {:si_unique_call 668} {:cexpr "i"} boogie_si_record_i32($i107);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i108 := $sle.i32($i107, 3);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i109 := $i91;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i53 := $i109;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_123 := printk.ref.ref(.str.107, .str.108);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15008, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i112 := atomic_read($p111);
    call {:si_unique_call 654} {:cexpr "tmp___0"} boogie_si_record_i32($i112);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15008, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i116 := atomic_read($p115);
    call {:si_unique_call 671} {:cexpr "tmp___1"} boogie_si_record_i32($i116);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 4);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb35:
    assume $i117 == 1;
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} vslice_dummy_var_125 := printk.ref(.str.109);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i113 == 1;
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} v4l2_device_unregister($p114);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i9 := $i53;
    goto $bb3;

  $bb29:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i107;
    goto $bb29_dummy;

  $bb26:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} dev_err.ref.ref($p99, .str.105);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i53 := $i96;
    goto $bb18;

  $bb23:
    assume $i87 == 1;
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(8, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i89 := $M.22;
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i90 := video_register_device($p88, 0, $i89);
    call {:si_unique_call 661} {:cexpr "ret"} boogie_si_record_i32($i90);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i91 := $i90;
    goto $bb25;

  $bb20:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} dev_err.ref.ref.ref.i32($p70, .str.103, .str.104, $i67);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i53 := $i67;
    goto $bb18;

  $bb16:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 3704)), $mul.ref(1848, 1)), $mul.ref(236, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    call {:si_unique_call 649} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p45, $mul.ref(0, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} v4l2_ctrl_handler_free($p49);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} dev_err.ref.ref($p52, .str.102);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i53 := $i48;
    goto $bb18;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15560, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 8791);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i35 == 1);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i38 := $sle.i32($i37, 1);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p12, $mul.ref($i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} vslice_dummy_var_122 := v4l2_ctrl_new_custom($p39, color_filter_ctrl, $0.ref);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb11;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3951;
}



const ldv_del_timer_sync_33: ref;

axiom ldv_del_timer_sync_33 == $sub.ref(0, 374339);

procedure ldv_del_timer_sync_33($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation ldv_del_timer_sync_33($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $i1 := del_timer_sync($p0);
    call {:si_unique_call 674} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} disable_suitable_timer_1($p0);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const v4l2_device_register: ref;

axiom v4l2_device_register == $sub.ref(0, 375371);

procedure v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 1} true;
    call {:si_unique_call 676} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 677} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_ctrl_handler_init_class: ref;

axiom v4l2_ctrl_handler_init_class == $sub.ref(0, 376403);

procedure v4l2_ctrl_handler_init_class($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_init_class($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 678} {:cexpr "v4l2_ctrl_handler_init_class:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 1} true;
    call {:si_unique_call 679} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 680} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const v4l2_ctrl_new_std: ref;

axiom v4l2_ctrl_new_std == $sub.ref(0, 377435);

procedure v4l2_ctrl_new_std($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i64, $i5: i64, $i6: i64) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_new_std($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i64, $i5: i64, $i6: i64) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} {:cexpr "v4l2_ctrl_new_std:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 682} {:cexpr "v4l2_ctrl_new_std:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 683} {:cexpr "v4l2_ctrl_new_std:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 684} {:cexpr "v4l2_ctrl_new_std:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 685} {:cexpr "v4l2_ctrl_new_std:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p7 := external_alloc();
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const v4l2_ctrl_new_custom: ref;

axiom v4l2_ctrl_new_custom == $sub.ref(0, 378467);

procedure v4l2_ctrl_new_custom($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_new_custom($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p3 := external_alloc();
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const vb2_queue_init: ref;

axiom vb2_queue_init == $sub.ref(0, 379499);

procedure vb2_queue_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_queue_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 1} true;
    call {:si_unique_call 688} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 689} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const video_set_drvdata: ref;

axiom video_set_drvdata == $sub.ref(0, 380531);

procedure video_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation video_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(128, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} dev_set_drvdata($p2, $p1);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    return;
}



const video_register_device: ref;

axiom video_register_device == $sub.ref(0, 381563);

procedure video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} {:cexpr "video_register_device:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 692} {:cexpr "video_register_device:arg:nr"} boogie_si_record_i32($i2);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(120, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i7 := __video_register_device($p0, $i1, $i2, 1, $p6);
    call {:si_unique_call 694} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const video_device_node_name: ref;

axiom video_device_node_name == $sub.ref(0, 382595);

procedure video_device_node_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_device_node_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(128, 1));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p2 := dev_name($p1);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 383627);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p9 := kobject_name($p8);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 384659);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __video_register_device: ref;

axiom __video_register_device == $sub.ref(0, 385691);

procedure __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 697} {:cexpr "__video_register_device:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 698} {:cexpr "__video_register_device:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 699} {:cexpr "__video_register_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 700} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 701} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 386723);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    return;
}



const s2255_get_fx2fw: ref;

axiom s2255_get_fx2fw == $sub.ref(0, 387755);

procedure s2255_get_fx2fw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation s2255_get_fx2fw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $p1 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i3 := s2255_vendor_req($p0, 48, 0, 0, $p2, 2, 0);
    call {:si_unique_call 704} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 705} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.23, $p12);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.23, $p15);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32($i17, 8);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i14, $i18);
    call {:si_unique_call 707} {:cexpr "fw"} boogie_si_record_i32($i19);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i20 := $M.2;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i32($i20, 1);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.23, $p25);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.23, $p28);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} vslice_dummy_var_127 := printk.ref.ref.i32.i32(.str.68, $p24, $i27, $i30);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i6 := $M.2;
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 1);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} vslice_dummy_var_126 := printk.ref.ref.i32(.str.67, $p10, $i4);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const s2255_create_sys_buffers: ref;

axiom s2255_create_sys_buffers == $sub.ref(0, 388787);

procedure s2255_create_sys_buffers($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation s2255_create_sys_buffers($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p9: ref;
  var $p13: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i4: i64;
  var $p30: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p40: ref;
  var $p44: ref;
  var $p48: ref;
  var $p52: ref;
  var $p56: ref;
  var $p60: ref;
  var vslice_dummy_var_128: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(0, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, 4);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i64(833536, 833536);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $p9, $p13, $p17, $p18, $i19, $i20, $i21, $i25, $i26, $i4 := s2255_create_sys_buffers_loop_$bb4($p0, $p5, $p9, $p13, $p17, $p18, $i19, $i20, $i21, $i25, $i26, $i4);
    goto $bb4_last;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p5 := ldv_vmalloc_27(833536);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref($i4, 32)), $mul.ref(16, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p5);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref($i4, 32)), $mul.ref(0, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, 833536);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref($i4, 32)), $mul.ref(16, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i21 := $i4;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i4, 1);
    call {:si_unique_call 711} {:cexpr "i"} boogie_si_record_i64($i25);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i25, 3);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, 0);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, 0);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(1, 32)), $mul.ref(8, 1));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, 0);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(1, 32)), $mul.ref(24, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, 0);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(2, 32)), $mul.ref(8, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, 0);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(2, 32)), $mul.ref(24, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, 0);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(3, 32)), $mul.ref(8, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, 0);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(3, 32)), $mul.ref(24, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, 0);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2356, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 0);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2360, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $sub.i32(0, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i25;
    goto $bb10_dummy;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} vslice_dummy_var_128 := printk.ref(.str.69);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(0, 1));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i21);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4196;
}



const s2255_start_readpipe: ref;

axiom s2255_start_readpipe == $sub.ref(0, 389819);

procedure s2255_start_readpipe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation s2255_start_readpipe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i30: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15352, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i7 := __create_pipe($p3, $i6);
    call {:si_unique_call 713} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, $sub.i32(0, 1073741696));
    call {:si_unique_call 714} {:cexpr "pipe"} boogie_si_record_i32($i8);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i9 := $M.2;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 1);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(16, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 1);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(40, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p20 := ldv_usb_alloc_urb_29(0, 208);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(24, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p20);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(24, 1));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(24, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(8, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(4, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p1);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} usb_fill_bulk_urb($p33, $p35, $i8, $p37, $i39, read_pipe_completion, $p40);
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15496, 1)), $mul.ref(24, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i44 := ldv_usb_submit_urb_30($p43, 208);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 720} {:cexpr "retval"} boogie_si_record_i32($i44);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb8:
    assume $i45 == 1;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_130 := printk.ref(.str.73);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i30 := $i44;
    goto $bb6;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15336, 1));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} dev_err.ref.ref($p29, .str.72);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 15576)), $mul.ref(15352, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} vslice_dummy_var_129 := printk.ref.ref.ref.i32(.str.70, $p13, .str.71, $i16);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_alloc_urb_29: ref;

axiom ldv_usb_alloc_urb_29 == $sub.ref(0, 390851);

procedure ldv_usb_alloc_urb_29($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_29($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} {:cexpr "ldv_usb_alloc_urb_29:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 723} {:cexpr "ldv_usb_alloc_urb_29:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} ldv_check_alloc_flags($i1);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $p2 := ldv_undef_ptr();
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const read_pipe_completion: ref;

axiom read_pipe_completion == $sub.ref(0, 391883);

procedure read_pipe_completion($p0: ref);



const ldv_usb_submit_urb_30: ref;

axiom ldv_usb_submit_urb_30 == $sub.ref(0, 392915);

procedure ldv_usb_submit_urb_30($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_30($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} {:cexpr "ldv_usb_submit_urb_30:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} ldv_check_alloc_flags($i1);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $p2 := ldv_undef_ptr();
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const s2255_read_video_callback: ref;

axiom s2255_read_video_callback == $sub.ref(0, 393947);

procedure s2255_read_video_callback($p0: ref, $p1: ref);



const ldv_usb_submit_urb_28: ref;

axiom ldv_usb_submit_urb_28 == $sub.ref(0, 394979);

procedure ldv_usb_submit_urb_28($p0: ref, $i1: i32) returns ($r: i32);



const save_frame: ref;

axiom save_frame == $sub.ref(0, 396011);

procedure save_frame($p0: ref, $p1: ref) returns ($r: i32);



const s2255_got_frame: ref;

axiom s2255_got_frame == $sub.ref(0, 397043);

procedure s2255_got_frame($p0: ref, $i1: i32);



const list_empty: ref;

axiom list_empty == $sub.ref(0, 398075);

procedure list_empty($p0: ref) returns ($r: i32);



const v4l2_get_timestamp: ref;

axiom v4l2_get_timestamp == $sub.ref(0, 399107);

procedure v4l2_get_timestamp($p0: ref);



const s2255_fillbuff: ref;

axiom s2255_fillbuff == $sub.ref(0, 400139);

procedure s2255_fillbuff($p0: ref, $p1: ref, $i2: i32);



const vb2_plane_vaddr: ref;

axiom vb2_plane_vaddr == $sub.ref(0, 401171);

procedure vb2_plane_vaddr($p0: ref, $i1: i32) returns ($r: ref);



const planar422p_to_yuv_packed: ref;

axiom planar422p_to_yuv_packed == $sub.ref(0, 402203);

procedure planar422p_to_yuv_packed($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32);



const ldv_vmalloc_27: ref;

axiom ldv_vmalloc_27 == $sub.ref(0, 403235);

procedure ldv_vmalloc_27($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_vmalloc_27($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} {:cexpr "ldv_vmalloc_27:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} ldv_check_alloc_nonatomic();
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $p1 := ldv_undef_ptr();
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_nonatomic: ref;

axiom ldv_check_alloc_nonatomic == $sub.ref(0, 404267);

procedure ldv_check_alloc_nonatomic();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_nonatomic()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i0 := $M.3;
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} ldv_error();
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const ldv_usb_submit_urb_24: ref;

axiom ldv_usb_submit_urb_24 == $sub.ref(0, 405299);

procedure ldv_usb_submit_urb_24($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_24($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} {:cexpr "ldv_usb_submit_urb_24:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} ldv_check_alloc_flags($i1);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $p2 := ldv_undef_ptr();
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 406331);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 407363);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 408395);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 736} $r := $malloc($i0);
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 409427);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p1 := calloc(1, $i0);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 1} true;
    call {:si_unique_call 739} __VERIFIER_assume($i4);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 410459);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 741} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.24;
    call {:si_unique_call 742} cmdloc_dummy_var_38 := $memset.i8(cmdloc_dummy_var_37, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.24 := cmdloc_dummy_var_38;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const timer_init_1: ref;

axiom timer_init_1 == $sub.ref(0, 411491);

procedure timer_init_1();
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation timer_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 743} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 744} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 745} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 746} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_driver_2: ref;

axiom ldv_usb_driver_2 == $sub.ref(0, 412523);

procedure ldv_usb_driver_2();
  free requires assertsPassed;
  modifies $M.25, $M.0, $CurrAddr;



implementation ldv_usb_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p0 := ldv_init_zalloc(1560);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.25 := $p0;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_file_operations_6: ref;

axiom ldv_initialize_v4l2_file_operations_6 == $sub.ref(0, 413555);

procedure ldv_initialize_v4l2_file_operations_6();
  free requires assertsPassed;
  modifies $M.26;



implementation ldv_initialize_v4l2_file_operations_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 748} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 749} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.26 := $p0;
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_vb2_ops_7: ref;

axiom ldv_initialize_vb2_ops_7 == $sub.ref(0, 414587);

procedure ldv_initialize_vb2_ops_7();
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.0, $CurrAddr;



implementation ldv_initialize_vb2_ops_7()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p0 := ldv_init_zalloc(848);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $M.27 := $p0;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $p2 := ldv_init_zalloc(928);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.28 := $p2;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_1: ref;

axiom choose_timer_1 == $sub.ref(0, 415619);

procedure choose_timer_1();
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, assertsPassed;



implementation choose_timer_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 1} true;
    call {:si_unique_call 752} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 753} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 754} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} ldv_stop();
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i18 := $M.11;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $M.11 := 2;
    call {:si_unique_call 761} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(2);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i20 := $M.11;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p21 := $M.12;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} ldv_timer_1($i20, $p21);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i14 := $M.9;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $M.9 := 2;
    call {:si_unique_call 759} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(2);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i16 := $M.9;
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p17 := $M.10;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} ldv_timer_1($i16, $p17);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i10 := $M.7;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $M.7 := 2;
    call {:si_unique_call 757} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(2);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i12 := $M.7;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p13 := $M.8;
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} ldv_timer_1($i12, $p13);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $M.5 := 2;
    call {:si_unique_call 755} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(2);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i8 := $M.5;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p9 := $M.6;
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} ldv_timer_1($i8, $p9);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const ldv_timer_1: ref;

axiom ldv_timer_1 == $sub.ref(0, 416651);

procedure ldv_timer_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation ldv_timer_1($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} {:cexpr "ldv_timer_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} s2255_timer($i3);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 417683);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_v4l2_ioctl_ops_5: ref;

axiom ldv_initialize_v4l2_ioctl_ops_5 == $sub.ref(0, 418715);

procedure ldv_initialize_v4l2_ioctl_ops_5();
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_ioctl_ops_5()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $p0 := ldv_init_zalloc(32);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $M.30 := $p0;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $p2 := ldv_init_zalloc(208);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $M.31 := $p2;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p4 := ldv_init_zalloc(176);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $M.32 := $p4;
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 771} $p6 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 772} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p6);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $M.33 := $p6;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p8 := ldv_init_zalloc(88);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $M.34 := $p8;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p10 := ldv_init_zalloc(204);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.35 := $p10;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 419747);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.36, $M.37, $M.38, $M.39, $M.5, $M.7, $M.9, $M.11, $M.40, $M.41, $M.42, $M.43, $M.44, $M.0, $M.45, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.46, $M.48, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.27, $M.28, $M.26, $M.15, $M.14, $M.25, $M.6, $M.8, $M.10, $M.12, $M.47, $M.3, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.13, $M.62, $M.63, $M.64, $M.22, $M.1, $M.2, $M.65, $CurrAddr, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $i90: i32;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i64;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i64;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i154: i32;
  var $i155: i64;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i1;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i1;
  var $i168: i1;
  var $i169: i1;
  var $i170: i1;
  var $i171: i1;
  var $i172: i1;
  var $i173: i1;
  var $i174: i1;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $i181: i32;
  var $i182: i1;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i32;
  var $i192: i32;
  var $i193: i1;
  var $p194: ref;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i200: i32;
  var $i201: i1;
  var $i202: i32;
  var $i203: i1;
  var $i204: i1;
  var $i205: i1;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $i219: i32;
  var $i220: i32;
  var $i221: i32;
  var $i222: i1;
  var $i223: i32;
  var $i224: i1;
  var $i225: i32;
  var $i226: i1;
  var $i227: i1;
  var $i228: i1;
  var $i229: i32;
  var $i230: i1;
  var $i231: i32;
  var $i232: i32;
  var $i233: i32;
  var $i234: i1;
  var $i236: i32;
  var $i237: i32;
  var $i238: i32;
  var $i239: i1;
  var $i240: i32;
  var $i241: i1;
  var $i242: i1;
  var $i243: i1;
  var $i244: i32;
  var $i245: i1;
  var $i246: i32;
  var $i247: i1;
  var $i248: i32;
  var $i249: i1;
  var $i250: i32;
  var $i251: i32;
  var $i252: i1;
  var $i253: i32;
  var $i254: i1;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $i258: i1;
  var $i259: i1;
  var $i260: i1;
  var $i261: i1;
  var $i262: i1;
  var $i263: i1;
  var $i264: i1;
  var $i265: i1;
  var $i266: i1;
  var $i267: i1;
  var $i268: i1;
  var $i269: i1;
  var $i270: i1;
  var $i271: i1;
  var $i272: i1;
  var $i273: i1;
  var $i274: i1;
  var $i275: i1;
  var $i276: i1;
  var $i277: i1;
  var $i278: i1;
  var $i279: i1;
  var $i280: i1;
  var $i281: i1;
  var $i282: i1;
  var $i283: i1;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $p291: ref;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $p296: ref;
  var $i298: i32;
  var $i299: i1;
  var $p300: ref;
  var $i301: i64;
  var $i303: i32;
  var $i304: i1;
  var $p305: ref;
  var $i307: i32;
  var $i308: i1;
  var $p309: ref;
  var $p310: ref;
  var $i312: i32;
  var $i313: i1;
  var $p314: ref;
  var $p315: ref;
  var $i317: i32;
  var $i318: i1;
  var $p319: ref;
  var $i320: i32;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $i326: i32;
  var $i327: i1;
  var $p328: ref;
  var $p329: ref;
  var $i331: i32;
  var $i332: i1;
  var $p333: ref;
  var $p334: ref;
  var $i336: i32;
  var $i337: i1;
  var $p338: ref;
  var $i340: i32;
  var $i341: i1;
  var $p342: ref;
  var $p343: ref;
  var $i345: i32;
  var $i346: i1;
  var $p347: ref;
  var $i349: i32;
  var $i350: i1;
  var $p351: ref;
  var $i353: i32;
  var $i354: i1;
  var $p355: ref;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $i361: i32;
  var $i362: i1;
  var $p363: ref;
  var $i365: i32;
  var $i366: i1;
  var $p367: ref;
  var $i369: i32;
  var $i370: i1;
  var $p371: ref;
  var $p372: ref;
  var $i374: i32;
  var $i375: i1;
  var $p376: ref;
  var $i378: i32;
  var $i379: i1;
  var $p380: ref;
  var $p381: ref;
  var $i383: i32;
  var $i384: i1;
  var $p385: ref;
  var $p386: ref;
  var $i388: i32;
  var $i389: i1;
  var $p390: ref;
  var $i391: i32;
  var $i393: i32;
  var $i394: i1;
  var $p395: ref;
  var $i396: i32;
  var vslice_dummy_var_131: ref;
  var vslice_dummy_var_132: ref;
  var vslice_dummy_var_133: ref;
  var vslice_dummy_var_134: ref;
  var vslice_dummy_var_135: ref;
  var vslice_dummy_var_136: ref;
  var vslice_dummy_var_137: ref;
  var vslice_dummy_var_138: ref;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i64;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i64;
  var vslice_dummy_var_146: i64;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;

  $bb0:
    call {:si_unique_call 775} $initialize();
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p8 := ldv_init_zalloc(8);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p10 := ldv_init_zalloc(1);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $p11 := ldv_init_zalloc(16);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $p13 := ldv_init_zalloc(184);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $p15 := ldv_init_zalloc(208);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p17 := ldv_init_zalloc(8);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $p19 := ldv_init_zalloc(208);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p21 := ldv_init_zalloc(4);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p23 := ldv_init_zalloc(4);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p25 := ldv_init_zalloc(4);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $p27 := ldv_init_zalloc(32);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p29 := ldv_init_zalloc(1832);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $p31 := ldv_init_zalloc(20);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $p33 := ldv_init_zalloc(104);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $p35 := ldv_init_zalloc(1);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $p36 := ldv_init_zalloc(1);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p37 := ldv_init_zalloc(1);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p38 := ldv_init_zalloc(1);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $p39 := ldv_init_zalloc(4);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p41 := ldv_init_zalloc(1);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $p42 := ldv_init_zalloc(1);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p43 := ldv_init_zalloc(140);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $p45 := ldv_init_zalloc(1);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p46 := ldv_init_zalloc(1);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $p47 := ldv_init_zalloc(1);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $p48 := ldv_init_zalloc(44);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p50 := ldv_init_zalloc(140);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $p52 := ldv_init_zalloc(1);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $p53 := ldv_init_zalloc(1);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $p54 := ldv_init_zalloc(1);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $p55 := ldv_init_zalloc(1);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $p56 := ldv_init_zalloc(64);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p58 := ldv_init_zalloc(1);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $p59 := ldv_init_zalloc(1);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p60 := ldv_init_zalloc(1);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $p61 := ldv_init_zalloc(1);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $p62 := ldv_init_zalloc(1);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p63 := ldv_init_zalloc(8);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p65 := ldv_init_zalloc(52);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p67 := ldv_init_zalloc(80);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p69 := ldv_init_zalloc(1);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $p70 := ldv_init_zalloc(1);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p71 := ldv_init_zalloc(1);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p72 := ldv_init_zalloc(1);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p73 := ldv_init_zalloc(1);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} ldv_initialize();
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p0);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vslice_dummy_var_131 := ldv_memset($p74, 0, 4);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p1);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} vslice_dummy_var_132 := ldv_memset($p76, 0, 8);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p2);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} vslice_dummy_var_133 := ldv_memset($p78, 0, 8);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p3);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vslice_dummy_var_134 := ldv_memset($p80, 0, 4);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p4);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_135 := ldv_memset($p82, 0, 4);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p5);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} vslice_dummy_var_136 := ldv_memset($p84, 0, 4);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p6);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vslice_dummy_var_137 := ldv_memset($p86, 0, 4);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p7);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} vslice_dummy_var_138 := ldv_memset($p88, 0, 8);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 839} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 840} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 841} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 842} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} timer_init_1();
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 845} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 846} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 847} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 848} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $p112, $i114, $i115, $p116, $i118, $i119, $p120, $i122, $i123, $i124, $i125, $p126, $i127, $i129, $i130, $p131, $i133, $i134, $p135, $i137, $i138, $p139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $p147, $i148, $i149, $i151, $i152, $p153, $i154, $i155, $i157, $i158, $i159, $i160, $i161, $i162, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $p177, $i178, $i179, $p180, $i181, $i182, $p183, $i184, $i185, $p186, $i187, $i188, $p189, $i190, $i192, $i193, $p194, $i196, $i197, $p198, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $p208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $p218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $p286, $i288, $i289, $p290, $p291, $i293, $i294, $p295, $p296, $i298, $i299, $p300, $i301, $i303, $i304, $p305, $i307, $i308, $p309, $p310, $i312, $i313, $p314, $p315, $i317, $i318, $p319, $i320, $i322, $i323, $p324, $i326, $i327, $p328, $p329, $i331, $i332, $p333, $p334, $i336, $i337, $p338, $i340, $i341, $p342, $p343, $i345, $i346, $p347, $i349, $i350, $p351, $i353, $i354, $p355, $i357, $i358, $p359, $i361, $i362, $p363, $i365, $i366, $p367, $i369, $i370, $p371, $p372, $i374, $i375, $p376, $i378, $i379, $p380, $p381, $i383, $i384, $p385, $p386, $i388, $i389, $p390, $i391, $i393, $i394, $p395, $i396, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p9, $p10, $p12, $p14, $p16, $p18, $p20, $p22, $p24, $p26, $p28, $p30, $p32, $p34, $p35, $p36, $p37, $p38, $p40, $p41, $p42, $p44, $p45, $p46, $p47, $p49, $p51, $p52, $p53, $p54, $p55, $p57, $p58, $p59, $p60, $p61, $p62, $p64, $p66, $p68, $p69, $p70, $p71, $p72, $p73, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $p112, $i114, $i115, $p116, $i118, $i119, $p120, $i122, $i123, $i124, $i125, $p126, $i127, $i129, $i130, $p131, $i133, $i134, $p135, $i137, $i138, $p139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $p147, $i148, $i149, $i151, $i152, $p153, $i154, $i155, $i157, $i158, $i159, $i160, $i161, $i162, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $p177, $i178, $i179, $p180, $i181, $i182, $p183, $i184, $i185, $p186, $i187, $i188, $p189, $i190, $i192, $i193, $p194, $i196, $i197, $p198, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $p208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $p218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $p286, $i288, $i289, $p290, $p291, $i293, $i294, $p295, $p296, $i298, $i299, $p300, $i301, $i303, $i304, $p305, $i307, $i308, $p309, $p310, $i312, $i313, $p314, $p315, $i317, $i318, $p319, $i320, $i322, $i323, $p324, $i326, $i327, $p328, $p329, $i331, $i332, $p333, $p334, $i336, $i337, $p338, $i340, $i341, $p342, $p343, $i345, $i346, $p347, $i349, $i350, $p351, $i353, $i354, $p355, $i357, $i358, $p359, $i361, $i362, $p363, $i365, $i366, $p367, $i369, $i370, $p371, $p372, $i374, $i375, $p376, $i378, $i379, $p380, $p381, $i383, $i384, $p385, $p386, $i388, $i389, $p390, $i391, $i393, $i394, $p395, $i396, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i90, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i90, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i90, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i90, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} ldv_stop();
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb74_dummy;

  $bb9:
    assume $i94 == 1;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i255 := $M.44;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i255, 0);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb211:
    assume $i256 == 1;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 1} true;
    call {:si_unique_call 942} $i257 := __VERIFIER_nondet_int();
    call {:si_unique_call 943} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i257);
    call {:si_unique_call 944} {:cexpr "tmp___51"} boogie_si_record_i32($i257);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $i258 := $slt.i32($i257, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    $i259 := $slt.i32($i257, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    $i260 := $slt.i32($i257, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    $i261 := $slt.i32($i257, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    $i262 := $slt.i32($i257, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i257, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_stop();
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb224:
    assume $i263 == 1;
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i393 := $M.44;
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i394 := $eq.i32($i393, 1);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i394 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb340:
    assume $i394 == 1;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p395 := $M.33;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i396 := $load.i32($M.24, $p6);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_176 := vb2_ioctl_streamon($p395, $p70, $i396);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb222:
    assume $i262 == 1;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i388 := $M.44;
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i388, 1);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb337:
    assume $i389 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p390 := $M.33;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i391 := $load.i32($M.24, $p4);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} vslice_dummy_var_175 := vidioc_s_input($p390, $p72, $i391);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 992} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb220:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    $i264 := $slt.i32($i257, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i264 == 1);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i383 := $M.44;
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i383, 1);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb334:
    assume $i384 == 1;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p385 := $M.33;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p386 := $M.35;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} vslice_dummy_var_174 := vidioc_s_parm($p385, $p54, $p386);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 990} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb227:
    assume $i264 == 1;
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i378 := $M.44;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i378, 1);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb331:
    assume $i379 == 1;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p380 := $M.32;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p381 := $M.30;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} vslice_dummy_var_173 := v4l2_ctrl_subscribe_event($p380, $p381);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 988} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb218:
    assume $i260 == 1;
    assume {:verifier.code 0} true;
    $i265 := $slt.i32($i257, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    $i266 := $slt.i32($i257, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i266 == 1);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i374 := $M.44;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i375 := $eq.i32($i374, 1);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb328:
    assume $i375 == 1;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p376 := $M.33;
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} vslice_dummy_var_172 := vidioc_enum_input($p376, $p71, $p68);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 986} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb231:
    assume $i266 == 1;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i369 := $M.44;
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i369, 1);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb325:
    assume $i370 == 1;
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p371 := $M.33;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p372 := $M.35;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} vslice_dummy_var_171 := vidioc_g_parm($p371, $p35, $p372);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 984} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb229:
    assume $i265 == 1;
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i365 := $M.44;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i365, 1);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb322:
    assume $i366 == 1;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p367 := $M.33;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} vslice_dummy_var_170 := vidioc_g_jpegcomp($p367, $p69, $p44);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 982} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb216:
    assume $i259 == 1;
    assume {:verifier.code 0} true;
    $i267 := $slt.i32($i257, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    $i268 := $slt.i32($i257, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    $i269 := $slt.i32($i257, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i269 == 1);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i361 := $M.44;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 1);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb319:
    assume $i362 == 1;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p363 := $M.33;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} vslice_dummy_var_169 := vidioc_g_std($p363, $p62, $p64);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 980} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb237:
    assume $i269 == 1;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i357 := $M.44;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 1);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb316:
    assume $i358 == 1;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p359 := $M.33;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} vslice_dummy_var_168 := vidioc_s_jpegcomp($p359, $p41, $p51);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 978} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb235:
    assume $i268 == 1;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i353 := $M.44;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i353, 1);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb313:
    assume $i354 == 1;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p355 := $M.33;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} vslice_dummy_var_167 := vidioc_enum_frameintervals($p355, $p55, $p66);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 976} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb233:
    assume $i267 == 1;
    assume {:verifier.code 0} true;
    $i270 := $slt.i32($i257, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    $i271 := $slt.i32($i257, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i271 == 1);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i349 := $M.44;
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 1);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb310:
    assume $i350 == 1;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p351 := $M.33;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} vslice_dummy_var_166 := vidioc_querycap($p351, $p47, $p34);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb241:
    assume $i271 == 1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i345 := $M.44;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i346 := $eq.i32($i345, 1);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb307:
    assume $i346 == 1;
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p347 := $M.33;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} vslice_dummy_var_165 := vidioc_enum_framesizes($p347, $p45, $p49);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 972} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb239:
    assume $i270 == 1;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i340 := $M.44;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i340, 1);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb304:
    assume $i341 == 1;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p342 := $M.33;
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p343 := $M.34;
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} vslice_dummy_var_164 := vb2_ioctl_qbuf($p342, $p59, $p343);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 970} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb214:
    assume $i258 == 1;
    assume {:verifier.code 0} true;
    $i272 := $slt.i32($i257, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    $i273 := $slt.i32($i257, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    $i274 := $slt.i32($i257, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    $i275 := $slt.i32($i257, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i275 == 1);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i336 := $M.44;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i337 := $eq.i32($i336, 1);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb301:
    assume $i337 == 1;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p338 := $M.33;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} vslice_dummy_var_163 := vidioc_g_input($p338, $p46, $p40);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 968} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb249:
    assume $i275 == 1;
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i331 := $M.44;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, 1);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb298:
    assume $i332 == 1;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p333 := $M.33;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p334 := $M.31;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} vslice_dummy_var_162 := vidioc_g_fmt_vid_cap($p333, $p53, $p334);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 966} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb247:
    assume $i274 == 1;
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i326 := $M.44;
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i326, 1);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb295:
    assume $i327 == 1;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p328 := $M.33;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p329 := $M.31;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} vslice_dummy_var_161 := vidioc_s_fmt_vid_cap($p328, $p60, $p329);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 964} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb245:
    assume $i273 == 1;
    assume {:verifier.code 0} true;
    $i276 := $slt.i32($i257, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    $i277 := $slt.i32($i257, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i277 == 1);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i322 := $M.44;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i322, 1);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb292:
    assume $i323 == 1;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p324 := $M.33;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} vslice_dummy_var_160 := vidioc_enum_fmt_vid_cap($p324, $p36, $p57);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 962} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb253:
    assume $i277 == 1;
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i317 := $M.44;
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 1);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb289:
    assume $i318 == 1;
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p319 := $M.33;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i320 := $load.i32($M.24, $p5);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} vslice_dummy_var_159 := vb2_ioctl_streamoff($p319, $p42, $i320);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 960} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb251:
    assume $i276 == 1;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i312 := $M.44;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, 1);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb286:
    assume $i313 == 1;
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p314 := $M.33;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p315 := $M.34;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} vslice_dummy_var_158 := vb2_ioctl_dqbuf($p314, $p61, $p315);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 958} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb243:
    assume $i272 == 1;
    assume {:verifier.code 0} true;
    $i278 := $slt.i32($i257, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    $i279 := $slt.i32($i257, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    $i280 := $slt.i32($i257, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i280 == 1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i307 := $M.44;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, 1);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb283:
    assume $i308 == 1;
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p309 := $M.33;
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p310 := $M.34;
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} vslice_dummy_var_157 := vb2_ioctl_querybuf($p309, $p38, $p310);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 956} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb259:
    assume $i280 == 1;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i303 := $M.44;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 1);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb280:
    assume $i304 == 1;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p305 := $M.33;
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} vslice_dummy_var_156 := v4l2_ctrl_log_status($p305, $p52);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 954} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb257:
    assume $i279 == 1;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i298 := $M.44;
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i298, 1);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb277:
    assume $i299 == 1;
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p300 := $M.33;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i301 := $load.i64($M.24, $p7);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} vslice_dummy_var_155 := vidioc_s_std($p300, $p58, $i301);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 952} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb255:
    assume $i278 == 1;
    assume {:verifier.code 0} true;
    $i281 := $slt.i32($i257, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    $i282 := $slt.i32($i257, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i282 == 1);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i293 := $M.44;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 1);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb274:
    assume $i294 == 1;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p295 := $M.33;
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p296 := $M.31;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} vslice_dummy_var_154 := vidioc_try_fmt_vid_cap($p295, $p37, $p296);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 950} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb263:
    assume $i282 == 1;
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i288 := $M.44;
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 1);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb271:
    assume $i289 == 1;
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p290 := $M.32;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p291 := $M.30;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} vslice_dummy_var_153 := v4l2_event_unsubscribe($p290, $p291);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 948} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb261:
    assume $i281 == 1;
    assume {:verifier.code 0} true;
    $i283 := $eq.i32($i257, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    assume !($i283 == 1);
    goto $bb226;

  $bb265:
    assume $i283 == 1;
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i284 := $M.44;
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 1);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb267:
    assume $i285 == 1;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p286 := $M.33;
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} vslice_dummy_var_152 := vb2_ioctl_reqbufs($p286, $p73, $p32);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 946} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb7:
    assume $i93 == 1;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i238 := $M.43;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i239 := $ne.i32($i238, 0);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb181:
    assume $i239 == 1;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 1} true;
    call {:si_unique_call 923} $i240 := __VERIFIER_nondet_int();
    call {:si_unique_call 924} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i240);
    call {:si_unique_call 925} {:cexpr "tmp___50"} boogie_si_record_i32($i240);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $i241 := $slt.i32($i240, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i240, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume !($i242 == 1);
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} ldv_stop();
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb186:
    assume $i242 == 1;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i248 := $M.43;
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 1);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb199:
    assume $i249 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i250 := s2255_driver_init();
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $M.48 := $i250;
    call {:si_unique_call 930} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i250);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i251 := $M.48;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i252 := $ne.i32($i251, 0);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i253 := $M.48;
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 0);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb204:
    assume $i254 == 1;
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 932} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} ldv_initialize_v4l2_ioctl_ops_5();
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ldv_initialize_vb2_ops_7();
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 938} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} ldv_initialize_v4l2_file_operations_6();
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb201:
    assume $i252 == 1;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} ldv_check_final_state();
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb184:
    assume $i241 == 1;
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i240, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume !($i243 == 1);
    goto $bb188;

  $bb189:
    assume $i243 == 1;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i244 := $M.43;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 2);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    assume !($i245 == 1);
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb191:
    assume $i245 == 1;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i246 := $M.42;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !($i247 == 1);
    goto $bb193;

  $bb194:
    assume $i247 == 1;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} s2255_driver_exit();
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 927} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb5:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i90, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i95 == 1);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i223 := $M.41;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i223, 0);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb161:
    assume $i224 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 913} $i225 := __VERIFIER_nondet_int();
    call {:si_unique_call 914} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i225);
    call {:si_unique_call 915} {:cexpr "tmp___49"} boogie_si_record_i32($i225);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i226 := $slt.i32($i225, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i225, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i227 == 1);
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} ldv_stop();
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb166:
    assume $i227 == 1;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i233 := $M.41;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 1);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb175:
    assume $i234 == 1;
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} vslice_dummy_var_151 := ldv_probe_4();
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 920} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i236 := $M.42;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i237 := $add.i32($i236, 1);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.42 := $i237;
    call {:si_unique_call 921} {:cexpr "ref_cnt"} boogie_si_record_i32($i237);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb164:
    assume $i226 == 1;
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i225, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb168;

  $bb169:
    assume $i228 == 1;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i229 := $M.41;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 2);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb171:
    assume $i230 == 1;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} s2255_video_device_release($p30);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i231 := $M.42;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i232 := $sub.i32($i231, 1);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $M.42 := $i232;
    call {:si_unique_call 918} {:cexpr "ref_cnt"} boogie_si_record_i32($i232);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb12:
    assume $i95 == 1;
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i221 := $M.40;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i222 := $ne.i32($i221, 0);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb158:
    assume $i222 == 1;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} choose_timer_1();
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    goto $bb160;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i90, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i90, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i97 == 1);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i200 := $M.39;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb132:
    assume $i201 == 1;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 1} true;
    call {:si_unique_call 901} $i202 := __VERIFIER_nondet_int();
    call {:si_unique_call 902} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i202);
    call {:si_unique_call 903} {:cexpr "tmp___48"} boogie_si_record_i32($i202);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i203 := $slt.i32($i202, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i202, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i204 == 1);
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} ldv_stop();
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb137:
    assume $i204 == 1;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i214 := $M.39;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 2);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb149:
    assume $i215 == 1;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i216 := $M.47;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 0);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !($i217 == 1);
    goto $bb151;

  $bb152:
    assume $i217 == 1;
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p218 := $M.25;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} s2255_disconnect($p218);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i219 := $M.42;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i220 := $sub.i32($i219, 1);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.42 := $i220;
    call {:si_unique_call 910} {:cexpr "ref_cnt"} boogie_si_record_i32($i220);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb135:
    assume $i203 == 1;
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i202, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb139;

  $bb140:
    assume $i205 == 1;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i206 := $M.39;
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 1);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb142:
    assume $i207 == 1;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p208 := $M.25;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i209 := s2255_probe($p208, $p28);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $M.46 := $i209;
    call {:si_unique_call 905} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i209);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i210 := $M.46;
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 0);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb144:
    assume $i211 == 1;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 906} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i212 := $M.42;
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i213 := $add.i32($i212, 1);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $M.42 := $i213;
    call {:si_unique_call 907} {:cexpr "ref_cnt"} boogie_si_record_i32($i213);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb146;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i97 == 1;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i164 := $M.38;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i164, 0);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb87:
    assume $i165 == 1;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 1} true;
    call {:si_unique_call 883} $i166 := __VERIFIER_nondet_int();
    call {:si_unique_call 884} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i166);
    call {:si_unique_call 885} {:cexpr "tmp___47"} boogie_si_record_i32($i166);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i167 := $slt.i32($i166, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    $i168 := $slt.i32($i166, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    $i169 := $slt.i32($i166, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i166, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} ldv_stop();
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb96:
    assume $i170 == 1;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i196 := $M.38;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 1);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb126:
    assume $i197 == 1;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p198 := $M.27;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} vslice_dummy_var_150 := queue_setup($p198, $p20, $p22, $p26, $p24, $p18);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 899} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb94:
    assume $i169 == 1;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i192 := $M.38;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i192, 1);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb123:
    assume $i193 == 1;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p194 := $M.28;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} vslice_dummy_var_149 := buffer_prepare($p194);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 897} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb92:
    assume $i168 == 1;
    assume {:verifier.code 0} true;
    $i171 := $slt.i32($i166, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i171 == 1);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i187 := $M.38;
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 1);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb120:
    assume $i188 == 1;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p189 := $M.27;
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.24, $p3);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} vslice_dummy_var_148 := start_streaming($p189, $i190);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb99:
    assume $i171 == 1;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i184 := $M.38;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 1);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb117:
    assume $i185 == 1;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p186 := $M.27;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} stop_streaming($p186);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb90:
    assume $i167 == 1;
    assume {:verifier.code 0} true;
    $i172 := $slt.i32($i166, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    $i173 := $slt.i32($i166, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i173 == 1);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i181 := $M.38;
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 1);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb114:
    assume $i182 == 1;
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p183 := $M.27;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} vb2_ops_wait_prepare($p183);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb103:
    assume $i173 == 1;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i178 := $M.38;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 1);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb111:
    assume $i179 == 1;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p180 := $M.28;
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} buffer_queue($p180);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb101:
    assume $i172 == 1;
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i166, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i174 == 1);
    goto $bb98;

  $bb105:
    assume $i174 == 1;
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i175 := $M.38;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 1);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb107:
    assume $i176 == 1;
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p177 := $M.27;
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vb2_ops_wait_finish($p177);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb14:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i90, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i98 == 1);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i157 := $M.37;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb75:
    assume $i158 == 1;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 1} true;
    call {:si_unique_call 877} $i159 := __VERIFIER_nondet_int();
    call {:si_unique_call 878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i159);
    call {:si_unique_call 879} {:cexpr "tmp___46"} boogie_si_record_i32($i159);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} ldv_stop();
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb78:
    assume $i160 == 1;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i161 := $M.37;
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 1);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb80:
    assume $i162 == 1;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} vslice_dummy_var_147 := s2255_s_ctrl($p16);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 881} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb18:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i90, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb11;

  $bb20:
    assume $i99 == 1;
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i100 := $M.36;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb22:
    assume $i101 == 1;
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 852} $i102 := __VERIFIER_nondet_int();
    call {:si_unique_call 853} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i102);
    call {:si_unique_call 854} {:cexpr "tmp___45"} boogie_si_record_i32($i102);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i102, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i102, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i102, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i102, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_stop();
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb31:
    assume $i106 == 1;
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i145 := $M.36;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 1);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i151 := $M.36;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 2);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb68:
    assume $i152 == 1;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p153 := $M.26;
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.24, $p0);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i155 := $load.i64($M.24, $p2);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} vslice_dummy_var_146 := video_ioctl2($p153, $i154, $i155);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb65:
    assume $i146 == 1;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p147 := $M.26;
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.24, $p0);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i149 := $load.i64($M.24, $p2);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_145 := video_ioctl2($p147, $i148, $i149);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 873} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb29:
    assume $i105 == 1;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i137 := $M.36;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 1);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb59:
    assume $i138 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p139 := $M.26;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i140 := s2255_open($p139);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.45 := $i140;
    call {:si_unique_call 869} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i140);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i141 := $M.45;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 0);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume $i142 == 1;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 870} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i143 := $M.42;
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i143, 1);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.42 := $i144;
    call {:si_unique_call 871} {:cexpr "ref_cnt"} boogie_si_record_i32($i144);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb27:
    assume $i104 == 1;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i129 := $M.36;
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i133 := $M.36;
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 2);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb56:
    assume $i134 == 1;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p135 := $M.26;
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} vslice_dummy_var_144 := vb2_fop_poll($p135, $p12);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 867} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i130 == 1;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p131 := $M.26;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} vslice_dummy_var_143 := vb2_fop_poll($p131, $p12);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 865} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb25:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i102, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i108 == 1);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i124 := $M.36;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 2);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb50:
    assume $i125 == 1;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p126 := $M.26;
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i127 := $load.i64($M.24, $p1);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} vslice_dummy_var_142 := vb2_fop_read($p126, $p10, $i127, $p9);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 863} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb36:
    assume $i108 == 1;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i118 := $M.36;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 2);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb47:
    assume $i119 == 1;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p120 := $M.26;
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} vslice_dummy_var_141 := vb2_fop_release($p120);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 860} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i122 := $M.42;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i123 := $sub.i32($i122, 1);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $M.42 := $i123;
    call {:si_unique_call 861} {:cexpr "ref_cnt"} boogie_si_record_i32($i123);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb34:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i102, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb33;

  $bb38:
    assume $i109 == 1;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i110 := $M.36;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 1);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i114 := $M.36;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 2);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i115 == 1;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p116 := $M.26;
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} vslice_dummy_var_140 := vb2_fop_mmap($p116, $p14);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 858} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i111 == 1;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p112 := $M.26;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} vslice_dummy_var_139 := vb2_fop_mmap($p112, $p14);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb74_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 849} $i90 := __VERIFIER_nondet_int();
    call {:si_unique_call 850} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i90);
    call {:si_unique_call 851} {:cexpr "tmp___44"} boogie_si_record_i32($i90);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 420779);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    return;
}



const ldv_probe_4: ref;

axiom ldv_probe_4 == $sub.ref(0, 421811);

procedure ldv_probe_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 997} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 998} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const s2255_driver_exit: ref;

axiom s2255_driver_exit == $sub.ref(0, 422843);

procedure s2255_driver_exit();
  free requires assertsPassed;
  modifies $M.39;



implementation s2255_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} ldv_usb_deregister_35(s2255_driver);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    return;
}



const s2255_driver_init: ref;

axiom s2255_driver_init == $sub.ref(0, 423875);

procedure s2255_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.47, $M.25, $M.0, $CurrAddr;



implementation s2255_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i0 := ldv_usb_register_driver_34(s2255_driver, __this_module, .str.42);
    call {:si_unique_call 1001} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 424907);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_register_driver_34: ref;

axiom ldv_usb_register_driver_34 == $sub.ref(0, 425939);

procedure ldv_usb_register_driver_34($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.47, $M.25, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_34($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1003} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $M.47 := 0;
    call {:si_unique_call 1005} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} ldv_usb_driver_2();
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 426971);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1007} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1008} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_35: ref;

axiom ldv_usb_deregister_35 == $sub.ref(0, 428003);

procedure ldv_usb_deregister_35($p0: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation ldv_usb_deregister_35($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} usb_deregister($p0);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 429035);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 430067);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1011} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 1} true;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 431099);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 432131);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 433163);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 434195);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 435227);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 436259);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 437291);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 438323);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 439355);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 440387);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 441419);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 442451);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 443483);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1012} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1013} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1014} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1015} __VERIFIER_assume($i4);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 444515);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 445547);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 446579);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 447611);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1016} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1017} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1018} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1019} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1020} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1021} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1022} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1023} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1024} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1025} __VERIFIER_assume($i7);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1026} __VERIFIER_assume($i11);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 448643);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 449675);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1027} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1028} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1029} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1030} __VERIFIER_assume($i4);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 450707);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 451739);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 452771);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 453803);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 454835);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1031} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1032} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1033} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1034} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1035} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1036} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1037} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1038} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1039} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1040} __VERIFIER_assume($i7);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1041} __VERIFIER_assume($i11);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 455867);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 456899);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 457931);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 458963);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 459995);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 461027);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 462059);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 463091);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 464123);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1042} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1043} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1044} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 465155);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1045} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1046} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1047} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 466187);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1048} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1049} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 467219);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 468251);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1050} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1051} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 469283);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 470315);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 471347);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1052} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1053} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1054} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1055} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $p6 := malloc($i5);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 1057} cmdloc_dummy_var_40 := $memset.i8(cmdloc_dummy_var_39, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 472379);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 473411);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.25, $M.26, $M.6, $M.8, $M.10, $M.12, $M.27, $M.28, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.3, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.0, $M.13, $M.62, $M.63, $M.64, $M.22, $M.1, $M.2, $M.65;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1058} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.5 := 0;
    call {:si_unique_call 1059} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 1060} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    $M.9 := 0;
    call {:si_unique_call 1061} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    $M.11 := 0;
    call {:si_unique_call 1062} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    $M.25 := $0.ref;
    $M.26 := $0.ref;
    $M.6 := $0.ref;
    $M.8 := $0.ref;
    $M.10 := $0.ref;
    $M.12 := $0.ref;
    $M.27 := $0.ref;
    $M.28 := $0.ref;
    $M.30 := $0.ref;
    $M.31 := $0.ref;
    $M.32 := $0.ref;
    $M.33 := $0.ref;
    $M.34 := $0.ref;
    $M.35 := $0.ref;
    $M.36 := 0;
    call {:si_unique_call 1063} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 1064} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1065} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1067} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1068} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1069} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1070} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1071} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1072} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1073} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1074} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1075} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 1076} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.49 := $store.i16($M.49, __mod_usb__s2255_table_device_table, 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.54 := $store.i8($M.54, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.61 := $store.i64($M.61, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.54 := $store.i8($M.54, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.61 := $store.i64($M.61, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.49 := $store.i16($M.49, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.51 := $store.i16($M.51, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.53 := $store.i16($M.53, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.54 := $store.i8($M.54, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.61 := $store.i64($M.61, $add.ref($add.ref($add.ref(__mod_usb__s2255_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, pal_sizes, 704);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pal_sizes, $mul.ref(0, 24)), $mul.ref(0, 8)), $mul.ref(4, 1)), 576);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pal_sizes, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(0, 1)), 704);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pal_sizes, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(4, 1)), 288);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pal_sizes, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(0, 1)), 352);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(pal_sizes, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(4, 1)), 288);
    $M.0 := $store.i32($M.0, ntsc_sizes, 640);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ntsc_sizes, $mul.ref(0, 24)), $mul.ref(0, 8)), $mul.ref(4, 1)), 480);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ntsc_sizes, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(0, 1)), 640);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ntsc_sizes, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(4, 1)), 240);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ntsc_sizes, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(0, 1)), 320);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ntsc_sizes, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(4, 1)), 240);
    $M.13 := 1;
    call {:si_unique_call 1077} {:cexpr "jpeg_enable"} boogie_si_record_i32(1);
    $M.0 := $store.i16($M.0, s2255_table, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(2, 1)), 6467);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 8789);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(2, 1)), 6467);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 8791);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s2255_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.62 := $store.ref($M.62, s2255_driver, .str.121);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), s2255_probe);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), s2255_disconnect);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), s2255_table);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref(s2255_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 0);
    $M.0 := $store.ref($M.0, s2255_ioctl_ops, vidioc_querycap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(8, 1)), vidioc_enum_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(56, 1)), vidioc_g_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(144, 1)), vidioc_s_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(232, 1)), vidioc_try_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(320, 1)), vb2_ioctl_reqbufs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(328, 1)), vb2_ioctl_querybuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(336, 1)), vb2_ioctl_qbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(352, 1)), vb2_ioctl_dqbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(400, 1)), vb2_ioctl_streamon);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(408, 1)), vb2_ioctl_streamoff);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(416, 1)), vidioc_g_std);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(424, 1)), vidioc_s_std);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(440, 1)), vidioc_enum_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(448, 1)), vidioc_g_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(456, 1)), vidioc_s_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(560, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(568, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(576, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(616, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(624, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(632, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(640, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(648, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(656, 1)), vidioc_g_jpegcomp);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(664, 1)), vidioc_s_jpegcomp);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(672, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(680, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(688, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(696, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(704, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(712, 1)), vidioc_g_parm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(720, 1)), vidioc_s_parm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(728, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(744, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(752, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(760, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(768, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(776, 1)), v4l2_ctrl_log_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(784, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(792, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(800, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(808, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(816, 1)), vidioc_enum_framesizes);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(824, 1)), vidioc_enum_frameintervals);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(832, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(840, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(848, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(856, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(864, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(872, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(880, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(888, 1)), v4l2_ctrl_subscribe_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(896, 1)), v4l2_event_unsubscribe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_ioctl_ops, $mul.ref(0, 912)), $mul.ref(904, 1)), $0.ref);
    $M.0 := $store.ref($M.0, s2255_fops_v4l, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 80)), $mul.ref(8, 1)), vb2_fop_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 80)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 80)), $mul.ref(24, 1)), vb2_fop_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 80)), $mul.ref(32, 1)), video_ioctl2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 80)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 80)), $mul.ref(56, 1)), vb2_fop_mmap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 80)), $mul.ref(64, 1)), s2255_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_fops_v4l, $mul.ref(0, 80)), $mul.ref(72, 1)), vb2_fop_release);
    $M.0 := $store.ref($M.0, template, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(120, 1)), s2255_fops_v4l);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(528, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(532, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(537, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(548, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(584, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(520, 1)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1144, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1152, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1160, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1168, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1176, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1192, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1224, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1248, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1256, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1260, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1336, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1336, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1352, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1352, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1408, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1416, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(128, 1)), $mul.ref(1417, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1560, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1568, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1576, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1592, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(5, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1600, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1632, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1636, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1640, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1644, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1648, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1656, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1736, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1736, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1752, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1760, 1)), 16777215);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1768, 1)), s2255_video_device_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1776, 1)), s2255_ioctl_ops);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1784, 1)), $mul.ref(0, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1784, 1)), $mul.ref(1, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1784, 1)), $mul.ref(2, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1808, 1)), $mul.ref(0, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1808, 1)), $mul.ref(1, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1808, 1)), $mul.ref(2, 8)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(template, $mul.ref(0, 1840)), $mul.ref(1832, 1)), $0.ref);
    $M.0 := $store.ref($M.0, s2255_video_qops, queue_setup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_video_qops, $mul.ref(0, 80)), $mul.ref(8, 1)), vb2_ops_wait_prepare);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_video_qops, $mul.ref(0, 80)), $mul.ref(16, 1)), vb2_ops_wait_finish);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_video_qops, $mul.ref(0, 80)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_video_qops, $mul.ref(0, 80)), $mul.ref(32, 1)), buffer_prepare);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_video_qops, $mul.ref(0, 80)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_video_qops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_video_qops, $mul.ref(0, 80)), $mul.ref(56, 1)), start_streaming);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_video_qops, $mul.ref(0, 80)), $mul.ref(64, 1)), stop_streaming);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s2255_video_qops, $mul.ref(0, 80)), $mul.ref(72, 1)), buffer_queue);
    $M.63 := $store.ref($M.63, color_filter_ctrl, s2255_ctrl_ops);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(8, 1)), $0.ref);
    $M.63 := $store.i32($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(16, 1)), 9967920);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(24, 1)), .str.110);
    $M.63 := $store.i32($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(32, 1)), 2);
    $M.63 := $store.i64($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(40, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(48, 1)), 1);
    $M.63 := $store.i64($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(56, 1)), 1);
    $M.63 := $store.i64($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(64, 1)), 1);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(72, 1)), $mul.ref(0, 4)), 0);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(72, 1)), $mul.ref(1, 4)), 0);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(72, 1)), $mul.ref(2, 4)), 0);
    $M.63 := $store.i32($M.63, $add.ref($add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(72, 1)), $mul.ref(3, 4)), 0);
    $M.63 := $store.i32($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(88, 1)), 0);
    $M.63 := $store.i32($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(92, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(96, 1)), 0);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(104, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(112, 1)), $0.ref);
    $M.63 := $store.i8($M.63, $add.ref($add.ref(color_filter_ctrl, $mul.ref(0, 128)), $mul.ref(120, 1)), 0);
    $M.64 := $store.ref($M.64, s2255_ctrl_ops, $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(s2255_ctrl_ops, $mul.ref(0, 24)), $mul.ref(8, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(s2255_ctrl_ops, $mul.ref(0, 24)), $mul.ref(16, 1)), s2255_s_ctrl);
    $M.22 := $sub.i32(0, 1);
    call {:si_unique_call 1078} {:cexpr "video_nr"} boogie_si_record_i32($sub.i32(0, 1));
    $M.1 := $store.i64($M.1, G_chnmap, 3);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref(1, 8)), 2);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref(2, 8)), 1);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(G_chnmap, $mul.ref(0, 32)), $mul.ref(3, 8)), 0);
    $M.0 := $store.ref($M.0, formats, .str.13);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(0, 16)), $mul.ref(8, 1)), 1448695129);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(0, 16)), $mul.ref(12, 1)), 16);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(1, 16)), $mul.ref(0, 1)), .str.14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(1, 16)), $mul.ref(8, 1)), 1498831189);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(1, 16)), $mul.ref(12, 1)), 16);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(2, 16)), $mul.ref(0, 1)), .str.15);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(2, 16)), $mul.ref(8, 1)), 1345466932);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(2, 16)), $mul.ref(12, 1)), 16);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(3, 16)), $mul.ref(0, 1)), .str.16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(3, 16)), $mul.ref(8, 1)), 1497715271);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(3, 16)), $mul.ref(12, 1)), 8);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(4, 16)), $mul.ref(0, 1)), .str.17);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(4, 16)), $mul.ref(8, 1)), 1195724874);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(4, 16)), $mul.ref(12, 1)), 24);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(5, 16)), $mul.ref(0, 1)), .str.18);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(5, 16)), $mul.ref(8, 1)), 1196444237);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(formats, $mul.ref(0, 96)), $mul.ref(5, 16)), $mul.ref(12, 1)), 24);
    $M.2 := 0;
    call {:si_unique_call 1079} {:cexpr "debug"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.13, 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(1, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(3, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(5, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(10, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(13, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(15, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(16, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(17, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(18, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.14, 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(1, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(3, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(5, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(10, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(13, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(15, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(16, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(17, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(18, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(1, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(3, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(5, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(13, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(15, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(16, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(17, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(18, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(19, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(20, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(21, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.16, 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(5, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(6, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(7, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(8, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.17, 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 4)), $mul.ref(1, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 4)), $mul.ref(2, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.18, 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 5)), $mul.ref(1, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 5)), $mul.ref(2, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 5)), $mul.ref(3, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.20, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.29, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 13)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 13)), $mul.ref(2, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 13)), $mul.ref(3, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 13)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 13)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 13)), $mul.ref(7, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 13)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 13)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 13)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.33, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(13, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.36, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(2, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(3, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.120, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(14, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(24, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.120, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.118, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 14)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 14)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 14)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 14)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 14)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 14)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 14)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 14)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 14)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 14)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 14)), $mul.ref(12, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.113, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(13, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(18, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.115, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.2, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 11)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 11)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 11)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 11)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 11)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 11)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 11)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 11)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.131, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(22, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(24, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(25, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.145, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 14)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 14)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 14)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 14)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 14)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 14)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 14)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 14)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.136, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 14)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 14)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 14)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 14)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 14)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 14)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 14)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 14)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.136, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.133, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(9, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.133, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.134, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(9, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.138, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.138, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.139, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 8)), $mul.ref(1, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 8)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 8)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 8)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 8)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.141, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.141, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.126, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 13)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 13)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 13)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 13)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 13)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 13)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 13)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 13)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 13)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 13)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.123, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(9, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(15, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.123, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.121, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 6)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 6)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 6)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 6)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.65 := $store.i8($M.65, .str.129, 117);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.65 := $store.i8($M.65, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.66, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.71, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.76, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.97, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(1, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(2, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    call {:si_unique_call 1080} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 474443);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 475475);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.25, $M.26, $M.6, $M.8, $M.10, $M.12, $M.27, $M.28, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.3, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.0, $M.13, $M.62, $M.63, $M.64, $M.22, $M.1, $M.2, $M.65, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1081} __SMACK_static_init();
    call {:si_unique_call 1082} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.24, $M.36, $M.37, $M.38, $M.39, $M.5, $M.7, $M.9, $M.11, $M.40, $M.41, $M.42, $M.43, $M.44, $M.0, $M.45, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.46, $M.48, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.27, $M.28, $M.26, $M.15, $M.14, $M.25, $M.6, $M.8, $M.10, $M.12, $M.47, $M.3, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.13, $M.62, $M.63, $M.64, $M.22, $M.1, $M.2, $M.65, $CurrAddr;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation s2255_set_mode_loop_$bb30(in_$p0: ref, in_$p2: ref, in_$i93: i64, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$i99: i8, in_$i100: i1, in_$i101: i1, in_$i102: i64, in_$i103: i1, in_$i105: i1, in_$i104: i1, in_$i106: i32, in_$i107: i1, in_$i108: i64) returns (out_$i93: i64, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$i99: i8, out_$i100: i1, out_$i101: i1, out_$i102: i64, out_$i103: i1, out_$i105: i1, out_$i104: i1, out_$i106: i32, out_$i107: i1, out_$i108: i64)
{

  entry:
    out_$i93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i104, out_$i106, out_$i107, out_$i108 := in_$i93, in_$p94, in_$i95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i105, in_$i104, in_$i106, in_$i107, in_$i108;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_213;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i108;
    goto corral_source_split_242_dummy;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} out_$i108 := schedule_timeout(out_$i102);
    call {:si_unique_call 29} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i108);
    goto corral_source_split_242;

  $bb41:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_232;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i1.i32(out_$i104);
    goto corral_source_split_231;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_230;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i105;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    assume out_$i103 == 1;
    goto $bb38;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_$i104 := 1;
    assume true;
    goto $bb37, $bb39;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i8.i1(out_$i99);
    goto corral_source_split_228;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_227;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i102 := out_$i93;
    goto $bb36;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$i102 := 1;
    goto $bb36;

  $bb34:
    assume out_$i101 == 1;
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i64(out_$i93, 0);
    goto corral_source_split_223;

  $bb31:
    assume out_$i100 == 1;
    goto corral_source_split_222;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$i100 := $trunc.i8.i1(out_$i99);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i1.i8(out_$i98);
    call {:si_unique_call 26} {:cexpr "__cond"} boogie_si_record_i8(out_$i99);
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i32($M.0, out_$p96);
    goto corral_source_split_217;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3704)), $mul.ref(2496, 1));
    goto corral_source_split_216;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} out_$i95 := prepare_to_wait_event(out_$p94, in_$p2, 2);
    call {:si_unique_call 25} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i95);
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3704)), $mul.ref(2408, 1));
    goto corral_source_split_214;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i100 == 1);
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1);
    goto $bb33;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i64(out_$i102, 0);
    goto corral_source_split_235;

  $bb39:
    assume !(out_$i103 == 1);
    goto corral_source_split_234;

  corral_source_split_242_dummy:
    call {:si_unique_call 1} out_$i93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i104, out_$i106, out_$i107, out_$i108 := s2255_set_mode_loop_$bb30(in_$p0, in_$p2, out_$i93, out_$p94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i104, out_$i106, out_$i107, out_$i108);
    return;

  exit:
    return;
}



procedure s2255_set_mode_loop_$bb30(in_$p0: ref, in_$p2: ref, in_$i93: i64, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$i99: i8, in_$i100: i1, in_$i101: i1, in_$i102: i64, in_$i103: i1, in_$i105: i1, in_$i104: i1, in_$i106: i32, in_$i107: i1, in_$i108: i64) returns (out_$i93: i64, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$i99: i8, out_$i100: i1, out_$i101: i1, out_$i102: i64, out_$i103: i1, out_$i105: i1, out_$i104: i1, out_$i106: i32, out_$i107: i1, out_$i108: i64);



implementation stop_streaming_loop_$bb4(in_$p2: ref, in_$i17: i64, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p32: ref, in_$i33: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p19: ref, in_$p20: ref, in_vslice_dummy_var_50: i32) returns (out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p32: ref, out_$i33: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p19: ref, out_$p20: ref, out_vslice_dummy_var_50: i32)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p32, out_$i33, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p19, out_$p20, out_vslice_dummy_var_50 := in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p26, in_$p28, in_$p29, in_$p32, in_$i33, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p19, in_$p20, in_vslice_dummy_var_50;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_686;

  $bb9:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$p19, out_$p20 := out_$p39, out_$p19;
    goto $bb9_dummy;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, in_$i17);
    goto corral_source_split_710;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_709;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p19, $mul.ref(0, 944)), $mul.ref(928, 1));
    goto corral_source_split_708;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p38, $mul.ref($sub.ref(0, 928), 944));
    goto corral_source_split_707;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_706;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_705;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 944)), $mul.ref(928, 1)), $mul.ref(0, 1));
    goto corral_source_split_704;

  $bb7:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} out_vslice_dummy_var_50 := printk.ref.ref.ref.i32(.str.30, out_$p29, out_$p20, out_$i33);
    goto corral_source_split_702;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_701;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 944)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_700;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_699;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_698;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_697;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p2, $mul.ref(0, 3704)), $mul.ref(0, 1));
    goto corral_source_split_696;

  $bb6:
    assume out_$i24 == 1;
    goto corral_source_split_695;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$i24 := $sgt.i32(out_$i23, 1);
    goto corral_source_split_693;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    out_$i23 := $M.2;
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} vb2_buffer_done(out_$p22, 6);
    goto corral_source_split_691;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p20, $mul.ref(0, 944)), $mul.ref(0, 1));
    goto corral_source_split_690;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} list_del(out_$p21);
    goto corral_source_split_689;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 944)), $mul.ref(928, 1));
    goto corral_source_split_688;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p32, out_$i33, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p19, out_$p20, out_vslice_dummy_var_50 := stop_streaming_loop_$bb4(in_$p2, in_$i17, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p32, out_$i33, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p19, out_$p20, out_vslice_dummy_var_50);
    return;

  exit:
    return;
}



procedure stop_streaming_loop_$bb4(in_$p2: ref, in_$i17: i64, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p32: ref, in_$i33: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p19: ref, in_$p20: ref, in_vslice_dummy_var_50: i32) returns (out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p32: ref, out_$i33: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p19: ref, out_$p20: ref, out_vslice_dummy_var_50: i32);



implementation {:SIextraRecBound 4} s2255_board_shutdown_loop_$bb11(in_$p0: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i22: i32, in_$i23: i1, in_$i16: i32, in_vslice_dummy_var_60: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i22: i32, out_$i23: i1, out_$i16: i32, out_vslice_dummy_var_60: i32)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$p20, out_$i22, out_$i23, out_$i16, out_vslice_dummy_var_60 := in_$p17, in_$p18, in_$i19, in_$p20, in_$i22, in_$i23, in_$i16, in_vslice_dummy_var_60;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1070;

  $bb13:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i22;
    goto $bb13_dummy;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    out_$i23 := $ule.i32(out_$i22, 3);
    goto corral_source_split_1078;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i16, 1);
    call {:si_unique_call 192} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} out_vslice_dummy_var_60 := s2255_release_sys_buffers(out_$p20);
    goto corral_source_split_1076;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p18, $mul.ref(out_$i19, 3704));
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i32.i64(out_$i16);
    goto corral_source_split_1074;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_1073;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 15576)), $mul.ref(0, 1));
    goto corral_source_split_1072;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$p20, out_$i22, out_$i23, out_$i16, out_vslice_dummy_var_60 := s2255_board_shutdown_loop_$bb11(in_$p0, out_$p17, out_$p18, out_$i19, out_$p20, out_$i22, out_$i23, out_$i16, out_vslice_dummy_var_60);
    return;

  exit:
    return;
}



procedure s2255_board_shutdown_loop_$bb11(in_$p0: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i22: i32, in_$i23: i1, in_$i16: i32, in_vslice_dummy_var_60: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i22: i32, out_$i23: i1, out_$i16: i32, out_vslice_dummy_var_60: i32);
  modifies $M.0;



implementation {:SIextraRecBound 4} s2255_release_sys_buffers_loop_$bb1(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i1: i64) returns (out_$p5: ref, out_$p6: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i1: i64)
{

  entry:
    out_$p5, out_$p6, out_$p10, out_$i11, out_$i12, out_$i1 := in_$p5, in_$p6, in_$p10, in_$i11, in_$i12, in_$i1;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1269;

  $bb3:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i1 := out_$i11;
    goto $bb3_dummy;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    out_$i12 := $ule.i64(out_$i11, 3);
    goto corral_source_split_1277;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i64(out_$i1, 1);
    call {:si_unique_call 242} {:cexpr "i"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_1276;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p10, $0.ref);
    goto corral_source_split_1275;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(out_$i1, 32)), $mul.ref(16, 1));
    goto corral_source_split_1274;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} vfree(out_$p6);
    goto corral_source_split_1273;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_1272;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(out_$i1, 32)), $mul.ref(16, 1));
    goto corral_source_split_1271;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$p10, out_$i11, out_$i12, out_$i1 := s2255_release_sys_buffers_loop_$bb1(in_$p0, out_$p5, out_$p6, out_$p10, out_$i11, out_$i12, out_$i1);
    return;

  exit:
    return;
}



procedure s2255_release_sys_buffers_loop_$bb1(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i1: i64) returns (out_$p5: ref, out_$p6: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i1: i64);
  modifies $M.0;



implementation s2255_open_loop_$bb40(in_$p1: ref, in_$p6: ref, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i65: i32, in_$i72: i1, in_$i73: i8, in_$i74: i1, in_$i75: i1, in_$i76: i64, in_$i77: i1, in_$i79: i1, in_$i78: i1, in_$i80: i32, in_$i81: i1, in_$i82: i64) returns (out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i65: i32, out_$i72: i1, out_$i73: i8, out_$i74: i1, out_$i75: i1, out_$i76: i64, out_$i77: i1, out_$i79: i1, out_$i78: i1, out_$i80: i32, out_$i81: i1, out_$i82: i64)
{

  entry:
    out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i65, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i78, out_$i80, out_$i81, out_$i82 := in_$i55, in_$p56, in_$p57, in_$p58, in_$i59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i65, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i79, in_$i78, in_$i80, in_$i81, in_$i82;
    goto $bb40, exit;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i82;
    goto corral_source_split_1433_dummy;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} out_$i82 := schedule_timeout(out_$i76);
    call {:si_unique_call 290} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i82);
    goto corral_source_split_1433;

  $bb57:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i80, 0);
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i1.i32(out_$i78);
    goto corral_source_split_1420;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_1419;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i79;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    assume out_$i77 == 1;
    goto $bb54;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$i78 := 1;
    assume true;
    goto $bb53, $bb55;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    out_$i77 := $trunc.i8.i1(out_$i73);
    goto corral_source_split_1417;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_1416;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i55;
    goto $bb52;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    out_$i76 := 1;
    goto $bb52;

  $bb50:
    assume out_$i75 == 1;
    goto corral_source_split_1414;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i64(out_$i55, 0);
    goto corral_source_split_1412;

  $bb47:
    assume out_$i74 == 1;
    goto corral_source_split_1411;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$i74 := $trunc.i8.i1(out_$i73);
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.i1.i8(out_$i72);
    call {:si_unique_call 287} {:cexpr "__cond"} boogie_si_record_i8(out_$i73);
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i65, 0);
    goto corral_source_split_1405;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_1404;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i65 := out_$i71;
    goto $bb43;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    out_$i65 := 1;
    goto $bb43;

  $bb41:
    assume out_$i64 == 1;
    goto corral_source_split_1395;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 2);
    goto corral_source_split_1393;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} out_$i63 := atomic_read(out_$p62);
    call {:si_unique_call 284} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_1392;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p61, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_1390;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1389;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} out_$i59 := prepare_to_wait_event(out_$p58, in_$p1, 2);
    call {:si_unique_call 282} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_1388;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1387;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1385;

  $bb45:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := 0;
    goto $bb46;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    out_$i71 := 1;
    goto $bb46;

  $bb44:
    assume out_$i70 == 1;
    goto corral_source_split_1409;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 4);
    goto corral_source_split_1402;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} out_$i69 := atomic_read(out_$p68);
    call {:si_unique_call 286} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p67, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1400;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_1399;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1398;

  $bb42:
    assume !(out_$i64 == 1);
    goto corral_source_split_1397;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb49;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb49;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i64(out_$i76, 0);
    goto corral_source_split_1424;

  $bb55:
    assume !(out_$i77 == 1);
    goto corral_source_split_1423;

  corral_source_split_1433_dummy:
    call {:si_unique_call 1} out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i65, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i78, out_$i80, out_$i81, out_$i82 := s2255_open_loop_$bb40(in_$p1, in_$p6, out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i65, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i78, out_$i80, out_$i81, out_$i82);
    return;

  exit:
    return;
}



procedure s2255_open_loop_$bb40(in_$p1: ref, in_$p6: ref, in_$i55: i64, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i65: i32, in_$i72: i1, in_$i73: i8, in_$i74: i1, in_$i75: i1, in_$i76: i64, in_$i77: i1, in_$i79: i1, in_$i78: i1, in_$i80: i32, in_$i81: i1, in_$i82: i64) returns (out_$i55: i64, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i65: i32, out_$i72: i1, out_$i73: i8, out_$i74: i1, out_$i75: i1, out_$i76: i64, out_$i77: i1, out_$i79: i1, out_$i78: i1, out_$i80: i32, out_$i81: i1, out_$i82: i64);



implementation s2255_open_loop_$bb79(in_$p2: ref, in_$p6: ref, in_$i118: i64, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i64, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i128: i32, in_$i135: i1, in_$i136: i8, in_$i137: i1, in_$i138: i1, in_$i139: i64, in_$i140: i1, in_$i142: i1, in_$i141: i1, in_$i143: i32, in_$i144: i1, in_$i145: i64) returns (out_$i118: i64, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i64, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i128: i32, out_$i135: i1, out_$i136: i8, out_$i137: i1, out_$i138: i1, out_$i139: i64, out_$i140: i1, out_$i142: i1, out_$i141: i1, out_$i143: i32, out_$i144: i1, out_$i145: i64)
{

  entry:
    out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$p129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i128, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i142, out_$i141, out_$i143, out_$i144, out_$i145 := in_$i118, in_$p119, in_$p120, in_$p121, in_$i122, in_$p123, in_$p124, in_$p125, in_$i126, in_$i127, in_$p129, in_$p130, in_$p131, in_$i132, in_$i133, in_$i134, in_$i128, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i142, in_$i141, in_$i143, in_$i144, in_$i145;
    goto $bb79, exit;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_1478;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i145;
    goto corral_source_split_1527_dummy;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} out_$i145 := schedule_timeout(out_$i139);
    call {:si_unique_call 308} {:cexpr "__ret___2"} boogie_si_record_i64(out_$i145);
    goto corral_source_split_1527;

  $bb96:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.i32(out_$i143, 0);
    goto corral_source_split_1515;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i1.i32(out_$i141);
    goto corral_source_split_1514;

  $bb93:
    assume {:verifier.code 0} true;
    goto corral_source_split_1513;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    out_$i141 := out_$i142;
    goto $bb93;

  $bb92:
    assume {:verifier.code 0} true;
    assume out_$i140 == 1;
    goto $bb93;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    out_$i141 := 1;
    assume true;
    goto $bb92, $bb94;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    out_$i140 := $trunc.i8.i1(out_$i136);
    goto corral_source_split_1511;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_1510;

  $bb88:
    assume {:verifier.code 0} true;
    out_$i139 := out_$i118;
    goto $bb91;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    out_$i139 := 1;
    goto $bb91;

  $bb89:
    assume out_$i138 == 1;
    goto corral_source_split_1508;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i64(out_$i118, 0);
    goto corral_source_split_1506;

  $bb86:
    assume out_$i137 == 1;
    goto corral_source_split_1505;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    out_$i137 := $trunc.i8.i1(out_$i136);
    goto corral_source_split_1501;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    out_$i136 := $zext.i1.i8(out_$i135);
    call {:si_unique_call 305} {:cexpr "__cond___1"} boogie_si_record_i8(out_$i136);
    goto corral_source_split_1500;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i32(out_$i128, 0);
    goto corral_source_split_1499;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_1498;

  $bb85:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i128 := out_$i134;
    goto $bb82;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    out_$i128 := 1;
    goto $bb82;

  $bb80:
    assume out_$i127 == 1;
    goto corral_source_split_1489;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 2);
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} out_$i126 := atomic_read(out_$p125);
    call {:si_unique_call 302} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_1486;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(out_$p124, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.0, out_$p123);
    goto corral_source_split_1484;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1483;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} out_$i122 := prepare_to_wait_event(out_$p121, in_$p2, 2);
    call {:si_unique_call 300} {:cexpr "tmp___11"} boogie_si_record_i64(out_$i122);
    goto corral_source_split_1482;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(out_$p120, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.0, out_$p119);
    goto corral_source_split_1480;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1479;

  $bb84:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    out_$i134 := 0;
    goto $bb85;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    out_$i134 := 1;
    goto $bb85;

  $bb83:
    assume out_$i133 == 1;
    goto corral_source_split_1503;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 4);
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} out_$i132 := atomic_read(out_$p131);
    call {:si_unique_call 304} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i132);
    goto corral_source_split_1495;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p130, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1494;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.0, out_$p129);
    goto corral_source_split_1493;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p6, $mul.ref(0, 15576)), $mul.ref(15488, 1));
    goto corral_source_split_1492;

  $bb81:
    assume !(out_$i127 == 1);
    goto corral_source_split_1491;

  $bb87:
    assume {:verifier.code 0} true;
    assume !(out_$i137 == 1);
    goto $bb88;

  $bb90:
    assume {:verifier.code 0} true;
    assume !(out_$i138 == 1);
    goto $bb88;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i64(out_$i139, 0);
    goto corral_source_split_1518;

  $bb94:
    assume !(out_$i140 == 1);
    goto corral_source_split_1517;

  corral_source_split_1527_dummy:
    call {:si_unique_call 1} out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$p129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i128, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i142, out_$i141, out_$i143, out_$i144, out_$i145 := s2255_open_loop_$bb79(in_$p2, in_$p6, out_$i118, out_$p119, out_$p120, out_$p121, out_$i122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$p129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i128, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i142, out_$i141, out_$i143, out_$i144, out_$i145);
    return;

  exit:
    return;
}



procedure s2255_open_loop_$bb79(in_$p2: ref, in_$p6: ref, in_$i118: i64, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i64, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i128: i32, in_$i135: i1, in_$i136: i8, in_$i137: i1, in_$i138: i1, in_$i139: i64, in_$i140: i1, in_$i142: i1, in_$i141: i1, in_$i143: i32, in_$i144: i1, in_$i145: i64) returns (out_$i118: i64, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i64, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i128: i32, out_$i135: i1, out_$i136: i8, out_$i137: i1, out_$i138: i1, out_$i139: i64, out_$i140: i1, out_$i142: i1, out_$i141: i1, out_$i143: i32, out_$i144: i1, out_$i145: i64);



implementation s2255_cmd_status_loop_$bb15(in_$p0: ref, in_$p2: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i8, in_$i54: i1, in_$i55: i1, in_$i56: i64, in_$i57: i1, in_$i59: i1, in_$i58: i1, in_$i60: i32, in_$i61: i1, in_$i62: i64) returns (out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i8, out_$i54: i1, out_$i55: i1, out_$i56: i64, out_$i57: i1, out_$i59: i1, out_$i58: i1, out_$i60: i32, out_$i61: i1, out_$i62: i64)
{

  entry:
    out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i58, out_$i60, out_$i61, out_$i62 := in_$i47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i59, in_$i58, in_$i60, in_$i61, in_$i62;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3189;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i62;
    goto corral_source_split_3218_dummy;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} out_$i62 := schedule_timeout(out_$i56);
    call {:si_unique_call 490} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_3218;

  $bb26:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_3208;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i1.i32(out_$i58);
    goto corral_source_split_3207;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3206;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i59;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    assume out_$i57 == 1;
    goto $bb23;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    out_$i58 := 1;
    assume true;
    goto $bb22, $bb24;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i8.i1(out_$i53);
    goto corral_source_split_3204;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3203;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i47;
    goto $bb21;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$i56 := 1;
    goto $bb21;

  $bb19:
    assume out_$i55 == 1;
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i64(out_$i47, 0);
    goto corral_source_split_3199;

  $bb16:
    assume out_$i54 == 1;
    goto corral_source_split_3198;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i8.i1(out_$i53);
    goto corral_source_split_3196;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i1.i8(out_$i52);
    call {:si_unique_call 487} {:cexpr "__cond"} boogie_si_record_i8(out_$i53);
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_3194;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3704)), $mul.ref(2592, 1));
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} out_$i49 := prepare_to_wait_event(out_$p48, in_$p2, 2);
    call {:si_unique_call 486} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3704)), $mul.ref(2504, 1));
    goto corral_source_split_3190;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i54 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb18;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i64(out_$i56, 0);
    goto corral_source_split_3211;

  $bb24:
    assume !(out_$i57 == 1);
    goto corral_source_split_3210;

  corral_source_split_3218_dummy:
    call {:si_unique_call 1} out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i58, out_$i60, out_$i61, out_$i62 := s2255_cmd_status_loop_$bb15(in_$p0, in_$p2, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i59, out_$i58, out_$i60, out_$i61, out_$i62);
    return;

  exit:
    return;
}



procedure s2255_cmd_status_loop_$bb15(in_$p0: ref, in_$p2: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i8, in_$i54: i1, in_$i55: i1, in_$i56: i64, in_$i57: i1, in_$i59: i1, in_$i58: i1, in_$i60: i32, in_$i61: i1, in_$i62: i64) returns (out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i8, out_$i54: i1, out_$i55: i1, out_$i56: i64, out_$i57: i1, out_$i59: i1, out_$i58: i1, out_$i60: i32, out_$i61: i1, out_$i62: i64);



implementation {:SIextraRecBound 4} s2255_probe_loop_$bb40(in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p130: ref, in_$p131: ref, in_$i132: i64, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i145: i1, in_$i129: i32, in_vslice_dummy_var_102: ref) returns (out_$p130: ref, out_$p131: ref, out_$i132: i64, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i145: i1, out_$i129: i32, out_vslice_dummy_var_102: ref)
{

  entry:
    out_$p130, out_$p131, out_$i132, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i129, out_vslice_dummy_var_102 := in_$p130, in_$p131, in_$i132, in_$p134, in_$p135, in_$p136, in_$p137, in_$p138, in_$p141, in_$p142, in_$p143, in_$i144, in_$i145, in_$i129, in_vslice_dummy_var_102;
    goto $bb40, exit;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_3472;

  $bb42:
    assume out_$i145 == 1;
    assume {:verifier.code 0} true;
    out_$i129 := out_$i144;
    goto $bb42_dummy;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    out_$i145 := $sle.i32(out_$i144, 3);
    goto corral_source_split_3494;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i32(out_$i129, 1);
    call {:si_unique_call 543} {:cexpr "i"} boogie_si_record_i32(out_$i144);
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} __mutex_init(out_$p143, .str.51, in_$p10);
    goto corral_source_split_3492;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(out_$p131, $mul.ref(out_$i132, 3704)), $mul.ref(3472, 1));
    goto corral_source_split_3491;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} __raw_spin_lock_init(out_$p142, .str.50, in_$p9);
    goto corral_source_split_3490;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$p142 := $bitcast.ref.ref(out_$p141);
    goto corral_source_split_3489;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref($add.ref(out_$p131, $mul.ref(out_$i132, 3704)), $mul.ref(3632, 1)), $mul.ref(0, 1));
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} out_vslice_dummy_var_102 := spinlock_check(out_$p138);
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(out_$p131, $mul.ref(out_$i132, 3704)), $mul.ref(3632, 1));
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} __init_waitqueue_head(out_$p137, .str.49, in_$p8);
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(out_$p131, $mul.ref(out_$i132, 3704)), $mul.ref(2504, 1));
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} __init_waitqueue_head(out_$p136, .str.48, in_$p7);
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(out_$p131, $mul.ref(out_$i132, 3704)), $mul.ref(2408, 1));
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p135, in_$p11);
    goto corral_source_split_3481;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(out_$p131, $mul.ref(out_$i132, 3704)), $mul.ref(0, 1));
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p134, out_$i129);
    goto corral_source_split_3479;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p131, $mul.ref(out_$i132, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_3478;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    goto corral_source_split_3477;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$i132 := $sext.i32.i64(out_$i129);
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$p131 := $bitcast.ref.ref(out_$p130);
    goto corral_source_split_3475;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p12, $mul.ref(0, 15576)), $mul.ref(0, 1));
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb42_dummy:
    call {:si_unique_call 1} out_$p130, out_$p131, out_$i132, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i129, out_vslice_dummy_var_102 := s2255_probe_loop_$bb40(in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, out_$p130, out_$p131, out_$i132, out_$p134, out_$p135, out_$p136, out_$p137, out_$p138, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i129, out_vslice_dummy_var_102);
    return;

  exit:
    return;
}



procedure s2255_probe_loop_$bb40(in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p130: ref, in_$p131: ref, in_$i132: i64, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i145: i1, in_$i129: i32, in_vslice_dummy_var_102: ref) returns (out_$p130: ref, out_$p131: ref, out_$i132: i64, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i145: i1, out_$i129: i32, out_vslice_dummy_var_102: ref);
  modifies $M.0;



implementation s2255_probe_loop_$bb25(in_$p12: ref, in_$p69: ref, in_$p92: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p101: ref, in_$p102: ref, in_$i103: i8, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i109: i8, in_$p110: ref, in_$i111: i32, in_$i112: i8, in_$i113: i32, in_$i114: i1, in_$i96: i32) returns (out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p101: ref, out_$p102: ref, out_$i103: i8, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i109: i8, out_$p110: ref, out_$i111: i32, out_$i112: i8, out_$i113: i32, out_$i114: i1, out_$i96: i32)
{

  entry:
    out_$p97, out_$p98, out_$i99, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i96 := in_$p97, in_$p98, in_$i99, in_$p101, in_$p102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$p108, in_$i109, in_$p110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i96;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3420;

  $bb33:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$i96 := out_$i111;
    goto $bb33_dummy;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$i114 := $sgt.i32(out_$i113, out_$i111);
    goto corral_source_split_3444;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i8.i32(out_$i112);
    goto corral_source_split_3443;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i8($M.0, in_$p92);
    goto corral_source_split_3442;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i96, 1);
    call {:si_unique_call 533} {:cexpr "i"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_3441;

  $bb28:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p110, out_$i109);
    goto corral_source_split_3439;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p12, $mul.ref(0, 15576)), $mul.ref(15352, 1));
    goto corral_source_split_3438;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i8($M.0, out_$p108);
    goto corral_source_split_3437;

  $bb29:
    assume out_$i107 == 1;
    out_$p108 := $add.ref($add.ref($add.ref(out_$p98, $mul.ref(out_$i99, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3436;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_3434;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} out_$i106 := usb_endpoint_is_bulk_in(out_$p101);
    call {:si_unique_call 532} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_3433;

  $bb27:
    assume out_$i105 == 1;
    goto corral_source_split_3432;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 0);
    goto corral_source_split_3430;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i8.i32(out_$i103);
    goto corral_source_split_3429;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i8($M.0, out_$p102);
    goto corral_source_split_3428;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p12, $mul.ref(0, 15576)), $mul.ref(15352, 1));
    goto corral_source_split_3427;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p98, $mul.ref(out_$i99, 72)), $mul.ref(0, 1));
    goto corral_source_split_3426;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    goto corral_source_split_3425;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$i99 := $sext.i32.i64(out_$i96);
    goto corral_source_split_3424;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_3423;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p69, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3422;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p97, out_$p98, out_$i99, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i96 := s2255_probe_loop_$bb25(in_$p12, in_$p69, in_$p92, out_$p97, out_$p98, out_$i99, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i96);
    return;

  exit:
    return;
}



procedure s2255_probe_loop_$bb25(in_$p12: ref, in_$p69: ref, in_$p92: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p101: ref, in_$p102: ref, in_$i103: i8, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i109: i8, in_$p110: ref, in_$i111: i32, in_$i112: i8, in_$i113: i32, in_$i114: i1, in_$i96: i32) returns (out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p101: ref, out_$p102: ref, out_$i103: i8, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i109: i8, out_$p110: ref, out_$i111: i32, out_$i112: i8, out_$i113: i32, out_$i114: i1, out_$i96: i32);
  modifies $M.0;



implementation s2255_disconnect_loop_$bb4(in_$p3: ref, in_$i5: i32, in_$i12: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i11: i32) returns (out_$i12: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i11: i32)
{

  entry:
    out_$i12, out_$p15, out_$i16, out_$i17, out_$i11 := in_$i12, in_$p15, in_$i16, in_$i17, in_$i11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3664;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i16;
    goto $bb6_dummy;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, in_$i5);
    goto corral_source_split_3670;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i11, 1);
    call {:si_unique_call 577} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_3669;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} video_unregister_device(out_$p15);
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 15576)), $mul.ref(0, 1)), $mul.ref(out_$i12, 3704)), $mul.ref(8, 1));
    goto corral_source_split_3667;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    goto corral_source_split_3666;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i12, out_$p15, out_$i16, out_$i17, out_$i11 := s2255_disconnect_loop_$bb4(in_$p3, in_$i5, out_$i12, out_$p15, out_$i16, out_$i17, out_$i11);
    return;

  exit:
    return;
}



procedure s2255_disconnect_loop_$bb4(in_$p3: ref, in_$i5: i32, in_$i12: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i11: i32) returns (out_$i12: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i11: i32);



implementation {:SIextraRecBound 4} s2255_board_init_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i16, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p73: ref, in_$i74: i32, in_$i75: i64, in_$p76: ref, in_$p77: ref, in_$i79: i32, in_$i80: i1, in_$i48: i32, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_vslice_dummy_var_114: i32) returns (out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i16, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p73: ref, out_$i74: i32, out_$i75: i64, out_$p76: ref, out_$p77: ref, out_$i79: i32, out_$i80: i1, out_$i48: i32, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_vslice_dummy_var_114: i32)
{

  entry:
    out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i79, out_$i80, out_$i48, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_vslice_dummy_var_114 := in_$p49, in_$p50, in_$i51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p62, in_$i63, in_$i64, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p73, in_$i74, in_$i75, in_$p76, in_$p77, in_$i79, in_$i80, in_$i48, in_cmdloc_dummy_var_31, in_cmdloc_dummy_var_32, in_cmdloc_dummy_var_33, in_vslice_dummy_var_114;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3882;

  $bb22:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := out_$i79;
    goto $bb22_dummy;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$i80 := $sle.i32(out_$i79, 3);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i48, 1);
    call {:si_unique_call 634} {:cexpr "j"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_3926;

  SeqInstr_39:
    goto corral_source_split_3925;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} out_vslice_dummy_var_114 := s2255_create_sys_buffers(out_$p52);
    goto SeqInstr_38;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p77, 0);
    goto corral_source_split_3924;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 3704)), $mul.ref(2392, 1));
    goto corral_source_split_3923;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p76, out_$i75);
    goto corral_source_split_3922;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 3704)), $mul.ref(2368, 1));
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i32.i64(out_$i74);
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} out_$i74 := get_transfer_size(in_$p1);
    call {:si_unique_call 632} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_3919;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p73, 1);
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 3704)), $mul.ref(2256, 1)), $mul.ref(40, 1));
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p71, formats);
    goto corral_source_split_3916;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 3704)), $mul.ref(2608, 1));
    goto corral_source_split_3915;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p70, 4096);
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 3704)), $mul.ref(2304, 1));
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p69, 480);
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 3704)), $mul.ref(2600, 1));
    goto corral_source_split_3911;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p68, 640);
    goto corral_source_split_3910;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 3704)), $mul.ref(2596, 1));
    goto corral_source_split_3909;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p67, 50);
    goto corral_source_split_3908;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 3704)), $mul.ref(2312, 1));
    goto corral_source_split_3907;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p66, out_$i64);
    goto corral_source_split_3905;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 3704)), $mul.ref(2256, 1)), $mul.ref(8, 1));
    goto corral_source_split_3904;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    out_$i64 := $or.i32(out_$i63, 65536);
    goto corral_source_split_3903;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_3902;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 3704)), $mul.ref(2256, 1)), $mul.ref(8, 1));
    goto corral_source_split_3901;

  $bb19:
    assume out_$i60 == 1;
    goto corral_source_split_3900;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    out_$i60 := $sgt.i32(out_$i48, 1);
    goto corral_source_split_3898;

  $bb16:
    assume out_$i59 == 1;
    goto corral_source_split_3897;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 8791);
    goto corral_source_split_3895;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i16.i32(out_$i57);
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i16($M.0, out_$p56);
    goto corral_source_split_3893;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 15576)), $mul.ref(15560, 1));
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_31 := $M.0;
    out_cmdloc_dummy_var_32 := $M.0;
    call {:si_unique_call 630} out_cmdloc_dummy_var_33 := $memcpy.i8(out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_$p54, out_$p55, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_33;
    goto corral_source_split_3891;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_3890;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_3889;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 3704)), $mul.ref(2256, 1));
    goto corral_source_split_3888;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p50, $mul.ref(out_$i51, 3704));
    goto corral_source_split_3887;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i48);
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_3885;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 15576)), $mul.ref(0, 1));
    goto corral_source_split_3884;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb18;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i79, out_$i80, out_$i48, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_vslice_dummy_var_114 := s2255_board_init_loop_$bb14(in_$p0, in_$p1, out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i79, out_$i80, out_$i48, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_vslice_dummy_var_114);
    return;

  exit:
    return;
}



procedure s2255_board_init_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i16, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p73: ref, in_$i74: i32, in_$i75: i64, in_$p76: ref, in_$p77: ref, in_$i79: i32, in_$i80: i1, in_$i48: i32, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_vslice_dummy_var_114: i32) returns (out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i16, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p73: ref, out_$i74: i32, out_$i75: i64, out_$p76: ref, out_$p77: ref, out_$i79: i32, out_$i80: i1, out_$i48: i32, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_vslice_dummy_var_114: i32);
  modifies $M.0, assertsPassed;



implementation s2255_probe_v4l_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$p71: ref, in_$p72: ref, in_$p74: ref, in_$p75: ref, in_$p77: ref, in_$p78: ref, in_$p80: ref, in_$p81: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i91: i32, in_$i95: i1, in_$i96: i32, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p104: ref, in_$p105: ref, in_$i107: i32, in_$i108: i1, in_$i10: i32, in_$i109: i32, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: ref, in_vslice_dummy_var_119: ref, in_vslice_dummy_var_120: ref, in_vslice_dummy_var_121: ref, in_vslice_dummy_var_122: ref, in_vslice_dummy_var_124: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p18: ref, out_$p20: ref, out_$p22: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$p71: ref, out_$p72: ref, out_$p74: ref, out_$p75: ref, out_$p77: ref, out_$p78: ref, out_$p80: ref, out_$p81: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i91: i32, out_$i95: i1, out_$i96: i32, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p104: ref, out_$p105: ref, out_$i107: i32, out_$i108: i1, out_$i10: i32, out_$i109: i32, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: ref, out_vslice_dummy_var_119: ref, out_vslice_dummy_var_120: ref, out_vslice_dummy_var_121: ref, out_vslice_dummy_var_122: ref, out_vslice_dummy_var_124: i32)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p18, out_$p20, out_$p22, out_$p24, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p42, out_$i43, out_$i44, out_$p45, out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p71, out_$p72, out_$p74, out_$p75, out_$p77, out_$p78, out_$p80, out_$p81, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p92, out_$i93, out_$i94, out_$i91, out_$i95, out_$i96, out_$p100, out_$p101, out_$p102, out_$p104, out_$p105, out_$i107, out_$i108, out_$i10, out_$i109, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_124 := in_$p11, in_$p12, in_$i13, in_$p14, in_$p15, in_$p16, in_$p18, in_$p20, in_$p22, in_$p24, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p42, in_$i43, in_$i44, in_$p45, in_$p54, in_$p55, in_$p56, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$i67, in_$p71, in_$p72, in_$p74, in_$p75, in_$p77, in_$p78, in_$p80, in_$p81, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$p92, in_$i93, in_$i94, in_$i91, in_$i95, in_$i96, in_$p100, in_$p101, in_$p102, in_$p104, in_$p105, in_$i107, in_$i108, in_$i10, in_$i109, in_cmdloc_dummy_var_34, in_cmdloc_dummy_var_35, in_cmdloc_dummy_var_36, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_124;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3951;

  $bb29:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i107;
    goto $bb29_dummy;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    out_$i109 := out_$i91;
    assume true;
    goto $bb29;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    out_$i108 := $sle.i32(out_$i107, 3);
    goto corral_source_split_4077;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    out_$i107 := $add.i32(out_$i10, 1);
    call {:si_unique_call 668} {:cexpr "i"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_4076;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} out_vslice_dummy_var_124 := printk.ref.ref.ref(.str.106, out_$p105, out_$p102);
    goto corral_source_split_4075;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(out_$p104);
    goto corral_source_split_4074;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 15576)), $mul.ref(14816, 1)), $mul.ref(104, 1));
    goto corral_source_split_4073;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} out_$p102 := video_device_node_name(out_$p101);
    goto corral_source_split_4072;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(8, 1));
    goto corral_source_split_4071;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} atomic_inc(out_$p100);
    goto corral_source_split_4070;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p0, $mul.ref(0, 15576)), $mul.ref(15008, 1));
    goto corral_source_split_4069;

  $bb27:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_$i96 := out_$i91;
    assume true;
    goto $bb27;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i32(out_$i91, 0);
    goto corral_source_split_4061;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_4060;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} out_$i94 := video_register_device(out_$p92, 0, out_$i93);
    call {:si_unique_call 663} {:cexpr "ret"} boogie_si_record_i32(out_$i94);
    assume {:verifier.code 0} true;
    out_$i91 := out_$i94;
    goto $bb25;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i90;
    goto $bb25;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} out_$i90 := video_register_device(out_$p88, 0, out_$i89);
    call {:si_unique_call 661} {:cexpr "ret"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_4054;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    out_$i89 := $M.22;
    goto corral_source_split_4053;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(8, 1));
    goto corral_source_split_4052;

  $bb23:
    assume out_$i87 == 1;
    goto corral_source_split_4051;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, $sub.i32(0, 1));
    goto corral_source_split_4049;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    out_$i86 := $M.22;
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} video_set_drvdata(out_$p84, out_$p85);
    goto corral_source_split_4047;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$p85 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(8, 1));
    goto corral_source_split_4045;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p83, out_$p81);
    goto corral_source_split_4044;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(8, 1)), $mul.ref(1560, 1));
    goto corral_source_split_4043;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p0, $mul.ref(0, 15576)), $mul.ref(14816, 1));
    goto corral_source_split_4042;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p80, out_$p78);
    goto corral_source_split_4041;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(8, 1)), $mul.ref(1832, 1));
    goto corral_source_split_4040;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p0, $mul.ref(0, 15576)), $mul.ref(15016, 1));
    goto corral_source_split_4039;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p77, out_$p75);
    goto corral_source_split_4038;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(8, 1)), $mul.ref(1576, 1));
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_4036;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p74, out_$p54);
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(8, 1)), $mul.ref(1584, 1));
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_34 := $M.0;
    out_cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 658} out_cmdloc_dummy_var_36 := $memcpy.i8(out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_$p72, template, 1840, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_36;
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p71);
    goto corral_source_split_4032;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(8, 1));
    goto corral_source_split_4031;

  $bb21:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i65;
    assume true;
    goto $bb21;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} out_$i65 := vb2_queue_init(out_$p54);
    call {:si_unique_call 656} {:cexpr "ret"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p64, 8192);
    goto corral_source_split_4021;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p63, s2255_video_qops);
    out_$p64 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(2624, 1)), $mul.ref(60, 1));
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p62, vb2_vmalloc_memops);
    out_$p63 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(2624, 1)), $mul.ref(32, 1));
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p61, 944);
    out_$p62 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(2624, 1)), $mul.ref(40, 1));
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p60, out_$p59);
    out_$p61 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(2624, 1)), $mul.ref(56, 1));
    goto corral_source_split_4017;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(3472, 1));
    out_$p60 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(2624, 1)), $mul.ref(16, 1));
    goto corral_source_split_4016;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p58, out_$p14);
    goto corral_source_split_4015;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(2624, 1)), $mul.ref(48, 1));
    goto corral_source_split_4014;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p56, 7);
    goto corral_source_split_4013;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p55, 1);
    out_$p56 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(2624, 1)), $mul.ref(4, 1));
    goto corral_source_split_4012;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(2624, 1));
    out_$p55 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(2624, 1)), $mul.ref(0, 1));
    goto corral_source_split_4011;

  $bb17:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    out_$p45 := out_$p14;
    assume true;
    goto $bb17;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_3993;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    goto corral_source_split_3992;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(1848, 1)), $mul.ref(236, 1));
    goto corral_source_split_3991;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} out_vslice_dummy_var_122 := v4l2_ctrl_new_custom(out_$p39, color_filter_ctrl, $0.ref);
    goto corral_source_split_3984;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3983;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb11;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 8791);
    goto corral_source_split_3981;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_3980;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, out_$p32);
    goto corral_source_split_3979;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 15576)), $mul.ref(15560, 1));
    goto corral_source_split_3978;

  $bb7:
    assume out_$i31 == 1;
    goto corral_source_split_3977;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i30, 7);
    goto corral_source_split_3975;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 15576)), $mul.ref(15556, 1));
    goto corral_source_split_3973;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p28, out_$p27);
    goto corral_source_split_3972;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(2088, 1));
    goto corral_source_split_3971;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} out_$p27 := v4l2_ctrl_new_std(out_$p26, s2255_ctrl_ops, 10291459, 0, 100, 1, 50);
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} out_vslice_dummy_var_121 := v4l2_ctrl_new_std(out_$p24, s2255_ctrl_ops, 9963779, 0, 255, 1, 0);
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3967;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} out_vslice_dummy_var_120 := v4l2_ctrl_new_std(out_$p22, s2255_ctrl_ops, 9963778, 0, 255, 1, 128);
    goto corral_source_split_3966;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3965;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} out_vslice_dummy_var_119 := v4l2_ctrl_new_std(out_$p20, s2255_ctrl_ops, 9963777, 0, 255, 1, 92);
    goto corral_source_split_3964;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3963;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} out_vslice_dummy_var_118 := v4l2_ctrl_new_std(out_$p18, s2255_ctrl_ops, 9963776, $sub.i64(0, 127), 127, 1, 0);
    goto corral_source_split_3962;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3961;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} out_vslice_dummy_var_117 := v4l2_ctrl_handler_init_class(out_$p16, 6, in_$p1, .str.101);
    goto corral_source_split_3960;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(1848, 1));
    goto corral_source_split_3959;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} INIT_LIST_HEAD(out_$p15);
    goto corral_source_split_3958;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(2104, 1));
    goto corral_source_split_3957;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p12, $mul.ref(out_$i13, 3704));
    goto corral_source_split_3956;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i10);
    goto corral_source_split_3955;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_3954;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 15576)), $mul.ref(0, 1));
    goto corral_source_split_3953;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    out_$i38 := $sle.i32(out_$i37, 1);
    goto corral_source_split_3989;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_3988;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(2616, 1));
    goto corral_source_split_3987;

  $bb12:
    assume !(out_$i35 == 1);
    goto corral_source_split_3986;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb9;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb9;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(in_$i2, out_$i10);
    goto corral_source_split_4058;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 3704)), $mul.ref(8, 1));
    goto corral_source_split_4057;

  $bb24:
    assume !(out_$i87 == 1);
    goto corral_source_split_4056;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p18, out_$p20, out_$p22, out_$p24, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p42, out_$i43, out_$i44, out_$p45, out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p71, out_$p72, out_$p74, out_$p75, out_$p77, out_$p78, out_$p80, out_$p81, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p92, out_$i93, out_$i94, out_$i91, out_$i95, out_$i96, out_$p100, out_$p101, out_$p102, out_$p104, out_$p105, out_$i107, out_$i108, out_$i10, out_$i109, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_124 := s2255_probe_v4l_loop_$bb5(in_$p0, in_$p1, in_$i2, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p18, out_$p20, out_$p22, out_$p24, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p42, out_$i43, out_$i44, out_$p45, out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p71, out_$p72, out_$p74, out_$p75, out_$p77, out_$p78, out_$p80, out_$p81, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p92, out_$i93, out_$i94, out_$i91, out_$i95, out_$i96, out_$p100, out_$p101, out_$p102, out_$p104, out_$p105, out_$i107, out_$i108, out_$i10, out_$i109, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_124);
    return;

  exit:
    return;
}



procedure s2255_probe_v4l_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$p71: ref, in_$p72: ref, in_$p74: ref, in_$p75: ref, in_$p77: ref, in_$p78: ref, in_$p80: ref, in_$p81: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i91: i32, in_$i95: i1, in_$i96: i32, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p104: ref, in_$p105: ref, in_$i107: i32, in_$i108: i1, in_$i10: i32, in_$i109: i32, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: ref, in_vslice_dummy_var_119: ref, in_vslice_dummy_var_120: ref, in_vslice_dummy_var_121: ref, in_vslice_dummy_var_122: ref, in_vslice_dummy_var_124: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p18: ref, out_$p20: ref, out_$p22: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$p71: ref, out_$p72: ref, out_$p74: ref, out_$p75: ref, out_$p77: ref, out_$p78: ref, out_$p80: ref, out_$p81: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i91: i32, out_$i95: i1, out_$i96: i32, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p104: ref, out_$p105: ref, out_$i107: i32, out_$i108: i1, out_$i10: i32, out_$i109: i32, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: ref, out_vslice_dummy_var_119: ref, out_vslice_dummy_var_120: ref, out_vslice_dummy_var_121: ref, out_vslice_dummy_var_122: ref, out_vslice_dummy_var_124: i32);
  modifies $M.0;



implementation s2255_create_sys_buffers_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p13: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i64, in_$i25: i64, in_$i26: i1, in_$i4: i64) returns (out_$p5: ref, out_$p9: ref, out_$p13: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i64, out_$i25: i64, out_$i26: i1, out_$i4: i64)
{

  entry:
    out_$p5, out_$p9, out_$p13, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i25, out_$i26, out_$i4 := in_$p5, in_$p9, in_$p13, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i25, in_$i26, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4196;

  $bb10:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i25;
    goto $bb10_dummy;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    out_$i26 := $ule.i64(out_$i25, 3);
    goto corral_source_split_4214;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i64(out_$i4, 1);
    call {:si_unique_call 711} {:cexpr "i"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_4213;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i4;
    assume true;
    goto $bb7;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_4206;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(out_$i4, 32)), $mul.ref(16, 1));
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p13, 833536);
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(out_$i4, 32)), $mul.ref(0, 1));
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p9, out_$p5);
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3704)), $mul.ref(2120, 1)), $mul.ref(8, 1)), $mul.ref(out_$i4, 32)), $mul.ref(16, 1));
    goto corral_source_split_4199;

  SeqInstr_45:
    goto corral_source_split_4198;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} out_$p5 := ldv_vmalloc_27(833536);
    goto SeqInstr_44;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p5, out_$p9, out_$p13, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i25, out_$i26, out_$i4 := s2255_create_sys_buffers_loop_$bb4(in_$p0, out_$p5, out_$p9, out_$p13, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i25, out_$i26, out_$i4);
    return;

  exit:
    return;
}



procedure s2255_create_sys_buffers_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p13: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i64, in_$i25: i64, in_$i26: i1, in_$i4: i64) returns (out_$p5: ref, out_$p9: ref, out_$p13: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i64, out_$i25: i64, out_$i26: i1, out_$i4: i64);
  modifies $M.0, assertsPassed;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p64: ref, in_$p66: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i90: i32, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i122: i32, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i64, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i32, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i64, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i154: i32, in_$i155: i64, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$i168: i1, in_$i169: i1, in_$i170: i1, in_$i171: i1, in_$i172: i1, in_$i173: i1, in_$i174: i1, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i192: i32, in_$i193: i1, in_$p194: ref, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i200: i32, in_$i201: i1, in_$i202: i32, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i32, in_$i211: i1, in_$i212: i32, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i1, in_$i227: i1, in_$i228: i1, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i32, in_$i233: i32, in_$i234: i1, in_$i236: i32, in_$i237: i32, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$i241: i1, in_$i242: i1, in_$i243: i1, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$i251: i32, in_$i252: i1, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$i258: i1, in_$i259: i1, in_$i260: i1, in_$i261: i1, in_$i262: i1, in_$i263: i1, in_$i264: i1, in_$i265: i1, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i1, in_$i272: i1, in_$i273: i1, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i1, in_$i278: i1, in_$i279: i1, in_$i280: i1, in_$i281: i1, in_$i282: i1, in_$i283: i1, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$p291: ref, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$p296: ref, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$i301: i64, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$p310: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$p315: ref, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$i320: i32, in_$i322: i32, in_$i323: i1, in_$p324: ref, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$p329: ref, in_$i331: i32, in_$i332: i1, in_$p333: ref, in_$p334: ref, in_$i336: i32, in_$i337: i1, in_$p338: ref, in_$i340: i32, in_$i341: i1, in_$p342: ref, in_$p343: ref, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$p372: ref, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$i378: i32, in_$i379: i1, in_$p380: ref, in_$p381: ref, in_$i383: i32, in_$i384: i1, in_$p385: ref, in_$p386: ref, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i391: i32, in_$i393: i32, in_$i394: i1, in_$p395: ref, in_$i396: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i64, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i64, in_vslice_dummy_var_146: i64, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i32, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32) returns (out_$i90: i32, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i122: i32, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i64, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i32, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i64, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i154: i32, out_$i155: i64, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$i168: i1, out_$i169: i1, out_$i170: i1, out_$i171: i1, out_$i172: i1, out_$i173: i1, out_$i174: i1, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i192: i32, out_$i193: i1, out_$p194: ref, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i200: i32, out_$i201: i1, out_$i202: i32, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i32, out_$i211: i1, out_$i212: i32, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i1, out_$i227: i1, out_$i228: i1, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i32, out_$i233: i32, out_$i234: i1, out_$i236: i32, out_$i237: i32, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$i241: i1, out_$i242: i1, out_$i243: i1, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$i251: i32, out_$i252: i1, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$i258: i1, out_$i259: i1, out_$i260: i1, out_$i261: i1, out_$i262: i1, out_$i263: i1, out_$i264: i1, out_$i265: i1, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i1, out_$i272: i1, out_$i273: i1, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i1, out_$i278: i1, out_$i279: i1, out_$i280: i1, out_$i281: i1, out_$i282: i1, out_$i283: i1, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$p291: ref, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$p296: ref, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$i301: i64, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$p310: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$p315: ref, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$i320: i32, out_$i322: i32, out_$i323: i1, out_$p324: ref, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$p329: ref, out_$i331: i32, out_$i332: i1, out_$p333: ref, out_$p334: ref, out_$i336: i32, out_$i337: i1, out_$p338: ref, out_$i340: i32, out_$i341: i1, out_$p342: ref, out_$p343: ref, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$p372: ref, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$i378: i32, out_$i379: i1, out_$p380: ref, out_$p381: ref, out_$i383: i32, out_$i384: i1, out_$p385: ref, out_$p386: ref, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i391: i32, out_$i393: i32, out_$i394: i1, out_$p395: ref, out_$i396: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i64, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i64, out_vslice_dummy_var_146: i64, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i32, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32)
{

  entry:
    out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i192, out_$i193, out_$p194, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i288, out_$i289, out_$p290, out_$p291, out_$i293, out_$i294, out_$p295, out_$p296, out_$i298, out_$i299, out_$p300, out_$i301, out_$i303, out_$i304, out_$p305, out_$i307, out_$i308, out_$p309, out_$p310, out_$i312, out_$i313, out_$p314, out_$p315, out_$i317, out_$i318, out_$p319, out_$i320, out_$i322, out_$i323, out_$p324, out_$i326, out_$i327, out_$p328, out_$p329, out_$i331, out_$i332, out_$p333, out_$p334, out_$i336, out_$i337, out_$p338, out_$i340, out_$i341, out_$p342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i353, out_$i354, out_$p355, out_$i357, out_$i358, out_$p359, out_$i361, out_$i362, out_$p363, out_$i365, out_$i366, out_$p367, out_$i369, out_$i370, out_$p371, out_$p372, out_$i374, out_$i375, out_$p376, out_$i378, out_$i379, out_$p380, out_$p381, out_$i383, out_$i384, out_$p385, out_$p386, out_$i388, out_$i389, out_$p390, out_$i391, out_$i393, out_$i394, out_$p395, out_$i396, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176 := in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p112, in_$i114, in_$i115, in_$p116, in_$i118, in_$i119, in_$p120, in_$i122, in_$i123, in_$i124, in_$i125, in_$p126, in_$i127, in_$i129, in_$i130, in_$p131, in_$i133, in_$i134, in_$p135, in_$i137, in_$i138, in_$p139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$p147, in_$i148, in_$i149, in_$i151, in_$i152, in_$p153, in_$i154, in_$i155, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$p177, in_$i178, in_$i179, in_$p180, in_$i181, in_$i182, in_$p183, in_$i184, in_$i185, in_$p186, in_$i187, in_$i188, in_$p189, in_$i190, in_$i192, in_$i193, in_$p194, in_$i196, in_$i197, in_$p198, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$p208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$p218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$p286, in_$i288, in_$i289, in_$p290, in_$p291, in_$i293, in_$i294, in_$p295, in_$p296, in_$i298, in_$i299, in_$p300, in_$i301, in_$i303, in_$i304, in_$p305, in_$i307, in_$i308, in_$p309, in_$p310, in_$i312, in_$i313, in_$p314, in_$p315, in_$i317, in_$i318, in_$p319, in_$i320, in_$i322, in_$i323, in_$p324, in_$i326, in_$i327, in_$p328, in_$p329, in_$i331, in_$i332, in_$p333, in_$p334, in_$i336, in_$i337, in_$p338, in_$i340, in_$i341, in_$p342, in_$p343, in_$i345, in_$i346, in_$p347, in_$i349, in_$i350, in_$p351, in_$i353, in_$i354, in_$p355, in_$i357, in_$i358, in_$p359, in_$i361, in_$i362, in_$p363, in_$i365, in_$i366, in_$p367, in_$i369, in_$i370, in_$p371, in_$p372, in_$i374, in_$i375, in_$p376, in_$i378, in_$i379, in_$p380, in_$p381, in_$i383, in_$i384, in_$p385, in_$p386, in_$i388, in_$i389, in_$p390, in_$i391, in_$i393, in_$i394, in_$p395, in_$i396, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145, in_vslice_dummy_var_146, in_vslice_dummy_var_147, in_vslice_dummy_var_148, in_vslice_dummy_var_149, in_vslice_dummy_var_150, in_vslice_dummy_var_151, in_vslice_dummy_var_152, in_vslice_dummy_var_153, in_vslice_dummy_var_154, in_vslice_dummy_var_155, in_vslice_dummy_var_156, in_vslice_dummy_var_157, in_vslice_dummy_var_158, in_vslice_dummy_var_159, in_vslice_dummy_var_160, in_vslice_dummy_var_161, in_vslice_dummy_var_162, in_vslice_dummy_var_163, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170, in_vslice_dummy_var_171, in_vslice_dummy_var_172, in_vslice_dummy_var_173, in_vslice_dummy_var_174, in_vslice_dummy_var_175, in_vslice_dummy_var_176;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 849} out_$i90 := __VERIFIER_nondet_int();
    call {:si_unique_call 850} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i90);
    call {:si_unique_call 851} {:cexpr "tmp___44"} boogie_si_record_i32(out_$i90);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb74_dummy;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb23:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 858} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4611;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} out_vslice_dummy_var_140 := vb2_fop_mmap(out_$p116, in_$p14);
    goto corral_source_split_4610;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    out_$p116 := $M.26;
    goto corral_source_split_4609;

  $bb43:
    assume out_$i115 == 1;
    goto corral_source_split_4608;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 2);
    goto corral_source_split_4606;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i114 := $M.36;
    goto corral_source_split_4605;

  $bb41:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4603;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} out_vslice_dummy_var_139 := vb2_fop_mmap(out_$p112, in_$p14);
    goto corral_source_split_4602;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    out_$p112 := $M.26;
    goto corral_source_split_4601;

  $bb40:
    assume out_$i111 == 1;
    goto corral_source_split_4600;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 1);
    goto corral_source_split_4598;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$i110 := $M.36;
    goto corral_source_split_4597;

  $bb38:
    assume out_$i109 == 1;
    goto corral_source_split_4596;

  $bb34:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i102, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb25:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i102, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_4574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 852} out_$i102 := __VERIFIER_nondet_int();
    call {:si_unique_call 853} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i102);
    call {:si_unique_call 854} {:cexpr "tmp___45"} boogie_si_record_i32(out_$i102);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i101 == 1;
    goto corral_source_split_4574;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i32(out_$i100, 0);
    goto corral_source_split_4572;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    out_$i100 := $M.36;
    goto corral_source_split_4571;

  $bb20:
    assume out_$i99 == 1;
    goto corral_source_split_4570;

  $bb18:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i90, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i90, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i90, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i90, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb48:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $M.42 := out_$i123;
    call {:si_unique_call 861} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_4619;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$i123 := $sub.i32(out_$i122, 1);
    goto corral_source_split_4618;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$i122 := $M.42;
    goto corral_source_split_4617;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 860} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4616;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} out_vslice_dummy_var_141 := vb2_fop_release(out_$p120);
    goto corral_source_split_4615;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    out_$p120 := $M.26;
    goto corral_source_split_4614;

  $bb47:
    assume out_$i119 == 1;
    goto corral_source_split_4613;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i118, 2);
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    out_$i118 := $M.36;
    goto corral_source_split_4589;

  $bb36:
    assume out_$i108 == 1;
    goto corral_source_split_4588;

  $bb35:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i102, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb51:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 863} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4625;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} out_vslice_dummy_var_142 := vb2_fop_read(out_$p126, in_$p10, out_$i127, in_$p9);
    goto corral_source_split_4624;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i64($M.24, in_$p1);
    goto corral_source_split_4623;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    out_$p126 := $M.26;
    goto corral_source_split_4622;

  $bb50:
    assume out_$i125 == 1;
    goto corral_source_split_4621;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 2);
    goto corral_source_split_4594;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    out_$i124 := $M.36;
    goto corral_source_split_4593;

  $bb37:
    assume !(out_$i108 == 1);
    goto corral_source_split_4592;

  $bb57:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 867} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} out_vslice_dummy_var_144 := vb2_fop_poll(out_$p135, in_$p12);
    goto corral_source_split_4637;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    out_$p135 := $M.26;
    goto corral_source_split_4636;

  $bb56:
    assume out_$i134 == 1;
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 2);
    goto corral_source_split_4633;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i133 := $M.36;
    goto corral_source_split_4632;

  $bb54:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 865} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4630;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} out_vslice_dummy_var_143 := vb2_fop_poll(out_$p131, in_$p12);
    goto corral_source_split_4629;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    out_$p131 := $M.26;
    goto corral_source_split_4628;

  $bb53:
    assume out_$i130 == 1;
    goto corral_source_split_4627;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 1);
    goto corral_source_split_4578;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    out_$i129 := $M.36;
    goto corral_source_split_4577;

  $bb27:
    assume out_$i104 == 1;
    goto corral_source_split_4576;

  $bb26:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i102, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb60:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb62:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.42 := out_$i144;
    call {:si_unique_call 871} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i144);
    goto corral_source_split_4651;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i32(out_$i143, 1);
    goto corral_source_split_4650;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    out_$i143 := $M.42;
    goto corral_source_split_4649;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 870} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4648;

  $bb61:
    assume out_$i142 == 1;
    goto corral_source_split_4647;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 0);
    goto corral_source_split_4645;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    out_$i141 := $M.45;
    goto corral_source_split_4644;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.45 := out_$i140;
    call {:si_unique_call 869} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i140);
    goto corral_source_split_4643;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} out_$i140 := s2255_open(out_$p139);
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    out_$p139 := $M.26;
    goto corral_source_split_4641;

  $bb59:
    assume out_$i138 == 1;
    goto corral_source_split_4640;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 1);
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    out_$i137 := $M.36;
    goto corral_source_split_4581;

  $bb29:
    assume out_$i105 == 1;
    goto corral_source_split_4580;

  $bb28:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i102, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb69:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4668;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} out_vslice_dummy_var_146 := video_ioctl2(out_$p153, out_$i154, out_$i155);
    goto corral_source_split_4667;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i64($M.24, in_$p2);
    goto corral_source_split_4666;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i32($M.24, in_$p0);
    goto corral_source_split_4665;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    out_$p153 := $M.26;
    goto corral_source_split_4664;

  $bb68:
    assume out_$i152 == 1;
    goto corral_source_split_4663;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 2);
    goto corral_source_split_4661;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i151 := $M.36;
    goto corral_source_split_4660;

  $bb66:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 873} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} out_vslice_dummy_var_145 := video_ioctl2(out_$p147, out_$i148, out_$i149);
    goto corral_source_split_4657;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i64($M.24, in_$p2);
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i32($M.24, in_$p0);
    goto corral_source_split_4655;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    out_$p147 := $M.26;
    goto corral_source_split_4654;

  $bb65:
    assume out_$i146 == 1;
    goto corral_source_split_4653;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 1);
    goto corral_source_split_4586;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    out_$i145 := $M.36;
    goto corral_source_split_4585;

  $bb31:
    assume out_$i106 == 1;
    goto corral_source_split_4584;

  $bb30:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i102, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_stop();
    goto corral_source_split_4670;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i106 == 1);
    goto $bb33;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i109 == 1);
    goto $bb33;

  $bb76:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb81:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 881} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4680;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} out_vslice_dummy_var_147 := s2255_s_ctrl(in_$p16);
    goto corral_source_split_4679;

  $bb80:
    assume out_$i162 == 1;
    goto corral_source_split_4678;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 1);
    goto corral_source_split_4676;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    out_$i161 := $M.37;
    goto corral_source_split_4675;

  $bb78:
    assume out_$i160 == 1;
    goto corral_source_split_4674;

  $bb77:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i159, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_4672:
    assume {:verifier.code 1} true;
    call {:si_unique_call 877} out_$i159 := __VERIFIER_nondet_int();
    call {:si_unique_call 878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i159);
    call {:si_unique_call 879} {:cexpr "tmp___46"} boogie_si_record_i32(out_$i159);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb75:
    assume out_$i158 == 1;
    goto corral_source_split_4672;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i32(out_$i157, 0);
    goto corral_source_split_4568;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    out_$i157 := $M.37;
    goto corral_source_split_4567;

  $bb19:
    assume !(out_$i98 == 1);
    goto corral_source_split_4566;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} ldv_stop();
    goto corral_source_split_4682;

  $bb79:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb88:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vb2_ops_wait_finish(out_$p177);
    goto corral_source_split_4716;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    out_$p177 := $M.27;
    goto corral_source_split_4715;

  $bb107:
    assume out_$i176 == 1;
    goto corral_source_split_4714;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 1);
    goto corral_source_split_4712;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    out_$i175 := $M.38;
    goto corral_source_split_4711;

  $bb105:
    assume out_$i174 == 1;
    goto corral_source_split_4710;

  $bb101:
    assume out_$i172 == 1;
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i166, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb90:
    assume out_$i167 == 1;
    assume {:verifier.code 0} true;
    out_$i172 := $slt.i32(out_$i166, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb89:
    assume {:verifier.code 0} true;
    out_$i167 := $slt.i32(out_$i166, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_4684:
    assume {:verifier.code 1} true;
    call {:si_unique_call 883} out_$i166 := __VERIFIER_nondet_int();
    call {:si_unique_call 884} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i166);
    call {:si_unique_call 885} {:cexpr "tmp___47"} boogie_si_record_i32(out_$i166);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb87:
    assume out_$i165 == 1;
    goto corral_source_split_4684;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$i165 := $ne.i32(out_$i164, 0);
    goto corral_source_split_4560;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    out_$i164 := $M.38;
    goto corral_source_split_4559;

  $bb16:
    assume out_$i97 == 1;
    goto corral_source_split_4558;

  $bb15:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i90, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb112:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4722;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} buffer_queue(out_$p180);
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$p180 := $M.28;
    goto corral_source_split_4720;

  $bb111:
    assume out_$i179 == 1;
    goto corral_source_split_4719;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 1);
    goto corral_source_split_4704;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    out_$i178 := $M.38;
    goto corral_source_split_4703;

  $bb103:
    assume out_$i173 == 1;
    goto corral_source_split_4702;

  $bb102:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    out_$i173 := $slt.i32(out_$i166, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb115:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4727;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} vb2_ops_wait_prepare(out_$p183);
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    out_$p183 := $M.27;
    goto corral_source_split_4725;

  $bb114:
    assume out_$i182 == 1;
    goto corral_source_split_4724;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, 1);
    goto corral_source_split_4708;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    out_$i181 := $M.38;
    goto corral_source_split_4707;

  $bb104:
    assume !(out_$i173 == 1);
    goto corral_source_split_4706;

  $bb118:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} stop_streaming(out_$p186);
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    out_$p186 := $M.27;
    goto corral_source_split_4730;

  $bb117:
    assume out_$i185 == 1;
    goto corral_source_split_4729;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 1);
    goto corral_source_split_4696;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    out_$i184 := $M.38;
    goto corral_source_split_4695;

  $bb99:
    assume out_$i171 == 1;
    goto corral_source_split_4694;

  $bb92:
    assume out_$i168 == 1;
    assume {:verifier.code 0} true;
    out_$i171 := $slt.i32(out_$i166, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb91:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    out_$i168 := $slt.i32(out_$i166, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb121:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4738;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} out_vslice_dummy_var_148 := start_streaming(out_$p189, out_$i190);
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i32($M.24, in_$p3);
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    out_$p189 := $M.27;
    goto corral_source_split_4735;

  $bb120:
    assume out_$i188 == 1;
    goto corral_source_split_4734;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 1);
    goto corral_source_split_4700;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    out_$i187 := $M.38;
    goto corral_source_split_4699;

  $bb100:
    assume !(out_$i171 == 1);
    goto corral_source_split_4698;

  $bb124:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 897} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4743;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} out_vslice_dummy_var_149 := buffer_prepare(out_$p194);
    goto corral_source_split_4742;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$p194 := $M.28;
    goto corral_source_split_4741;

  $bb123:
    assume out_$i193 == 1;
    goto corral_source_split_4740;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    out_$i193 := $eq.i32(out_$i192, 1);
    goto corral_source_split_4688;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$i192 := $M.38;
    goto corral_source_split_4687;

  $bb94:
    assume out_$i169 == 1;
    goto corral_source_split_4686;

  $bb93:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    out_$i169 := $slt.i32(out_$i166, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb127:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 899} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4748;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} out_vslice_dummy_var_150 := queue_setup(out_$p198, in_$p20, in_$p22, in_$p26, in_$p24, in_$p18);
    goto corral_source_split_4747;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    out_$p198 := $M.27;
    goto corral_source_split_4746;

  $bb126:
    assume out_$i197 == 1;
    goto corral_source_split_4745;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, 1);
    goto corral_source_split_4692;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    out_$i196 := $M.38;
    goto corral_source_split_4691;

  $bb96:
    assume out_$i170 == 1;
    goto corral_source_split_4690;

  $bb95:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i166, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} ldv_stop();
    goto corral_source_split_4750;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb97:
    assume {:verifier.code 0} true;
    assume !(out_$i170 == 1);
    goto $bb98;

  $bb106:
    assume {:verifier.code 0} true;
    assume !(out_$i174 == 1);
    goto $bb98;

  $bb133:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb143:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb145:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $M.42 := out_$i213;
    call {:si_unique_call 907} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i213);
    goto corral_source_split_4773;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    out_$i213 := $add.i32(out_$i212, 1);
    goto corral_source_split_4772;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    out_$i212 := $M.42;
    goto corral_source_split_4771;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 906} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4770;

  $bb144:
    assume out_$i211 == 1;
    goto corral_source_split_4769;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 0);
    goto corral_source_split_4767;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    out_$i210 := $M.46;
    goto corral_source_split_4766;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $M.46 := out_$i209;
    call {:si_unique_call 905} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i209);
    goto corral_source_split_4765;

  SeqInstr_84:
    goto corral_source_split_4764;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} out_$i209 := s2255_probe(out_$p208, in_$p28);
    goto SeqInstr_83;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    out_$p208 := $M.25;
    goto corral_source_split_4763;

  $bb142:
    assume out_$i207 == 1;
    goto corral_source_split_4762;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 1);
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    out_$i206 := $M.39;
    goto corral_source_split_4759;

  $bb140:
    assume out_$i205 == 1;
    goto corral_source_split_4758;

  $bb135:
    assume out_$i203 == 1;
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i202, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb134:
    assume {:verifier.code 0} true;
    out_$i203 := $slt.i32(out_$i202, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_4752:
    assume {:verifier.code 1} true;
    call {:si_unique_call 901} out_$i202 := __VERIFIER_nondet_int();
    call {:si_unique_call 902} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i202);
    call {:si_unique_call 903} {:cexpr "tmp___48"} boogie_si_record_i32(out_$i202);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb132:
    assume out_$i201 == 1;
    goto corral_source_split_4752;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    out_$i201 := $ne.i32(out_$i200, 0);
    goto corral_source_split_4564;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    out_$i200 := $M.39;
    goto corral_source_split_4563;

  $bb17:
    assume !(out_$i97 == 1);
    goto corral_source_split_4562;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.42 := out_$i220;
    call {:si_unique_call 910} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i220);
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    out_$i220 := $sub.i32(out_$i219, 1);
    goto corral_source_split_4784;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    out_$i219 := $M.42;
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} s2255_disconnect(out_$p218);
    goto corral_source_split_4781;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    out_$p218 := $M.25;
    goto corral_source_split_4780;

  $bb152:
    assume out_$i217 == 1;
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 0);
    goto corral_source_split_4777;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    out_$i216 := $M.47;
    goto corral_source_split_4776;

  $bb149:
    assume out_$i215 == 1;
    goto corral_source_split_4775;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 2);
    goto corral_source_split_4756;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$i214 := $M.39;
    goto corral_source_split_4755;

  $bb137:
    assume out_$i204 == 1;
    goto corral_source_split_4754;

  $bb136:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i202, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb150:
    assume {:verifier.code 0} true;
    assume !(out_$i215 == 1);
    goto $bb151;

  $bb153:
    assume {:verifier.code 0} true;
    assume !(out_$i217 == 1);
    goto $bb151;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} ldv_stop();
    goto corral_source_split_4787;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb138:
    assume {:verifier.code 0} true;
    assume !(out_$i204 == 1);
    goto $bb139;

  $bb141:
    assume {:verifier.code 0} true;
    assume !(out_$i205 == 1);
    goto $bb139;

  $bb159:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    goto $bb160;

  SeqInstr_87:
    goto corral_source_split_4790;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} choose_timer_1();
    goto SeqInstr_86;

  $bb158:
    assume out_$i222 == 1;
    goto corral_source_split_4789;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    out_$i222 := $ne.i32(out_$i221, 0);
    goto corral_source_split_4552;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    out_$i221 := $M.40;
    goto corral_source_split_4551;

  $bb12:
    assume out_$i95 == 1;
    goto corral_source_split_4550;

  $bb5:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i90, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i90, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb162:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb172:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $M.42 := out_$i232;
    call {:si_unique_call 918} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i232);
    goto corral_source_split_4807;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    out_$i232 := $sub.i32(out_$i231, 1);
    goto corral_source_split_4806;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    out_$i231 := $M.42;
    goto corral_source_split_4805;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4804;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} s2255_video_device_release(in_$p30);
    goto corral_source_split_4803;

  $bb171:
    assume out_$i230 == 1;
    goto corral_source_split_4802;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 2);
    goto corral_source_split_4800;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$i229 := $M.41;
    goto corral_source_split_4799;

  $bb169:
    assume out_$i228 == 1;
    goto corral_source_split_4798;

  $bb164:
    assume out_$i226 == 1;
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i225, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i226 := $slt.i32(out_$i225, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_4792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 913} out_$i225 := __VERIFIER_nondet_int();
    call {:si_unique_call 914} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i225);
    call {:si_unique_call 915} {:cexpr "tmp___49"} boogie_si_record_i32(out_$i225);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb161:
    assume out_$i224 == 1;
    goto corral_source_split_4792;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    out_$i224 := $ne.i32(out_$i223, 0);
    goto corral_source_split_4556;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    out_$i223 := $M.41;
    goto corral_source_split_4555;

  $bb13:
    assume !(out_$i95 == 1);
    goto corral_source_split_4554;

  $bb176:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.42 := out_$i237;
    call {:si_unique_call 921} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i237);
    goto corral_source_split_4814;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    out_$i237 := $add.i32(out_$i236, 1);
    goto corral_source_split_4813;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    out_$i236 := $M.42;
    goto corral_source_split_4812;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 920} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} out_vslice_dummy_var_151 := ldv_probe_4();
    goto corral_source_split_4810;

  $bb175:
    assume out_$i234 == 1;
    goto corral_source_split_4809;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i233, 1);
    goto corral_source_split_4796;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    out_$i233 := $M.41;
    goto corral_source_split_4795;

  $bb166:
    assume out_$i227 == 1;
    goto corral_source_split_4794;

  $bb165:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i225, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} ldv_stop();
    goto corral_source_split_4816;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb167:
    assume {:verifier.code 0} true;
    assume !(out_$i227 == 1);
    goto $bb168;

  $bb170:
    assume {:verifier.code 0} true;
    assume !(out_$i228 == 1);
    goto $bb168;

  $bb182:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb192:
    assume {:verifier.code 0} true;
    assume !(out_$i245 == 1);
    goto $bb193;

  $bb195:
    assume {:verifier.code 0} true;
    assume !(out_$i247 == 1);
    goto $bb193;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 0);
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$i246 := $M.42;
    goto corral_source_split_4829;

  $bb191:
    assume out_$i245 == 1;
    goto corral_source_split_4828;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 2);
    goto corral_source_split_4826;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    out_$i244 := $M.43;
    goto corral_source_split_4825;

  $bb189:
    assume out_$i243 == 1;
    goto corral_source_split_4824;

  $bb184:
    assume out_$i241 == 1;
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i240, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb183:
    assume {:verifier.code 0} true;
    out_$i241 := $slt.i32(out_$i240, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_4818:
    assume {:verifier.code 1} true;
    call {:si_unique_call 923} out_$i240 := __VERIFIER_nondet_int();
    call {:si_unique_call 924} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i240);
    call {:si_unique_call 925} {:cexpr "tmp___50"} boogie_si_record_i32(out_$i240);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb181:
    assume out_$i239 == 1;
    goto corral_source_split_4818;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    out_$i239 := $ne.i32(out_$i238, 0);
    goto corral_source_split_4544;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    out_$i238 := $M.43;
    goto corral_source_split_4543;

  $bb7:
    assume out_$i93 == 1;
    goto corral_source_split_4542;

  $bb6:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i90, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb200:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb205:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} ldv_initialize_v4l2_file_operations_6();
    goto corral_source_split_4859;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4858;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 938} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4857;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4856;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ldv_initialize_vb2_ops_7();
    goto corral_source_split_4855;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4854;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} ldv_initialize_v4l2_ioctl_ops_5();
    goto corral_source_split_4853;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4852;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 932} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4851;

  $bb204:
    assume out_$i254 == 1;
    goto corral_source_split_4850;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 0);
    goto corral_source_split_4848;

  $bb203:
    assume {:verifier.code 0} true;
    out_$i253 := $M.48;
    goto corral_source_split_4847;

  $bb202:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    out_$i252 := $ne.i32(out_$i251, 0);
    goto corral_source_split_4842;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    out_$i251 := $M.48;
    goto corral_source_split_4841;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $M.48 := out_$i250;
    call {:si_unique_call 930} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i250);
    goto corral_source_split_4840;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} out_$i250 := s2255_driver_init();
    goto corral_source_split_4839;

  $bb199:
    assume out_$i249 == 1;
    goto corral_source_split_4838;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i248, 1);
    goto corral_source_split_4822;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    out_$i248 := $M.43;
    goto corral_source_split_4821;

  $bb186:
    assume out_$i242 == 1;
    goto corral_source_split_4820;

  $bb185:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i240, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} ldv_stop();
    goto corral_source_split_4861;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb187:
    assume {:verifier.code 0} true;
    assume !(out_$i242 == 1);
    goto $bb188;

  $bb190:
    assume {:verifier.code 0} true;
    assume !(out_$i243 == 1);
    goto $bb188;

  $bb212:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb268:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 946} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4968;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} out_vslice_dummy_var_152 := vb2_ioctl_reqbufs(out_$p286, in_$p73, in_$p32);
    goto corral_source_split_4967;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    out_$p286 := $M.33;
    goto corral_source_split_4966;

  $bb267:
    assume out_$i285 == 1;
    goto corral_source_split_4965;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i284, 1);
    goto corral_source_split_4963;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    out_$i284 := $M.44;
    goto corral_source_split_4962;

  $bb265:
    assume out_$i283 == 1;
    goto corral_source_split_4961;

  $bb261:
    assume out_$i281 == 1;
    assume {:verifier.code 0} true;
    out_$i283 := $eq.i32(out_$i257, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb255:
    assume out_$i278 == 1;
    assume {:verifier.code 0} true;
    out_$i281 := $slt.i32(out_$i257, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb243:
    assume out_$i272 == 1;
    assume {:verifier.code 0} true;
    out_$i278 := $slt.i32(out_$i257, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb214:
    assume out_$i258 == 1;
    assume {:verifier.code 0} true;
    out_$i272 := $slt.i32(out_$i257, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb213:
    assume {:verifier.code 0} true;
    out_$i258 := $slt.i32(out_$i257, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_4863:
    assume {:verifier.code 1} true;
    call {:si_unique_call 942} out_$i257 := __VERIFIER_nondet_int();
    call {:si_unique_call 943} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i257);
    call {:si_unique_call 944} {:cexpr "tmp___51"} boogie_si_record_i32(out_$i257);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb211:
    assume out_$i256 == 1;
    goto corral_source_split_4863;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    out_$i256 := $ne.i32(out_$i255, 0);
    goto corral_source_split_4548;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    out_$i255 := $M.44;
    goto corral_source_split_4547;

  $bb9:
    assume out_$i94 == 1;
    goto corral_source_split_4546;

  $bb8:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i90, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb272:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 948} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4974;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} out_vslice_dummy_var_153 := v4l2_event_unsubscribe(out_$p290, out_$p291);
    goto corral_source_split_4973;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    out_$p291 := $M.30;
    goto corral_source_split_4972;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    out_$p290 := $M.32;
    goto corral_source_split_4971;

  $bb271:
    assume out_$i289 == 1;
    goto corral_source_split_4970;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i288, 1);
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    out_$i288 := $M.44;
    goto corral_source_split_4954;

  $bb263:
    assume out_$i282 == 1;
    goto corral_source_split_4953;

  $bb262:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    out_$i282 := $slt.i32(out_$i257, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb275:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 950} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} out_vslice_dummy_var_154 := vidioc_try_fmt_vid_cap(out_$p295, in_$p37, out_$p296);
    goto corral_source_split_4979;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    out_$p296 := $M.31;
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    out_$p295 := $M.33;
    goto corral_source_split_4977;

  $bb274:
    assume out_$i294 == 1;
    goto corral_source_split_4976;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 1);
    goto corral_source_split_4959;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    out_$i293 := $M.44;
    goto corral_source_split_4958;

  $bb264:
    assume !(out_$i282 == 1);
    goto corral_source_split_4957;

  $bb278:
    assume !(out_$i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 952} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4986;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} out_vslice_dummy_var_155 := vidioc_s_std(out_$p300, in_$p58, out_$i301);
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$i301 := $load.i64($M.24, in_$p7);
    goto corral_source_split_4984;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    out_$p300 := $M.33;
    goto corral_source_split_4983;

  $bb277:
    assume out_$i299 == 1;
    goto corral_source_split_4982;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    out_$i299 := $eq.i32(out_$i298, 1);
    goto corral_source_split_4943;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    out_$i298 := $M.44;
    goto corral_source_split_4942;

  $bb257:
    assume out_$i279 == 1;
    goto corral_source_split_4941;

  $bb256:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    out_$i279 := $slt.i32(out_$i257, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb281:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    goto $bb282;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 954} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4991;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} out_vslice_dummy_var_156 := v4l2_ctrl_log_status(out_$p305, in_$p52);
    goto corral_source_split_4990;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    out_$p305 := $M.33;
    goto corral_source_split_4989;

  $bb280:
    assume out_$i304 == 1;
    goto corral_source_split_4988;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i303, 1);
    goto corral_source_split_4947;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    out_$i303 := $M.44;
    goto corral_source_split_4946;

  $bb259:
    assume out_$i280 == 1;
    goto corral_source_split_4945;

  $bb258:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    out_$i280 := $slt.i32(out_$i257, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb284:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 956} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4997;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} out_vslice_dummy_var_157 := vb2_ioctl_querybuf(out_$p309, in_$p38, out_$p310);
    goto corral_source_split_4996;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    out_$p310 := $M.34;
    goto corral_source_split_4995;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    out_$p309 := $M.33;
    goto corral_source_split_4994;

  $bb283:
    assume out_$i308 == 1;
    goto corral_source_split_4993;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    out_$i308 := $eq.i32(out_$i307, 1);
    goto corral_source_split_4951;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    out_$i307 := $M.44;
    goto corral_source_split_4950;

  $bb260:
    assume !(out_$i280 == 1);
    goto corral_source_split_4949;

  $bb287:
    assume !(out_$i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 958} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5003;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} out_vslice_dummy_var_158 := vb2_ioctl_dqbuf(out_$p314, in_$p61, out_$p315);
    goto corral_source_split_5002;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    out_$p315 := $M.34;
    goto corral_source_split_5001;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    out_$p314 := $M.33;
    goto corral_source_split_5000;

  $bb286:
    assume out_$i313 == 1;
    goto corral_source_split_4999;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    out_$i313 := $eq.i32(out_$i312, 1);
    goto corral_source_split_4931;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    out_$i312 := $M.44;
    goto corral_source_split_4930;

  $bb251:
    assume out_$i276 == 1;
    goto corral_source_split_4929;

  $bb245:
    assume out_$i273 == 1;
    assume {:verifier.code 0} true;
    out_$i276 := $slt.i32(out_$i257, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb244:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    out_$i273 := $slt.i32(out_$i257, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb290:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 960} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5009;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} out_vslice_dummy_var_159 := vb2_ioctl_streamoff(out_$p319, in_$p42, out_$i320);
    goto corral_source_split_5008;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    out_$i320 := $load.i32($M.24, in_$p5);
    goto corral_source_split_5007;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    out_$p319 := $M.33;
    goto corral_source_split_5006;

  $bb289:
    assume out_$i318 == 1;
    goto corral_source_split_5005;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, 1);
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    out_$i317 := $M.44;
    goto corral_source_split_4934;

  $bb253:
    assume out_$i277 == 1;
    goto corral_source_split_4933;

  $bb252:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    out_$i277 := $slt.i32(out_$i257, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb293:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb294;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 962} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5014;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} out_vslice_dummy_var_160 := vidioc_enum_fmt_vid_cap(out_$p324, in_$p36, in_$p57);
    goto corral_source_split_5013;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    out_$p324 := $M.33;
    goto corral_source_split_5012;

  $bb292:
    assume out_$i323 == 1;
    goto corral_source_split_5011;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$i323 := $eq.i32(out_$i322, 1);
    goto corral_source_split_4939;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    out_$i322 := $M.44;
    goto corral_source_split_4938;

  $bb254:
    assume !(out_$i277 == 1);
    goto corral_source_split_4937;

  $bb296:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 964} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5020;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} out_vslice_dummy_var_161 := vidioc_s_fmt_vid_cap(out_$p328, in_$p60, out_$p329);
    goto corral_source_split_5019;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    out_$p329 := $M.31;
    goto corral_source_split_5018;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    out_$p328 := $M.33;
    goto corral_source_split_5017;

  $bb295:
    assume out_$i327 == 1;
    goto corral_source_split_5016;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i326, 1);
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    out_$i326 := $M.44;
    goto corral_source_split_4918;

  $bb247:
    assume out_$i274 == 1;
    goto corral_source_split_4917;

  $bb246:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    out_$i274 := $slt.i32(out_$i257, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb299:
    assume !(out_$i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 966} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5026;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} out_vslice_dummy_var_162 := vidioc_g_fmt_vid_cap(out_$p333, in_$p53, out_$p334);
    goto corral_source_split_5025;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    out_$p334 := $M.31;
    goto corral_source_split_5024;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    out_$p333 := $M.33;
    goto corral_source_split_5023;

  $bb298:
    assume out_$i332 == 1;
    goto corral_source_split_5022;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$i332 := $eq.i32(out_$i331, 1);
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$i331 := $M.44;
    goto corral_source_split_4922;

  $bb249:
    assume out_$i275 == 1;
    goto corral_source_split_4921;

  $bb248:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    out_$i275 := $slt.i32(out_$i257, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb302:
    assume !(out_$i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 968} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5031;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} out_vslice_dummy_var_163 := vidioc_g_input(out_$p338, in_$p46, in_$p40);
    goto corral_source_split_5030;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    out_$p338 := $M.33;
    goto corral_source_split_5029;

  $bb301:
    assume out_$i337 == 1;
    goto corral_source_split_5028;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    out_$i337 := $eq.i32(out_$i336, 1);
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    out_$i336 := $M.44;
    goto corral_source_split_4926;

  $bb250:
    assume !(out_$i275 == 1);
    goto corral_source_split_4925;

  $bb305:
    assume !(out_$i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 970} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5037;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} out_vslice_dummy_var_164 := vb2_ioctl_qbuf(out_$p342, in_$p59, out_$p343);
    goto corral_source_split_5036;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    out_$p343 := $M.34;
    goto corral_source_split_5035;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    out_$p342 := $M.33;
    goto corral_source_split_5034;

  $bb304:
    assume out_$i341 == 1;
    goto corral_source_split_5033;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    out_$i341 := $eq.i32(out_$i340, 1);
    goto corral_source_split_4907;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    out_$i340 := $M.44;
    goto corral_source_split_4906;

  $bb239:
    assume out_$i270 == 1;
    goto corral_source_split_4905;

  $bb233:
    assume out_$i267 == 1;
    assume {:verifier.code 0} true;
    out_$i270 := $slt.i32(out_$i257, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb216:
    assume out_$i259 == 1;
    assume {:verifier.code 0} true;
    out_$i267 := $slt.i32(out_$i257, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb215:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    out_$i259 := $slt.i32(out_$i257, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb308:
    assume !(out_$i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 972} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5042;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} out_vslice_dummy_var_165 := vidioc_enum_framesizes(out_$p347, in_$p45, in_$p49);
    goto corral_source_split_5041;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    out_$p347 := $M.33;
    goto corral_source_split_5040;

  $bb307:
    assume out_$i346 == 1;
    goto corral_source_split_5039;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    out_$i346 := $eq.i32(out_$i345, 1);
    goto corral_source_split_4911;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    out_$i345 := $M.44;
    goto corral_source_split_4910;

  $bb241:
    assume out_$i271 == 1;
    goto corral_source_split_4909;

  $bb240:
    assume !(out_$i270 == 1);
    assume {:verifier.code 0} true;
    out_$i271 := $slt.i32(out_$i257, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb311:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    goto $bb312;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5047;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} out_vslice_dummy_var_166 := vidioc_querycap(out_$p351, in_$p47, in_$p34);
    goto corral_source_split_5046;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    out_$p351 := $M.33;
    goto corral_source_split_5045;

  $bb310:
    assume out_$i350 == 1;
    goto corral_source_split_5044;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i349, 1);
    goto corral_source_split_4915;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    out_$i349 := $M.44;
    goto corral_source_split_4914;

  $bb242:
    assume !(out_$i271 == 1);
    goto corral_source_split_4913;

  $bb314:
    assume !(out_$i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb315;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 976} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5052;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} out_vslice_dummy_var_167 := vidioc_enum_frameintervals(out_$p355, in_$p55, in_$p66);
    goto corral_source_split_5051;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    out_$p355 := $M.33;
    goto corral_source_split_5050;

  $bb313:
    assume out_$i354 == 1;
    goto corral_source_split_5049;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    out_$i354 := $eq.i32(out_$i353, 1);
    goto corral_source_split_4895;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    out_$i353 := $M.44;
    goto corral_source_split_4894;

  $bb235:
    assume out_$i268 == 1;
    goto corral_source_split_4893;

  $bb234:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    out_$i268 := $slt.i32(out_$i257, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb317:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    goto $bb318;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 978} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5057;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} out_vslice_dummy_var_168 := vidioc_s_jpegcomp(out_$p359, in_$p41, in_$p51);
    goto corral_source_split_5056;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    out_$p359 := $M.33;
    goto corral_source_split_5055;

  $bb316:
    assume out_$i358 == 1;
    goto corral_source_split_5054;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 1);
    goto corral_source_split_4899;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    out_$i357 := $M.44;
    goto corral_source_split_4898;

  $bb237:
    assume out_$i269 == 1;
    goto corral_source_split_4897;

  $bb236:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    out_$i269 := $slt.i32(out_$i257, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb320:
    assume !(out_$i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 980} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5062;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} out_vslice_dummy_var_169 := vidioc_g_std(out_$p363, in_$p62, in_$p64);
    goto corral_source_split_5061;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    out_$p363 := $M.33;
    goto corral_source_split_5060;

  $bb319:
    assume out_$i362 == 1;
    goto corral_source_split_5059;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 1);
    goto corral_source_split_4903;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    out_$i361 := $M.44;
    goto corral_source_split_4902;

  $bb238:
    assume !(out_$i269 == 1);
    goto corral_source_split_4901;

  $bb323:
    assume !(out_$i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 982} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5067;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} out_vslice_dummy_var_170 := vidioc_g_jpegcomp(out_$p367, in_$p69, in_$p44);
    goto corral_source_split_5066;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    out_$p367 := $M.33;
    goto corral_source_split_5065;

  $bb322:
    assume out_$i366 == 1;
    goto corral_source_split_5064;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    out_$i366 := $eq.i32(out_$i365, 1);
    goto corral_source_split_4883;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    out_$i365 := $M.44;
    goto corral_source_split_4882;

  $bb229:
    assume out_$i265 == 1;
    goto corral_source_split_4881;

  $bb218:
    assume out_$i260 == 1;
    assume {:verifier.code 0} true;
    out_$i265 := $slt.i32(out_$i257, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb217:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    out_$i260 := $slt.i32(out_$i257, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb326:
    assume !(out_$i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 984} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5073;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} out_vslice_dummy_var_171 := vidioc_g_parm(out_$p371, in_$p35, out_$p372);
    goto corral_source_split_5072;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    out_$p372 := $M.35;
    goto corral_source_split_5071;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    out_$p371 := $M.33;
    goto corral_source_split_5070;

  $bb325:
    assume out_$i370 == 1;
    goto corral_source_split_5069;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    out_$i370 := $eq.i32(out_$i369, 1);
    goto corral_source_split_4887;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    out_$i369 := $M.44;
    goto corral_source_split_4886;

  $bb231:
    assume out_$i266 == 1;
    goto corral_source_split_4885;

  $bb230:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    out_$i266 := $slt.i32(out_$i257, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb329:
    assume !(out_$i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 986} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5078;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} out_vslice_dummy_var_172 := vidioc_enum_input(out_$p376, in_$p71, in_$p68);
    goto corral_source_split_5077;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    out_$p376 := $M.33;
    goto corral_source_split_5076;

  $bb328:
    assume out_$i375 == 1;
    goto corral_source_split_5075;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    out_$i375 := $eq.i32(out_$i374, 1);
    goto corral_source_split_4891;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    out_$i374 := $M.44;
    goto corral_source_split_4890;

  $bb232:
    assume !(out_$i266 == 1);
    goto corral_source_split_4889;

  $bb332:
    assume !(out_$i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 988} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5084;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} out_vslice_dummy_var_173 := v4l2_ctrl_subscribe_event(out_$p380, out_$p381);
    goto corral_source_split_5083;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    out_$p381 := $M.30;
    goto corral_source_split_5082;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    out_$p380 := $M.32;
    goto corral_source_split_5081;

  $bb331:
    assume out_$i379 == 1;
    goto corral_source_split_5080;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    out_$i379 := $eq.i32(out_$i378, 1);
    goto corral_source_split_4875;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    out_$i378 := $M.44;
    goto corral_source_split_4874;

  $bb227:
    assume out_$i264 == 1;
    goto corral_source_split_4873;

  $bb220:
    assume out_$i261 == 1;
    assume {:verifier.code 0} true;
    out_$i264 := $slt.i32(out_$i257, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb219:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    out_$i261 := $slt.i32(out_$i257, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb335:
    assume !(out_$i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 990} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5090;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} out_vslice_dummy_var_174 := vidioc_s_parm(out_$p385, in_$p54, out_$p386);
    goto corral_source_split_5089;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    out_$p386 := $M.35;
    goto corral_source_split_5088;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    out_$p385 := $M.33;
    goto corral_source_split_5087;

  $bb334:
    assume out_$i384 == 1;
    goto corral_source_split_5086;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    out_$i384 := $eq.i32(out_$i383, 1);
    goto corral_source_split_4879;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    out_$i383 := $M.44;
    goto corral_source_split_4878;

  $bb228:
    assume !(out_$i264 == 1);
    goto corral_source_split_4877;

  $bb338:
    assume !(out_$i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 992} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5096;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} out_vslice_dummy_var_175 := vidioc_s_input(out_$p390, in_$p72, out_$i391);
    goto corral_source_split_5095;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    out_$i391 := $load.i32($M.24, in_$p4);
    goto corral_source_split_5094;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    out_$p390 := $M.33;
    goto corral_source_split_5093;

  $bb337:
    assume out_$i389 == 1;
    goto corral_source_split_5092;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    out_$i389 := $eq.i32(out_$i388, 1);
    goto corral_source_split_4867;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    out_$i388 := $M.44;
    goto corral_source_split_4866;

  $bb222:
    assume out_$i262 == 1;
    goto corral_source_split_4865;

  $bb221:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    out_$i262 := $slt.i32(out_$i257, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb341:
    assume !(out_$i394 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    goto $bb342;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5102;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} out_vslice_dummy_var_176 := vb2_ioctl_streamon(out_$p395, in_$p70, out_$i396);
    goto corral_source_split_5101;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    out_$i396 := $load.i32($M.24, in_$p6);
    goto corral_source_split_5100;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    out_$p395 := $M.33;
    goto corral_source_split_5099;

  $bb340:
    assume out_$i394 == 1;
    goto corral_source_split_5098;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    out_$i394 := $eq.i32(out_$i393, 1);
    goto corral_source_split_4871;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    out_$i393 := $M.44;
    goto corral_source_split_4870;

  $bb224:
    assume out_$i263 == 1;
    goto corral_source_split_4869;

  $bb223:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i257, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_stop();
    goto corral_source_split_5104;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb225:
    assume {:verifier.code 0} true;
    assume !(out_$i263 == 1);
    goto $bb226;

  $bb266:
    assume {:verifier.code 0} true;
    assume !(out_$i283 == 1);
    goto $bb226;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} ldv_stop();
    goto corral_source_split_5106;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i94 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i99 == 1);
    goto $bb11;

  $bb74_dummy:
    call {:si_unique_call 1} out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i192, out_$i193, out_$p194, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i288, out_$i289, out_$p290, out_$p291, out_$i293, out_$i294, out_$p295, out_$p296, out_$i298, out_$i299, out_$p300, out_$i301, out_$i303, out_$i304, out_$p305, out_$i307, out_$i308, out_$p309, out_$p310, out_$i312, out_$i313, out_$p314, out_$p315, out_$i317, out_$i318, out_$p319, out_$i320, out_$i322, out_$i323, out_$p324, out_$i326, out_$i327, out_$p328, out_$p329, out_$i331, out_$i332, out_$p333, out_$p334, out_$i336, out_$i337, out_$p338, out_$i340, out_$i341, out_$p342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i353, out_$i354, out_$p355, out_$i357, out_$i358, out_$p359, out_$i361, out_$i362, out_$p363, out_$i365, out_$i366, out_$p367, out_$i369, out_$i370, out_$p371, out_$p372, out_$i374, out_$i375, out_$p376, out_$i378, out_$i379, out_$p380, out_$p381, out_$i383, out_$i384, out_$p385, out_$p386, out_$i388, out_$i389, out_$p390, out_$i391, out_$i393, out_$i394, out_$p395, out_$i396, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p9, in_$p10, in_$p12, in_$p14, in_$p16, in_$p18, in_$p20, in_$p22, in_$p24, in_$p26, in_$p28, in_$p30, in_$p32, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p40, in_$p41, in_$p42, in_$p44, in_$p45, in_$p46, in_$p47, in_$p49, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p64, in_$p66, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$p73, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i192, out_$i193, out_$p194, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i288, out_$i289, out_$p290, out_$p291, out_$i293, out_$i294, out_$p295, out_$p296, out_$i298, out_$i299, out_$p300, out_$i301, out_$i303, out_$i304, out_$p305, out_$i307, out_$i308, out_$p309, out_$p310, out_$i312, out_$i313, out_$p314, out_$p315, out_$i317, out_$i318, out_$p319, out_$i320, out_$i322, out_$i323, out_$p324, out_$i326, out_$i327, out_$p328, out_$p329, out_$i331, out_$i332, out_$p333, out_$p334, out_$i336, out_$i337, out_$p338, out_$i340, out_$i341, out_$p342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i353, out_$i354, out_$p355, out_$i357, out_$i358, out_$p359, out_$i361, out_$i362, out_$p363, out_$i365, out_$i366, out_$p367, out_$i369, out_$i370, out_$p371, out_$p372, out_$i374, out_$i375, out_$p376, out_$i378, out_$i379, out_$p380, out_$p381, out_$i383, out_$i384, out_$p385, out_$p386, out_$i388, out_$i389, out_$p390, out_$i391, out_$i393, out_$i394, out_$p395, out_$i396, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p64: ref, in_$p66: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i90: i32, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i122: i32, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i64, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i32, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i64, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i154: i32, in_$i155: i64, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$i168: i1, in_$i169: i1, in_$i170: i1, in_$i171: i1, in_$i172: i1, in_$i173: i1, in_$i174: i1, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i192: i32, in_$i193: i1, in_$p194: ref, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i200: i32, in_$i201: i1, in_$i202: i32, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i32, in_$i211: i1, in_$i212: i32, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i1, in_$i227: i1, in_$i228: i1, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i32, in_$i233: i32, in_$i234: i1, in_$i236: i32, in_$i237: i32, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$i241: i1, in_$i242: i1, in_$i243: i1, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$i251: i32, in_$i252: i1, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$i258: i1, in_$i259: i1, in_$i260: i1, in_$i261: i1, in_$i262: i1, in_$i263: i1, in_$i264: i1, in_$i265: i1, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i1, in_$i272: i1, in_$i273: i1, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i1, in_$i278: i1, in_$i279: i1, in_$i280: i1, in_$i281: i1, in_$i282: i1, in_$i283: i1, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$p291: ref, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$p296: ref, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$i301: i64, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$p310: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$p315: ref, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$i320: i32, in_$i322: i32, in_$i323: i1, in_$p324: ref, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$p329: ref, in_$i331: i32, in_$i332: i1, in_$p333: ref, in_$p334: ref, in_$i336: i32, in_$i337: i1, in_$p338: ref, in_$i340: i32, in_$i341: i1, in_$p342: ref, in_$p343: ref, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$p372: ref, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$i378: i32, in_$i379: i1, in_$p380: ref, in_$p381: ref, in_$i383: i32, in_$i384: i1, in_$p385: ref, in_$p386: ref, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i391: i32, in_$i393: i32, in_$i394: i1, in_$p395: ref, in_$i396: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i64, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i64, in_vslice_dummy_var_146: i64, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i32, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32) returns (out_$i90: i32, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i122: i32, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i64, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i32, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i64, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i154: i32, out_$i155: i64, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$i168: i1, out_$i169: i1, out_$i170: i1, out_$i171: i1, out_$i172: i1, out_$i173: i1, out_$i174: i1, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i192: i32, out_$i193: i1, out_$p194: ref, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i200: i32, out_$i201: i1, out_$i202: i32, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i32, out_$i211: i1, out_$i212: i32, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i1, out_$i227: i1, out_$i228: i1, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i32, out_$i233: i32, out_$i234: i1, out_$i236: i32, out_$i237: i32, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$i241: i1, out_$i242: i1, out_$i243: i1, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$i251: i32, out_$i252: i1, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$i258: i1, out_$i259: i1, out_$i260: i1, out_$i261: i1, out_$i262: i1, out_$i263: i1, out_$i264: i1, out_$i265: i1, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i1, out_$i272: i1, out_$i273: i1, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i1, out_$i278: i1, out_$i279: i1, out_$i280: i1, out_$i281: i1, out_$i282: i1, out_$i283: i1, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$p291: ref, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$p296: ref, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$i301: i64, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$p310: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$p315: ref, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$i320: i32, out_$i322: i32, out_$i323: i1, out_$p324: ref, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$p329: ref, out_$i331: i32, out_$i332: i1, out_$p333: ref, out_$p334: ref, out_$i336: i32, out_$i337: i1, out_$p338: ref, out_$i340: i32, out_$i341: i1, out_$p342: ref, out_$p343: ref, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$p372: ref, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$i378: i32, out_$i379: i1, out_$p380: ref, out_$p381: ref, out_$i383: i32, out_$i384: i1, out_$p385: ref, out_$p386: ref, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i391: i32, out_$i393: i32, out_$i394: i1, out_$p395: ref, out_$i396: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i64, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i64, out_vslice_dummy_var_146: i64, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i32, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32);
  modifies $M.36, $M.42, $M.45, $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.37, $M.38, $M.3, $M.39, $M.46, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, assertsPassed, $M.41, $M.26, $M.27, $M.28, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.44, $M.43, $M.48, $M.47, $M.25, $M.15, $M.14;


