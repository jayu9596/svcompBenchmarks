var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]i24;

var $M.7: [ref]i8;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]i24;

var $M.13: [ref]i8;

var $M.14: [ref]i32;

var $M.15: ref;

var $M.16: i32;

var $M.17: ref;

var $M.18: i32;

var $M.19: ref;

var $M.20: ref;

var $M.21: ref;

var $M.22: i32;

var $M.23: i32;

var $M.24: ref;

var $M.25: [ref]ref;

var $M.26: [ref]i64;

var $M.27: [ref]ref;

var $M.28: [ref]i32;

var $M.29: [ref]i8;

var $M.30: [ref]i8;

var $M.31: [ref]i16;

var $M.32: [ref]ref;

var $M.33: ref;

var $M.34: [ref]i32;

var $M.35: [ref]i32;

var $M.36: [ref]ref;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: [ref]ref;

var $M.40: ref;

var $M.41: [ref]i32;

var $M.42: [ref]i8;

var $M.43: i32;

var $M.44: [ref]i32;

var $M.45: [ref]i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: ref;

var $M.51: [ref]i8;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.60: i32;

var $M.75: [ref]i8;

var $M.76: [ref]i8;

var $M.77: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 484762);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const gdm_netdev_ops_group1: ref;

axiom gdm_netdev_ops_group1 == $sub.ref(0, 2060);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 3088);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 4116);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 5144);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 6172);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 7200);

const gdm_usb_driver_group1: ref;

axiom gdm_usb_driver_group1 == $sub.ref(0, 8232);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 9260);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 10288);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 11316);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 12344);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 13372);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 14400);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 15428);

const INTERF_STATE: ref;

axiom INTERF_STATE == $sub.ref(0, 16456);

const SERIAL_STATE: ref;

axiom SERIAL_STATE == $sub.ref(0, 17484);

const usb_intfdata: ref;

axiom usb_intfdata == $sub.ref(0, 18516);

const usb_urb: ref;

axiom usb_urb == $sub.ref(0, 19548);

const usb_dev: ref;

axiom usb_dev == $sub.ref(0, 20580);

const dev_counter: ref;

axiom dev_counter == $sub.ref(0, 21608);

const completeFnIntCounter: ref;

axiom completeFnIntCounter == $sub.ref(0, 22636);

const completeFnBulkCounter: ref;

axiom completeFnBulkCounter == $sub.ref(0, 23664);

const completeFnInt: ref;

axiom completeFnInt == $sub.ref(0, 24696);

const completeFnBulk: ref;

axiom completeFnBulk == $sub.ref(0, 25728);

const __mod_usb_device_table: ref;

axiom __mod_usb_device_table == $sub.ref(0, 26784);

const {:count 38} id_table: ref;

axiom id_table == $sub.ref(0, 29024);

const gdm_usb_driver: ref;

axiom gdm_usb_driver == $sub.ref(0, 30352);

const k_mode_stop: ref;

axiom k_mode_stop == $sub.ref(0, 31380);

const k_wait: ref;

axiom k_wait == $sub.ref(0, 32492);

const k_list: ref;

axiom k_list == $sub.ref(0, 33532);

const k_lock: ref;

axiom k_lock == $sub.ref(0, 34628);

const netlink_mutex: ref;

axiom netlink_mutex == $sub.ref(0, 35820);

const wm_event: ref;

axiom wm_event == $sub.ref(0, 37044);

const {:count 6} gdm_wimax_macaddr: ref;

axiom gdm_wimax_macaddr == $sub.ref(0, 38074);

const gdm_netdev_ops: ref;

axiom gdm_netdev_ops == $sub.ref(0, 39546);

const tx_buf: ref;

axiom tx_buf == $sub.ref(0, 40578);

const qos_free_list: ref;

axiom qos_free_list == $sub.ref(0, 41698);

const rcv_cb: ref;

axiom rcv_cb == $sub.ref(0, 42730);

const {:count 39} .str.55: ref;

axiom .str.55 == $sub.ref(0, 43793);

const {:count 16} .str.56: ref;

axiom .str.56 == $sub.ref(0, 44833);

const {:count 22} .str.57: ref;

axiom .str.57 == $sub.ref(0, 45879);

const {:count 118} .str.58: ref;

axiom .str.58 == $sub.ref(0, 47021);

const {:count 27} .str.59: ref;

axiom .str.59 == $sub.ref(0, 48072);

const {:count 25} .str.47: ref;

axiom .str.47 == $sub.ref(0, 49121);

const {:count 21} .str.48: ref;

axiom .str.48 == $sub.ref(0, 50166);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 6} .str.9: ref;

axiom .str.9 == $sub.ref(0, 51196);

const {:count 20} .str.69: ref;

axiom .str.69 == $sub.ref(0, 52240);

const {:count 226} .str.11: ref;

axiom .str.11 == $sub.ref(0, 53490);

const {:count 23} .str.70: ref;

axiom .str.70 == $sub.ref(0, 54537);

const {:count 30} .str.71: ref;

axiom .str.71 == $sub.ref(0, 55591);

const {:count 36} .str.60: ref;

axiom .str.60 == $sub.ref(0, 56651);

const {:count 53} .str.61: ref;

axiom .str.61 == $sub.ref(0, 57728);

const {:count 21} .str.10: ref;

axiom .str.10 == $sub.ref(0, 58773);

const {:count 22} .str.12: ref;

axiom .str.12 == $sub.ref(0, 59819);

const {:count 26} .str.35: ref;

axiom .str.35 == $sub.ref(0, 60869);

const {:count 70} .str.36: ref;

axiom .str.36 == $sub.ref(0, 61963);

const {:count 22} .str.72: ref;

axiom .str.72 == $sub.ref(0, 63009);

const {:count 23} .str.62: ref;

axiom .str.62 == $sub.ref(0, 64056);

const {:count 24} .str.63: ref;

axiom .str.63 == $sub.ref(0, 65104);

const {:count 14} .str.64: ref;

axiom .str.64 == $sub.ref(0, 66142);

const {:count 7} .str.80: ref;

axiom .str.80 == $sub.ref(0, 67173);

const {:count 12} .str.81: ref;

axiom .str.81 == $sub.ref(0, 68209);

const {:count 10} .str.85: ref;

axiom .str.85 == $sub.ref(0, 69243);

const {:count 44} .str.73: ref;

axiom .str.73 == $sub.ref(0, 70311);

const {:count 29} .str.74: ref;

axiom .str.74 == $sub.ref(0, 71364);

const {:count 6} .str.75: ref;

axiom .str.75 == $sub.ref(0, 72394);

const {:count 15} .str.76: ref;

axiom .str.76 == $sub.ref(0, 73433);

const .str: ref;

axiom .str == $sub.ref(0, 74462);

const {:count 31} .str.1: ref;

axiom .str.1 == $sub.ref(0, 75517);

const {:count 30} .str.2: ref;

axiom .str.2 == $sub.ref(0, 76571);

const {:count 32} .str.3: ref;

axiom .str.3 == $sub.ref(0, 77627);

const {:count 34} .str.54: ref;

axiom .str.54 == $sub.ref(0, 78685);

const {:count 30} .str.41: ref;

axiom .str.41 == $sub.ref(0, 79739);

const {:count 28} .str.42: ref;

axiom .str.42 == $sub.ref(0, 80791);

const {:count 23} .str.49: ref;

axiom .str.49 == $sub.ref(0, 81838);

const {:count 22} .str.13: ref;

axiom .str.13 == $sub.ref(0, 82884);

const {:count 53} .str.14: ref;

axiom .str.14 == $sub.ref(0, 83961);

const {:count 24} .str.15: ref;

axiom .str.15 == $sub.ref(0, 85009);

const {:count 31} .str.16: ref;

axiom .str.16 == $sub.ref(0, 86064);

const {:count 38} .str.17: ref;

axiom .str.17 == $sub.ref(0, 87126);

const {:count 27} .str.51: ref;

axiom .str.51 == $sub.ref(0, 88177);

const {:count 19} .str.52: ref;

axiom .str.52 == $sub.ref(0, 89220);

const {:count 16} .str.53: ref;

axiom .str.53 == $sub.ref(0, 90260);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 23} .str.50: ref;

axiom .str.50 == $sub.ref(0, 91307);

const {:count 28} .str.43: ref;

axiom .str.43 == $sub.ref(0, 92359);

const {:count 30} .str.44: ref;

axiom .str.44 == $sub.ref(0, 93413);

const {:count 43} .str.45: ref;

axiom .str.45 == $sub.ref(0, 94480);

const {:count 25} .str.46: ref;

axiom .str.46 == $sub.ref(0, 95529);

const {:count 25} .str.8: ref;

axiom .str.8 == $sub.ref(0, 96578);

const {:count 30} .str.68: ref;

axiom .str.68 == $sub.ref(0, 97632);

const {:count 15} .str.37: ref;

axiom .str.37 == $sub.ref(0, 98671);

const {:count 29} .str.38: ref;

axiom .str.38 == $sub.ref(0, 99724);

const {:count 48} .str.39: ref;

axiom .str.39 == $sub.ref(0, 100796);

const {:count 228} .str.40: ref;

axiom .str.40 == $sub.ref(0, 102048);

const {:count 31} .str.4: ref;

axiom .str.4 == $sub.ref(0, 103103);

const {:count 32} .str.5: ref;

axiom .str.5 == $sub.ref(0, 104159);

const {:count 34} .str.6: ref;

axiom .str.6 == $sub.ref(0, 105217);

const {:count 50} .str.7: ref;

axiom .str.7 == $sub.ref(0, 106291);

const init_net: ref;

axiom init_net == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 24} .str.65: ref;

axiom .str.65 == $sub.ref(0, 107339);

const {:count 36} .str.66: ref;

axiom .str.66 == $sub.ref(0, 108399);

const {:count 23} .str.67: ref;

axiom .str.67 == $sub.ref(0, 109446);

const {:count 20} .str.83: ref;

axiom .str.83 == $sub.ref(0, 110490);

const {:count 20} .str.84: ref;

axiom .str.84 == $sub.ref(0, 111534);

const {:count 20} .str.77: ref;

axiom .str.77 == $sub.ref(0, 112578);

const {:count 16} .str.82: ref;

axiom .str.82 == $sub.ref(0, 113618);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 13} .str.78: ref;

axiom .str.78 == $sub.ref(0, 114655);

const {:count 226} .str.79: ref;

axiom .str.79 == $sub.ref(0, 115905);

const {:count 20} .str.18: ref;

axiom .str.18 == $sub.ref(0, 116949);

const {:count 45} .str.19: ref;

axiom .str.19 == $sub.ref(0, 118018);

const {:count 29} .str.20: ref;

axiom .str.20 == $sub.ref(0, 119071);

const {:count 21} .str.21: ref;

axiom .str.21 == $sub.ref(0, 120116);

const {:count 66} .str.22: ref;

axiom .str.22 == $sub.ref(0, 121206);

const {:count 26} .str.23: ref;

axiom .str.23 == $sub.ref(0, 122256);

const {:count 25} .str.24: ref;

axiom .str.24 == $sub.ref(0, 123305);

const {:count 31} .str.25: ref;

axiom .str.25 == $sub.ref(0, 124360);

const {:count 29} .str.26: ref;

axiom .str.26 == $sub.ref(0, 125413);

const {:count 35} .str.27: ref;

axiom .str.27 == $sub.ref(0, 126472);

const {:count 38} .str.28: ref;

axiom .str.28 == $sub.ref(0, 127534);

const {:count 38} .str.87: ref;

axiom .str.87 == $sub.ref(0, 128596);

const {:count 15} .str.29: ref;

axiom .str.29 == $sub.ref(0, 129635);

const {:count 22} .str.30: ref;

axiom .str.30 == $sub.ref(0, 130681);

const {:count 6} .str.31: ref;

axiom .str.31 == $sub.ref(0, 131711);

const {:count 41} .str.32: ref;

axiom .str.32 == $sub.ref(0, 132776);

const {:count 7} .str.33: ref;

axiom .str.33 == $sub.ref(0, 133807);

const {:count 45} .str.34: ref;

axiom .str.34 == $sub.ref(0, 134876);

const {:count 44} .str.88: ref;

axiom .str.88 == $sub.ref(0, 135944);

const {:count 13} .str.86: ref;

axiom .str.86 == $sub.ref(0, 136981);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 138013);

const {:count 3} .str.1.192: ref;

axiom .str.1.192 == $sub.ref(0, 139040);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 140078);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 141106);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 142138);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 143170);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 144202);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 145234);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const gdm_wimax_open: ref;

axiom gdm_wimax_open == $sub.ref(0, 146266);

procedure gdm_wimax_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gdm_wimax_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p1 := netdev_priv($p0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} netif_start_queue($p0);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} gdm_wimax_ind_if_updown($p0, 1);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const gdm_wimax_close: ref;

axiom gdm_wimax_close == $sub.ref(0, 147298);

procedure gdm_wimax_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gdm_wimax_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p1 := netdev_priv($p0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} netif_stop_queue($p0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} gdm_wimax_ind_if_updown($p0, 0);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const gdm_wimax_tx: ref;

axiom gdm_wimax_tx == $sub.ref(0, 148330);

procedure gdm_wimax_tx($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.28, $M.16, $M.18, $M.42, $M.15, $M.19, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.43, $M.30, $M.31, $M.32, assertsPassed;



implementation gdm_wimax_tx($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i14: i32;
  var vslice_dummy_var_81: ref;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p3 := netdev_priv($p1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i10 := gdm_wimax_header($p2);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 19} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p9);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 5);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p2);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i26 := gdm_qos_send_hci_pkt($p25, $p1);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 23} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i14 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p9, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vslice_dummy_var_83 := netdev_emerg.ref.ref.i32($p1, .str.61, $i22);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p2);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} kfree_skb($p24);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} vslice_dummy_var_82 := netdev_err.ref.ref($p1, .str.60);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p2);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} vslice_dummy_var_81 := skb_pull($p12, 4);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i14 := $i10;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const gdm_wimax_set_mac_addr: ref;

axiom gdm_wimax_set_mac_addr == $sub.ref(0, 149362);

procedure gdm_wimax_set_mac_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.28, $CurrAddr, $M.16, $M.18, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation gdm_wimax_set_mac_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i3 := netif_running($p0);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 27} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i9 := is_valid_ether_addr($p8);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 29} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} __gdm_wimax_set_mac_addr($p0, $p15);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 99);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;
}



const gdm_wimax_ioctl: ref;

axiom gdm_wimax_ioctl == $sub.ref(0, 150394);

procedure gdm_wimax_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation gdm_wimax_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i7: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} {:cexpr "gdm_wimax_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p4 := netdev_priv($p0);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i2, 35312);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 36113);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, 36113);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} vslice_dummy_var_85 := netdev_err.ref.ref.ref.i32($p0, .str.57, .str.56, $i2);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 95);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(18, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, 15);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 36112);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i25 == 1);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 36113);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb23:
    assume $i38 == 1;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(18, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(200, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(18, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i64($i50);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p48, $mul.ref($i51, 16));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i54 := gdm_wimax_ioctl_set_data($p52, $p53);
    call {:si_unique_call 38} {:cexpr "ret"} boogie_si_record_i32($i54);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, 0);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i55 == 1;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i7 := $i54;
    goto $bb3;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} gdm_update_fsm($p0, $p46);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume $i25 == 1;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(200, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(18, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i64($i30);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p28, $mul.ref($i31, 16));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i33 := gdm_wimax_ioctl_get_data($p26, $p32);
    call {:si_unique_call 35} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i34 == 1;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i7 := $i33;
    goto $bb3;

  $bb14:
    assume $i17 == 1;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(18, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_84 := netdev_err.ref.ref.ref.i32($p0, .str.55, .str.56, $i20);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 95);
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 36112);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb11;

  $bb12:
    assume $i13 == 1;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 95);
    goto $bb3;
}



const gdm_wimax_set_config: ref;

axiom gdm_wimax_set_config == $sub.ref(0, 151426);

procedure gdm_wimax_set_config($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gdm_wimax_set_config($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(448, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;
}



const gdm_wimax_stats: ref;

axiom gdm_wimax_stats == $sub.ref(0, 152458);

procedure gdm_wimax_stats($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation gdm_wimax_stats($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p1 := netdev_priv($p0);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(16, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 153490);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3136, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const netdev_err: ref;

axiom netdev_err == $sub.ref(0, 154522);

procedure netdev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 1} true;
    call {:si_unique_call 41} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 42} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 1} true;
    call {:si_unique_call 43} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 44} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 45} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 46} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 47} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 48} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 49} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 50} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 1} true;
    call {:si_unique_call 51} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 52} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gdm_wimax_ioctl_get_data: ref;

axiom gdm_wimax_ioctl_get_data == $sub.ref(0, 155554);

procedure gdm_wimax_ioctl_get_data($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation gdm_wimax_ioctl_get_data($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;
  var $i11: i32;
  var $i9: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, $i5);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i9);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i25 := copy_to_user($p22, $p24, $i9);
    call {:si_unique_call 54} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 14);
    goto $bb8;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb8;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const gdm_update_fsm: ref;

axiom gdm_update_fsm == $sub.ref(0, 156586);

procedure gdm_update_fsm($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation gdm_update_fsm($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p2 := netdev_priv($p0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i12, $i14);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i17, $i19);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 5);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 5);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} gdm_wimax_ind_fsm_update($p0, $p1);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} netif_carrier_off($p0);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} gdm_qos_release_list($p27);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} netif_carrier_on($p0);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gdm_wimax_ioctl_set_data: ref;

axiom gdm_wimax_ioctl_set_data == $sub.ref(0, 157618);

procedure gdm_wimax_ioctl_set_data($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gdm_wimax_ioctl_set_data($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i14 == 1);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i16, $i18);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i37 := copy_from_user($p31, $p33, $i36);
    call {:si_unique_call 63} {:cexpr "tmp"} boogie_si_record_i64($i37);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} kdelete($p39);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} kdelete($p20);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $p24 := kmalloc($i23, 208);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p24);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb9;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const kdelete: ref;

axiom kdelete == $sub.ref(0, 158650);

procedure kdelete($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kdelete($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p0);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} kfree($p6);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 159682);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 67} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 160714);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i22: i64;
  var $i13: i64;
  var vslice_dummy_var_86: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 71} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 72} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} might_fault();
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 75} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 79} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32(1, 0);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 83} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32(1, 0);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} vslice_dummy_var_86 := ldv__builtin_expect($i30, 0);
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} warn_slowpath_fmt.ref.i32.ref(.str.58, 66, .str.59);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 81} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 77} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 161746);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const might_fault: ref;

axiom might_fault == $sub.ref(0, 162778);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 163810);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 87} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 164842);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 88} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 89} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 90} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 165874);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 166906);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} free_($p0);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 167938);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 93} $free($p0);
    return;
}



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 168970);

procedure netif_carrier_on($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_on($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 170002);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    return;
}



const gdm_qos_release_list: ref;

axiom gdm_qos_release_list == $sub.ref(0, 171034);

procedure gdm_qos_release_list($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation gdm_qos_release_list($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p9: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p30: ref;
  var $p31: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $p117: ref;
  var $p119: ref;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p129: ref;
  var $p130: ref;
  var $p132: ref;
  var $i133: i64;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p143: ref;
  var $p144: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p156: ref;
  var $p157: ref;
  var $p159: ref;
  var $i160: i64;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i64;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $i174: i64;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p183: ref;
  var $p184: ref;
  var $p186: ref;
  var $i187: i64;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i64;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p197: ref;
  var $p198: ref;
  var $p200: ref;
  var $i201: i64;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p210: ref;
  var $p211: ref;
  var $p213: ref;
  var $i214: i64;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i64;
  var $i219: i1;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p224: ref;
  var $p225: ref;
  var $p227: ref;
  var $i228: i64;
  var $i229: i1;
  var $p230: ref;
  var $p231: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p237: ref;
  var $p238: ref;
  var $p240: ref;
  var $i241: i64;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $i245: i64;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p251: ref;
  var $p252: ref;
  var $p254: ref;
  var $i255: i64;
  var $i256: i1;
  var $p257: ref;
  var $p258: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p264: ref;
  var $p265: ref;
  var $p267: ref;
  var $i268: i64;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i64;
  var $i273: i1;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p278: ref;
  var $p279: ref;
  var $p281: ref;
  var $i282: i64;
  var $i283: i1;
  var $p284: ref;
  var $p285: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p291: ref;
  var $p292: ref;
  var $p294: ref;
  var $i295: i64;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $i299: i64;
  var $i300: i1;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p305: ref;
  var $p306: ref;
  var $p308: ref;
  var $i309: i64;
  var $i310: i1;
  var $p311: ref;
  var $p312: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p318: ref;
  var $p319: ref;
  var $p321: ref;
  var $i322: i64;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $i326: i64;
  var $i327: i1;
  var $p328: ref;
  var $p329: ref;
  var $p330: ref;
  var $p332: ref;
  var $p333: ref;
  var $p335: ref;
  var $i336: i64;
  var $i337: i1;
  var $p338: ref;
  var $p339: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $p345: ref;
  var $p346: ref;
  var $p348: ref;
  var $i349: i64;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $i353: i64;
  var $i354: i1;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p359: ref;
  var $p360: ref;
  var $p362: ref;
  var $i363: i64;
  var $i364: i1;
  var $p365: ref;
  var $p366: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $p372: ref;
  var $p373: ref;
  var $p375: ref;
  var $i376: i64;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $i380: i64;
  var $i381: i1;
  var $p382: ref;
  var $p383: ref;
  var $p384: ref;
  var $p386: ref;
  var $p387: ref;
  var $p389: ref;
  var $i390: i64;
  var $i391: i1;
  var $p392: ref;
  var $p393: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p399: ref;
  var $p400: ref;
  var $p402: ref;
  var $i403: i64;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $i407: i64;
  var $i408: i1;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $p413: ref;
  var $p414: ref;
  var $p416: ref;
  var $i417: i64;
  var $i418: i1;
  var $p419: ref;
  var $p420: ref;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p426: ref;
  var $p427: ref;
  var $p429: ref;
  var $i430: i64;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $i434: i64;
  var $i435: i1;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $p440: ref;
  var $p441: ref;
  var $p443: ref;
  var $i444: i64;
  var $i445: i1;
  var $p448: ref;
  var $p451: ref;
  var $p454: ref;
  var $p457: ref;
  var $p460: ref;
  var $p463: ref;
  var $p466: ref;
  var $p469: ref;
  var $p472: ref;
  var $p475: ref;
  var $p478: ref;
  var $p481: ref;
  var $p484: ref;
  var $p487: ref;
  var $p490: ref;
  var $p493: ref;
  var $p496: ref;
  var $p499: ref;
  var $p502: ref;
  var $p505: ref;
  var $p508: ref;
  var $p511: ref;
  var $p514: ref;
  var $p517: ref;
  var $p520: ref;
  var $p523: ref;
  var $p526: ref;
  var $p529: ref;
  var $p532: ref;
  var $p535: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} INIT_LIST_HEAD($p1);
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $p5 := spinlock_check($p4);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 98} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    $p9 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    $p12 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p448 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(1, 88)), $mul.ref(8, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p448, 0);
    $p451 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(1, 88)), $mul.ref(0, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p451, 0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    $p454 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(2, 88)), $mul.ref(8, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p454, 0);
    $p457 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(2, 88)), $mul.ref(0, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p457, 0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    $p460 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(3, 88)), $mul.ref(8, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p460, 0);
    $p463 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(3, 88)), $mul.ref(0, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p463, 0);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    $p466 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(4, 88)), $mul.ref(8, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p466, 0);
    $p469 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(4, 88)), $mul.ref(0, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p469, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    $p472 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(5, 88)), $mul.ref(8, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p472, 0);
    $p475 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(5, 88)), $mul.ref(0, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p475, 0);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    $p478 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(6, 88)), $mul.ref(8, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p478, 0);
    $p481 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(6, 88)), $mul.ref(0, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p481, 0);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    $p484 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(7, 88)), $mul.ref(8, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p484, 0);
    $p487 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(7, 88)), $mul.ref(0, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p487, 0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    $p490 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(8, 88)), $mul.ref(8, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p490, 0);
    $p493 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(8, 88)), $mul.ref(0, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p493, 0);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    $p496 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(9, 88)), $mul.ref(8, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p496, 0);
    $p499 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(9, 88)), $mul.ref(0, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p499, 0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    $p502 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(10, 88)), $mul.ref(8, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p502, 0);
    $p505 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(10, 88)), $mul.ref(0, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p505, 0);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    $p508 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(11, 88)), $mul.ref(8, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p508, 0);
    $p511 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(11, 88)), $mul.ref(0, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p511, 0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    $p514 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(12, 88)), $mul.ref(8, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p514, 0);
    $p517 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(12, 88)), $mul.ref(0, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p517, 0);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    $p520 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(13, 88)), $mul.ref(8, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p520, 0);
    $p523 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(13, 88)), $mul.ref(0, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p523, 0);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    $p526 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(14, 88)), $mul.ref(8, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p526, 0);
    $p529 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(14, 88)), $mul.ref(0, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p529, 0);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    $p532 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(15, 88)), $mul.ref(8, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p532, 0);
    $p535 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(15, 88)), $mul.ref(0, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p535, 0);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(256, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(260, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 15);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i25, $i28);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p41 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p46, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(1, 16));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i52, $i56);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $p68 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p69, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p73, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p73, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    $p80 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(2, 16));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i79, $i83);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    $p95 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p96, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p100, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p100, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    $p107 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p108, $mul.ref(3, 16));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i106, $i110);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    $p122 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p123, $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p127, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p127, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    $p134 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p135, $mul.ref(4, 16));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i138 := $ne.i64($i133, $i137);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    $p149 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p150, $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p154, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p154, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    $p161 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p162, $mul.ref(5, 16));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p163);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i165 := $ne.i64($i160, $i164);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i165 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    $p176 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p177, $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p181, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p181, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p186);
    $p188 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p188);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($p189, $mul.ref(6, 16));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i191 := $p2i.ref.i64($p190);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i192 := $ne.i64($i187, $i191);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    $p203 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p203);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p204, $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p208, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p208, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i214 := $p2i.ref.i64($p213);
    $p215 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p216 := $bitcast.ref.ref($p215);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p216, $mul.ref(7, 16));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i218 := $p2i.ref.i64($p217);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i219 := $ne.i64($i214, $i218);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    $p230 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p231, $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p235, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p235, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i241 := $p2i.ref.i64($p240);
    $p242 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p242);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($p243, $mul.ref(8, 16));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i245 := $p2i.ref.i64($p244);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i246 := $ne.i64($i241, $i245);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i246 == 1);
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    $p257 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p258 := $bitcast.ref.ref($p257);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p258, $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p261 := $load.ref($M.0, $p260);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p262 := $bitcast.ref.ref($p261);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p262, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p265 := $load.ref($M.0, $p264);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p262, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i268 := $p2i.ref.i64($p267);
    $p269 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p270 := $bitcast.ref.ref($p269);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($p270, $mul.ref(9, 16));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i272 := $p2i.ref.i64($p271);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i273 := $ne.i64($i268, $i272);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i273 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    $p284 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p285 := $bitcast.ref.ref($p284);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p285, $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.0, $p287);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p288);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p289, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.0, $p291);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p289, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i295 := $p2i.ref.i64($p294);
    $p296 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p297 := $bitcast.ref.ref($p296);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($p297, $mul.ref(10, 16));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i299 := $p2i.ref.i64($p298);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i300 := $ne.i64($i295, $i299);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i300 == 1);
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    $p311 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p312 := $bitcast.ref.ref($p311);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p312, $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p315 := $load.ref($M.0, $p314);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p316 := $bitcast.ref.ref($p315);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p316, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p319 := $load.ref($M.0, $p318);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p316, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i322 := $p2i.ref.i64($p321);
    $p323 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p324 := $bitcast.ref.ref($p323);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($p324, $mul.ref(11, 16));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i326 := $p2i.ref.i64($p325);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i327 := $ne.i64($i322, $i326);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i327 == 1);
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    $p338 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p339 := $bitcast.ref.ref($p338);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p339, $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p342 := $load.ref($M.0, $p341);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p343 := $bitcast.ref.ref($p342);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p343, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p346 := $load.ref($M.0, $p345);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p343, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i349 := $p2i.ref.i64($p348);
    $p350 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p351 := $bitcast.ref.ref($p350);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($p351, $mul.ref(12, 16));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i353 := $p2i.ref.i64($p352);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i354 := $ne.i64($i349, $i353);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i354} true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i354 == 1);
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    $p365 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p366 := $bitcast.ref.ref($p365);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p366, $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p369 := $load.ref($M.0, $p368);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($p370, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.0, $p372);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p370, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i376 := $p2i.ref.i64($p375);
    $p377 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p378 := $bitcast.ref.ref($p377);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($p378, $mul.ref(13, 16));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i380 := $p2i.ref.i64($p379);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i381 := $ne.i64($i376, $i380);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i381 == 1);
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    $p392 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p393 := $bitcast.ref.ref($p392);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p393, $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p396 := $load.ref($M.0, $p395);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p397 := $bitcast.ref.ref($p396);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref($p397, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p400 := $load.ref($M.0, $p399);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p397, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i403 := $p2i.ref.i64($p402);
    $p404 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p405 := $bitcast.ref.ref($p404);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($p405, $mul.ref(14, 16));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i407 := $p2i.ref.i64($p406);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i408 := $ne.i64($i403, $i407);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i408} true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i408 == 1);
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    $p419 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p420 := $bitcast.ref.ref($p419);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p420, $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p423 := $load.ref($M.0, $p422);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p424 := $bitcast.ref.ref($p423);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($p424, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.0, $p426);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p424, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i430 := $p2i.ref.i64($p429);
    $p431 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p432 := $bitcast.ref.ref($p431);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($p432, $mul.ref(15, 16));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i434 := $p2i.ref.i64($p433);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i435 := $ne.i64($i430, $i434);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i435} true;
    goto $bb143, $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    assume !($i435 == 1);
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} spin_unlock_irqrestore($p40, $i6);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} free_qos_entry_list($p1);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    return;

  $bb143:
    assume $i435 == 1;
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p436, $p437 := $p427, $p423;
    goto $bb146;

  $bb146:
    call $p436, $p437, $p438, $p440, $p441, $p443, $i444, $i445 := gdm_qos_release_list_loop_$bb146($p1, $i434, $p436, $p437, $p438, $p440, $p441, $p443, $i444, $i445);
    goto $bb146_last;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p437, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} list_move_tail($p438, $p1);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($add.ref($p436, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p441 := $load.ref($M.0, $p440);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p436, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i444 := $p2i.ref.i64($p443);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i445 := $ne.i64($i444, $i434);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i445 == 1);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb148:
    assume $i445 == 1;
    assume {:verifier.code 0} true;
    $p436, $p437 := $p441, $p436;
    goto $bb148_dummy;

  $bb134:
    assume $i408 == 1;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p409, $p410 := $p400, $p396;
    goto $bb137;

  $bb137:
    call $p409, $p410, $p411, $p413, $p414, $p416, $i417, $i418 := gdm_qos_release_list_loop_$bb137($p1, $i407, $p409, $p410, $p411, $p413, $p414, $p416, $i417, $i418);
    goto $bb137_last;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p410, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} list_move_tail($p411, $p1);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($p409, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.0, $p413);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p409, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i417 := $p2i.ref.i64($p416);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i418 := $ne.i64($i417, $i407);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i418 == 1);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb139:
    assume $i418 == 1;
    assume {:verifier.code 0} true;
    $p409, $p410 := $p414, $p409;
    goto $bb139_dummy;

  $bb125:
    assume $i381 == 1;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p382, $p383 := $p373, $p369;
    goto $bb128;

  $bb128:
    call $p382, $p383, $p384, $p386, $p387, $p389, $i390, $i391 := gdm_qos_release_list_loop_$bb128($p1, $i380, $p382, $p383, $p384, $p386, $p387, $p389, $i390, $i391);
    goto $bb128_last;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p383, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} list_move_tail($p384, $p1);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($add.ref($p382, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p387 := $load.ref($M.0, $p386);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p382, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i390 := $p2i.ref.i64($p389);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i391 := $ne.i64($i390, $i380);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i391 == 1);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb130:
    assume $i391 == 1;
    assume {:verifier.code 0} true;
    $p382, $p383 := $p387, $p382;
    goto $bb130_dummy;

  $bb116:
    assume $i354 == 1;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p355, $p356 := $p346, $p342;
    goto $bb119;

  $bb119:
    call $p355, $p356, $p357, $p359, $p360, $p362, $i363, $i364 := gdm_qos_release_list_loop_$bb119($p1, $i353, $p355, $p356, $p357, $p359, $p360, $p362, $i363, $i364);
    goto $bb119_last;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p356, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} list_move_tail($p357, $p1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($p355, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.0, $p359);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p355, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i363 := $p2i.ref.i64($p362);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i364 := $ne.i64($i363, $i353);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i364 == 1);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb121:
    assume $i364 == 1;
    assume {:verifier.code 0} true;
    $p355, $p356 := $p360, $p355;
    goto $bb121_dummy;

  $bb107:
    assume $i327 == 1;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p328, $p329 := $p319, $p315;
    goto $bb110;

  $bb110:
    call $p328, $p329, $p330, $p332, $p333, $p335, $i336, $i337 := gdm_qos_release_list_loop_$bb110($p1, $i326, $p328, $p329, $p330, $p332, $p333, $p335, $i336, $i337);
    goto $bb110_last;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p329, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} list_move_tail($p330, $p1);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($add.ref($p328, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p333 := $load.ref($M.0, $p332);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p328, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i336 := $p2i.ref.i64($p335);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i337 := $ne.i64($i336, $i326);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i337 == 1);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb112:
    assume $i337 == 1;
    assume {:verifier.code 0} true;
    $p328, $p329 := $p333, $p328;
    goto $bb112_dummy;

  $bb98:
    assume $i300 == 1;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p301, $p302 := $p292, $p288;
    goto $bb101;

  $bb101:
    call $p301, $p302, $p303, $p305, $p306, $p308, $i309, $i310 := gdm_qos_release_list_loop_$bb101($p1, $i299, $p301, $p302, $p303, $p305, $p306, $p308, $i309, $i310);
    goto $bb101_last;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p302, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} list_move_tail($p303, $p1);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($p301, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p306 := $load.ref($M.0, $p305);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p301, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i309 := $p2i.ref.i64($p308);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i310 := $ne.i64($i309, $i299);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i310 == 1);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb103:
    assume $i310 == 1;
    assume {:verifier.code 0} true;
    $p301, $p302 := $p306, $p301;
    goto $bb103_dummy;

  $bb89:
    assume $i273 == 1;
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p274, $p275 := $p265, $p261;
    goto $bb92;

  $bb92:
    call $p274, $p275, $p276, $p278, $p279, $p281, $i282, $i283 := gdm_qos_release_list_loop_$bb92($p1, $i272, $p274, $p275, $p276, $p278, $p279, $p281, $i282, $i283);
    goto $bb92_last;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p275, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} list_move_tail($p276, $p1);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p274, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p279 := $load.ref($M.0, $p278);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p274, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i282 := $p2i.ref.i64($p281);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i283 := $ne.i64($i282, $i272);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i283 == 1);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb94:
    assume $i283 == 1;
    assume {:verifier.code 0} true;
    $p274, $p275 := $p279, $p274;
    goto $bb94_dummy;

  $bb80:
    assume $i246 == 1;
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p247, $p248 := $p238, $p234;
    goto $bb83;

  $bb83:
    call $p247, $p248, $p249, $p251, $p252, $p254, $i255, $i256 := gdm_qos_release_list_loop_$bb83($p1, $i245, $p247, $p248, $p249, $p251, $p252, $p254, $i255, $i256);
    goto $bb83_last;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p248, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} list_move_tail($p249, $p1);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p247, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p252 := $load.ref($M.0, $p251);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p247, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i255 := $p2i.ref.i64($p254);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i256 := $ne.i64($i255, $i245);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i256 == 1);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb85:
    assume $i256 == 1;
    assume {:verifier.code 0} true;
    $p247, $p248 := $p252, $p247;
    goto $bb85_dummy;

  $bb71:
    assume $i219 == 1;
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p220, $p221 := $p211, $p207;
    goto $bb74;

  $bb74:
    call $p220, $p221, $p222, $p224, $p225, $p227, $i228, $i229 := gdm_qos_release_list_loop_$bb74($p1, $i218, $p220, $p221, $p222, $p224, $p225, $p227, $i228, $i229);
    goto $bb74_last;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p221, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} list_move_tail($p222, $p1);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p220, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p220, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i228 := $p2i.ref.i64($p227);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i229 := $ne.i64($i228, $i218);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i229 == 1);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb76:
    assume $i229 == 1;
    assume {:verifier.code 0} true;
    $p220, $p221 := $p225, $p220;
    goto $bb76_dummy;

  $bb62:
    assume $i192 == 1;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p193, $p194 := $p184, $p180;
    goto $bb65;

  $bb65:
    call $p193, $p194, $p195, $p197, $p198, $p200, $i201, $i202 := gdm_qos_release_list_loop_$bb65($p1, $i191, $p193, $p194, $p195, $p197, $p198, $p200, $i201, $i202);
    goto $bb65_last;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p194, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} list_move_tail($p195, $p1);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p193, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p193, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p200);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i202 := $ne.i64($i201, $i191);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i202 == 1);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb67:
    assume $i202 == 1;
    assume {:verifier.code 0} true;
    $p193, $p194 := $p198, $p193;
    goto $bb67_dummy;

  $bb53:
    assume $i165 == 1;
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p166, $p167 := $p157, $p153;
    goto $bb56;

  $bb56:
    call $p166, $p167, $p168, $p170, $p171, $p173, $i174, $i175 := gdm_qos_release_list_loop_$bb56($p1, $i164, $p166, $p167, $p168, $p170, $p171, $p173, $i174, $i175);
    goto $bb56_last;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p167, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} list_move_tail($p168, $p1);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p166, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p166, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p173);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, $i164);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i175 == 1);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb58:
    assume $i175 == 1;
    assume {:verifier.code 0} true;
    $p166, $p167 := $p171, $p166;
    goto $bb58_dummy;

  $bb44:
    assume $i138 == 1;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p139, $p140 := $p130, $p126;
    goto $bb47;

  $bb47:
    call $p139, $p140, $p141, $p143, $p144, $p146, $i147, $i148 := gdm_qos_release_list_loop_$bb47($p1, $i137, $p139, $p140, $p141, $p143, $p144, $p146, $i147, $i148);
    goto $bb47_last;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p140, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} list_move_tail($p141, $p1);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p139, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p139, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, $i137);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i148 == 1);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb49:
    assume $i148 == 1;
    assume {:verifier.code 0} true;
    $p139, $p140 := $p144, $p139;
    goto $bb49_dummy;

  $bb35:
    assume $i111 == 1;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p112, $p113 := $p103, $p99;
    goto $bb38;

  $bb38:
    call $p112, $p113, $p114, $p116, $p117, $p119, $i120, $i121 := gdm_qos_release_list_loop_$bb38($p1, $i110, $p112, $p113, $p114, $p116, $p117, $p119, $i120, $i121);
    goto $bb38_last;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} list_move_tail($p114, $p1);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p112, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p119);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, $i110);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i121 == 1);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb40:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $p112, $p113 := $p117, $p112;
    goto $bb40_dummy;

  $bb26:
    assume $i84 == 1;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p85, $p86 := $p76, $p72;
    goto $bb29;

  $bb29:
    call $p85, $p86, $p87, $p89, $p90, $p92, $i93, $i94 := gdm_qos_release_list_loop_$bb29($p1, $i83, $p85, $p86, $p87, $p89, $p90, $p92, $i93, $i94);
    goto $bb29_last;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} list_move_tail($p87, $p1);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p85, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p85, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, $i83);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i94 == 1);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb31:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    $p85, $p86 := $p90, $p85;
    goto $bb31_dummy;

  $bb17:
    assume $i57 == 1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p58, $p59 := $p49, $p45;
    goto $bb20;

  $bb20:
    call $p58, $p59, $p60, $p62, $p63, $p65, $i66, $i67 := gdm_qos_release_list_loop_$bb20($p1, $i56, $p58, $p59, $p60, $p62, $p63, $p65, $i66, $i67);
    goto $bb20_last;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} list_move_tail($p60, $p1);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p58, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, $i56);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i67 == 1);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $p58, $p59 := $p63, $p58;
    goto $bb22_dummy;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p30, $p31 := $p22, $p18;
    goto $bb10;

  $bb10:
    call $p32, $p34, $p35, $p37, $i38, $i39, $p30, $p31 := gdm_qos_release_list_loop_$bb10($p1, $i28, $p32, $p34, $p35, $p37, $i38, $i39, $p30, $p31);
    goto $bb10_last;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} list_move_tail($p32, $p1);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p30, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, $i28);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i39 == 1);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $p30, $p31 := $p35, $p30;
    goto $bb12_dummy;

  $bb148_dummy:
    assume false;
    return;

  $bb146_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_959;

  $bb139_dummy:
    assume false;
    return;

  $bb137_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_928;

  $bb130_dummy:
    assume false;
    return;

  $bb128_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_897;

  $bb121_dummy:
    assume false;
    return;

  $bb119_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_866;

  $bb112_dummy:
    assume false;
    return;

  $bb110_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_835;

  $bb103_dummy:
    assume false;
    return;

  $bb101_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804;

  $bb94_dummy:
    assume false;
    return;

  $bb92_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_773;

  $bb85_dummy:
    assume false;
    return;

  $bb83_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_742;

  $bb76_dummy:
    assume false;
    return;

  $bb74_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711;

  $bb67_dummy:
    assume false;
    return;

  $bb65_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_680;

  $bb58_dummy:
    assume false;
    return;

  $bb56_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_649;

  $bb49_dummy:
    assume false;
    return;

  $bb47_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_618;

  $bb40_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_587;

  $bb31_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_556;

  $bb22_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_490;
}



const gdm_wimax_ind_fsm_update: ref;

axiom gdm_wimax_ind_fsm_update == $sub.ref(0, 172066);

procedure gdm_wimax_ind_fsm_update($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gdm_wimax_ind_fsm_update($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 2));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, 399);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 2));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 3072);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i64(12, 63);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p3, $mul.ref(4, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 119} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p9, $p10, 12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} vslice_dummy_var_87 := gdm_wimax_event_send($p0, $p3, 16);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p3, $mul.ref(4, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 118} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p7, $p8, 12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 173098);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const gdm_wimax_event_send: ref;

axiom gdm_wimax_event_send == $sub.ref(0, 174130);

procedure gdm_wimax_event_send($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gdm_wimax_event_send($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i9: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} {:cexpr "gdm_wimax_event_send:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $p3 := spinlock_check($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 124} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $p5 := get_event_entry();
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 2080)), $mul.ref(16, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p0);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 2080)), $mul.ref(2072, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i2);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i2);
    call {:si_unique_call 128} {:cexpr "__len"} boogie_si_record_i64($i12);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 2080)), $mul.ref(24, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 129} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p14, $p1, $i12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} list_add_tail($p15, $add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(16, 1)));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} spin_unlock_irqrestore($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $i4);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} vslice_dummy_var_89 := schedule_work($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} vslice_dummy_var_88 := netdev_err.ref.ref.ref($p0, .str.47, .str.48);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} spin_unlock_irqrestore($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $i4);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 175162);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 176194);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_event_entry: ref;

axiom get_event_entry == $sub.ref(0, 177226);

procedure get_event_entry() returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation get_event_entry() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i0 := list_empty($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(104, 1)));
    call {:si_unique_call 136} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(104, 1)), $mul.ref(0, 1)));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} list_del($p6);
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $p2 := alloc_event_entry();
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p3 := $p2;
    goto $bb3;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 178258);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 179290);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} __list_add($p0, $p3, $p1);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 180322);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i2 := queue_work($p1, $p0);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 143} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 181354);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i2 := queue_work_on(4096, $p0, $p1);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 145} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 182386);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 146} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 1} true;
    call {:si_unique_call 147} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 148} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 183418);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 184450);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 185482);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const alloc_event_entry: ref;

axiom alloc_event_entry == $sub.ref(0, 186514);

procedure alloc_event_entry() returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation alloc_event_entry() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $p0 := kmalloc(2080, 32);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 187546);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 188578);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    return;
}



const list_move_tail: ref;

axiom list_move_tail == $sub.ref(0, 189610);

procedure list_move_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_move_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __list_del_entry($p0);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} list_add_tail($p0, $p1);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    return;
}



const free_qos_entry_list: ref;

axiom free_qos_entry_list == $sub.ref(0, 190642);

procedure free_qos_entry_list($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation free_qos_entry_list($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i27: i32;
  var $i13: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i24;
  var $i35: i24;
  var $i36: i24;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i10, $i11);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p28, .str.9);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p29, .str.69);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p30, .str.11);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p31, .str.70);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i34 := $load.i24($M.6, $p33);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i35 := $and.i24($i34, $sub.i24(0, 262144));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i36 := $or.i24($i35, 131);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p33, $i36);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p37, 0);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.7, $p38);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 1);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 158} {:cexpr "tmp"} boogie_si_record_i64($i42);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i43 == 1;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} vslice_dummy_var_90 := __dynamic_pr_debug.ref.ref.ref.i32($p1, .str.71, .str.69, $i13);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i14, $p15, $p16 := 0, $p3, $p7;
    goto $bb4;

  $bb4:
    call $p17, $p18, $i19, $p21, $p22, $p24, $i25, $i26, $i14, $p15, $p16, $i27 := free_qos_entry_list_loop_$bb4($i11, $p17, $p18, $i19, $p21, $p22, $p24, $i25, $i26, $i14, $p15, $p16, $i27);
    goto $bb4_last;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} list_del($p17);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p15);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} kfree($p18);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i14, 1);
    call {:si_unique_call 156} {:cexpr "total_free"} boogie_si_record_i32($i19);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i11);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i27 := $i19;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i13 := $i27;
    goto $bb3;

  $bb6:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i14, $p15, $p16 := $i19, $p16, $p22;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1159;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 191674);

procedure __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 1} true;
    call {:si_unique_call 160} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 161} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 192706);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    return;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 193738);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} {:cexpr "copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} might_fault();
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i3 := _copy_to_user($p0, $p1, $i2);
    call {:si_unique_call 165} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 194770);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 166} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 1} true;
    call {:si_unique_call 167} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 168} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 195802);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(72, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 170} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 196834);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 172} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 174} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const __gdm_wimax_set_mac_addr: ref;

axiom __gdm_wimax_set_mac_addr == $sub.ref(0, 197866);

procedure __gdm_wimax_set_mac_addr($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.28, $CurrAddr, $M.16, $M.18, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation __gdm_wimax_set_mac_addr($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var vslice_dummy_var_91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $p4 := netdev_priv($p0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(509, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i64($i7);
    call {:si_unique_call 177} {:cexpr "__len"} boogie_si_record_i64($i8);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(760, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 178} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p10, $p1, $i8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 2));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, 256);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 2));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 2048);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p3, $mul.ref(4, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p3, $mul.ref(5, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 6);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(509, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    call {:si_unique_call 179} {:cexpr "__len___0"} boogie_si_record_i64($i17);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p3, $mul.ref(6, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 180} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p18, $p1, $i17, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 181} vslice_dummy_var_91 := devirtbounce($p22, $p26, $p3, 12, $0.ref, $0.ref);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 198898);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 199930);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i2, $i5);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i6, $i9);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i10, $i13);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i14, $i17);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i18, $i21);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 200962);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const gdm_wimax_header: ref;

axiom gdm_wimax_header == $sub.ref(0, 201994);

procedure gdm_wimax_header($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, $M.16, $M.18, $M.42, $M.15, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.43, $M.28, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed, $M.19;



implementation gdm_wimax_header($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $i28: i16;
  var $p29: ref;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i12: i32;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var vslice_dummy_var_92: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p0);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i3 := skb_headroom($p2);
    call {:si_unique_call 185} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i4 := $ule.i32($i3, 3);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 187} {:cexpr "tmp___0"} boogie_si_record_i64($i7);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p19 := $p2;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} vslice_dummy_var_92 := skb_push($p19, 4);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 2));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, 514);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i25, 4);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i28 := __fswab16($i27);
    call {:si_unique_call 193} {:cexpr "tmp___1"} boogie_si_record_i16($i28);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i28);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i64(4, 63);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p19, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p1);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 195} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p35, $p36, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p0, $p19);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p19, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p1);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 194} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p32, $p33, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p9 := skb_realloc_headroom($p2, 4);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree_skb($p2);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p19 := $p9;
    goto $bb10;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} skb_set_owner_w($p9, $p18);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb5;
}



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 203026);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_pull($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} {:cexpr "skb_pull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $p2 := external_alloc();
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const netdev_emerg: ref;

axiom netdev_emerg == $sub.ref(0, 204058);

procedure netdev_emerg.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_emerg.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 198} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 199} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 205090);

procedure kfree_skb($p0: ref);
  free requires assertsPassed;



implementation kfree_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    return;
}



const gdm_qos_send_hci_pkt: ref;

axiom gdm_qos_send_hci_pkt == $sub.ref(0, 206122);

procedure gdm_qos_send_hci_pkt($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.28, $M.16, $M.18, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, assertsPassed;



implementation gdm_qos_send_hci_pkt($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i16;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i84: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p4 := netdev_priv($p1);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(4, 14));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(14, 20));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p12);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i15, 15);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, 4);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p13, $mul.ref($i19, 20));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p9, $mul.ref(4, 14)), $mul.ref(12, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i25 := __fswab16($i24);
    call {:si_unique_call 204} {:cexpr "tmp___5"} boogie_si_record_i16($i25);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 2048);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i89 := gdm_wimax_send_tx($p0, $p1);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 223} {:cexpr "ret"} boogie_si_record_i32($i89);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i84 := $i89;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $r := $i84;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i27 == 1;
    $p28 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(256, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p56 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p58 := spinlock_check($p57);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i59 := _raw_spin_lock_irqsave($p58);
    call {:si_unique_call 211} {:cexpr "flags"} boogie_si_record_i64($i59);
    $p60 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(256, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    $p85 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} spin_unlock_irqrestore($p85, $i59);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p56);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i87 == 1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p56);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} free_qos_entry($p88);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb12:
    assume $i62 == 1;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p12);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p20);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i65 := get_qos_index($p5, $p63, $p64);
    call {:si_unique_call 213} {:cexpr "tmp___3"} boogie_si_record_i32($i65);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, $sub.i32(0, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i69 := $i65;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p56);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $p76 := $p56;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 32)), $mul.ref(0, 1));
    $p78 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i69);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p79, $mul.ref($i80, 16));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} list_add_tail($p77, $p81);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} vslice_dummy_var_94 := extract_qos_list($p5, $p2);
    $p83 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} spin_unlock_irqrestore($p83, $i59);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} send_qos_list($p5, $p2);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb20;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i71 == 1;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $p72 := alloc_qos_entry();
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $p0);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p73, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $p1);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p76 := $p72;
    goto $bb19;

  $bb14:
    assume $i66 == 1;
    $p67 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(260, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    call {:si_unique_call 214} {:cexpr "index"} boogie_si_record_i32($i68);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i69 := $i68;
    goto $bb16;

  $bb3:
    assume $i30 == 1;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(16, 1)));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb5;

  $bb6:
    assume $i32 == 1;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $p33 := alloc_qos_entry();
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p0);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p1);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p37, .str.9);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p38, .str.10);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p39, .str.11);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p40, .str.12);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.12, $p42);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 319);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p42, $i45);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p46, 0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.13, $p47);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 207} {:cexpr "tmp___1"} boogie_si_record_i64($i51);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p56 := $p33;
    goto $bb11;

  $bb8:
    assume $i52 == 1;
    $p53 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(256, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} vslice_dummy_var_93 := __dynamic_netdev_dbg.ref.ref.ref.i32($p3, $p1, .str.12, $i54);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 207154);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const alloc_qos_entry: ref;

axiom alloc_qos_entry == $sub.ref(0, 208186);

procedure alloc_qos_entry() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation alloc_qos_entry() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p11: ref;
  var $p12: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $p0 := spinlock_check($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i1 := _raw_spin_lock_irqsave($p0);
    call {:si_unique_call 227} {:cexpr "flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(16, 1)));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} spin_unlock_irqrestore($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $i1);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $p11 := kmalloc(32, 32);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p10 := $p11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $add.ref($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1)));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} list_del($p6);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(16, 1)));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i7, 1);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(16, 1)), $i8);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} spin_unlock_irqrestore($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $i1);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p10 := $p4;
    goto $bb3;
}



const __dynamic_netdev_dbg: ref;

axiom __dynamic_netdev_dbg == $sub.ref(0, 209218);

procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 1} true;
    call {:si_unique_call 232} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 233} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 234} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 235} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const get_qos_index: ref;

axiom get_qos_index == $sub.ref(0, 210250);

procedure get_qos_index($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_qos_index($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $i7: i1;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i14: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p2);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p1);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32($i10, 4);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 15);
    call {:si_unique_call 236} {:cexpr "IP_Ver"} boogie_si_record_i32($i12);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 4);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb10;

  $bb10:
    call $i15, $p18, $i19, $i20, $i21, $i22, $p25, $i26, $i27, $i28, $p29, $p30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i14 := get_qos_index_loop_$bb10($p0, $p1, $p2, $i15, $p18, $i19, $i20, $i21, $i22, $p25, $i26, $i27, $i28, $p29, $p30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i14);
    goto $bb10_last;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    $p18 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i15, 88)), $mul.ref(0, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i14, 1);
    call {:si_unique_call 239} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i37 := $ule.i32($i36, 15);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i36;
    goto $bb21_dummy;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i14);
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i22, 88)), $mul.ref(10, 1));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i28 == 1;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i14);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p30, $mul.ref($i31, 88));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i33 := chk_ipv4_rule($p32, $p1, $p2);
    call {:si_unique_call 238} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i35 := $i14;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i8 := $i35;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb21_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;
}



const extract_qos_list: ref;

axiom extract_qos_list == $sub.ref(0, 211282);

procedure extract_qos_list($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation extract_qos_list($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i4: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $i41: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i54: i32;
  var $i55: i1;
  var $i3: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} INIT_LIST_HEAD($p1);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb1;

  $bb1:
    call $i4, $p7, $i8, $i9, $i10, $i11, $p14, $i15, $i16, $p17, $i18, $i19, $p20, $p21, $i22, $p23, $i24, $i25, $i26, $p29, $p30, $p31, $p32, $i33, $p36, $i37, $i38, $i39, $i40, $i41, $p44, $p45, $p46, $i47, $p48, $i49, $i50, $p51, $p52, $i54, $i55, $i3, vslice_dummy_var_95 := extract_qos_list_loop_$bb1($p0, $p1, $i4, $p7, $i8, $i9, $i10, $i11, $p14, $i15, $i16, $p17, $i18, $i19, $p20, $p21, $i22, $p23, $i24, $i25, $i26, $p29, $p30, $p31, $p32, $i33, $p36, $i37, $i38, $i39, $i40, $i41, $p44, $p45, $p46, $i47, $p48, $i49, $i50, $p51, $p52, $i54, $i55, $i3, vslice_dummy_var_95);
    goto $bb1_last;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    $p7 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i4, 88)), $mul.ref(0, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i3, 1);
    call {:si_unique_call 247} {:cexpr "i"} boogie_si_record_i32($i54);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i55 := $sle.i32($i54, 15);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb15:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i54;
    goto $bb15_dummy;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i3);
    $p14 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i11, 88)), $mul.ref(8, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1744, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i19 := $ult.i32($i16, $i18);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i19 == 1;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i3);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p21, $mul.ref($i22, 16));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i24 := list_empty($p23);
    call {:si_unique_call 242} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i3);
    $p29 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1)), $mul.ref($i26, 16)), $mul.ref(8, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} list_move_tail($p32, $p1);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i3);
    $p36 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i33, 88)), $mul.ref(8, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 1);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i3);
    $p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i41, 88)), $mul.ref(8, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i40);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i3);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p46, $mul.ref($i47, 16));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i49 := list_empty($p48);
    call {:si_unique_call 245} {:cexpr "tmp"} boogie_si_record_i32($i49);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i50 == 1;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_95 := netdev_warn.ref.ref.i32($p52, .str.72, $i3);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1594;
}



const send_qos_list: ref;

axiom send_qos_list == $sub.ref(0, 212314);

procedure send_qos_list($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.28, $M.16, $M.18, $CurrAddr, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation send_qos_list($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i10, $i11);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p13, $p14 := $p7, $p3;
    goto $bb4;

  $bb4:
    call $p15, $p16, $p17, $p18, $p19, $p21, $p23, $p24, $p26, $i27, $i28, $p13, $p14, vslice_dummy_var_96 := send_qos_list_loop_$bb4($i11, $p15, $p16, $p17, $p18, $p19, $p21, $p23, $p24, $p26, $i27, $i28, $p13, $p14, vslice_dummy_var_96);
    goto $bb4_last;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} list_del($p15);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} vslice_dummy_var_96 := gdm_wimax_send_tx($p17, $p19);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p14);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} free_qos_entry($p21);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i11);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p13, $p14 := $p24, $p13;
    goto $bb6_dummy;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1656;
}



const free_qos_entry: ref;

axiom free_qos_entry == $sub.ref(0, 213346);

procedure free_qos_entry($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation free_qos_entry($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $p2 := spinlock_check($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 253} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(16, 1)));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i4, 31);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} spin_unlock_irqrestore($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $i3);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} kfree($p0);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} list_add($p6, qos_free_list);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(16, 1)));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 1);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(16, 1)), $i8);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} spin_unlock_irqrestore($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $i3);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gdm_wimax_send_tx: ref;

axiom gdm_wimax_send_tx == $sub.ref(0, 214378);

procedure gdm_wimax_send_tx($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.28, $M.16, $M.18, $CurrAddr, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation gdm_wimax_send_tx($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p27: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $p37: ref;
  var vslice_dummy_var_97: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p2 := netdev_priv($p1);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    call {:si_unique_call 259} $i17 := devirtbounce($p7, $p11, $p13, $i15, tx_complete, $p16);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 260} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, $sub.i32(0, 28));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 1);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i25);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i32, 4);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i30, $i34);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $i35);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} kfree_skb($p0);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} vslice_dummy_var_97 := skb_pull($p0, 4);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} netif_stop_queue($p1);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const tx_complete: ref;

axiom tx_complete == $sub.ref(0, 215410);

procedure tx_complete($p0: ref);
  free requires assertsPassed;



implementation tx_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i4 := netif_queue_stopped($p3);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 265} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} netif_wake_queue($p8);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 216442);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} netif_tx_stop_queue($p1);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 217474);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(840, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 496));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 218506);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 270} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 272} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 275} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} set_bit(0, $p15);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} vslice_dummy_var_98 := printk.ref(.str.36);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} warn_slowpath_null(.str.35, 2025);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 219538);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 220570);

procedure printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 1} true;
    call {:si_unique_call 279} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 280} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 1} true;
    call {:si_unique_call 281} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 282} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 1} true;
    call {:si_unique_call 283} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 284} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 221602);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 286} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    return;
}



const netif_queue_stopped: ref;

axiom netif_queue_stopped == $sub.ref(0, 222634);

procedure netif_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i2 := netif_tx_queue_stopped($p1);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 289} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 223666);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} netif_tx_wake_queue($p1);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 224698);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_wake_queue($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i1 := netpoll_trap();
    call {:si_unique_call 293} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i4 := test_and_clear_bit(0, $p3);
    call {:si_unique_call 296} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(8, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} __netif_schedule($p7);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} netif_tx_start_queue($p0);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netpoll_trap: ref;

axiom netpoll_trap == $sub.ref(0, 225730);

procedure netpoll_trap() returns ($r: i32);
  free requires assertsPassed;



implementation netpoll_trap() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 1} true;
    call {:si_unique_call 298} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 299} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 226762);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} clear_bit(0, $p1);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    return;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 227794);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 302} $i2 := devirtbounce.2(0, $p1, $i0, $p1);
    call {:si_unique_call 303} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __netif_schedule: ref;

axiom __netif_schedule == $sub.ref(0, 228826);

procedure __netif_schedule($p0: ref);
  free requires assertsPassed;



implementation __netif_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 229858);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 305} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 230890);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_tx_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 307} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 231922);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} __list_add($p0, $p1, $p3);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    return;
}



const netdev_warn: ref;

axiom netdev_warn == $sub.ref(0, 232954);

procedure netdev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 1} true;
    call {:si_unique_call 309} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 310} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const chk_ipv4_rule: ref;

axiom chk_ipv4_rule == $sub.ref(0, 233986);

procedure chk_ipv4_rule($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation chk_ipv4_rule($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $i94: i16;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i16;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i16;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $i116: i16;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i16;
  var $i121: i32;
  var $i122: i1;
  var $i29: i32;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i32;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $p141: ref;
  var $i142: i8;
  var $i143: i32;
  var $i144: i32;
  var $p146: ref;
  var $i147: i8;
  var $i148: i32;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i32;
  var $p160: ref;
  var $i161: i8;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $p169: ref;
  var $i170: i8;
  var $i171: i32;
  var $i172: i32;
  var $p174: ref;
  var $i175: i8;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i8;
  var $i181: i32;
  var $p183: ref;
  var $i184: i8;
  var $i185: i32;
  var $i186: i32;
  var $p188: ref;
  var $i189: i8;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i194: i8;
  var $i195: i32;
  var $p197: ref;
  var $i198: i8;
  var $i199: i32;
  var $i200: i32;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i32;
  var $i206: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i5 := $sext.i16.i32($i4);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 16384);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 8192);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p61);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 4096);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.0, $p80);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 2048);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.0, $p101);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 1024);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb48:
    assume $i105 == 1;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i109 := $shl.i32($i108, 8);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 65535);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i110, $i113);
    call {:si_unique_call 312} {:cexpr "i"} boogie_si_record_i32($i114);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(84, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i116 := $load.i16($M.0, $p115);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i116);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i118 := $sgt.i32($i117, $i114);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb52;

  $bb52:
    assume !($i118 == 1);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(86, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i120 := $load.i16($M.0, $p119);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i120);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i121, $i114);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb8;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb51;

  $bb39:
    assume $i84 == 1;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p2);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i87 := $shl.i32($i86, 8);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 65535);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i88, $i91);
    call {:si_unique_call 311} {:cexpr "i"} boogie_si_record_i32($i92);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i94 := $load.i16($M.0, $p93);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i94);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i96 := $sgt.i32($i95, $i92);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i96 == 1);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(82, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i98 := $load.i16($M.0, $p97);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i98);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, $i92);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb8;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb42;

  $bb28:
    assume $i65 == 1;
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p1, $mul.ref(16, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i73 := $xor.i32($i68, $i72);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i73, $i77);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p1, $mul.ref(17, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.0, $p123);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(48, 1)), $mul.ref(1, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.0, $p127);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i130 := $xor.i32($i125, $i129);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1)), $mul.ref(1, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.0, $p132);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i135 := $and.i32($i130, $i134);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p1, $mul.ref(18, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.0, $p137);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(48, 1)), $mul.ref(2, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.0, $p141);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i32($i142);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i144 := $xor.i32($i139, $i143);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1)), $mul.ref(2, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.0, $p146);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i149 := $and.i32($i144, $i148);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i150 := $ne.i32($i149, 0);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p1, $mul.ref(19, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.0, $p151);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(48, 1)), $mul.ref(3, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i158 := $xor.i32($i153, $i157);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1)), $mul.ref(3, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.0, $p160);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i163 := $and.i32($i158, $i162);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i164 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb8;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb33;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb33;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p1, $mul.ref(12, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i54 := $xor.i32($i49, $i53);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i54, $i58);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p1, $mul.ref(13, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.0, $p165);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.0, $p169);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i172 := $xor.i32($i167, $i171);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1)), $mul.ref(1, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.0, $p174);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i172, $i176);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($p1, $mul.ref(14, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i180 := $load.i8($M.0, $p179);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i32($i180);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.0, $p183);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i32($i184);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i186 := $xor.i32($i181, $i185);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1)), $mul.ref(2, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.0, $p188);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i189);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i191 := $and.i32($i186, $i190);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p1, $mul.ref(15, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i194 := $load.i8($M.0, $p193);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i32($i194);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i198 := $load.i8($M.0, $p197);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i199 := $zext.i8.i32($i198);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i200 := $xor.i32($i195, $i199);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1)), $mul.ref(3, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.0, $p202);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i205 := $and.i32($i200, $i204);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i206 := $ne.i32($i205, 0);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i206 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb8;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i192 == 1;
    goto $bb22;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i178 == 1;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb22;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p1, $mul.ref(9, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(15, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i37, $i40);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb8;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(14, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i9, $i12);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i13, $i16);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(14, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i20, $i23);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(13, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i24, $i27);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb4;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 235018);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 1} true;
    call {:si_unique_call 313} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 314} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const skb_headroom: ref;

axiom skb_headroom == $sub.ref(0, 236050);

procedure skb_headroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headroom($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i4, $i8);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const skb_realloc_headroom: ref;

axiom skb_realloc_headroom == $sub.ref(0, 237082);

procedure skb_realloc_headroom($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_realloc_headroom($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} {:cexpr "skb_realloc_headroom:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p2 := external_alloc();
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const skb_set_owner_w: ref;

axiom skb_set_owner_w == $sub.ref(0, 238114);

procedure skb_set_owner_w($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.42, $M.15, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.43, $CurrAddr, $M.28, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed, $M.19;



implementation skb_set_owner_w($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} skb_orphan($p0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, sock_wfree);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 1328)), $mul.ref(664, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} atomic_add($i5, $p6);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const skb_push: ref;

axiom skb_push == $sub.ref(0, 239146);

procedure skb_push($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_push($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} {:cexpr "skb_push:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p2 := external_alloc();
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_orphan: ref;

axiom skb_orphan == $sub.ref(0, 240178);

procedure skb_orphan($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.42, $M.15, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.43, $CurrAddr, $M.28, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed, $M.19;



implementation skb_orphan($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 323} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    call {:si_unique_call 324} devirtbounce.4(0, .str.62, 1813, 12);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call skb_orphan_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 321} devirtbounce.3($p6, $p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const sock_wfree: ref;

axiom sock_wfree == $sub.ref(0, 241210);

procedure sock_wfree($p0: ref);



const atomic_add: ref;

axiom atomic_add == $sub.ref(0, 242242);

procedure atomic_add($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation atomic_add($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} {:cexpr "atomic_add:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 326} devirtbounce.5(0, $p2, $i0, $p2);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    return;
}



const gdm_wimax_ind_if_updown: ref;

axiom gdm_wimax_ind_if_updown == $sub.ref(0, 243274);

procedure gdm_wimax_ind_if_updown($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gdm_wimax_ind_if_updown($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 328} {:cexpr "gdm_wimax_ind_if_updown:arg:if_up"} boogie_si_record_i32($i1);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 0);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 1 else 2);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    call {:si_unique_call 329} {:cexpr "up_down"} boogie_si_record_i8($i6);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, 655);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, 256);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i6);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} vslice_dummy_var_99 := gdm_wimax_event_send($p0, $p11, 5);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    return;
}



const netif_start_queue: ref;

axiom netif_start_queue == $sub.ref(0, 244306);

procedure netif_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} netif_tx_start_queue($p1);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    return;
}



const gdm_usb_probe: ref;

axiom gdm_usb_probe == $sub.ref(0, 245338);

procedure gdm_usb_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $CurrAddr, $M.22, $M.21, $M.44, $M.45, $M.23, $M.29, $M.20, $M.15, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.33, $M.28, $M.16, $M.18, $M.19, $M.42, $M.43, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation gdm_usb_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i8;
  var $p12: ref;
  var $i13: i16;
  var $p15: ref;
  var $i16: i16;
  var $p18: ref;
  var $i19: i16;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i8;
  var $i65: i8;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var vslice_dummy_var_100: ref;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p4 := interface_to_usbdev($p0);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_100 := ldv_usb_get_dev_27($p4);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 1992)), $mul.ref(1560, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    call {:si_unique_call 337} {:cexpr "bConfigurationValue"} boogie_si_record_i8($i10);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(8, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    call {:si_unique_call 338} {:cexpr "idVendor"} boogie_si_record_i16($i13);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(10, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    call {:si_unique_call 339} {:cexpr "idProduct"} boogie_si_record_i16($i16);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(12, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    call {:si_unique_call 340} {:cexpr "bcdDevice"} boogie_si_record_i16($i19);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i13);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i16);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vslice_dummy_var_101 := _dev_info.ref.ref.i32.i32($p20, .str.73, $i21, $i22);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} vslice_dummy_var_102 := _dev_info.ref.ref.ref($p24, .str.74, .str.75);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i16);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 29199);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i10);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 33);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i33 == 1);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i16);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 32);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $p40 := kzalloc(32, 208);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $p44 := kzalloc(368, 208);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i16);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 29189);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i49 == 1);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i16);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 29190);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p45, $mul.ref(0, 368)), $mul.ref(360, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p44);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, gdm_usb_send);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, gdm_usb_receive);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i58 := init_usb($p45);
    call {:si_unique_call 350} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 0);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p45, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p4);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p45, $mul.ref(0, 368)), $mul.ref(88, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $p0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(40, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i64 := $and.i8($i63, $sub.i8(0, 9));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i65 := $or.i8($i64, 8);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, $i65);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} vslice_dummy_var_103 := device_init_wakeup($p66, 1);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} pm_runtime_set_autosuspend_delay($p68, 10000);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p45, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} __init_work($p69, 0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p70, 137438953408);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 368)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p3);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 354} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p73, $p74, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 368)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} lockdep_init_map($p76, .str.76, $p2, 0);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 368)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} INIT_LIST_HEAD($p78);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 368)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, do_pm_control);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i82 := register_wimax_device($p41, $p81);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 358} {:cexpr "ret"} boogie_si_record_i32($i82);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i29, $p30, $p31 := $i82, $p40, $p44;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i29, 0);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i83 == 1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p30);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} ldv_usb_set_intfdata_28($p0, $p86);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb26:
    assume $i83 == 1;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p30);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} kfree($p84);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p31);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} kfree($p85);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i59 == 1;
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i29, $p30, $p31 := $i58, $p40, $p44;
    goto $bb3;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p45, $mul.ref(0, 368)), $mul.ref(360, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 256);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb18;

  $bb14:
    assume $i47 == 1;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i29, $p30, $p31 := $sub.i32(0, 12), $p40, $p44;
    goto $bb3;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i29, $p30, $p31 := $sub.i32(0, 12), $p40, $0.ref;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i19);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i39 := usb_boot($p4, $i38);
    call {:si_unique_call 346} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i29, $p30, $p31 := $i39, $0.ref, $0.ref;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb6;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $i28 := usb_emergency($p4);
    call {:si_unique_call 344} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i29, $p30, $p31 := $i28, $0.ref, $0.ref;
    goto $bb3;
}



const gdm_usb_disconnect: ref;

axiom gdm_usb_disconnect == $sub.ref(0, 246370);

procedure gdm_usb_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.15;



implementation gdm_usb_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p1 := interface_to_usbdev($p0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(1560, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    call {:si_unique_call 363} {:cexpr "bConfigurationValue"} boogie_si_record_i8($i6);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p7 := ldv_usb_get_intfdata_29($p0);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(10, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    call {:si_unique_call 365} {:cexpr "idProduct"} boogie_si_record_i16($i11);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 29199);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} ldv_usb_put_dev_30($p1);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i6);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 33);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i11);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 32);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} unregister_wimax_device($p8);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} release_usb($p21);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p21);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} kfree($p23);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p8);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} kfree($p24);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const gdm_suspend: ref;

axiom gdm_suspend == $sub.ref(0, 247402);

procedure gdm_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $CurrAddr;



implementation gdm_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p24: ref;
  var $p35: ref;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p3, $i1);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $p4 := ldv_usb_get_intfdata_29($p0);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $p13 := spinlock_check($p12);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i14 := _raw_spin_lock_irqsave($p13);
    call {:si_unique_call 375} {:cexpr "flags"} boogie_si_record_i64($i14);
    $p16 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    $p21 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(16, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i20, $i22);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $p35 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} spin_unlock_irqrestore($p35, $i14);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p24 := $p17;
    goto $bb8;

  $bb8:
    call $p25, $p26, $p29, $p30, $p31, $p32, $i33, $i34, $p24, vslice_dummy_var_104 := gdm_suspend_loop_$bb8($i22, $p25, $p26, $p29, $p30, $p31, $p32, $i33, $i34, $p24, vslice_dummy_var_104);
    goto $bb8_last;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} vslice_dummy_var_104 := usb_unlink_urb($p26);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i22);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p24 := $p30;
    goto $bb10_dummy;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2331;
}



const gdm_resume: ref;

axiom gdm_resume == $sub.ref(0, 248434);

procedure gdm_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.0, $M.15, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, $M.19, assertsPassed;



implementation gdm_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p21: ref;
  var $p32: ref;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $p1 := ldv_usb_get_intfdata_29($p0);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $p10 := spinlock_check($p9);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i11 := _raw_spin_lock_irqsave($p10);
    call {:si_unique_call 381} {:cexpr "flags"} boogie_si_record_i64($i11);
    $p13 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    $p18 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(16, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i17, $i19);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $p32 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} spin_unlock_irqrestore($p32, $i11);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p21 := $p14;
    goto $bb8;

  $bb8:
    call $p22, $p23, $p26, $p27, $p28, $p29, $i30, $i31, $p21, vslice_dummy_var_105 := gdm_resume_loop_$bb8($i19, $p22, $p23, $p26, $p27, $p28, $p29, $i30, $i31, $p21, vslice_dummy_var_105);
    goto $bb8_last;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_105 := ldv_usb_submit_urb_33($p23, 32);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, $i19);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p21 := $p27;
    goto $bb10_dummy;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2371;
}



const ldv_usb_get_intfdata_29: ref;

axiom ldv_usb_get_intfdata_29 == $sub.ref(0, 249466);

procedure ldv_usb_get_intfdata_29($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata_29($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $p1 := ldv_usb_get_intfdata();
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_usb_submit_urb_33: ref;

axiom ldv_usb_submit_urb_33 == $sub.ref(0, 250498);

procedure ldv_usb_submit_urb_33($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.0, $M.15, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, $M.19, assertsPassed;



implementation ldv_usb_submit_urb_33($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} {:cexpr "ldv_usb_submit_urb_33:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 387} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ldv_submit_urb: ref;

axiom ldv_submit_urb == $sub.ref(0, 251530);

procedure ldv_submit_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.0, $M.15, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, $M.19, assertsPassed;



implementation ldv_submit_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i1 := ldv_undef_int();
    call {:si_unique_call 389} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} ldv_stop___1();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p4 := $M.15;
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i5, $i6);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i8 := $M.16;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $M.18;
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p14 := $M.19;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p15 := $M.15;
    call {:si_unique_call 393} devirtbounce.6($p14, $p15);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 394} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p10 := $M.17;
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p11 := $M.15;
    call {:si_unique_call 391} devirtbounce.6($p10, $p11);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 392} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 252562);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 1} true;
    call {:si_unique_call 395} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 396} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 397} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop___1: ref;

axiom ldv_stop___1 == $sub.ref(0, 253594);

procedure ldv_stop___1();
  free requires assertsPassed;



implementation ldv_stop___1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop___1_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_usb_get_intfdata: ref;

axiom ldv_usb_get_intfdata == $sub.ref(0, 254626);

procedure ldv_usb_get_intfdata() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p0 := $M.20;
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const usb_unlink_urb: ref;

axiom usb_unlink_urb == $sub.ref(0, 255658);

procedure usb_unlink_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_unlink_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 398} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 399} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 256690);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p1 := ldv_interface_to_usbdev();
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const unregister_wimax_device: ref;

axiom unregister_wimax_device == $sub.ref(0, 257722);

procedure unregister_wimax_device($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation unregister_wimax_device($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $p3 := netdev_priv($p2);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} ldv_unregister_netdev_4($p14);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} gdm_wimax_event_exit();
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} gdm_qos_release_list($p15);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} gdm_wimax_cleanup_ioctl($p17);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} ldv_free_netdev_5($p19);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const release_usb: ref;

axiom release_usb == $sub.ref(0, 258754);

procedure release_usb($p0: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation release_usb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p19: ref;
  var $p20: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p42: ref;
  var $p43: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $i70: i64;
  var $i71: i1;
  var $p63: ref;
  var $p64: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $i94: i64;
  var $i95: i1;
  var $p87: ref;
  var $p88: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p101: ref;
  var $p102: ref;
  var $p104: ref;
  var $i105: i64;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p109: ref;
  var $p110: ref;
  var $p119: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1));
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p4 := spinlock_check($p3);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 409} {:cexpr "flags"} boogie_si_record_i64($i5);
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(16, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i15, $i17);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p32, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(32, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i38, $i40);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $p53 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p55);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p1);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i60, $i61);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} spin_unlock_irqrestore($p72, $i5);
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $p74 := spinlock_check($p73);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i75 := _raw_spin_lock_irqsave($p74);
    call {:si_unique_call 419} {:cexpr "flags"} boogie_si_record_i64($i75);
    $p77 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p79, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p79);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p2);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i84, $i85);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    $p97 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p99, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(16, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i105, $i107);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    $p119 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} spin_unlock_irqrestore($p119, $i75);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    return;

  $bb33:
    assume $i108 == 1;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p109, $p110 := $p102, $p98;
    goto $bb36;

  $bb36:
    call $p111, $p113, $p114, $p116, $i117, $i118, $p109, $p110 := release_usb_loop_$bb36($i107, $p111, $p113, $p114, $p116, $i117, $i118, $p109, $p110);
    goto $bb36_last;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} list_del($p111);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} free_rx_struct($p110);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p109, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p109, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, $i107);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i118 == 1);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    $p109, $p110 := $p114, $p109;
    goto $bb38_dummy;

  $bb25:
    assume $i86 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p87, $p88 := $p82, $p78;
    goto $bb28;

  $bb28:
    call $p89, $p91, $p92, $i94, $i95, $p87, $p88 := release_usb_loop_$bb28($i85, $p89, $p91, $p92, $i94, $i95, $p87, $p88);
    goto $bb28_last;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} list_del($p89);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} free_rx_struct($p88);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p87, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p87);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, $i85);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i95 == 1);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb30:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $p87, $p88 := $p92, $p87;
    goto $bb30_dummy;

  $bb17:
    assume $i62 == 1;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p63, $p64 := $p54, $p58;
    goto $bb20;

  $bb20:
    call $p65, $p67, $p68, $i70, $i71, $p63, $p64 := release_usb_loop_$bb20($i61, $p65, $p67, $p68, $i70, $i71, $p63, $p64);
    goto $bb20_last;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p63, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} list_del($p65);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} free_tx_struct($p63);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p64, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p64);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, $i61);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i71 == 1);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $p63, $p64 := $p64, $p68;
    goto $bb22_dummy;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p42, $p43 := $p31, $p35;
    goto $bb12;

  $bb12:
    call $p44, $p46, $p47, $p49, $i50, $i51, $p42, $p43 := release_usb_loop_$bb12($i40, $p44, $p46, $p47, $p49, $i50, $i51, $p42, $p43);
    goto $bb12_last;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} list_del($p44);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} free_tx_struct($p42);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p43, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, $i40);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i51 == 1);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $p42, $p43 := $p43, $p47;
    goto $bb14_dummy;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p19, $p20 := $p8, $p12;
    goto $bb4;

  $bb4:
    call $p21, $p23, $p24, $p26, $i27, $i28, $p19, $p20 := release_usb_loop_$bb4($i17, $p21, $p23, $p24, $p26, $i27, $i28, $p19, $p20);
    goto $bb4_last;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} list_del($p21);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} free_tx_struct($p19);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p20, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i17);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p19, $p20 := $p20, $p24;
    goto $bb6_dummy;

  $bb38_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2593;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2567;

  $bb22_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2539;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2513;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2486;
}



const ldv_usb_put_dev_30: ref;

axiom ldv_usb_put_dev_30 == $sub.ref(0, 259786);

procedure ldv_usb_put_dev_30($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.21;



implementation ldv_usb_put_dev_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} ldv_put_dev($p0);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    return;
}



const ldv_put_dev: ref;

axiom ldv_put_dev == $sub.ref(0, 260818);

procedure ldv_put_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.21;



implementation ldv_put_dev($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p1 := $M.21;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i7 := $M.22;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i7, 1);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $M.22 := $i8;
    call {:si_unique_call 426} {:cexpr "dev_counter"} boogie_si_record_i32($i8);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i9 := $M.22;
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $M.21 := $0.ref;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const free_tx_struct: ref;

axiom free_tx_struct == $sub.ref(0, 261850);

procedure free_tx_struct($p0: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation free_tx_struct($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} ldv_usb_free_urb_15($p4);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} kfree($p6);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} kfree($p7);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const free_rx_struct: ref;

axiom free_rx_struct == $sub.ref(0, 262882);

procedure free_rx_struct($p0: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation free_rx_struct($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} ldv_usb_free_urb_18($p4);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} kfree($p6);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} kfree($p7);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_free_urb_18: ref;

axiom ldv_usb_free_urb_18 == $sub.ref(0, 263914);

procedure ldv_usb_free_urb_18($p0: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation ldv_usb_free_urb_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} ldv_free_urb($p0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_urb: ref;

axiom ldv_free_urb == $sub.ref(0, 264946);

procedure ldv_free_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation ldv_free_urb($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p1 := $M.15;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p5 := $M.15;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $M.15 := $0.ref;
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_usb_free_urb_15: ref;

axiom ldv_usb_free_urb_15 == $sub.ref(0, 265978);

procedure ldv_usb_free_urb_15($p0: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation ldv_usb_free_urb_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} ldv_free_urb($p0);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_netdev_4: ref;

axiom ldv_unregister_netdev_4 == $sub.ref(0, 267010);

procedure ldv_unregister_netdev_4($p0: ref);
  free requires assertsPassed;
  modifies $M.23;



implementation ldv_unregister_netdev_4($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} unregister_netdev($p0);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 436} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    return;
}



const gdm_wimax_event_exit: ref;

axiom gdm_wimax_event_exit == $sub.ref(0, 268042);

procedure gdm_wimax_event_exit();
  free requires assertsPassed;
  modifies $M.0;



implementation gdm_wimax_event_exit()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p18: ref;
  var $p19: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p37: ref;
  var $p38: ref;
  var $p47: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(8, 1)));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, wm_event);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, wm_event, $i4);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, wm_event);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p7 := spinlock_check($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 439} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(16, 1)), $mul.ref(0, 1)));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 2080)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, $p2i.ref.i64($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(16, 1))));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(104, 1)), $mul.ref(0, 1)));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 2080)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p29, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, $p2i.ref.i64($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(104, 1))));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} spin_unlock_irqrestore($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $i8);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(8, 1)));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} netlink_exit($p47);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(8, 1)), $0.ref);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p37, $p38 := $p28, $p32;
    goto $bb16;

  $bb16:
    call $p39, $p41, $p42, $p44, $i45, $i46, $p37, $p38 := gdm_wimax_event_exit_loop_$bb16($p39, $p41, $p42, $p44, $i45, $i46, $p37, $p38);
    goto $bb16_last;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p37, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} list_del($p39);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} free_event_entry($p37);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 2080)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p38, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, $p2i.ref.i64($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(104, 1))));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i46 == 1);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $p37, $p38 := $p38, $p42;
    goto $bb18_dummy;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p18, $p19 := $p9, $p13;
    goto $bb8;

  $bb8:
    call $p20, $p22, $p23, $p25, $i26, $i27, $p18, $p19 := gdm_wimax_event_exit_loop_$bb8($p20, $p22, $p23, $p25, $i26, $i27, $p18, $p19);
    goto $bb8_last;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} list_del($p20);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} free_event_entry($p18);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2080)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p19, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, $p2i.ref.i64($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(16, 1))));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p18, $p19 := $p19, $p23;
    goto $bb10_dummy;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2736;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2711;
}



const gdm_wimax_cleanup_ioctl: ref;

axiom gdm_wimax_cleanup_ioctl == $sub.ref(0, 269074);

procedure gdm_wimax_cleanup_ioctl($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gdm_wimax_cleanup_ioctl($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p8: ref;
  var $p11: ref;
  var $p14: ref;
  var $p17: ref;
  var $p20: ref;
  var $p23: ref;
  var $p26: ref;
  var $p29: ref;
  var $p32: ref;
  var $p35: ref;
  var $p38: ref;
  var $p41: ref;
  var $p44: ref;
  var $p47: ref;
  var $p50: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p1 := netdev_priv($p0);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} kdelete($p5);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} kdelete($p8);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} kdelete($p11);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} kdelete($p14);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(4, 16)), $mul.ref(8, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} kdelete($p17);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(5, 16)), $mul.ref(8, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} kdelete($p20);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(6, 16)), $mul.ref(8, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} kdelete($p23);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(7, 16)), $mul.ref(8, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} kdelete($p26);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(8, 16)), $mul.ref(8, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} kdelete($p29);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(9, 16)), $mul.ref(8, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} kdelete($p32);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(10, 16)), $mul.ref(8, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} kdelete($p35);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(11, 16)), $mul.ref(8, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} kdelete($p38);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(12, 16)), $mul.ref(8, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} kdelete($p41);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(13, 16)), $mul.ref(8, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} kdelete($p44);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(14, 16)), $mul.ref(8, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} kdelete($p47);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(200, 1)), $mul.ref(15, 16)), $mul.ref(8, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} kdelete($p50);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_5: ref;

axiom ldv_free_netdev_5 == $sub.ref(0, 270106);

procedure ldv_free_netdev_5($p0: ref);
  free requires assertsPassed;
  modifies $M.23;



implementation ldv_free_netdev_5($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} free_netdev($p0);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 464} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 271138);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    return;
}



const free_event_entry: ref;

axiom free_event_entry == $sub.ref(0, 272170);

procedure free_event_entry($p0: ref);
  free requires assertsPassed;



implementation free_event_entry($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} kfree($p1);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    return;
}



const netlink_exit: ref;

axiom netlink_exit == $sub.ref(0, 273202);

procedure netlink_exit($p0: ref);
  free requires assertsPassed;



implementation netlink_exit($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} netlink_kernel_release($p0);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    return;
}



const netlink_kernel_release: ref;

axiom netlink_kernel_release == $sub.ref(0, 274234);

procedure netlink_kernel_release($p0: ref);
  free requires assertsPassed;



implementation netlink_kernel_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    return;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 275266);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    return;
}



const ldv_interface_to_usbdev: ref;

axiom ldv_interface_to_usbdev == $sub.ref(0, 276298);

procedure ldv_interface_to_usbdev() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_interface_to_usbdev() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $p0 := ldv_undef_ptr();
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} ldv_stop___1();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 277330);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 469} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 470} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_usb_get_dev_27: ref;

axiom ldv_usb_get_dev_27 == $sub.ref(0, 278362);

procedure ldv_usb_get_dev_27($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.22, $M.21;



implementation ldv_usb_get_dev_27($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p1 := ldv_get_dev($p0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 279394);

procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 1} true;
    call {:si_unique_call 472} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 473} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 1} true;
    call {:si_unique_call 474} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 475} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 1} true;
    call {:si_unique_call 476} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 477} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_emergency: ref;

axiom usb_emergency == $sub.ref(0, 280426);

procedure usb_emergency($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation usb_emergency($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i10: i32;
  var $i3: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i1 := em_download_image($p0, .str.29, .str.31);
    call {:si_unique_call 479} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} vslice_dummy_var_106 := dev_err.ref.ref($p4, .str.32);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i6 := em_download_image($p0, .str.30, .str.33);
    call {:si_unique_call 482} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_107 := _dev_info.ref.ref($p8, .str.34);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i10 := em_fw_reset($p0);
    call {:si_unique_call 485} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const usb_boot: ref;

axiom usb_boot == $sub.ref(0, 281458);

procedure usb_boot($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.0, $M.44, $M.45, $CurrAddr;



implementation usb_boot($p0: ref, $i1: i16) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i44: i64;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $p52: ref;
  var $i53: i64;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i60: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i64;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $p101: ref;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i115: i64;
  var $p117: ref;
  var $i118: i32;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i64;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $i127: i32;
  var $i128: i64;
  var $i129: i64;
  var $i130: i1;
  var $p131: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $i43: i32;
  var $i145: i32;
  var $i42: i32;
  var $i140: i32;
  var $i141: i32;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i32;
  var $i152: i32;
  var $i21: i32;
  var $p153: ref;
  var $p154: ref;
  var $i10: i32;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p2 := $alloc($mul.ref(140, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p3 := $alloc($mul.ref(240, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 489} {:cexpr "usb_boot:arg:pid"} boogie_si_record_i16($i1);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i6 := request_firmware($p4, .str.18, $p5);
    call {:si_unique_call 491} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p11 := kmalloc(1024, 208);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $M.24 := $p11;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p12 := $M.24;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.25, $p4);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.26, $p16);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i18 := $ule.i64($i17, 139);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i64(140, 63);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p2);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.25, $p4);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.27, $p29);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 498} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p27, $p30, 140, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p2);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} array_le32_to_cpu($p31, 19);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i32($i33, 16);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i41 := $ult.i32(0, $i40);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i42 := 0;
    assume {:branchcond $i41} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i140, $i141 := $i42, $i6;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.0, $p146);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i140, $i147);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    $i152 := $i141;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i21 := $i152;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.25, $p4);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} release_firmware($p153);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p154 := $M.24;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} kfree($p154);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i10 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb52:
    assume $i148 == 1;
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i1);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_117 := dev_err.ref.ref.i32($p149, .str.28, $i150);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i152 := $sub.i32(0, 22);
    goto $bb54;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb21;

  $bb21:
    call $i44, $p46, $i47, $p48, $i49, $i50, $i51, $i60, $p62, $i63, $i64, $p65, $p66, $i67, $i68, $i69, $i72, $p73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $p82, $p83, $p84, $i85, $i86, $i87, $i88, $i89, $i142, $i143, $i144, $i43, $i145, cmdloc_dummy_var_30, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35 := usb_boot_loop_$bb21($i1, $p2, $p3, $p4, $p39, $i44, $p46, $i47, $p48, $i49, $i50, $i51, $i60, $p62, $i63, $i64, $p65, $p66, $i67, $i68, $i69, $i72, $p73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $p82, $p83, $p84, $i85, $i86, $i87, $i88, $i89, $i142, $i143, $i144, $i43, $i145, cmdloc_dummy_var_30, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35);
    goto $bb21_last;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(12, 1)), $mul.ref($i44, 4));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32($i47, $i49);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i51 := $i43;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i43);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(12, 1)), $mul.ref($i60, 4));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i63);
    call {:si_unique_call 502} {:cexpr "pos"} boogie_si_record_i64($i64);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.25, $p4);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.26, $p66);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i64, 240);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i69 := $ult.i64($i67, $i68);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i72 := $ugt.i64(240, 63);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i72 == 1);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p3);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.25, $p4);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.27, $p80);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref($i64, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 505} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p78, $p82, 240, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p3);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} array_le32_to_cpu($p83, 8);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 65535);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i1);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i86, $i87);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i89 := $i43;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i89);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(12, 1)), $mul.ref($i90, 4));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i93, $i95);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i96);
    call {:si_unique_call 508} {:cexpr "pos"} boogie_si_record_i64($i97);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.25, $p4);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i100 := $load.i64($M.26, $p99);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i103 := $zext.i32.i64($i102);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i104 := $add.i64($i103, $i97);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i105 := $ult.i64($i100, $i104);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.25, $p4);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i111 := download_image($p0, $p108, $i97, $i110, 276168705);
    call {:si_unique_call 511} {:cexpr "ret"} boogie_si_record_i32($i111);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i111, 0);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} vslice_dummy_var_114 := _dev_info.ref.ref($p113, .str.25);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i89);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(12, 1)), $mul.ref($i115, 4));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(20, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i118, $i120);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i122 := $zext.i32.i64($i121);
    call {:si_unique_call 513} {:cexpr "pos"} boogie_si_record_i64($i122);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.25, $p4);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.26, $p124);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(12, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i128 := $zext.i32.i64($i127);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i129 := $add.i64($i128, $i122);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i130 := $ult.i64($i125, $i129);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.25, $p4);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(12, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i136 := download_image($p0, $p133, $i122, $i135, 276168706);
    call {:si_unique_call 516} {:cexpr "ret"} boogie_si_record_i32($i136);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i136, 0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} vslice_dummy_var_116 := _dev_info.ref.ref($p138, .str.27);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i140, $i141 := $i89, $i136;
    goto $bb48;

  $bb45:
    assume $i137 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i21 := $i136;
    goto $bb10;

  $bb42:
    assume $i130 == 1;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} vslice_dummy_var_115 := dev_err.ref.ref($p131, .str.26);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i21 := $i111;
    goto $bb10;

  $bb39:
    assume $i112 == 1;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i21 := $i111;
    goto $bb10;

  $bb36:
    assume $i105 == 1;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_113 := dev_err.ref.ref($p106, .str.24);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i21 := $i6;
    goto $bb10;

  $bb32:
    assume $i88 == 1;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i142 := $add.i32($i43, 1);
    call {:si_unique_call 507} {:cexpr "i"} boogie_si_record_i32($i142);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p39);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i144 := $ult.i32($i142, $i143);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i145 := $i142;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i42 := $i145;
    goto $bb20;

  $bb49:
    assume $i144 == 1;
    assume {:verifier.code 0} true;
    $i43 := $i142;
    goto $bb49_dummy;

  $bb29:
    assume $i72 == 1;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p3);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.25, $p4);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.27, $p75);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref($i64, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 504} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p73, $p77, 240, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i69 == 1;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_112 := dev_err.ref.ref($p70, .str.23);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 5);
    goto $bb10;

  $bb23:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i51);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(12, 1)), $mul.ref($i53, 4));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_111 := dev_err.ref.ref.i32.i32.i32($p52, .str.22, $i51, $i56, $i58);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb10;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 140)), $mul.ref(4, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} vslice_dummy_var_110 := dev_err.ref.ref.i32($p35, .str.21, $i37);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb10;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p2);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.25, $p4);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.27, $p25);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 497} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p23, $p26, 140, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_109 := dev_err.ref.ref($p19, .str.20);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 5);
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_108 := dev_err.ref.ref.ref.i32($p8, .str.19, .str.18, $i6);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i10 := $i6;
    goto $bb3;

  $bb49_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2935;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 282490);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 520} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const gdm_usb_send: ref;

axiom gdm_usb_send == $sub.ref(0, 283522);

procedure gdm_usb_send($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.16, $M.18, $CurrAddr, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation gdm_usb_send($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p47: ref;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p102: ref;
  var $p103: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p101: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i18: i32;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i1;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 523} {:cexpr "gdm_usb_send:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(120, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(360, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 524} {:cexpr "padding"} boogie_si_record_i32($i11);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p5, 0);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(2047, $i11);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, $i2);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 527} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p25 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p26 := spinlock_check($p25);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i27 := _raw_spin_lock_irqsave($p26);
    call {:si_unique_call 531} {:cexpr "flags"} boogie_si_record_i64($i27);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p1);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i29, 8);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i32 := $sext.i16.i32($i31);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i16($i34);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i36 := $sext.i16.i32($i35);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i32, $i36);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    call {:si_unique_call 532} {:cexpr "cmd_evt"} boogie_si_record_i16($i38);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 514);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i40 == 1);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $p48 := alloc_tx_struct($p9);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p48, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p53 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(32, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} list_add_tail($p52, $p53);
    assume {:verifier.code 0} true;
    $p47 := $p48;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i2);
    call {:si_unique_call 537} {:cexpr "__len"} boogie_si_record_i64($i54);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p47, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i11);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p56, $mul.ref($i57, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 538} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p58, $p1, $i54, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p47, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p3);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p47, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p4);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i2, 511);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i2;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i65 := __create_pipe($p8, 1);
    call {:si_unique_call 543} {:cexpr "tmp___1"} boogie_si_record_i32($i65);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p47, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i65, $sub.i32(0, 1073741824));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p47, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i64, $i11);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p47);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} ldv_usb_fill_bulk_urb_19($p67, $p8, $i68, $p70, $i71, gdm_usb_send_complete, $p72);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p8, $mul.ref(0, 1992)), $mul.ref(24, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 8);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(96, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i83 == 1);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i38);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 269);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p47, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i119 := ldv_usb_submit_urb_20($p118, 32);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 561} {:cexpr "ret"} boogie_si_record_i32($i119);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} usb_mark_last_busy($p8);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $p121 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} spin_unlock_irqrestore($p121, $i27);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.28, $p5);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb43:
    assume $i123 == 1;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 28);
    goto $bb3;

  $bb39:
    assume $i120 == 1;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p47, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p124, $0.ref);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p47, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} __gdm_usb_send_complete($p126);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    $p127 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} spin_unlock_irqrestore($p127, $i27);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i18 := $i119;
    goto $bb3;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i87 == 1;
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $p90 := spinlock_check($p89);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i91 := _raw_spin_lock_irqsave($p90);
    call {:si_unique_call 551} {:cexpr "flags2"} boogie_si_record_i64($i91);
    $p93 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    $p98 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(16, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i97, $i99);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    $p112 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} spin_unlock_irqrestore($p112, $i91);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(96, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, 1);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $p114 := spinlock_check(k_lock);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i115 := _raw_spin_lock_irqsave($p114);
    call {:si_unique_call 556} {:cexpr "flags2"} boogie_si_record_i64($i115);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} list_add_tail($p116, k_list);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} spin_unlock_irqrestore(k_lock, $i115);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} __wake_up(k_wait, 3, 1, $0.ref);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i100 == 1;
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p101 := $p94;
    goto $bb32;

  $bb32:
    call $p102, $p103, $p106, $p107, $p108, $p109, $i110, $i111, $p101, vslice_dummy_var_120 := gdm_usb_send_loop_$bb32($i99, $p102, $p103, $p106, $p107, $p108, $p109, $i110, $i111, $p101, vslice_dummy_var_120);
    goto $bb32_last;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_120 := usb_unlink_urb($p103);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p101, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, $i99);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i111 == 1);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb34:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    $p101 := $p107;
    goto $bb34_dummy;

  $bb25:
    assume $i83 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p47, $mul.ref(0, 72)), $mul.ref(16, 1));
    $p85 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(48, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} list_add_tail($p84, $p85);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume $i76 == 1;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p47, $mul.ref(0, 72)), $mul.ref(16, 1));
    $p78 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(48, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} list_add_tail($p77, $p78);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_119 := schedule_work($p79);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i62 == 1;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i2, 1);
    call {:si_unique_call 541} {:cexpr "len"} boogie_si_record_i32($i63);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb20;

  $bb15:
    assume $i50 == 1;
    $p51 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} spin_unlock_irqrestore($p51, $i27);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb3;

  $bb9:
    assume $i40 == 1;
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $p41 := get_tx_struct($p9, $p5);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p41, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p46 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(16, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} list_add_tail($p45, $p46);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p47 := $p41;
    goto $bb14;

  $bb11:
    assume $i43 == 1;
    $p44 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} spin_unlock_irqrestore($p44, $i27);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 28);
    goto $bb3;

  $bb5:
    assume $i24 == 1;
    call {:si_unique_call 528} devirtbounce.4(0, .str.79, 371, 12);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call gdm_usb_send_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} vslice_dummy_var_118 := dev_err.ref.ref.ref($p16, .str.77, .str.78);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 19);
    goto $bb3;

  $bb34_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3211;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;
}



const gdm_usb_receive: ref;

axiom gdm_usb_receive == $sub.ref(0, 284554);

procedure gdm_usb_receive($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, assertsPassed;



implementation gdm_usb_receive($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i13: i32;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 368)), $mul.ref(256, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p15 := spinlock_check($p14);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i16 := _raw_spin_lock_irqsave($p15);
    call {:si_unique_call 568} {:cexpr "flags"} boogie_si_record_i64($i16);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p17 := get_rx_struct($p6);
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} spin_unlock_irqrestore($p18, $i16);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p17);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p17, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p1);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p17, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p2);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i23 := __create_pipe($p5, 130);
    call {:si_unique_call 572} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p17, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i23, $sub.i32(0, 1073741696));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p17, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p17);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} ldv_usb_fill_bulk_urb_19($p25, $p5, $i26, $p28, 131072, gdm_usb_rcv_complete, $p29);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p17, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i32 := ldv_usb_submit_urb_23($p31, 32);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 575} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i13 := $i32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} vslice_dummy_var_121 := dev_err.ref.ref.ref($p11, .str.77, .str.82);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb3;
}



const init_usb: ref;

axiom init_usb == $sub.ref(0, 285586);

procedure init_usb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15;



implementation init_usb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i64;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i64;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i64;
  var $i183: i1;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i64;
  var $i193: i1;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i64;
  var $i198: i1;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i64;
  var $i203: i1;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $i207: i64;
  var $i208: i1;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i64;
  var $i213: i1;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $i217: i64;
  var $i218: i1;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $i222: i64;
  var $i223: i1;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i64;
  var $i228: i1;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $i232: i64;
  var $i233: i1;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i64;
  var $i238: i1;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $i242: i64;
  var $i243: i1;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i64;
  var $i248: i1;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i64;
  var $i253: i1;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $i257: i64;
  var $i258: i1;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $i262: i64;
  var $i263: i1;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $i267: i64;
  var $i268: i1;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i64;
  var $i273: i1;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $i277: i64;
  var $i278: i1;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $i282: i64;
  var $i283: i1;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $i287: i64;
  var $i288: i1;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $i292: i64;
  var $i293: i1;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $i297: i64;
  var $i298: i1;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $i302: i64;
  var $i303: i1;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $i307: i64;
  var $i308: i1;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $i312: i64;
  var $i313: i1;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $i317: i64;
  var $i318: i1;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $i322: i64;
  var $i323: i1;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $i327: i64;
  var $i328: i1;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $i332: i64;
  var $i333: i1;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $i337: i64;
  var $i338: i1;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $i342: i64;
  var $i343: i1;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $i347: i64;
  var $i348: i1;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $i352: i64;
  var $i353: i1;
  var $p354: ref;
  var $p355: ref;
  var vslice_dummy_var_122: ref;
  var vslice_dummy_var_123: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1));
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} INIT_LIST_HEAD($p5);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(16, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} INIT_LIST_HEAD($p6);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(32, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} INIT_LIST_HEAD($p7);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(48, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} INIT_LIST_HEAD($p8);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} INIT_LIST_HEAD($p9);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(16, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} INIT_LIST_HEAD($p10);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} vslice_dummy_var_122 := spinlock_check($p11);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} __raw_spin_lock_init($p15, .str.83, $p1);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} vslice_dummy_var_123 := spinlock_check($p16);
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} __raw_spin_lock_init($p20, .str.84, $p2);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $p22 := spinlock_check($p21);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i23 := _raw_spin_lock_irqsave($p22);
    call {:si_unique_call 590} {:cexpr "flags"} boogie_si_record_i64($i23);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p24 := alloc_tx_struct($p3);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} list_add($p28, $p29);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p41 := alloc_tx_struct($p3);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p41, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} list_add($p44, $p45);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p46 := alloc_tx_struct($p3);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p46, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} list_add($p49, $p50);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p51 := alloc_tx_struct($p3);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p51, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} list_add($p54, $p55);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p56 := alloc_tx_struct($p3);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p56, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} list_add($p59, $p60);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $p61 := alloc_tx_struct($p3);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p61, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} list_add($p64, $p65);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p66 := alloc_tx_struct($p3);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p66, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} list_add($p69, $p70);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $p71 := alloc_tx_struct($p3);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p71, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} list_add($p74, $p75);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $p76 := alloc_tx_struct($p3);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p76, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} list_add($p79, $p80);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $p81 := alloc_tx_struct($p3);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i83 := $eq.i64($i82, 0);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p81, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} list_add($p84, $p85);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $p86 := alloc_tx_struct($p3);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p86, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} list_add($p89, $p90);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $p91 := alloc_tx_struct($p3);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p91, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p95 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} list_add($p94, $p95);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p96 := alloc_tx_struct($p3);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i98 := $eq.i64($i97, 0);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p96, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} list_add($p99, $p100);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p101 := alloc_tx_struct($p3);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i103 := $eq.i64($i102, 0);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p101, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} list_add($p104, $p105);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $p106 := alloc_tx_struct($p3);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64($i107, 0);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p106, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p110 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} list_add($p109, $p110);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $p111 := alloc_tx_struct($p3);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p111);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i113 := $eq.i64($i112, 0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p111, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} list_add($p114, $p115);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $p116 := alloc_tx_struct($p3);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i118 := $eq.i64($i117, 0);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p116, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} list_add($p119, $p120);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $p121 := alloc_tx_struct($p3);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p121);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i123 := $eq.i64($i122, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p121, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p125 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} list_add($p124, $p125);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p126 := alloc_tx_struct($p3);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i128 := $eq.i64($i127, 0);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p126, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p130 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} list_add($p129, $p130);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $p131 := alloc_tx_struct($p3);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p131);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i133 := $eq.i64($i132, 0);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p131, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p135 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} list_add($p134, $p135);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $p136 := alloc_tx_struct($p3);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i138 := $eq.i64($i137, 0);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p136, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p140 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} list_add($p139, $p140);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p141 := alloc_tx_struct($p3);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p141);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i143 := $eq.i64($i142, 0);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p141, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p145 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} list_add($p144, $p145);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p146 := alloc_tx_struct($p3);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i148 := $eq.i64($i147, 0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p146, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p150 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} list_add($p149, $p150);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $p151 := alloc_tx_struct($p3);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i152 := $p2i.ref.i64($p151);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i153 := $eq.i64($i152, 0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p151, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} list_add($p154, $p155);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p156 := alloc_tx_struct($p3);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i158 := $eq.i64($i157, 0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p156, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} list_add($p159, $p160);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $p161 := alloc_tx_struct($p3);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i162 := $p2i.ref.i64($p161);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i163 := $eq.i64($i162, 0);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p161, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p165 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} list_add($p164, $p165);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p166 := alloc_tx_struct($p3);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i168 := $eq.i64($i167, 0);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p166, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p170 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} list_add($p169, $p170);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $p171 := alloc_tx_struct($p3);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i172 := $p2i.ref.i64($p171);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i173 := $eq.i64($i172, 0);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p171, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p175 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} list_add($p174, $p175);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $p176 := alloc_tx_struct($p3);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p176);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i178 := $eq.i64($i177, 0);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p176, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p180 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} list_add($p179, $p180);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $p181 := alloc_tx_struct($p3);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i182 := $p2i.ref.i64($p181);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i183 := $eq.i64($i182, 0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p181, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} list_add($p184, $p185);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p186 := alloc_tx_struct($p3);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p186);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i188 := $eq.i64($i187, 0);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p186, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p190 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} list_add($p189, $p190);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p191 := alloc_tx_struct($p3);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i192 := $p2i.ref.i64($p191);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i193 := $eq.i64($i192, 0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p191, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p195 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} list_add($p194, $p195);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $p196 := alloc_tx_struct($p3);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i197 := $p2i.ref.i64($p196);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i198 := $eq.i64($i197, 0);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p196, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p200 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} list_add($p199, $p200);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p201 := alloc_tx_struct($p3);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i202 := $p2i.ref.i64($p201);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i203 := $eq.i64($i202, 0);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p201, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p205 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} list_add($p204, $p205);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p206 := alloc_tx_struct($p3);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i207 := $p2i.ref.i64($p206);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i208 := $eq.i64($i207, 0);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p206, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p210 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} list_add($p209, $p210);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p211 := alloc_tx_struct($p3);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i212 := $p2i.ref.i64($p211);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i213 := $eq.i64($i212, 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p211, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p215 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} list_add($p214, $p215);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p216 := alloc_tx_struct($p3);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i217 := $p2i.ref.i64($p216);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i218 := $eq.i64($i217, 0);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p216, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p220 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} list_add($p219, $p220);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p221 := alloc_tx_struct($p3);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i222 := $p2i.ref.i64($p221);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i223 := $eq.i64($i222, 0);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p221, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p225 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} list_add($p224, $p225);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p226 := alloc_tx_struct($p3);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i227 := $p2i.ref.i64($p226);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i228 := $eq.i64($i227, 0);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p226, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p230 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} list_add($p229, $p230);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p231 := alloc_tx_struct($p3);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i232 := $p2i.ref.i64($p231);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i233 := $eq.i64($i232, 0);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p231, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p235 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} list_add($p234, $p235);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p236 := alloc_tx_struct($p3);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i237 := $p2i.ref.i64($p236);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i238 := $eq.i64($i237, 0);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p236, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p240 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} list_add($p239, $p240);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p241 := alloc_tx_struct($p3);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i242 := $p2i.ref.i64($p241);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i243 := $eq.i64($i242, 0);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p241, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p245 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} list_add($p244, $p245);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p246 := alloc_tx_struct($p3);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i247 := $p2i.ref.i64($p246);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i248 := $eq.i64($i247, 0);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p246, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p250 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} list_add($p249, $p250);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p251 := alloc_tx_struct($p3);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i252 := $p2i.ref.i64($p251);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i253 := $eq.i64($i252, 0);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p251, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p255 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} list_add($p254, $p255);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $p256 := alloc_tx_struct($p3);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i257 := $p2i.ref.i64($p256);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i258 := $eq.i64($i257, 0);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p256, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p260 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} list_add($p259, $p260);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p261 := alloc_tx_struct($p3);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i262 := $p2i.ref.i64($p261);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i263 := $eq.i64($i262, 0);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p261, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p265 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} list_add($p264, $p265);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p266 := alloc_tx_struct($p3);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i267 := $p2i.ref.i64($p266);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i268 := $eq.i64($i267, 0);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p266, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p270 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} list_add($p269, $p270);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p271 := alloc_tx_struct($p3);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i272 := $p2i.ref.i64($p271);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i273 := $eq.i64($i272, 0);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p271, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p275 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} list_add($p274, $p275);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p276 := alloc_tx_struct($p3);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i277 := $p2i.ref.i64($p276);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i278 := $eq.i64($i277, 0);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p276, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p280 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} list_add($p279, $p280);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p281 := alloc_tx_struct($p3);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i282 := $p2i.ref.i64($p281);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i283 := $eq.i64($i282, 0);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p281, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p285 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} list_add($p284, $p285);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p286 := alloc_tx_struct($p3);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i287 := $p2i.ref.i64($p286);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i288 := $eq.i64($i287, 0);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p286, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p290 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} list_add($p289, $p290);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $p291 := alloc_tx_struct($p3);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i292 := $p2i.ref.i64($p291);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i293 := $eq.i64($i292, 0);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i293} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p291, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p295 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} list_add($p294, $p295);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p296 := alloc_tx_struct($p3);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i297 := $p2i.ref.i64($p296);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i298 := $eq.i64($i297, 0);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p296, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p300 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} list_add($p299, $p300);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $p301 := alloc_tx_struct($p3);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i302 := $p2i.ref.i64($p301);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i303 := $eq.i64($i302, 0);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i303} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p301, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p305 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} list_add($p304, $p305);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p306 := alloc_tx_struct($p3);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i307 := $p2i.ref.i64($p306);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i308 := $eq.i64($i307, 0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p306, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p310 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} list_add($p309, $p310);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p311 := alloc_tx_struct($p3);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i312 := $p2i.ref.i64($p311);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i313 := $eq.i64($i312, 0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p311, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p315 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} list_add($p314, $p315);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p316 := alloc_tx_struct($p3);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i317 := $p2i.ref.i64($p316);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i318 := $eq.i64($i317, 0);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i318} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p316, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p320 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} list_add($p319, $p320);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p321 := alloc_tx_struct($p3);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i322 := $p2i.ref.i64($p321);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i323 := $eq.i64($i322, 0);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p321, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p325 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} list_add($p324, $p325);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p326 := alloc_tx_struct($p3);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i327 := $p2i.ref.i64($p326);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i328 := $eq.i64($i327, 0);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p326, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p330 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} list_add($p329, $p330);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p331 := alloc_tx_struct($p3);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i332 := $p2i.ref.i64($p331);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i333 := $eq.i64($i332, 0);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p331, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p335 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} list_add($p334, $p335);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $p336 := alloc_tx_struct($p3);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i337 := $p2i.ref.i64($p336);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i338 := $eq.i64($i337, 0);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i338} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p336, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p340 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} list_add($p339, $p340);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $p341 := alloc_tx_struct($p3);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i342 := $p2i.ref.i64($p341);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i343 := $eq.i64($i342, 0);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p341, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p345 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} list_add($p344, $p345);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $p346 := alloc_tx_struct($p3);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i347 := $p2i.ref.i64($p346);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i348 := $eq.i64($i347, 0);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p346, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p350 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} list_add($p349, $p350);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $p351 := alloc_tx_struct($p3);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i352 := $p2i.ref.i64($p351);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i353 := $eq.i64($i352, 0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p351, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p355 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} list_add($p354, $p355);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} spin_unlock_irqrestore($p30, $i23);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p31 := alloc_rx_struct($p4);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $p35 := spinlock_check($p34);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i36 := _raw_spin_lock_irqsave($p35);
    call {:si_unique_call 600} {:cexpr "flags"} boogie_si_record_i64($i36);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p31, $mul.ref(0, 56)), $mul.ref(0, 1));
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} list_add($p37, $p38);
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} spin_unlock_irqrestore($p39, $i36);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} release_usb($p0);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 12);
    goto $bb13;

  $bb262:
    assume {:verifier.code 0} true;
    assume $i353 == 1;
    goto $bb4;

  $bb4:
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} spin_unlock_irqrestore($p27, $i23);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb258:
    assume {:verifier.code 0} true;
    assume $i348 == 1;
    goto $bb4;

  $bb254:
    assume {:verifier.code 0} true;
    assume $i343 == 1;
    goto $bb4;

  $bb250:
    assume {:verifier.code 0} true;
    assume $i338 == 1;
    goto $bb4;

  $bb246:
    assume {:verifier.code 0} true;
    assume $i333 == 1;
    goto $bb4;

  $bb242:
    assume {:verifier.code 0} true;
    assume $i328 == 1;
    goto $bb4;

  $bb238:
    assume {:verifier.code 0} true;
    assume $i323 == 1;
    goto $bb4;

  $bb234:
    assume {:verifier.code 0} true;
    assume $i318 == 1;
    goto $bb4;

  $bb230:
    assume {:verifier.code 0} true;
    assume $i313 == 1;
    goto $bb4;

  $bb226:
    assume {:verifier.code 0} true;
    assume $i308 == 1;
    goto $bb4;

  $bb222:
    assume {:verifier.code 0} true;
    assume $i303 == 1;
    goto $bb4;

  $bb218:
    assume {:verifier.code 0} true;
    assume $i298 == 1;
    goto $bb4;

  $bb214:
    assume {:verifier.code 0} true;
    assume $i293 == 1;
    goto $bb4;

  $bb210:
    assume {:verifier.code 0} true;
    assume $i288 == 1;
    goto $bb4;

  $bb206:
    assume {:verifier.code 0} true;
    assume $i283 == 1;
    goto $bb4;

  $bb202:
    assume {:verifier.code 0} true;
    assume $i278 == 1;
    goto $bb4;

  $bb198:
    assume {:verifier.code 0} true;
    assume $i273 == 1;
    goto $bb4;

  $bb194:
    assume {:verifier.code 0} true;
    assume $i268 == 1;
    goto $bb4;

  $bb190:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb4;

  $bb186:
    assume {:verifier.code 0} true;
    assume $i258 == 1;
    goto $bb4;

  $bb182:
    assume {:verifier.code 0} true;
    assume $i253 == 1;
    goto $bb4;

  $bb178:
    assume {:verifier.code 0} true;
    assume $i248 == 1;
    goto $bb4;

  $bb174:
    assume {:verifier.code 0} true;
    assume $i243 == 1;
    goto $bb4;

  $bb170:
    assume {:verifier.code 0} true;
    assume $i238 == 1;
    goto $bb4;

  $bb166:
    assume {:verifier.code 0} true;
    assume $i233 == 1;
    goto $bb4;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i228 == 1;
    goto $bb4;

  $bb158:
    assume {:verifier.code 0} true;
    assume $i223 == 1;
    goto $bb4;

  $bb154:
    assume {:verifier.code 0} true;
    assume $i218 == 1;
    goto $bb4;

  $bb150:
    assume {:verifier.code 0} true;
    assume $i213 == 1;
    goto $bb4;

  $bb146:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb4;

  $bb142:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb4;

  $bb138:
    assume {:verifier.code 0} true;
    assume $i198 == 1;
    goto $bb4;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i193 == 1;
    goto $bb4;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb4;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb4;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i178 == 1;
    goto $bb4;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb4;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb4;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i163 == 1;
    goto $bb4;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb4;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb4;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb4;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb4;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb4;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb4;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb4;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb4;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb4;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb4;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb4;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb4;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb4;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb4;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb4;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb4;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb4;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb4;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb4;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb4;
}



const device_init_wakeup: ref;

axiom device_init_wakeup == $sub.ref(0, 286618);

procedure device_init_wakeup($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation device_init_wakeup($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 728} {:cexpr "device_init_wakeup:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 1} true;
    call {:si_unique_call 729} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 730} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pm_runtime_set_autosuspend_delay: ref;

axiom pm_runtime_set_autosuspend_delay == $sub.ref(0, 287650);

procedure pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} {:cexpr "pm_runtime_set_autosuspend_delay:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 288682);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 289714);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    return;
}



const do_pm_control: ref;

axiom do_pm_control == $sub.ref(0, 290746);

procedure do_pm_control($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.43, $M.15, $M.42, assertsPassed, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, $M.19;



implementation do_pm_control($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p40: ref;
  var $p41: ref;
  var $p58: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 368)), $mul.ref(88, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i6 := ldv_usb_autopm_get_interface_24($p5);
    call {:si_unique_call 735} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $p11 := spinlock_check($p10);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $i12 := _raw_spin_lock_irqsave($p11);
    call {:si_unique_call 739} {:cexpr "flags"} boogie_si_record_i64($i12);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 368)), $mul.ref(0, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1992)), $mul.ref(24, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 8);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $p58 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} spin_unlock_irqrestore($p58, $i12);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i18 == 1;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 368)), $mul.ref(120, 1)), $mul.ref(32, 1));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $i20 := list_empty($p19);
    call {:si_unique_call 741} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 368)), $mul.ref(120, 1)), $mul.ref(16, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i23 := list_empty($p22);
    call {:si_unique_call 743} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p26 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 368)), $mul.ref(120, 1)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref($sub.ref(0, 16), 72));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p28, $mul.ref($sub.ref(0, 16), 72)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref($sub.ref(0, 16), 72));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p28, $mul.ref($sub.ref(0, 16), 72)), $mul.ref(16, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 368)), $mul.ref(120, 1)), $mul.ref(48, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i36, $i38);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume $i39 == 1;
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p40, $p41 := $p34, $p29;
    goto $bb14;

  $bb14:
    call $p42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $p40, $p41 := do_pm_control_loop_$bb14($i38, $p42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $p40, $p41);
    goto $bb14_last;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} list_del($p42);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p41, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i45 := ldv_usb_submit_urb_26($p44, 32);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 746} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 72)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref($sub.ref(0, 16), 72));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p40, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, $i38);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i57 == 1);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $p40, $p41 := $p54, $p40;
    goto $bb19_dummy;

  $bb16:
    assume $i46 == 1;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p41, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $0.ref);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p41, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} __gdm_usb_send_complete($p49);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 368)), $mul.ref(88, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} ldv_usb_autopm_put_interface_25($p9);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;
}



const register_wimax_device: ref;

axiom register_wimax_device == $sub.ref(0, 291778);

procedure register_wimax_device($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.29, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.33, $M.28, $CurrAddr, $M.16, $M.18, $M.15, $M.19, $M.42, $M.43, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation register_wimax_device($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i29: i32;
  var $i6: i32;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p2 := alloc_netdev_mqs(2208, .str, ether_setup, 1, 1);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3048)), $mul.ref(1216, 1)), $mul.ref(0, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 3048)), $mul.ref(464, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 1400);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 3048)), $mul.ref(424, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, gdm_netdev_ops);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 3048)), $mul.ref(448, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, $sub.i32(0, 4097));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 3048)), $mul.ref(448, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i64(6, 63);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 3048)), $mul.ref(760, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 752} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p19, gdm_wimax_macaddr, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p20 := netdev_priv($p2);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    call {:si_unique_call 754} cmdloc_dummy_var_46 := $memset.i8(cmdloc_dummy_var_45, $p22, 0, 2208, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_46;
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p21, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p2);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p0);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p2);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i26 := gdm_wimax_event_init();
    call {:si_unique_call 756} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i30 := ldv_register_netdev_2($p2);
    call {:si_unique_call 761} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} netif_carrier_off($p2);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p21);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} gdm_qos_init($p32);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} start_rx_proc($p21);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} gdm_wimax_prepare_device($p2);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i29 := $i30;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} vslice_dummy_var_126 := printk.ref(.str.3);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} ldv_free_netdev_3($p2);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i6 := $i29;
    goto $bb3;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} vslice_dummy_var_125 := printk.ref(.str.2);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i29 := $i26;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 3048)), $mul.ref(760, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 751} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p17, gdm_wimax_macaddr, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} vslice_dummy_var_124 := printk.ref(.str.1);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_usb_set_intfdata_28: ref;

axiom ldv_usb_set_intfdata_28 == $sub.ref(0, 292810);

procedure ldv_usb_set_intfdata_28($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.20;



implementation ldv_usb_set_intfdata_28($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} ldv_usb_set_intfdata($p1);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_set_intfdata: ref;

axiom ldv_usb_set_intfdata == $sub.ref(0, 293842);

procedure ldv_usb_set_intfdata($p0: ref);
  free requires assertsPassed;
  modifies $M.20;



implementation ldv_usb_set_intfdata($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $M.20 := $p0;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    return;
}



const ether_setup: ref;

axiom ether_setup == $sub.ref(0, 294874);

procedure ether_setup($p0: ref);



const alloc_netdev_mqs: ref;

axiom alloc_netdev_mqs == $sub.ref(0, 295906);

procedure alloc_netdev_mqs($i0: i32, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_netdev_mqs($i0: i32, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} {:cexpr "alloc_netdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 768} {:cexpr "alloc_netdev_mqs:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 769} {:cexpr "alloc_netdev_mqs:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p5 := external_alloc();
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 296938);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const gdm_wimax_event_init: ref;

axiom gdm_wimax_event_init == $sub.ref(0, 297970);

procedure gdm_wimax_event_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr;



implementation gdm_wimax_event_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var vslice_dummy_var_127: ref;
  var vslice_dummy_var_128: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, wm_event);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(8, 1)));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} vslice_dummy_var_128 := printk.ref(.str.39);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, wm_event);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, wm_event, $i16);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p5 := netlink_init(31, gdm_wimax_event_rcv);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(8, 1)), $p5);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(8, 1)));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} INIT_LIST_HEAD($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(16, 1)));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} INIT_LIST_HEAD($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(104, 1)));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} __init_work($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), 0);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, 137438953408);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 778} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(0, 1)), $p10, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} lockdep_init_map($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(32, 1)), .str.37, $p0, 0);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} INIT_LIST_HEAD($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(8, 1)));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(24, 1)), __gdm_wimax_event_send);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_127 := spinlock_check($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} __raw_spin_lock_init($add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.38, $p2);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_register_netdev_2: ref;

axiom ldv_register_netdev_2 == $sub.ref(0, 299002);

procedure ldv_register_netdev_2($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.33, $M.0, $CurrAddr;



implementation ldv_register_netdev_2($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i1 := register_netdev($p0);
    call {:si_unique_call 785} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 786} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} ldv_net_device_ops_2();
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gdm_qos_init: ref;

axiom gdm_qos_init == $sub.ref(0, 300034);

procedure gdm_qos_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gdm_qos_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p43: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p61: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p70: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p79: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p88: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p97: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p106: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p115: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p124: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p133: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p142: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p151: ref;
  var $p154: ref;
  var vslice_dummy_var_129: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} INIT_LIST_HEAD($p5);
    $p8 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(1, 16));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} INIT_LIST_HEAD($p22);
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(1, 88)), $mul.ref(8, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    $p28 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(1, 88)), $mul.ref(0, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(2, 16));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} INIT_LIST_HEAD($p31);
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(2, 88)), $mul.ref(8, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    $p37 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(2, 88)), $mul.ref(0, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 0);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(3, 16));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} INIT_LIST_HEAD($p40);
    $p43 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(3, 88)), $mul.ref(8, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 0);
    $p46 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(3, 88)), $mul.ref(0, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 0);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(4, 16));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} INIT_LIST_HEAD($p49);
    $p52 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(4, 88)), $mul.ref(8, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 0);
    $p55 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(4, 88)), $mul.ref(0, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 0);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p56 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(5, 16));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} INIT_LIST_HEAD($p58);
    $p61 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(5, 88)), $mul.ref(8, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, 0);
    $p64 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(5, 88)), $mul.ref(0, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p65 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(6, 16));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} INIT_LIST_HEAD($p67);
    $p70 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(6, 88)), $mul.ref(8, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, 0);
    $p73 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(6, 88)), $mul.ref(0, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 0);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p74 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref(7, 16));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} INIT_LIST_HEAD($p76);
    $p79 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(7, 88)), $mul.ref(8, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, 0);
    $p82 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(7, 88)), $mul.ref(0, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, 0);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p83 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(8, 16));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} INIT_LIST_HEAD($p85);
    $p88 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(8, 88)), $mul.ref(8, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, 0);
    $p91 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(8, 88)), $mul.ref(0, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, 0);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $p92 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref(9, 16));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} INIT_LIST_HEAD($p94);
    $p97 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(9, 88)), $mul.ref(8, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, 0);
    $p100 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(9, 88)), $mul.ref(0, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, 0);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p101 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p102, $mul.ref(10, 16));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} INIT_LIST_HEAD($p103);
    $p106 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(10, 88)), $mul.ref(8, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, 0);
    $p109 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(10, 88)), $mul.ref(0, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $p110 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p111, $mul.ref(11, 16));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} INIT_LIST_HEAD($p112);
    $p115 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(11, 88)), $mul.ref(8, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, 0);
    $p118 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(11, 88)), $mul.ref(0, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, 0);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p119 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref(12, 16));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} INIT_LIST_HEAD($p121);
    $p124 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(12, 88)), $mul.ref(8, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p124, 0);
    $p127 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(12, 88)), $mul.ref(0, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, 0);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $p128 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p129, $mul.ref(13, 16));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} INIT_LIST_HEAD($p130);
    $p133 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(13, 88)), $mul.ref(8, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 0);
    $p136 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(13, 88)), $mul.ref(0, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p136, 0);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $p137 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(14, 16));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} INIT_LIST_HEAD($p139);
    $p142 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(14, 88)), $mul.ref(8, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p142, 0);
    $p145 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(14, 88)), $mul.ref(0, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p145, 0);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $p146 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p147, $mul.ref(15, 16));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} INIT_LIST_HEAD($p148);
    $p151 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(15, 88)), $mul.ref(8, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, 0);
    $p154 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(15, 88)), $mul.ref(0, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p154, 0);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(256, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(260, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 15);
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1744, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 255);
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} vslice_dummy_var_129 := spinlock_check($p15);
    $p18 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1)), $mul.ref(0, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} __raw_spin_lock_init($p19, .str.8, $p1);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} init_qos_entry_list();
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    return;
}



const start_rx_proc: ref;

axiom start_rx_proc == $sub.ref(0, 301066);

procedure start_rx_proc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, assertsPassed;



implementation start_rx_proc($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_130: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    call {:si_unique_call 808} vslice_dummy_var_130 := devirtbounce.7($p4, $p8, prepare_rx_complete, $p9);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const gdm_wimax_prepare_device: ref;

axiom gdm_wimax_prepare_device == $sub.ref(0, 302098);

procedure gdm_wimax_prepare_device($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.28, $M.0, $CurrAddr, $M.16, $M.18, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation gdm_wimax_prepare_device($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i16;
  var $i16: i16;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var $i46: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i16;
  var $i65: i32;
  var $i66: i16;
  var $i67: i16;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i81: i32;
  var $i82: i32;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p3 := netdev_priv($p0);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p2, 0);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p6, 512);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32(0);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 1);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    call {:si_unique_call 812} {:cexpr "len"} boogie_si_record_i16($i9);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32(0);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i11, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p13, 0);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i9);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i16 := __fswab16($i15);
    call {:si_unique_call 814} {:cexpr "tmp___1"} boogie_si_record_i16($i16);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p17, $i16);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p5);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i9);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 4);
    call {:si_unique_call 815} vslice_dummy_var_131 := devirtbounce($p21, $p25, $p26, $i28, $0.ref, $0.ref);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p2, 3);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.29, $p2);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 4);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p2, $i31);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.29, $p2);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 8);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p2, $i33);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p34, 256);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32(0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 1);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    call {:si_unique_call 816} {:cexpr "len"} boogie_si_record_i16($i37);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32(0);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i39, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p41, 26);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i37);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 1);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    call {:si_unique_call 817} {:cexpr "len"} boogie_si_record_i16($i44);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i37);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref($i46, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p48, 4);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.29, $p2);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i50 := __fswab32($i49);
    call {:si_unique_call 819} {:cexpr "tmp___4"} boogie_si_record_i32($i50);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p2, $i50);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i51 := $ugt.i64(4, 63);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i51 == 1);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i64($i44);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p58, $mul.ref($i59, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p2);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.29;
    cmdloc_dummy_var_54 := $M.29;
    call {:si_unique_call 821} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p60, $p61, 4, $zext.i32.i64(1), 0 == 1);
    $M.29 := cmdloc_dummy_var_55;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i44);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 4);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    call {:si_unique_call 822} {:cexpr "len"} boogie_si_record_i16($i64);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i67 := __fswab16($i66);
    call {:si_unique_call 824} {:cexpr "tmp___5"} boogie_si_record_i16($i67);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p68, $i67);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p5);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i64);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 4);
    call {:si_unique_call 825} vslice_dummy_var_132 := devirtbounce($p72, $p76, $p77, $i79, $0.ref, $0.ref);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.29, $p2);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i82 := __fswab32($i81);
    call {:si_unique_call 827} {:cexpr "tmp___6"} boogie_si_record_i32($i82);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} vslice_dummy_var_133 := netdev_info.ref.ref.i32($p0, .str.54, $i82);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i51 == 1;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i64($i44);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p53, $mul.ref($i54, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p2);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.29;
    cmdloc_dummy_var_51 := $M.29;
    call {:si_unique_call 820} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p55, $p56, 4, $zext.i32.i64(1), 0 == 1);
    $M.29 := cmdloc_dummy_var_52;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const ldv_free_netdev_3: ref;

axiom ldv_free_netdev_3 == $sub.ref(0, 303130);

procedure ldv_free_netdev_3($p0: ref);
  free requires assertsPassed;
  modifies $M.23;



implementation ldv_free_netdev_3($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} free_netdev($p0);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 830} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    return;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 304162);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $i1 := __arch_swab32($i0);
    call {:si_unique_call 833} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netdev_info: ref;

axiom netdev_info == $sub.ref(0, 305194);

procedure netdev_info.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 834} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 835} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 1} true;
    call {:si_unique_call 836} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 837} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 306226);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 839} $i1 := devirtbounce.8(0, $i0);
    call {:si_unique_call 840} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const prepare_rx_complete: ref;

axiom prepare_rx_complete == $sub.ref(0, 307258);

procedure prepare_rx_complete($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.31, $M.32, $M.16, $M.18, $CurrAddr, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, assertsPassed;



implementation prepare_rx_complete($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} {:cexpr "prepare_rx_complete:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i6 := gdm_wimax_get_prepared_info($p5, $p1, $i2);
    call {:si_unique_call 843} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i6, 0);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    call {:si_unique_call 846} vslice_dummy_var_136 := devirtbounce.7($p25, $p29, prepare_rx_complete, $p30);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} vslice_dummy_var_135 := netdev_err.ref.ref.i32($p20, .str.41, $i6);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    call {:si_unique_call 844} vslice_dummy_var_134 := devirtbounce.7($p11, $p15, rx_complete, $p16);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const gdm_wimax_get_prepared_info: ref;

axiom gdm_wimax_get_prepared_info == $sub.ref(0, 308290);

procedure gdm_wimax_get_prepared_info($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.31, $M.32, $CurrAddr;



implementation gdm_wimax_get_prepared_info($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i16;
  var $i39: i32;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $i43: i8;
  var $i44: i32;
  var $i45: i16;
  var $i46: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i23: i32;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $p5 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 850} {:cexpr "gdm_wimax_get_prepared_info:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i10 := __fswab16($i9);
    call {:si_unique_call 852} {:cexpr "tmp"} boogie_si_record_i16($i10);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(2, 2));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i16 := __fswab16($i15);
    call {:si_unique_call 854} {:cexpr "tmp___0"} boogie_si_record_i16($i16);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 4);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, $i2);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i10);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 32771);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} vslice_dummy_var_141 := gdm_wimax_event_send($p0, $p1, $i2);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i16);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i27 := $ule.i32($i26, 1);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64(4);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p1, $mul.ref($i30, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i32 := gdm_wimax_hci_get_tlv($p31, $p3, $p5, $p4);
    call {:si_unique_call 858} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.30, $p3);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(509, 1));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i16($i37);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.31, $p5);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i39, $i41);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(760, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.32, $p4);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_140 := netdev_info.ref.ref.ref.ref($p0, .str.46, $p49, $p50);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(509, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    call {:si_unique_call 861} {:cexpr "__len"} boogie_si_record_i64($i54);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(760, 1));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.32, $p4);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 862} cmdloc_dummy_var_58 := $memcpy.i8(cmdloc_dummy_var_56, cmdloc_dummy_var_57, $p56, $p57, $i54, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb3;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.30, $p3);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.31, $p5);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} vslice_dummy_var_139 := netdev_err.ref.ref.ref.i32.i32($p0, .str.45, .str.43, $i44, $i46);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 1);
    goto $bb3;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i10);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} vslice_dummy_var_138 := netdev_err.ref.ref.ref.i32.i32($p0, .str.44, .str.43, $i28, $i2);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i16);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 4);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} vslice_dummy_var_137 := netdev_err.ref.ref.ref.i32.i32($p0, .str.42, .str.43, $i21, $i2);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 1);
    goto $bb3;
}



const rx_complete: ref;

axiom rx_complete == $sub.ref(0, 309322);

procedure rx_complete($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.16, $M.18, $M.15, $M.19, $CurrAddr, $M.28, $M.42, $M.43, $M.23, $M.22, $M.21, $M.30, $M.31, $M.32, assertsPassed;



implementation rx_complete($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_142: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} {:cexpr "rx_complete:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} gdm_wimax_transmit_pkt($p5, $p1, $i2);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    call {:si_unique_call 866} vslice_dummy_var_142 := devirtbounce.7($p9, $p13, rx_complete, $p14);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const gdm_wimax_transmit_pkt: ref;

axiom gdm_wimax_transmit_pkt == $sub.ref(0, 310354);

procedure gdm_wimax_transmit_pkt($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.28, $M.16, $M.18, $M.15, $M.19, $M.42, $M.43, $M.23, $M.22, $M.21, $M.30, $M.31, $M.32, assertsPassed;



implementation gdm_wimax_transmit_pkt($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i8;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i1;
  var $i50: i8;
  var $i51: i1;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} {:cexpr "gdm_wimax_transmit_pkt:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p3 := netdev_priv($p0);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i10 := __fswab16($i9);
    call {:si_unique_call 870} {:cexpr "tmp___0"} boogie_si_record_i16($i10);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(2, 2));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $i16 := __fswab16($i15);
    call {:si_unique_call 872} {:cexpr "tmp___1"} boogie_si_record_i16($i16);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 4);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, $i2);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i10);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 33284);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i24, 33573);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, 33573);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} vslice_dummy_var_144 := gdm_wimax_event_send($p0, $p1, $i2);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p4);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} gdm_recv_qos_hci_packet($p35, $p1, $i2);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i24, 33284);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb18;

  $bb19:
    assume $i28 == 1;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i16);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} gdm_wimax_transmit_aggr_pkt($p0, $p31, $i32);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb12:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i24, 33283);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i16);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} gdm_wimax_netif_rx($p0, $p33, $i34);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i24, 33061);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb18;

  $bb23:
    assume $i30 == 1;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i38 := $sext.i8.i32($i37);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i47 := $sext.i8.i32($i46);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 1);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35:
    assume $i48 == 1;
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i49 := netif_queue_stopped($p0);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i8($i49);
    call {:si_unique_call 881} {:cexpr "tmp___4"} boogie_si_record_i8($i50);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i51 == 1;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} netif_wake_queue($p0);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i40 := netif_queue_stopped($p0);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    call {:si_unique_call 878} {:cexpr "tmp___2"} boogie_si_record_i8($i41);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i44 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} netif_stop_queue($p0);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i42 == 1;
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb30;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i2, 0);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i16);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 4);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} vslice_dummy_var_143 := netdev_err.ref.ref.ref.i32.i32($p0, .str.42, .str.49, $i22, $i2);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gdm_wimax_transmit_aggr_pkt: ref;

axiom gdm_wimax_transmit_aggr_pkt == $sub.ref(0, 311386);

procedure gdm_wimax_transmit_aggr_pkt($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation gdm_wimax_transmit_aggr_pkt($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i16;
  var $i19: i16;
  var $i20: i32;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i16;
  var $i26: i16;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i1;
  var $p4: ref;
  var $i5: i32;
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} {:cexpr "gdm_wimax_transmit_aggr_pkt:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p4, $i5 := $p1, $i2;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $p14, $p22, $i23, $i24, $i25, $i26, $i27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $p4, $i5 := gdm_wimax_transmit_aggr_pkt_loop_$bb4($p0, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $p14, $p22, $i23, $i24, $i25, $i26, $i27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $p4, $i5);
    goto $bb4_last;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i11 := __fswab16($i10);
    call {:si_unique_call 886} {:cexpr "tmp___0"} boogie_si_record_i16($i11);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 33283);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p14 := $p4;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $i26 := __fswab16($i25);
    call {:si_unique_call 891} {:cexpr "tmp___1"} boogie_si_record_i16($i26);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    call {:si_unique_call 892} {:cexpr "length"} boogie_si_record_i32($i27);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} gdm_wimax_netif_rx($p0, $p29, $i27);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i27, 3);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i27;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 8);
    call {:si_unique_call 895} {:cexpr "length"} boogie_si_record_i32($i36);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i5, $i36);
    call {:si_unique_call 896} {:cexpr "len"} boogie_si_record_i32($i37);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i36);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p4, $mul.ref($i38, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i40 := $sgt.i32($i37, 0);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $p4, $i5 := $p39, $i37;
    goto $bb13_dummy;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i27, 3);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(4, $i32);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, $i27);
    call {:si_unique_call 894} {:cexpr "length"} boogie_si_record_i32($i34);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb12;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i19 := __fswab16($i18);
    call {:si_unique_call 888} {:cexpr "tmp"} boogie_si_record_i16($i19);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} vslice_dummy_var_145 := netdev_err.ref.ref.i32($p0, .str.50, $i20);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4438;
}



const gdm_wimax_netif_rx: ref;

axiom gdm_wimax_netif_rx == $sub.ref(0, 312418);

procedure gdm_wimax_netif_rx($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation gdm_wimax_netif_rx($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p15: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i36: i32;
  var $i35: i32;
  var $i37: i1;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} {:cexpr "gdm_wimax_netif_rx:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $p3 := netdev_priv($p0);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i2, 2);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $p6 := dev_alloc_skb($i5);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} skb_reserve($p6, 2);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2208)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 1);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2208)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i13);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2208)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i2);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i18, $i19);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2208)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i20);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i2);
    call {:si_unique_call 902} {:cexpr "__len"} boogie_si_record_i64($i23);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p24 := skb_put($p6, $i2);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.0;
    cmdloc_dummy_var_60 := $M.0;
    call {:si_unique_call 904} cmdloc_dummy_var_61 := $memcpy.i8(cmdloc_dummy_var_59, cmdloc_dummy_var_60, $p24, $p1, $i23, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_61;
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p0);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $i26 := eth_type_trans($p6, $p0);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(126, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i26);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p28 := current_thread_info();
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 134217472);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i36 := netif_rx_ni($p6);
    call {:si_unique_call 910} {:cexpr "tmp___4"} boogie_si_record_i32($i36);
    assume {:verifier.code 0} true;
    $i35 := $i36;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i35, 1);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_147 := netdev_err.ref.ref.ref($p0, .str.53, .str.52);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i34 := netif_rx($p6);
    call {:si_unique_call 908} {:cexpr "tmp___3"} boogie_si_record_i32($i34);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} vslice_dummy_var_146 := netdev_err.ref.ref.ref($p0, .str.51, .str.52);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gdm_recv_qos_hci_packet: ref;

axiom gdm_recv_qos_hci_packet == $sub.ref(0, 313450);

procedure gdm_recv_qos_hci_packet($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.28, $M.16, $M.18, $M.15, $M.19, $M.42, $M.43, $M.23, $M.22, $M.21, $M.30, $M.31, $M.32, assertsPassed;



implementation gdm_recv_qos_hci_packet($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $i62: i8;
  var $i63: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i19: i32;
  var $p71: ref;
  var $i72: i32;
  var $i73: i64;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i64;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i64;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i64;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i24;
  var $i114: i24;
  var $i115: i24;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i64;
  var $i120: i64;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i64;
  var $p132: ref;
  var $i133: i32;
  var $i134: i64;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i32;
  var $i139: i16;
  var $i140: i64;
  var $p143: ref;
  var $i144: i32;
  var $i145: i64;
  var $p148: ref;
  var $i149: i16;
  var $i150: i32;
  var $i151: i64;
  var $p152: ref;
  var $i153: i8;
  var $i154: i16;
  var $i155: i32;
  var $i156: i32;
  var $i157: i16;
  var $i158: i64;
  var $p161: ref;
  var $i162: i64;
  var $p165: ref;
  var $i166: i16;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i170: i32;
  var $i171: i64;
  var $p172: ref;
  var $i173: i8;
  var $i174: i64;
  var $p177: ref;
  var $i178: i32;
  var $i179: i64;
  var $p180: ref;
  var $i181: i8;
  var $i182: i64;
  var $p185: ref;
  var $i186: i32;
  var $i187: i64;
  var $p188: ref;
  var $i189: i8;
  var $i190: i64;
  var $p193: ref;
  var $i194: i32;
  var $i195: i64;
  var $p196: ref;
  var $i197: i8;
  var $i198: i64;
  var $p201: ref;
  var $i202: i32;
  var $i203: i64;
  var $p204: ref;
  var $i205: i8;
  var $i206: i64;
  var $p210: ref;
  var $i211: i32;
  var $i212: i64;
  var $p213: ref;
  var $i214: i8;
  var $i215: i64;
  var $p219: ref;
  var $i220: i32;
  var $i221: i64;
  var $p222: ref;
  var $i223: i8;
  var $i224: i64;
  var $p228: ref;
  var $i229: i32;
  var $i230: i64;
  var $p231: ref;
  var $i232: i8;
  var $i233: i64;
  var $p237: ref;
  var $i238: i32;
  var $i239: i64;
  var $p240: ref;
  var $i241: i8;
  var $i242: i64;
  var $p246: ref;
  var $i247: i32;
  var $i248: i64;
  var $p249: ref;
  var $i250: i8;
  var $i251: i64;
  var $p255: ref;
  var $i256: i32;
  var $i257: i64;
  var $p258: ref;
  var $i259: i8;
  var $i260: i64;
  var $p264: ref;
  var $i265: i32;
  var $i266: i64;
  var $p267: ref;
  var $i268: i8;
  var $i269: i64;
  var $p273: ref;
  var $i274: i32;
  var $i275: i64;
  var $p276: ref;
  var $i277: i8;
  var $i278: i64;
  var $p282: ref;
  var $i283: i32;
  var $i284: i64;
  var $p285: ref;
  var $i286: i8;
  var $i287: i64;
  var $p291: ref;
  var $i292: i32;
  var $i293: i64;
  var $p294: ref;
  var $i295: i8;
  var $i296: i64;
  var $p300: ref;
  var $i301: i32;
  var $i302: i64;
  var $p303: ref;
  var $i304: i8;
  var $i305: i64;
  var $p309: ref;
  var $i310: i32;
  var $i311: i64;
  var $p312: ref;
  var $i313: i8;
  var $i314: i64;
  var $p318: ref;
  var $i319: i32;
  var $i320: i64;
  var $p321: ref;
  var $i322: i8;
  var $i323: i64;
  var $p327: ref;
  var $i328: i32;
  var $i329: i64;
  var $p330: ref;
  var $i331: i8;
  var $i332: i64;
  var $p336: ref;
  var $i337: i32;
  var $i338: i64;
  var $p339: ref;
  var $i340: i8;
  var $i341: i64;
  var $p345: ref;
  var $i346: i32;
  var $i347: i64;
  var $p348: ref;
  var $i349: i8;
  var $i350: i32;
  var $i351: i32;
  var $i352: i16;
  var $i353: i64;
  var $p356: ref;
  var $i357: i32;
  var $i358: i64;
  var $p361: ref;
  var $i362: i16;
  var $i363: i32;
  var $i364: i64;
  var $p365: ref;
  var $i366: i8;
  var $i367: i16;
  var $i368: i32;
  var $i369: i32;
  var $i370: i16;
  var $i371: i64;
  var $p374: ref;
  var $i375: i32;
  var $i376: i64;
  var $p377: ref;
  var $i378: i8;
  var $i379: i32;
  var $i380: i32;
  var $i381: i16;
  var $i382: i64;
  var $p385: ref;
  var $i386: i32;
  var $i387: i64;
  var $p390: ref;
  var $i391: i16;
  var $i392: i32;
  var $i393: i64;
  var $p394: ref;
  var $i395: i8;
  var $i396: i16;
  var $i397: i32;
  var $i398: i32;
  var $i399: i16;
  var $i400: i64;
  var $p403: ref;
  var $i404: i32;
  var $i405: i64;
  var $p406: ref;
  var $i407: i8;
  var $i408: i32;
  var $i409: i32;
  var $i410: i16;
  var $i411: i64;
  var $p414: ref;
  var $i415: i32;
  var $i416: i64;
  var $p419: ref;
  var $i420: i16;
  var $i421: i32;
  var $i422: i64;
  var $p423: ref;
  var $i424: i8;
  var $i425: i16;
  var $i426: i32;
  var $i427: i32;
  var $i428: i16;
  var $i429: i64;
  var $p432: ref;
  var $i433: i32;
  var $i434: i64;
  var $p435: ref;
  var $i436: i8;
  var $i437: i32;
  var $i438: i32;
  var $i439: i16;
  var $i440: i64;
  var $p443: ref;
  var $i444: i64;
  var $p447: ref;
  var $i448: i16;
  var $i449: i32;
  var $i450: i64;
  var $p451: ref;
  var $i452: i8;
  var $i453: i16;
  var $i454: i32;
  var $i455: i32;
  var $i456: i16;
  var $i457: i64;
  var $p460: ref;
  var $p461: ref;
  var $i462: i32;
  var $i463: i32;
  var $p464: ref;
  var $p465: ref;
  var $i466: i32;
  var $i467: i1;
  var $p468: ref;
  var $p469: ref;
  var $p470: ref;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $i474: i24;
  var $i475: i24;
  var $i476: i24;
  var $p477: ref;
  var $p478: ref;
  var $i479: i8;
  var $i480: i64;
  var $i481: i64;
  var $i482: i64;
  var $i483: i1;
  var $p484: ref;
  var $p485: ref;
  var $p487: ref;
  var $p488: ref;
  var $i489: i64;
  var $i490: i64;
  var $p493: ref;
  var $p494: ref;
  var $i495: i32;
  var $i496: i32;
  var $p497: ref;
  var $p498: ref;
  var $i499: i32;
  var $i500: i32;
  var $p501: ref;
  var $p502: ref;
  var $p503: ref;
  var $i504: i64;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $p510: ref;
  var $p511: ref;
  var $p513: ref;
  var $i514: i64;
  var $p515: ref;
  var $p516: ref;
  var $i517: i64;
  var $p518: ref;
  var $i519: i64;
  var $i520: i1;
  var $p523: ref;
  var $p525: ref;
  var $p526: ref;
  var $p528: ref;
  var $i529: i64;
  var $i530: i1;
  var $p521: ref;
  var $p522: ref;
  var $p531: ref;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 916} {:cexpr "gdm_recv_qos_hci_packet:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    call {:si_unique_call 917} {:cexpr "subCmdEvt"} boogie_si_record_i8($i10);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 254);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i72 := $add.i32(6, 1);
    call {:si_unique_call 933} {:cexpr "pos"} boogie_si_record_i32($i72);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64(6);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p1, $mul.ref($i73, 1));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i77 := $shl.i32($i76, 24);
    call {:si_unique_call 934} {:cexpr "SFID"} boogie_si_record_i32($i77);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i72, 1);
    call {:si_unique_call 935} {:cexpr "pos"} boogie_si_record_i32($i78);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i72);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p1, $mul.ref($i79, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i83 := $shl.i32($i82, 16);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 16711680);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, $i77);
    call {:si_unique_call 936} {:cexpr "SFID"} boogie_si_record_i32($i85);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i78, 1);
    call {:si_unique_call 937} {:cexpr "pos"} boogie_si_record_i32($i86);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i78);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p1, $mul.ref($i87, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i91 := $shl.i32($i90, 8);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, 65535);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i92, $i85);
    call {:si_unique_call 938} {:cexpr "SFID"} boogie_si_record_i32($i93);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i86, 1);
    call {:si_unique_call 939} {:cexpr "pos"} boogie_si_record_i32($i94);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i95 := $zext.i32.i64($i86);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p1, $mul.ref($i95, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, $i93);
    call {:si_unique_call 940} {:cexpr "SFID"} boogie_si_record_i32($i99);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $i100 := get_csr($p8, $i99, 1);
    call {:si_unique_call 942} {:cexpr "index"} boogie_si_record_i32($i100);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, $sub.i32(0, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i10);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 253);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i106 == 1);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i466 := $zext.i8.i32($i10);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i467 := $eq.i32($i466, 252);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i467} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i467 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i467 == 1;
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p468, .str.9);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p469, .str.15);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p470, .str.11);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p471, .str.17);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p473 := $bitcast.ref.ref($p472);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i474 := $load.i24($M.12, $p473);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i475 := $and.i24($i474, $sub.i24(0, 262144));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i476 := $or.i24($i475, 468);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p473, $i476);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p477, 0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i479 := $load.i8($M.13, $p478);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i480 := $zext.i8.i64($i479);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i481 := $and.i64($i480, 1);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i482 := ldv__builtin_expect($i481, 0);
    call {:si_unique_call 981} {:cexpr "tmp___36"} boogie_si_record_i64($i482);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i483 := $ne.i64($i482, 0);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i483} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} INIT_LIST_HEAD($p4);
    $p487 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $p488 := spinlock_check($p487);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i489 := _raw_spin_lock_irqsave($p488);
    call {:si_unique_call 986} {:cexpr "flags"} boogie_si_record_i64($i489);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i490 := $zext.i32.i64($i100);
    $p493 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i490, 88)), $mul.ref(0, 1));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p493, 0);
    $p494 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(256, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i495 := $load.i32($M.0, $p494);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i496 := $sub.i32($i495, 1);
    $p497 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(256, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p497, $i496);
    $p498 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(256, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i499 := $load.i32($M.0, $p498);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i500 := $udiv.i32(254, $i499);
    $p501 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1744, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p501, $i500);
    $p502 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p503 := $bitcast.ref.ref($p502);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i504 := $zext.i32.i64($i100);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p503, $mul.ref($i504, 16)), $mul.ref(0, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p507 := $load.ref($M.0, $p506);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p508 := $bitcast.ref.ref($p507);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($add.ref($p508, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p511 := $load.ref($M.0, $p510);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p508, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i514 := $p2i.ref.i64($p513);
    $p515 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p516 := $bitcast.ref.ref($p515);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i517 := $zext.i32.i64($i100);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($p516, $mul.ref($i517, 16));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i519 := $p2i.ref.i64($p518);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i520 := $ne.i64($i514, $i519);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i520} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i520 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    $p531 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} spin_unlock_irqrestore($p531, $i489);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} free_qos_entry_list($p4);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb33:
    assume $i520 == 1;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p521, $p522 := $p511, $p507;
    goto $bb36;

  $bb36:
    call $p523, $p525, $p526, $p528, $i529, $i530, $p521, $p522 := gdm_recv_qos_hci_packet_loop_$bb36($p4, $i519, $p523, $p525, $p526, $p528, $i529, $i530, $p521, $p522);
    goto $bb36_last;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p522, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} list_move_tail($p523, $p4);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($add.ref($p521, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p526 := $load.ref($M.0, $p525);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($p521, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i529 := $p2i.ref.i64($p528);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i530 := $ne.i64($i529, $i519);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i530 == 1);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume $i530 == 1;
    assume {:verifier.code 0} true;
    $p521, $p522 := $p526, $p521;
    goto $bb38_dummy;

  $bb30:
    assume $i483 == 1;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p485 := $load.ref($M.0, $p484);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} vslice_dummy_var_152 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p6, $p485, .str.17, $i99, $i100);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb19:
    assume $i106 == 1;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p107, .str.9);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p108, .str.15);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p109, .str.11);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p110, .str.16);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i113 := $load.i24($M.12, $p112);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i114 := $and.i24($i113, $sub.i24(0, 262144));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i115 := $or.i24($i114, 427);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p112, $i115);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p116, 0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.13, $p117);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i64($i118);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i120 := $and.i64($i119, 1);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $i121 := ldv__builtin_expect($i120, 0);
    call {:si_unique_call 945} {:cexpr "tmp___4"} boogie_si_record_i64($i121);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $p126 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $p127 := spinlock_check($p126);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $i128 := _raw_spin_lock_irqsave($p127);
    call {:si_unique_call 949} {:cexpr "flags"} boogie_si_record_i64($i128);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i129 := $zext.i32.i64($i100);
    $p132 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i129, 88)), $mul.ref(4, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, $i99);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i94, 1);
    call {:si_unique_call 950} {:cexpr "pos"} boogie_si_record_i32($i133);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i134 := $zext.i32.i64($i94);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p1, $mul.ref($i134, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i138 := $shl.i32($i137, 8);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i140 := $zext.i32.i64($i100);
    $p143 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i140, 88)), $mul.ref(10, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p143, $i139);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i133, 1);
    call {:si_unique_call 951} {:cexpr "pos"} boogie_si_record_i32($i144);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i145 := $zext.i32.i64($i100);
    $p148 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i145, 88)), $mul.ref(10, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i149 := $load.i16($M.0, $p148);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i149);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i151 := $zext.i32.i64($i133);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($p1, $mul.ref($i151, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.0, $p152);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i16($i153);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i155 := $zext.i16.i32($i154);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i156 := $add.i32($i150, $i155);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i32.i16($i156);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i158 := $zext.i32.i64($i100);
    $p161 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i158, 88)), $mul.ref(10, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p161, $i157);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i162 := $zext.i32.i64($i100);
    $p165 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i162, 88)), $mul.ref(10, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i166 := $load.i16($M.0, $p165);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i167 := $zext.i16.i32($i166);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 0);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i170 := $add.i32($i144, 1);
    call {:si_unique_call 952} {:cexpr "pos"} boogie_si_record_i32($i170);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i171 := $zext.i32.i64($i144);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p1, $mul.ref($i171, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.0, $p172);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i174 := $zext.i32.i64($i100);
    $p177 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i174, 88)), $mul.ref(14, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p177, $i173);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i178 := $add.i32($i170, 1);
    call {:si_unique_call 953} {:cexpr "pos"} boogie_si_record_i32($i178);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i179 := $zext.i32.i64($i170);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($p1, $mul.ref($i179, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.0, $p180);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i182 := $zext.i32.i64($i100);
    $p185 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i182, 88)), $mul.ref(12, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p185, $i181);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i186 := $add.i32($i178, 1);
    call {:si_unique_call 954} {:cexpr "pos"} boogie_si_record_i32($i186);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i187 := $zext.i32.i64($i178);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($p1, $mul.ref($i187, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.0, $p188);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i190 := $zext.i32.i64($i100);
    $p193 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i190, 88)), $mul.ref(13, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p193, $i189);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i194 := $add.i32($i186, 1);
    call {:si_unique_call 955} {:cexpr "pos"} boogie_si_record_i32($i194);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i195 := $zext.i32.i64($i186);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($p1, $mul.ref($i195, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.0, $p196);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i198 := $zext.i32.i64($i100);
    $p201 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i198, 88)), $mul.ref(15, 1));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p201, $i197);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i202 := $add.i32($i194, 1);
    call {:si_unique_call 956} {:cexpr "pos"} boogie_si_record_i32($i202);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i203 := $zext.i32.i64($i194);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($p1, $mul.ref($i203, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.0, $p204);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i206 := $zext.i32.i64($i100);
    $p210 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i206, 88)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p210, $i205);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i211 := $add.i32($i202, 1);
    call {:si_unique_call 957} {:cexpr "pos"} boogie_si_record_i32($i211);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i212 := $zext.i32.i64($i202);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($p1, $mul.ref($i212, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i215 := $zext.i32.i64($i100);
    $p219 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i215, 88)), $mul.ref(32, 1)), $mul.ref(1, 1));
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p219, $i214);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i220 := $add.i32($i211, 1);
    call {:si_unique_call 958} {:cexpr "pos"} boogie_si_record_i32($i220);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i221 := $zext.i32.i64($i211);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($p1, $mul.ref($i221, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i223 := $load.i8($M.0, $p222);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i224 := $zext.i32.i64($i100);
    $p228 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i224, 88)), $mul.ref(32, 1)), $mul.ref(2, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p228, $i223);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i229 := $add.i32($i220, 1);
    call {:si_unique_call 959} {:cexpr "pos"} boogie_si_record_i32($i229);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i230 := $zext.i32.i64($i220);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($p1, $mul.ref($i230, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i232 := $load.i8($M.0, $p231);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i233 := $zext.i32.i64($i100);
    $p237 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i233, 88)), $mul.ref(32, 1)), $mul.ref(3, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p237, $i232);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i238 := $add.i32($i229, 1);
    call {:si_unique_call 960} {:cexpr "pos"} boogie_si_record_i32($i238);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i239 := $zext.i32.i64($i229);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($p1, $mul.ref($i239, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i241 := $load.i8($M.0, $p240);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i242 := $zext.i32.i64($i100);
    $p246 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i242, 88)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p246, $i241);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i247 := $add.i32($i238, 1);
    call {:si_unique_call 961} {:cexpr "pos"} boogie_si_record_i32($i247);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i248 := $zext.i32.i64($i238);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($p1, $mul.ref($i248, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i250 := $load.i8($M.0, $p249);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i251 := $zext.i32.i64($i100);
    $p255 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i251, 88)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p255, $i250);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i256 := $add.i32($i247, 1);
    call {:si_unique_call 962} {:cexpr "pos"} boogie_si_record_i32($i256);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i257 := $zext.i32.i64($i247);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($p1, $mul.ref($i257, 1));
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.0, $p258);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i260 := $zext.i32.i64($i100);
    $p264 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i260, 88)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p264, $i259);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i265 := $add.i32($i256, 1);
    call {:si_unique_call 963} {:cexpr "pos"} boogie_si_record_i32($i265);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i266 := $zext.i32.i64($i256);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($p1, $mul.ref($i266, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i268 := $load.i8($M.0, $p267);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i269 := $zext.i32.i64($i100);
    $p273 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i269, 88)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p273, $i268);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i274 := $add.i32($i265, 1);
    call {:si_unique_call 964} {:cexpr "pos"} boogie_si_record_i32($i274);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i275 := $zext.i32.i64($i265);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($p1, $mul.ref($i275, 1));
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i277 := $load.i8($M.0, $p276);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i278 := $zext.i32.i64($i100);
    $p282 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i278, 88)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p282, $i277);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i283 := $add.i32($i274, 1);
    call {:si_unique_call 965} {:cexpr "pos"} boogie_si_record_i32($i283);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i284 := $zext.i32.i64($i274);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($p1, $mul.ref($i284, 1));
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i286 := $load.i8($M.0, $p285);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i287 := $zext.i32.i64($i100);
    $p291 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i287, 88)), $mul.ref(64, 1)), $mul.ref(1, 1));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p291, $i286);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i292 := $add.i32($i283, 1);
    call {:si_unique_call 966} {:cexpr "pos"} boogie_si_record_i32($i292);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i293 := $zext.i32.i64($i283);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($p1, $mul.ref($i293, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i295 := $load.i8($M.0, $p294);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i296 := $zext.i32.i64($i100);
    $p300 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i296, 88)), $mul.ref(64, 1)), $mul.ref(2, 1));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p300, $i295);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i301 := $add.i32($i292, 1);
    call {:si_unique_call 967} {:cexpr "pos"} boogie_si_record_i32($i301);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i302 := $zext.i32.i64($i292);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($p1, $mul.ref($i302, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i304 := $load.i8($M.0, $p303);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i305 := $zext.i32.i64($i100);
    $p309 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i305, 88)), $mul.ref(64, 1)), $mul.ref(3, 1));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p309, $i304);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i310 := $add.i32($i301, 1);
    call {:si_unique_call 968} {:cexpr "pos"} boogie_si_record_i32($i310);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i311 := $zext.i32.i64($i301);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($p1, $mul.ref($i311, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i313 := $load.i8($M.0, $p312);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i314 := $zext.i32.i64($i100);
    $p318 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i314, 88)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p318, $i313);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i319 := $add.i32($i310, 1);
    call {:si_unique_call 969} {:cexpr "pos"} boogie_si_record_i32($i319);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i320 := $zext.i32.i64($i310);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($p1, $mul.ref($i320, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i322 := $load.i8($M.0, $p321);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i323 := $zext.i32.i64($i100);
    $p327 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i323, 88)), $mul.ref(48, 1)), $mul.ref(1, 1));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p327, $i322);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i328 := $add.i32($i319, 1);
    call {:si_unique_call 970} {:cexpr "pos"} boogie_si_record_i32($i328);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i329 := $zext.i32.i64($i319);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($p1, $mul.ref($i329, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i331 := $load.i8($M.0, $p330);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i332 := $zext.i32.i64($i100);
    $p336 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i332, 88)), $mul.ref(48, 1)), $mul.ref(2, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p336, $i331);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i337 := $add.i32($i328, 1);
    call {:si_unique_call 971} {:cexpr "pos"} boogie_si_record_i32($i337);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i338 := $zext.i32.i64($i328);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($p1, $mul.ref($i338, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i340 := $load.i8($M.0, $p339);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i341 := $zext.i32.i64($i100);
    $p345 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i341, 88)), $mul.ref(48, 1)), $mul.ref(3, 1));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p345, $i340);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i346 := $add.i32($i337, 1);
    call {:si_unique_call 972} {:cexpr "pos"} boogie_si_record_i32($i346);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i347 := $zext.i32.i64($i337);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($p1, $mul.ref($i347, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i349 := $load.i8($M.0, $p348);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i350 := $zext.i8.i32($i349);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i351 := $shl.i32($i350, 8);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i352 := $trunc.i32.i16($i351);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i353 := $zext.i32.i64($i100);
    $p356 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i353, 88)), $mul.ref(80, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p356, $i352);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i357 := $add.i32($i346, 1);
    call {:si_unique_call 973} {:cexpr "pos"} boogie_si_record_i32($i357);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i358 := $zext.i32.i64($i100);
    $p361 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i358, 88)), $mul.ref(80, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i362 := $load.i16($M.0, $p361);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i363 := $zext.i16.i32($i362);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i364 := $zext.i32.i64($i346);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($p1, $mul.ref($i364, 1));
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i366 := $load.i8($M.0, $p365);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i367 := $zext.i8.i16($i366);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i368 := $zext.i16.i32($i367);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i369 := $add.i32($i363, $i368);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i370 := $trunc.i32.i16($i369);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i371 := $zext.i32.i64($i100);
    $p374 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i371, 88)), $mul.ref(80, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p374, $i370);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i375 := $add.i32($i357, 1);
    call {:si_unique_call 974} {:cexpr "pos"} boogie_si_record_i32($i375);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i376 := $zext.i32.i64($i357);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($p1, $mul.ref($i376, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i378 := $load.i8($M.0, $p377);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i379 := $zext.i8.i32($i378);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i380 := $shl.i32($i379, 8);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i381 := $trunc.i32.i16($i380);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i382 := $zext.i32.i64($i100);
    $p385 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i382, 88)), $mul.ref(82, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p385, $i381);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i386 := $add.i32($i375, 1);
    call {:si_unique_call 975} {:cexpr "pos"} boogie_si_record_i32($i386);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i387 := $zext.i32.i64($i100);
    $p390 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i387, 88)), $mul.ref(82, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i391 := $load.i16($M.0, $p390);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i392 := $zext.i16.i32($i391);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i393 := $zext.i32.i64($i375);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($p1, $mul.ref($i393, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i395 := $load.i8($M.0, $p394);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i396 := $zext.i8.i16($i395);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i397 := $zext.i16.i32($i396);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i398 := $add.i32($i392, $i397);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i399 := $trunc.i32.i16($i398);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i400 := $zext.i32.i64($i100);
    $p403 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i400, 88)), $mul.ref(82, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p403, $i399);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i404 := $add.i32($i386, 1);
    call {:si_unique_call 976} {:cexpr "pos"} boogie_si_record_i32($i404);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i405 := $zext.i32.i64($i386);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($p1, $mul.ref($i405, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i407 := $load.i8($M.0, $p406);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i408 := $zext.i8.i32($i407);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i409 := $shl.i32($i408, 8);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i410 := $trunc.i32.i16($i409);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i411 := $zext.i32.i64($i100);
    $p414 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i411, 88)), $mul.ref(84, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p414, $i410);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i415 := $add.i32($i404, 1);
    call {:si_unique_call 977} {:cexpr "pos"} boogie_si_record_i32($i415);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i416 := $zext.i32.i64($i100);
    $p419 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i416, 88)), $mul.ref(84, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i420 := $load.i16($M.0, $p419);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i421 := $zext.i16.i32($i420);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i422 := $zext.i32.i64($i404);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($p1, $mul.ref($i422, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i424 := $load.i8($M.0, $p423);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i425 := $zext.i8.i16($i424);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i426 := $zext.i16.i32($i425);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i427 := $add.i32($i421, $i426);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i428 := $trunc.i32.i16($i427);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i429 := $zext.i32.i64($i100);
    $p432 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i429, 88)), $mul.ref(84, 1));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p432, $i428);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i433 := $add.i32($i415, 1);
    call {:si_unique_call 978} {:cexpr "pos"} boogie_si_record_i32($i433);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i434 := $zext.i32.i64($i415);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($p1, $mul.ref($i434, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i436 := $load.i8($M.0, $p435);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i437 := $zext.i8.i32($i436);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i438 := $shl.i32($i437, 8);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i439 := $trunc.i32.i16($i438);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i440 := $zext.i32.i64($i100);
    $p443 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i440, 88)), $mul.ref(86, 1));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p443, $i439);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i444 := $zext.i32.i64($i100);
    $p447 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i444, 88)), $mul.ref(86, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i448 := $load.i16($M.0, $p447);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i449 := $zext.i16.i32($i448);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i450 := $zext.i32.i64($i433);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($p1, $mul.ref($i450, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i452 := $load.i8($M.0, $p451);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i453 := $zext.i8.i16($i452);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i454 := $zext.i16.i32($i453);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i455 := $add.i32($i449, $i454);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i456 := $trunc.i32.i16($i455);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i457 := $zext.i32.i64($i100);
    $p460 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i457, 88)), $mul.ref(86, 1));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p460, $i456);
    $p461 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(256, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i462 := $load.i32($M.0, $p461);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i463 := $udiv.i32(254, $i462);
    $p464 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1744, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p464, $i463);
    $p465 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} spin_unlock_irqrestore($p465, $i128);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i168 == 1;
    $p169 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(260, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p169, $i100);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i122 == 1;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_151 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p5, $p124, .str.16, $i99, $i100);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i101 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} vslice_dummy_var_150 := netdev_err.ref.ref.i32($p103, .str.14, $i100);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i12 == 1;
    $p13 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $p14 := spinlock_check($p13);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i15 := _raw_spin_lock_irqsave($p14);
    call {:si_unique_call 920} {:cexpr "flags"} boogie_si_record_i64($i15);
    $p16 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(256, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, 0);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} vslice_dummy_var_149 := extract_qos_list($p7, $p3);
    $p71 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} spin_unlock_irqrestore($p71, $i15);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} send_qos_list($p7, $p3);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb6:
    call $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i58, $i59, $i60, $p61, $i62, $i63, $p66, $i67, $i68, $i69, $i19 := gdm_recv_qos_hci_packet_loop_$bb6($p1, $p7, $p8, $p16, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i58, $i59, $i60, $p61, $i62, $i63, $p66, $i67, $i68, $i69, $i19);
    goto $bb6_last;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32($i19, 5);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 6);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p1, $mul.ref($i22, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 24);
    call {:si_unique_call 921} {:cexpr "SFID"} boogie_si_record_i32($i26);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i27 := $mul.i32($i19, 5);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 7);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p1, $mul.ref($i29, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32($i32, 16);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 16711680);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, $i26);
    call {:si_unique_call 922} {:cexpr "SFID"} boogie_si_record_i32($i35);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i19, 5);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 8);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p1, $mul.ref($i38, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i42 := $shl.i32($i41, 8);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 65535);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, $i35);
    call {:si_unique_call 923} {:cexpr "SFID"} boogie_si_record_i32($i44);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i45 := $mul.i32($i19, 5);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 9);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p1, $mul.ref($i47, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, $i44);
    call {:si_unique_call 924} {:cexpr "SFID"} boogie_si_record_i32($i51);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i52 := get_csr($p8, $i51, 0);
    call {:si_unique_call 926} {:cexpr "index"} boogie_si_record_i32($i52);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, $sub.i32(0, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i58 := $mul.i32($i19, 5);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 10);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p1, $mul.ref($i60, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i52);
    $p66 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref($i63, 88)), $mul.ref(8, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i62);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i19, 1);
    call {:si_unique_call 929} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p16);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i69 := $ugt.i32($i68, $i67);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i69 == 1);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i67;
    goto $bb12_dummy;

  $bb8:
    assume $i53 == 1;
    $p54 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1672, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} spin_unlock_irqrestore($p54, $i15);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p7, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} vslice_dummy_var_148 := netdev_err.ref.ref($p56, .str.13);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb38_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4987;

  $bb12_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4549;
}



const get_csr: ref;

axiom get_csr == $sub.ref(0, 314482);

procedure get_csr($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation get_csr($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i6: i32;
  var $i18: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i14: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i1;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i1;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i1;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} {:cexpr "get_csr:arg:SFID"} boogie_si_record_i32($i1);
    call {:si_unique_call 991} {:cexpr "get_csr:arg:mode"} boogie_si_record_i32($i2);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(256, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32(0, $i4);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i25 := 0;
    assume {:branchcond $i24} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(1, 88)), $mul.ref(0, 1));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i25 := 1;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(2, 88)), $mul.ref(0, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i25 := 2;
    assume {:branchcond $i45} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(3, 88)), $mul.ref(0, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i25 := 3;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(4, 88)), $mul.ref(0, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i25 := 4;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(5, 88)), $mul.ref(0, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i25 := 5;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(6, 88)), $mul.ref(0, 1));
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i25 := 6;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(7, 88)), $mul.ref(0, 1));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i25 := 7;
    assume {:branchcond $i75} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(8, 88)), $mul.ref(0, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i25 := 8;
    assume {:branchcond $i81} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(9, 88)), $mul.ref(0, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 0);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i25 := 9;
    assume {:branchcond $i87} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(10, 88)), $mul.ref(0, 1));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i25 := 10;
    assume {:branchcond $i93} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(11, 88)), $mul.ref(0, 1));
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 0);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i25 := 11;
    assume {:branchcond $i99} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(12, 88)), $mul.ref(0, 1));
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i25 := 12;
    assume {:branchcond $i105} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(13, 88)), $mul.ref(0, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 0);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i25 := 13;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(14, 88)), $mul.ref(0, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 0);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i25 := 14;
    assume {:branchcond $i117} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(15, 88)), $mul.ref(0, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.0, $p120);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 0);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i25 := 15;
    assume {:branchcond $i123} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref($i26, 88)), $mul.ref(0, 1));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 1);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(256, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(256, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i14 := $i25;
    goto $bb8;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb18;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb18;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb18;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb18;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb18;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb18;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb18;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb18;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb18;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb18;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb18;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb18;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb18;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb18;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $i7, $p10, $i11, $i12, $i13, $i15, $i16, $i17, $i6 := get_csr_loop_$bb4($p0, $i1, $p3, $i7, $p10, $i11, $i12, $i13, $i15, $i16, $i17, $i6);
    goto $bb4_last;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref($i7, 88)), $mul.ref(4, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, $i1);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i13 := $i6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i6, 1);
    call {:si_unique_call 992} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p3);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32($i15, $i16);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb10_dummy;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5011;
}



const dev_alloc_skb: ref;

axiom dev_alloc_skb == $sub.ref(0, 315514);

procedure dev_alloc_skb($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation dev_alloc_skb($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} {:cexpr "dev_alloc_skb:arg:length"} boogie_si_record_i32($i0);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $p1 := netdev_alloc_skb($0.ref, $i0);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 316546);

procedure skb_reserve($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} {:cexpr "skb_reserve:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i1);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 317578);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p2 := external_alloc();
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 318610);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;



implementation eth_type_trans($p0: ref, $p1: ref) returns ($r: i16)
{
  var $i2: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 1} true;
    call {:si_unique_call 998} $i2 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 999} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i2);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 319642);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i0 := devirtbounce.9(0, kernel_stack);
    call {:si_unique_call 1001} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 8152);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const netif_rx: ref;

axiom netif_rx == $sub.ref(0, 320674);

procedure netif_rx($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netif_rx($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1002} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1003} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netif_rx_ni: ref;

axiom netif_rx_ni == $sub.ref(0, 321706);

procedure netif_rx_ni($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netif_rx_ni($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1004} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1005} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 322738);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} {:cexpr "netdev_alloc_skb:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $p2 := __netdev_alloc_skb($p0, $i1, 32);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __netdev_alloc_skb: ref;

axiom __netdev_alloc_skb == $sub.ref(0, 323770);

procedure __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} {:cexpr "__netdev_alloc_skb:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1009} {:cexpr "__netdev_alloc_skb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $p3 := external_alloc();
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const gdm_wimax_hci_get_tlv: ref;

axiom gdm_wimax_hci_get_tlv == $sub.ref(0, 324802);

procedure gdm_wimax_hci_get_tlv($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.32;



implementation gdm_wimax_hci_get_tlv($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i8;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i16;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $i23: i16;
  var $p25: ref;
  var $i26: i8;
  var $i27: i16;
  var $i24: i32;
  var $i28: i64;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p0);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, $p1, $i4);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 130);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i16($i26);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.31 := $store.i16($M.31, $p2, $i27);
    assume {:verifier.code 0} true;
    $i24 := 2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i24);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p0, $mul.ref($i28, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p3, $p29);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.31, $p2);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, $i24);
    call {:si_unique_call 1013} {:cexpr "next_pos"} boogie_si_record_i32($i32);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i16($i10);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i12 := $sext.i16.i32($i11);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 8);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i18 := $sext.i16.i32($i17);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i12, $i18);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i23 := __fswab16($i22);
    call {:si_unique_call 1012} {:cexpr "tmp"} boogie_si_record_i16($i23);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $M.31 := $store.i16($M.31, $p2, $i23);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i24 := 4;
    goto $bb3;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 325834);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    return;
}



const init_qos_entry_list: ref;

axiom init_qos_entry_list == $sub.ref(0, 326866);

procedure init_qos_entry_list();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_qos_entry_list()
{
  var $p0: ref;
  var vslice_dummy_var_153: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(16, 1)), 0);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} INIT_LIST_HEAD(qos_free_list);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} vslice_dummy_var_153 := spinlock_check($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} __raw_spin_lock_init($add.ref($add.ref($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.68, $p0);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 327898);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1018} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1019} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_net_device_ops_2: ref;

axiom ldv_net_device_ops_2 == $sub.ref(0, 328930);

procedure ldv_net_device_ops_2();
  free requires assertsPassed;
  modifies $M.33, $M.0, $CurrAddr;



implementation ldv_net_device_ops_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $p0 := ldv_zalloc(3136);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $M.33 := $p0;
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 329962);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1021} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1022} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1023} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1024} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $p4 := calloc(1, $i0);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1026} __VERIFIER_assume($i7);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const gdm_wimax_event_rcv: ref;

axiom gdm_wimax_event_rcv == $sub.ref(0, 330994);

procedure gdm_wimax_event_rcv($p0: ref, $i1: i16, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.16, $M.18, $CurrAddr, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation gdm_wimax_event_rcv($p0: ref, $i1: i16, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} {:cexpr "gdm_wimax_event_rcv:arg:type"} boogie_si_record_i16($i1);
    call {:si_unique_call 1028} {:cexpr "gdm_wimax_event_rcv:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $p4 := netdev_priv($p0);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 2208)), $mul.ref(8, 1));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 1030} vslice_dummy_var_154 := devirtbounce($p9, $p13, $p2, $i3, $0.ref, $0.ref);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const netlink_init: ref;

axiom netlink_init == $sub.ref(0, 332026);

procedure netlink_init($i0: i32, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr;



implementation netlink_init($i0: i32, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1032} {:cexpr "netlink_init:arg:unit"} boogie_si_record_i32($i0);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p3, 0);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p4, 0);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p5, netlink_rcv);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p6, $0.ref);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p7, $0.ref);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $M.39 := $store.ref($M.39, $p8, $0.ref);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p9 := netlink_kernel_create(init_net, $i0, $p2);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $M.40 := $p1;
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __gdm_wimax_event_send: ref;

axiom __gdm_wimax_event_send == $sub.ref(0, 333058);

procedure __gdm_wimax_event_send($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __gdm_wimax_event_send($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i7: i64;
  var $i27: i64;
  var $i6: i64;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $p2 := spinlock_check($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 1037} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $i4 := list_empty($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(16, 1)));
    call {:si_unique_call 1039} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i6 := $i3;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} spin_unlock_irqrestore($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $i6);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i7 := $i3;
    goto $bb4;

  $bb4:
    call $p8, $p9, $p10, $p11, $p12, $p13, $p15, $i16, $p17, $p18, $p19, $i20, $p22, $i23, $p24, $i25, $i26, $i7, $i27, vslice_dummy_var_155, vslice_dummy_var_156 := __gdm_wimax_event_send_loop_$bb4($p1, $p8, $p9, $p10, $p11, $p12, $p13, $p15, $i16, $p17, $p18, $p19, $i20, $p22, $i23, $p24, $i25, $i26, $i7, $i27, vslice_dummy_var_155, vslice_dummy_var_156);
    goto $bb4_last;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(16, 1)), $mul.ref(0, 1)));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} spin_unlock_irqrestore($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $i7);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2080)), $mul.ref(16, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 3048)), $mul.ref(0, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} vslice_dummy_var_155 := sscanf.ref.ref.ref($p13, .str, $p1);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(8, 1)));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.41, $p1);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 2080)), $mul.ref(24, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p9, $mul.ref(0, 2080)), $mul.ref(2072, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} vslice_dummy_var_156 := netlink_send($p15, $i16, 0, $p18, $i20);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $p22 := spinlock_check($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i23 := _raw_spin_lock_irqsave($p22);
    call {:si_unique_call 1045} {:cexpr "flags"} boogie_si_record_i64($i23);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} list_del($p24);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} put_event_entry($p9);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $i25 := list_empty($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(16, 1)));
    call {:si_unique_call 1049} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i27 := $i23;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i6 := $i27;
    goto $bb3;

  $bb6:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i23;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5272;
}



const sscanf: ref;

axiom sscanf == $sub.ref(0, 334090);

procedure sscanf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const netlink_send: ref;

axiom netlink_send == $sub.ref(0, 335122);

procedure netlink_send($p0: ref, $i1: i32, $i2: i16, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation netlink_send($p0: ref, $i1: i32, $i2: i16, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i8: i32;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} {:cexpr "netlink_send:arg:group"} boogie_si_record_i32($i1);
    call {:si_unique_call 1052} {:cexpr "netlink_send:arg:type"} boogie_si_record_i16($i2);
    call {:si_unique_call 1053} {:cexpr "netlink_send:arg:len"} boogie_si_record_i32($i4);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i1, 30);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i4);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $p10 := nlmsg_new($i9, 32);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($u0, 1);
    call {:si_unique_call 1058} {:cexpr "seq"} boogie_si_record_i32($i14);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i2);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $p16 := nlmsg_put($p10, 0, $i14, $i15, $i4, 0);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i4);
    call {:si_unique_call 1061} {:cexpr "__len"} boogie_si_record_i64($i19);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $p20 := nlmsg_data($p16);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    cmdloc_dummy_var_63 := $M.0;
    call {:si_unique_call 1063} cmdloc_dummy_var_64 := $memcpy.i8(cmdloc_dummy_var_62, cmdloc_dummy_var_63, $p20, $p3, $i19, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_64;
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p10, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i1, 1);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i28 := netlink_broadcast($p0, $p10, 0, $i27, 32);
    call {:si_unique_call 1065} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i28, $sub.i32(0, 3));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i2);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} vslice_dummy_var_160 := printk.ref.i32.i32.i32.i32(.str.7, $i1, $i31, $i4, $i28);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i8 := $i4;
    goto $bb3;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} kfree_skb($p10);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 90);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} vslice_dummy_var_159 := printk.ref.i32(.str.6, 0);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} vslice_dummy_var_157 := printk.ref.i32(.str.4, $i1);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} vslice_dummy_var_158 := printk.ref.i32(.str.5, 30);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const put_event_entry: ref;

axiom put_event_entry == $sub.ref(0, 336154);

procedure put_event_entry($p0: ref);
  free requires assertsPassed;



implementation put_event_entry($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1068} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} list_add_tail($p7, $add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(104, 1)));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1069} devirtbounce.4(0, .str.40, 361, 12);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call put_event_entry_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const nlmsg_new: ref;

axiom nlmsg_new == $sub.ref(0, 337186);

procedure nlmsg_new($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation nlmsg_new($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} {:cexpr "nlmsg_new:arg:payload"} boogie_si_record_i64($i0);
    call {:si_unique_call 1072} {:cexpr "nlmsg_new:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i0);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $i3 := nlmsg_total_size($i2);
    call {:si_unique_call 1074} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $p4 := alloc_skb($i3, $i1);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const nlmsg_put: ref;

axiom nlmsg_put == $sub.ref(0, 338218);

procedure nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} {:cexpr "nlmsg_put:arg:portid"} boogie_si_record_i32($i1);
    call {:si_unique_call 1077} {:cexpr "nlmsg_put:arg:seq"} boogie_si_record_i32($i2);
    call {:si_unique_call 1078} {:cexpr "nlmsg_put:arg:type"} boogie_si_record_i32($i3);
    call {:si_unique_call 1079} {:cexpr "nlmsg_put:arg:payload"} boogie_si_record_i32($i4);
    call {:si_unique_call 1080} {:cexpr "nlmsg_put:arg:flags"} boogie_si_record_i32($i5);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i6 := skb_tailroom($p0);
    call {:si_unique_call 1082} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $i7 := nlmsg_total_size($i4);
    call {:si_unique_call 1084} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, $i7);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1086} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $p14 := __nlmsg_put($p0, $i1, $i2, $i3, $i4, $i5);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p13 := $p14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb3;
}



const nlmsg_data: ref;

axiom nlmsg_data == $sub.ref(0, 339250);

procedure nlmsg_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation nlmsg_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(16, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const netlink_broadcast: ref;

axiom netlink_broadcast == $sub.ref(0, 340282);

procedure netlink_broadcast($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netlink_broadcast($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1088} {:cexpr "netlink_broadcast:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1089} {:cexpr "netlink_broadcast:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1090} {:cexpr "netlink_broadcast:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1091} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1092} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const skb_tailroom: ref;

axiom skb_tailroom == $sub.ref(0, 341314);

procedure skb_tailroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_tailroom($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i1 := skb_is_nonlinear($p0);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1094} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i6, $i8);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const nlmsg_total_size: ref;

axiom nlmsg_total_size == $sub.ref(0, 342346);

procedure nlmsg_total_size($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nlmsg_total_size($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} {:cexpr "nlmsg_total_size:arg:payload"} boogie_si_record_i32($i0);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i1 := nlmsg_msg_size($i0);
    call {:si_unique_call 1097} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 3);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 4));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __nlmsg_put: ref;

axiom __nlmsg_put == $sub.ref(0, 343378);

procedure __nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} {:cexpr "__nlmsg_put:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1099} {:cexpr "__nlmsg_put:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1100} {:cexpr "__nlmsg_put:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1101} {:cexpr "__nlmsg_put:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1102} {:cexpr "__nlmsg_put:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $p6 := external_alloc();
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const nlmsg_msg_size: ref;

axiom nlmsg_msg_size == $sub.ref(0, 344410);

procedure nlmsg_msg_size($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nlmsg_msg_size($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} {:cexpr "nlmsg_msg_size:arg:payload"} boogie_si_record_i32($i0);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 16);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 345442);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_nonlinear($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(108, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const alloc_skb: ref;

axiom alloc_skb == $sub.ref(0, 346474);

procedure alloc_skb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_skb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} {:cexpr "alloc_skb:arg:size"} boogie_si_record_i32($i0);
    call {:si_unique_call 1106} {:cexpr "alloc_skb:arg:priority"} boogie_si_record_i32($i1);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $p2 := __alloc_skb($i0, $i1, 0, $sub.i32(0, 1));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __alloc_skb: ref;

axiom __alloc_skb == $sub.ref(0, 347506);

procedure __alloc_skb($i0: i32, $i1: i32, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_skb($i0: i32, $i1: i32, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} {:cexpr "__alloc_skb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1109} {:cexpr "__alloc_skb:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1110} {:cexpr "__alloc_skb:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1111} {:cexpr "__alloc_skb:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $p4 := external_alloc();
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netlink_rcv: ref;

axiom netlink_rcv == $sub.ref(0, 348538);

procedure netlink_rcv($p0: ref);
  free requires assertsPassed;
  modifies $M.42, $CurrAddr, $M.28, $M.0, $M.16, $M.18, $M.15, $M.19, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation netlink_rcv($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} mutex_lock_nested(netlink_mutex, 0);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} netlink_rcv_cb($p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} mutex_unlock(netlink_mutex);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const netlink_kernel_create: ref;

axiom netlink_kernel_create == $sub.ref(0, 349570);

procedure netlink_kernel_create($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netlink_kernel_create($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} {:cexpr "netlink_kernel_create:arg:unit"} boogie_si_record_i32($i1);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $p3 := __netlink_kernel_create($p0, $i1, __this_module, $p2);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __netlink_kernel_create: ref;

axiom __netlink_kernel_create == $sub.ref(0, 350602);

procedure __netlink_kernel_create($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __netlink_kernel_create($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} {:cexpr "__netlink_kernel_create:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p4 := external_alloc();
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 351634);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    return;
}



const netlink_rcv_cb: ref;

axiom netlink_rcv_cb == $sub.ref(0, 352666);

procedure netlink_rcv_cb($p0: ref);
  free requires assertsPassed;
  modifies $M.42, $CurrAddr, $M.28, $M.0, $M.16, $M.18, $M.15, $M.19, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation netlink_rcv_cb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $p50: ref;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, 15);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32($i9, $i11);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 8096);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i64(4, 63);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $p26 := nlmsg_data($p7);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_68 := $M.42;
    cmdloc_dummy_var_69 := $M.42;
    call {:si_unique_call 1126} cmdloc_dummy_var_70 := $memcpy.i8(cmdloc_dummy_var_68, cmdloc_dummy_var_69, $p27, $p26, 4, $zext.i32.i64(1), 0 == 1);
    $M.42 := cmdloc_dummy_var_70;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $p28 := nlmsg_data($p7);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(4, 1));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, 4);
    call {:si_unique_call 1128} {:cexpr "mlen"} boogie_si_record_i32($i32);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p33 := $M.40;
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} vslice_dummy_var_162 := netdev_err.ref.ref($p50, .str.67);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.42, $p1);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $p37 := dev_get_by_index(init_net, $i36);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.42, $p1);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} vslice_dummy_var_163 := netdev_err.ref.ref.i32($p46, .str.66, $i47);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p40 := $M.40;
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    call {:si_unique_call 1131} devirtbounce.10($p40, $p37, $i44, $p29, $i32);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} dev_put($p37);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $p24 := nlmsg_data($p7);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p1);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.42;
    cmdloc_dummy_var_66 := $M.42;
    call {:si_unique_call 1124} cmdloc_dummy_var_67 := $memcpy.i8(cmdloc_dummy_var_65, cmdloc_dummy_var_66, $p25, $p24, 4, $zext.i32.i64(1), 0 == 1);
    $M.42 := cmdloc_dummy_var_67;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(32, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} vslice_dummy_var_161 := netdev_err.ref.ref.i32.i32($p17, .str.65, $i19, $i21);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb4;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 353698);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_by_index: ref;

axiom dev_get_by_index == $sub.ref(0, 354730);

procedure dev_get_by_index($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_by_index($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} {:cexpr "dev_get_by_index:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p2 := external_alloc();
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dev_put: ref;

axiom dev_put == $sub.ref(0, 355762);

procedure dev_put($p0: ref);
  free requires assertsPassed;



implementation dev_put($p0: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} __bad_size_call_parameter();
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i32 == 1);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i35 == 1);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(1104, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 1147} devirtbounce.5(0, $p39, $sub.i32(0, 1), $p39);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb42:
    assume $i35 == 1;
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(1104, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 1146} devirtbounce.11(0, $p37, $p37);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i32 == 1;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(1104, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 1145} devirtbounce.11(0, $p34, $p34);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(1104, 1));
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    call {:si_unique_call 1144} devirtbounce.5(0, $p31, $sub.i32(0, 1), $p31);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(1104, 1));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 1143} devirtbounce.11(0, $p29, $p29);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(1104, 1));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 1142} devirtbounce.11(0, $p26, $p26);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i16 == 1);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i19 == 1);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(1104, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 1141} devirtbounce.5(0, $p23, $sub.i32(0, 1), $p23);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb28:
    assume $i19 == 1;
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(1104, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 1140} devirtbounce.11(0, $p21, $p21);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i16 == 1;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(1104, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 1139} devirtbounce.11(0, $p18, $p18);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i11 == 1);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(1104, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 1138} devirtbounce.5(0, $p15, $sub.i32(0, 1), $p15);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i11 == 1;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(1104, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 1137} devirtbounce.11(0, $p13, $p13);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3048)), $mul.ref(1104, 1));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 1136} devirtbounce.11(0, $p10, $p10);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 356794);

procedure __bad_size_call_parameter();



const ldv_usb_autopm_get_interface_24: ref;

axiom ldv_usb_autopm_get_interface_24 == $sub.ref(0, 357826);

procedure ldv_usb_autopm_get_interface_24($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.43;



implementation ldv_usb_autopm_get_interface_24($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $i1 := ldv_get_interface($p0);
    call {:si_unique_call 1150} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_autopm_put_interface_25: ref;

axiom ldv_usb_autopm_put_interface_25 == $sub.ref(0, 358858);

procedure ldv_usb_autopm_put_interface_25($p0: ref);
  free requires assertsPassed;
  modifies $M.43, assertsPassed;



implementation ldv_usb_autopm_put_interface_25($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} ldv_put_interface();
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const ldv_usb_submit_urb_26: ref;

axiom ldv_usb_submit_urb_26 == $sub.ref(0, 359890);

procedure ldv_usb_submit_urb_26($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.0, $M.15, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, $M.19, assertsPassed;



implementation ldv_usb_submit_urb_26($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} {:cexpr "ldv_usb_submit_urb_26:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 1154} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const __gdm_usb_send_complete: ref;

axiom __gdm_usb_send_complete == $sub.ref(0, 360922);

procedure __gdm_usb_send_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.16, $M.18, $M.42, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.43, $CurrAddr, $M.28, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed, $M.19;



implementation __gdm_usb_send_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i16;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, $sub.i32(0, 104));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} list_del($p19);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p7);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i22 := $shl.i32($i21, 8);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i24 := $sext.i16.i32($i23);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p7, $mul.ref(1, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i16($i26);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i28 := $sext.i16.i32($i27);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i24, $i28);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    call {:si_unique_call 1157} {:cexpr "cmd_evt"} boogie_si_record_i16($i30);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 514);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} free_tx_struct($p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} put_tx_struct($p5, $p3);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 1155} devirtbounce.12($p16, $p18);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const put_tx_struct: ref;

axiom put_tx_struct == $sub.ref(0, 361954);

procedure put_tx_struct($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation put_tx_struct($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} list_add_tail($p2, $p3);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    return;
}



const ldv_put_interface: ref;

axiom ldv_put_interface == $sub.ref(0, 362986);

procedure ldv_put_interface();
  free requires assertsPassed;
  modifies $M.43, assertsPassed;



implementation ldv_put_interface()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i0 := $M.43;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} ldv_error();
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.43;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $M.43 := $i3;
    call {:si_unique_call 1162} {:cexpr "INTERF_STATE"} boogie_si_record_i32($i3);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 364018);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1163} __VERIFIER_error();
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const ldv_get_interface: ref;

axiom ldv_get_interface == $sub.ref(0, 365050);

procedure ldv_get_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.43;



implementation ldv_get_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i1 := ldv_undef_int();
    call {:si_unique_call 1165} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} ldv_stop___1();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i4 := $M.43;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $M.43 := $i5;
    call {:si_unique_call 1167} {:cexpr "INTERF_STATE"} boogie_si_record_i32($i5);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const alloc_tx_struct: ref;

axiom alloc_tx_struct == $sub.ref(0, 366082);

procedure alloc_tx_struct($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr;



implementation alloc_tx_struct($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $p1 := kzalloc(72, 32);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $p6 := ldv_usb_alloc_urb_13(0, 32);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $p8 := kmalloc(2048, 32);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p8);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p0);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} ldv_usb_free_urb_14($p19);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} kfree($p21);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} kfree($p22);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const alloc_rx_struct: ref;

axiom alloc_rx_struct == $sub.ref(0, 367114);

procedure alloc_rx_struct($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr;



implementation alloc_rx_struct($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $p1 := kzalloc(56, 32);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $p6 := ldv_usb_alloc_urb_16(0, 32);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p8 := kmalloc(131072, 32);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p8);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p0);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} ldv_usb_free_urb_17($p19);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} kfree($p21);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} kfree($p22);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const ldv_usb_alloc_urb_16: ref;

axiom ldv_usb_alloc_urb_16 == $sub.ref(0, 368146);

procedure ldv_usb_alloc_urb_16($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation ldv_usb_alloc_urb_16($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} {:cexpr "ldv_usb_alloc_urb_16:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 1181} {:cexpr "ldv_usb_alloc_urb_16:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $p2 := ldv_alloc_urb();
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_usb_free_urb_17: ref;

axiom ldv_usb_free_urb_17 == $sub.ref(0, 369178);

procedure ldv_usb_free_urb_17($p0: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation ldv_usb_free_urb_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} ldv_free_urb($p0);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    return;
}



const ldv_alloc_urb: ref;

axiom ldv_alloc_urb == $sub.ref(0, 370210);

procedure ldv_alloc_urb() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation ldv_alloc_urb() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p0 := ldv_undef_ptr();
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $i2 := ldv_undef_int();
    call {:si_unique_call 1186} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p6 := $M.15;
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_usb_alloc_urb_13: ref;

axiom ldv_usb_alloc_urb_13 == $sub.ref(0, 371242);

procedure ldv_usb_alloc_urb_13($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation ldv_usb_alloc_urb_13($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} {:cexpr "ldv_usb_alloc_urb_13:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 1188} {:cexpr "ldv_usb_alloc_urb_13:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $p2 := ldv_alloc_urb();
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_usb_free_urb_14: ref;

axiom ldv_usb_free_urb_14 == $sub.ref(0, 372274);

procedure ldv_usb_free_urb_14($p0: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation ldv_usb_free_urb_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} ldv_free_urb($p0);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 373306);

procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1191} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1192} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1193} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1194} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1195} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1196} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1197} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1198} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1199} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1200} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const get_rx_struct: ref;

axiom get_rx_struct == $sub.ref(0, 374338);

procedure get_rx_struct($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr;



implementation get_rx_struct($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $i2 := list_empty($p1);
    call {:si_unique_call 1202} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} list_move_tail($p14, $p15);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p7 := $p12;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $p4 := alloc_rx_struct($p0);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} list_add($p8, $p9);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb5;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 375370);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(0, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const gdm_usb_rcv_complete: ref;

axiom gdm_usb_rcv_complete == $sub.ref(0, 376402);

procedure gdm_usb_rcv_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.15, $M.42, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.43, $M.23, $M.22, $M.21, $CurrAddr, $M.19, $M.28, assertsPassed;



implementation gdm_usb_rcv_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p55: ref;
  var $p56: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p54: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p81: ref;
  var $p82: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p80: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $sub.i32(0, 104));
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p16 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 256), 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $p17 := spinlock_check($p16);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $i18 := _raw_spin_lock_irqsave($p17);
    call {:si_unique_call 1209} {:cexpr "flags"} boogie_si_record_i64($i18);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 0);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $p111 := spinlock_check($p110);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $i112 := _raw_spin_lock_irqsave($p111);
    call {:si_unique_call 1218} {:cexpr "flags2"} boogie_si_record_i64($i112);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} put_rx_struct($p5, $p3);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p5, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} spin_unlock_irqrestore($p113, $i112);
    $p114 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 256), 368)), $mul.ref(120, 1)), $mul.ref(64, 1));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} spin_unlock_irqrestore($p114, $i18);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} usb_mark_last_busy($p12);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb36:
    assume $i97 == 1;
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb38;

  $bb39:
    assume $i101 == 1;
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    call {:si_unique_call 1215} devirtbounce.13($p103, $p105, $p107, $i109);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    goto $bb41;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 8);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i28 := $sext.i16.i32($i27);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(1, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i16($i32);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i34 := $sext.i16.i32($i33);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i28, $i34);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    call {:si_unique_call 1210} {:cexpr "cmd_evt"} boogie_si_record_i16($i36);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 33061);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb7:
    assume $i38 == 1;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(4, 1));
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i44 == 1);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(4, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 1);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb20:
    assume $i70 == 1;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 256), 368)), $mul.ref(120, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    $p77 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 256), 368)), $mul.ref(120, 1)), $mul.ref(16, 1));
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i76, $i78);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    $p91 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 256), 368)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} $i92 := list_empty($p91);
    call {:si_unique_call 1214} {:cexpr "tmp___0"} boogie_si_record_i32($i92);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i93 == 1;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, 0);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb22:
    assume $i79 == 1;
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p80 := $p73;
    goto $bb25;

  $bb25:
    call $p81, $p82, $p85, $p86, $p87, $p88, $i89, $i90, $p80, vslice_dummy_var_165 := gdm_usb_rcv_complete_loop_$bb25($i78, $p81, $p82, $p85, $p86, $p87, $p88, $i89, $i90, $p80, vslice_dummy_var_165);
    goto $bb25_last;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} vslice_dummy_var_165 := ldv_usb_submit_urb_21($p82, 32);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p80, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, $i78);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i90 == 1);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb27:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $p80 := $p86;
    goto $bb27_dummy;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i44 == 1;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 256), 368)), $mul.ref(120, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    $p51 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 256), 368)), $mul.ref(120, 1)), $mul.ref(16, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i50, $i52);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p54 := $p47;
    goto $bb14;

  $bb14:
    call $p55, $p56, $p59, $p60, $p61, $p62, $i63, $i64, $p54, vslice_dummy_var_164 := gdm_usb_rcv_complete_loop_$bb14($i52, $p55, $p56, $p59, $p60, $p61, $p62, $i63, $i64, $p54, vslice_dummy_var_164);
    goto $bb14_last;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} vslice_dummy_var_164 := usb_unlink_urb($p56);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p54, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, $i52);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i64 == 1);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $p54 := $p60;
    goto $bb16_dummy;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5930;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5906;
}



const ldv_usb_fill_bulk_urb_19: ref;

axiom ldv_usb_fill_bulk_urb_19 == $sub.ref(0, 377434);

procedure ldv_usb_fill_bulk_urb_19($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.19, $M.18;



implementation ldv_usb_fill_bulk_urb_19($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} {:cexpr "ldv_usb_fill_bulk_urb_19:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 1224} {:cexpr "ldv_usb_fill_bulk_urb_19:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} ldv_fill_bulk_urb($p0, $p5);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_23: ref;

axiom ldv_usb_submit_urb_23 == $sub.ref(0, 378466);

procedure ldv_usb_submit_urb_23($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.0, $M.15, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, $M.19, assertsPassed;



implementation ldv_usb_submit_urb_23($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} {:cexpr "ldv_usb_submit_urb_23:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 1228} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const ldv_fill_bulk_urb: ref;

axiom ldv_fill_bulk_urb == $sub.ref(0, 379498);

procedure ldv_fill_bulk_urb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.19, $M.18;



implementation ldv_fill_bulk_urb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p2 := $M.15;
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $M.19 := $p1;
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i6 := $M.18;
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $M.18 := $i7;
    call {:si_unique_call 1229} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32($i7);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_submit_urb_21: ref;

axiom ldv_usb_submit_urb_21 == $sub.ref(0, 380530);

procedure ldv_usb_submit_urb_21($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.0, $M.15, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, $M.19, assertsPassed;



implementation ldv_usb_submit_urb_21($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} {:cexpr "ldv_usb_submit_urb_21:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 1232} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const put_rx_struct: ref;

axiom put_rx_struct == $sub.ref(0, 381562);

procedure put_rx_struct($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation put_rx_struct($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} list_move($p2, $p3);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    return;
}



const usb_mark_last_busy: ref;

axiom usb_mark_last_busy == $sub.ref(0, 382594);

procedure usb_mark_last_busy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_mark_last_busy($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} pm_runtime_mark_last_busy($p1);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_mark_last_busy: ref;

axiom pm_runtime_mark_last_busy == $sub.ref(0, 383626);

procedure pm_runtime_mark_last_busy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pm_runtime_mark_last_busy($p0: ref)
{
  var $i1: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, jiffies);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(520, 1)), $mul.ref(552, 1));
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    return;
}



const list_move: ref;

axiom list_move == $sub.ref(0, 384658);

procedure list_move($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_move($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} __list_del_entry($p0);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} list_add($p0, $p1);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    return;
}



const get_tx_struct: ref;

axiom get_tx_struct == $sub.ref(0, 385690);

procedure get_tx_struct($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.28;



implementation get_tx_struct($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i3 := list_empty($p2);
    call {:si_unique_call 1238} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} list_del($p10);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $i12 := list_empty($p11);
    call {:si_unique_call 1241} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p1, $i14);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p5 := $p8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p1, 1);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const gdm_usb_send_complete: ref;

axiom gdm_usb_send_complete == $sub.ref(0, 386722);

procedure gdm_usb_send_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.16, $M.18, $M.42, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.43, $CurrAddr, $M.28, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed, $M.19;



implementation gdm_usb_send_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p7 := spinlock_check($p6);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 1244} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} __gdm_usb_send_complete($p0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} spin_unlock_irqrestore($p9, $i8);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 387754);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1248} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_20: ref;

axiom ldv_usb_submit_urb_20 == $sub.ref(0, 388786);

procedure ldv_usb_submit_urb_20($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.0, $M.15, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, $M.19, assertsPassed;



implementation ldv_usb_submit_urb_20($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} {:cexpr "ldv_usb_submit_urb_20:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 1251} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 389818);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1252} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1253} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const array_le32_to_cpu: ref;

axiom array_le32_to_cpu == $sub.ref(0, 390850);

procedure array_le32_to_cpu($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation array_le32_to_cpu($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i1;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} {:cexpr "array_le32_to_cpu:arg:num"} boogie_si_record_i32($i1);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32(0, $i1);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p3, $i4 := $p0, 0;
    goto $bb4;

  $bb4:
    call $i5, $i6, $p7, $i8, $p3, $i4 := array_le32_to_cpu_loop_$bb4($i1, $i5, $i6, $p7, $i8, $p3, $i4);
    goto $bb4_last;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p3);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i5);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i4, 1);
    call {:si_unique_call 1255} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p3, $mul.ref(1, 4));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, $i1);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $p3, $i4 := $p7, $i6;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6067;
}



const download_image: ref;

axiom download_image == $sub.ref(0, 391882);

procedure download_image($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.44, $M.45, $M.0, $CurrAddr;



implementation download_image($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i18: i64;
  var $i19: i32;
  var $i35: i32;
  var $i17: i32;
  var $i15: i32;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1257} {:cexpr "download_image:arg:pos"} boogie_si_record_i64($i2);
    call {:si_unique_call 1258} {:cexpr "download_image:arg:img_len"} boogie_si_record_i32($i3);
    call {:si_unique_call 1259} {:cexpr "download_image:arg:magic_num"} boogie_si_record_i32($i4);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i3, 1023);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, $sub.i32(0, 1024));
    call {:si_unique_call 1260} {:cexpr "size"} boogie_si_record_i32($i7);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i8 := __fswab32($i4);
    call {:si_unique_call 1262} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $p9, $i8);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $i10 := __fswab32($i7);
    call {:si_unique_call 1264} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $M.45 := $store.i32($M.45, $p11, $i10);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p5);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i13 := gdm_wibro_send($p0, $p12, 8);
    call {:si_unique_call 1266} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i3, 0);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i17 := $i13;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i15 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i2, $i3;
    goto $bb8;

  $bb8:
    call $i20, $i21, $i22, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i18, $i19, $i35, cmdloc_dummy_var_71, cmdloc_dummy_var_72, cmdloc_dummy_var_73 := download_image_loop_$bb8($p0, $p1, $i20, $i21, $i22, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i18, $i19, $i35, cmdloc_dummy_var_71, cmdloc_dummy_var_72, cmdloc_dummy_var_73);
    goto $bb8_last;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i19, 1024);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    call {:si_unique_call 1267} {:cexpr "__len"} boogie_si_record_i64($i22);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p23 := $M.24;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.27, $p24);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($i18, 1));
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_71 := $M.0;
    cmdloc_dummy_var_72 := $M.0;
    call {:si_unique_call 1268} cmdloc_dummy_var_73 := $memcpy.i8(cmdloc_dummy_var_71, cmdloc_dummy_var_72, $p23, $p26, $i22, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_73;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p27 := $M.24;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i28 := gdm_wibro_send($p0, $p27, $i21);
    call {:si_unique_call 1270} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i19, $i21);
    call {:si_unique_call 1271} {:cexpr "img_len"} boogie_si_record_i32($i31);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i21);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, $i18);
    call {:si_unique_call 1272} {:cexpr "pos"} boogie_si_record_i64($i33);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i31, 0);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i35 := $i28;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i17 := $i35;
    goto $bb7;

  $bb16:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i18, $i19 := $i33, $i31;
    goto $bb16_dummy;

  $bb13:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i15 := $i30;
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i21 := 1024;
    goto $bb12;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6098;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 392914);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    return;
}



const gdm_wibro_send: ref;

axiom gdm_wibro_send == $sub.ref(0, 393946);

procedure gdm_wibro_send($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation gdm_wibro_send($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i10: i32;
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1274} {:cexpr "gdm_wibro_send:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $i4 := __create_pipe($p0, 1);
    call {:si_unique_call 1276} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, $sub.i32(0, 1073741824));
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $i6 := usb_bulk_msg($p0, $i5, $p1, $i2, $p3, 1000);
    call {:si_unique_call 1278} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} vslice_dummy_var_166 := dev_err.ref.ref.i32($p8, .str.87, $i6);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i10 := $i6;
    goto $bb3;
}



const usb_bulk_msg: ref;

axiom usb_bulk_msg == $sub.ref(0, 394978);

procedure usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1280} {:cexpr "usb_bulk_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1281} {:cexpr "usb_bulk_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1282} {:cexpr "usb_bulk_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1283} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1284} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const em_download_image: ref;

axiom em_download_image == $sub.ref(0, 396010);

procedure em_download_image($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation em_download_image($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i64;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i30: i32;
  var $i31: i64;
  var $i55: i32;
  var $i56: i1;
  var $i23: i32;
  var $p57: ref;
  var $i9: i32;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var vslice_dummy_var_167: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i5 := request_firmware($p3, $p1, $p4);
    call {:si_unique_call 1287} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $add.i32(0, 2048);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $p12 := kmalloc($i11, 208);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64(0);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p12, $mul.ref($i15, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $p17 := strcpy($p16, $p2);
    assume $isExternal($p17);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i18 := strlen($p2);
    call {:si_unique_call 1292} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 0);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $i21 := gdm_wibro_send($p0, $p12, $i20);
    call {:si_unique_call 1294} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.25, $p3);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.26, $p25);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    call {:si_unique_call 1297} {:cexpr "img_len"} boogie_si_record_i32($i27);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i28 := $sle.i32($i27, 0);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i27, 0);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $i55 := em_wait_ack($p0, 1);
    call {:si_unique_call 1307} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i23 := $i55;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.25, $p3);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} release_firmware($p57);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} kfree($p12);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i9 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb32:
    assume $i56 == 1;
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i30, $i31 := $i27, 0;
    goto $bb18;

  $bb18:
    call $i32, $i33, $i34, $i35, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i30, $i31, cmdloc_dummy_var_74, cmdloc_dummy_var_75, cmdloc_dummy_var_76 := em_download_image_loop_$bb18($p0, $p3, $p12, $i32, $i33, $i34, $i35, $p36, $p37, $p38, $p39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i30, $i31, cmdloc_dummy_var_74, cmdloc_dummy_var_75, cmdloc_dummy_var_76);
    goto $bb18_last;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i30, 2048);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i30;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    call {:si_unique_call 1298} {:cexpr "__len"} boogie_si_record_i64($i34);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64(0);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p12, $mul.ref($i35, 1));
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.25, $p3);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.27, $p38);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref($i31, 1));
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_74 := $M.0;
    cmdloc_dummy_var_75 := $M.0;
    call {:si_unique_call 1299} cmdloc_dummy_var_76 := $memcpy.i8(cmdloc_dummy_var_74, cmdloc_dummy_var_75, $p36, $p40, $i34, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_76;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i33, 0);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i42 := gdm_wibro_send($p0, $p12, $i41);
    call {:si_unique_call 1301} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i44 := $i42;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i30, $sub.i32(0, 2048));
    call {:si_unique_call 1302} {:cexpr "img_len"} boogie_si_record_i32($i45);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i31, 2048);
    call {:si_unique_call 1303} {:cexpr "pos"} boogie_si_record_i64($i46);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i33, 0);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 511);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i51 := em_wait_ack($p0, $i50);
    call {:si_unique_call 1305} {:cexpr "ret"} boogie_si_record_i32($i51);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 0);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i53 := $i51;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i54 := $sgt.i32($i45, 0);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i54 == 1);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb29:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i30, $i31 := $i45, $i46;
    goto $bb29_dummy;

  $bb26:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i23 := $i53;
    goto $bb10;

  $bb23:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i23 := $i44;
    goto $bb10;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i33 := 2048;
    goto $bb22;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 1);
    goto $bb10;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} vslice_dummy_var_167 := dev_err.ref.ref.ref.i32($p7, .str.19, $p1, $i5);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i9 := $i5;
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6188;
}



const em_fw_reset: ref;

axiom em_fw_reset == $sub.ref(0, 397042);

procedure em_fw_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation em_fw_reset($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i1 := gdm_wibro_send($p0, $0.ref, 0);
    call {:si_unique_call 1309} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 398074);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const strlen: ref;

axiom strlen == $sub.ref(0, 399106);

procedure strlen($p0: ref) returns ($r: i64);



const em_wait_ack: ref;

axiom em_wait_ack == $sub.ref(0, 400138);

procedure em_wait_ack($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation em_wait_ack($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1311} {:cexpr "em_wait_ack:arg:send_zlp"} boogie_si_record_i32($i1);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i1, 0);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $i8 := gdm_wibro_recv($p0, $p7, 4);
    call {:si_unique_call 1315} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $i4 := gdm_wibro_send($p0, $0.ref, 0);
    call {:si_unique_call 1313} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb5;
}



const gdm_wibro_recv: ref;

axiom gdm_wibro_recv == $sub.ref(0, 401170);

procedure gdm_wibro_recv($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation gdm_wibro_recv($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i10: i32;
  var vslice_dummy_var_168: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1317} {:cexpr "gdm_wibro_recv:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i4 := __create_pipe($p0, 2);
    call {:si_unique_call 1319} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, $sub.i32(0, 1073741696));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i6 := usb_bulk_msg($p0, $i5, $p1, $i2, $p3, 5000);
    call {:si_unique_call 1321} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} vslice_dummy_var_168 := dev_err.ref.ref.i32($p8, .str.88, $i6);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i10 := $i6;
    goto $bb3;
}



const ldv_get_dev: ref;

axiom ldv_get_dev == $sub.ref(0, 402202);

procedure ldv_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.22, $M.21;



implementation ldv_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p1 := $M.21;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p8 := $M.21;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $M.21;
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i12 := $M.22;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $M.22 := $i13;
    call {:si_unique_call 1326} {:cexpr "dev_counter"} boogie_si_record_i32($i13);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $i4 := ldv_undef_int();
    call {:si_unique_call 1324} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i6 := $M.22;
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $M.22 := $i7;
    call {:si_unique_call 1325} {:cexpr "dev_counter"} boogie_si_record_i32($i7);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $M.21 := $p0;
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_main_exported_2: ref;

axiom ldv_main_exported_2 == $sub.ref(0, 403234);

procedure ldv_main_exported_2();
  free requires assertsPassed;
  modifies $M.23, $M.46, $M.1, $M.47, $M.48, $M.49, $M.0, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.28, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.16, $M.18, $M.15, $M.19, $M.42, $M.22, $M.21, $M.43, $M.30, $M.31, $M.32, assertsPassed;



implementation ldv_main_exported_2()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: ref;
  var vslice_dummy_var_181: ref;
  var vslice_dummy_var_182: ref;
  var vslice_dummy_var_183: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $p0 := ldv_zalloc(24);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $p2 := ldv_zalloc(1);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $p3 := ldv_zalloc(40);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $p5 := ldv_zalloc(240);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1331} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 1332} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    call {:si_unique_call 1333} {:cexpr "tmp___3"} boogie_si_record_i32($i7);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1334} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 1335} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 1336} {:cexpr "tmp___4"} boogie_si_record_i32($i8);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i8, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} ldv_stop();
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i90 := $M.23;
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 2);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb78:
    assume $i91 == 1;
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} vslice_dummy_var_183 := ldv_ndo_uninit_2();
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1374} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i93 := $M.48;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32($i93, 1);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $M.48 := $i94;
    call {:si_unique_call 1375} {:cexpr "usb_counter"} boogie_si_record_i32($i94);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i95 := $M.49;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32($i95, 1);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $M.49 := $i96;
    call {:si_unique_call 1376} {:cexpr "ref_cnt"} boogie_si_record_i32($i96);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i81 := $M.23;
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb72:
    assume $i82 == 1;
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i83 := ldv_ndo_init_2();
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $M.47 := $i83;
    call {:si_unique_call 1369} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i83);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i84 := $M.47;
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb74:
    assume $i85 == 1;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1370} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i86 := $M.48;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, 1);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $M.48 := $i87;
    call {:si_unique_call 1371} {:cexpr "usb_counter"} boogie_si_record_i32($i87);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i88 := $M.49;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 1);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $M.49 := $i89;
    call {:si_unique_call 1372} {:cexpr "ref_cnt"} boogie_si_record_i32($i89);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i69 := $M.23;
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 1);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i73 := $M.23;
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 3);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i77 := $M.23;
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 2);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb69:
    assume $i78 == 1;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p79 := $M.33;
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} vslice_dummy_var_182 := gdm_wimax_stats($p79);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1367} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume $i74 == 1;
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p75 := $M.33;
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} vslice_dummy_var_181 := gdm_wimax_stats($p75);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $M.23 := 3;
    call {:si_unique_call 1365} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume $i70 == 1;
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p71 := $M.33;
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} vslice_dummy_var_180 := gdm_wimax_stats($p71);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1363} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb4:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i8, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i14 == 1);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i57 := $M.23;
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i61 := $M.23;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 3);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i65 := $M.23;
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 2);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb60:
    assume $i66 == 1;
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p67 := $M.33;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} vslice_dummy_var_179 := gdm_wimax_set_mac_addr($p67, $p2);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1361} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i62 == 1;
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p63 := $M.33;
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} vslice_dummy_var_178 := gdm_wimax_set_mac_addr($p63, $p2);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $M.23 := 3;
    call {:si_unique_call 1359} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i58 == 1;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p59 := $M.33;
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} vslice_dummy_var_177 := gdm_wimax_set_mac_addr($p59, $p2);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1357} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i53 := $M.23;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 3);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb51:
    assume $i54 == 1;
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p55 := $M.33;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} vslice_dummy_var_176 := gdm_wimax_tx($p6, $p55);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $M.23 := 3;
    call {:si_unique_call 1355} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i16 == 1);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i47 := $M.23;
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 2);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb45:
    assume $i48 == 1;
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p49 := $M.33;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $i50 := gdm_wimax_open($p49);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $M.46 := $i50;
    call {:si_unique_call 1352} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i50);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i51 := $M.46;
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i52 == 1;
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $M.23 := 3;
    call {:si_unique_call 1353} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i35 := $M.23;
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 1);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i39 := $M.23;
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 3);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i43 := $M.23;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 2);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb42:
    assume $i44 == 1;
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p45 := $M.33;
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} vslice_dummy_var_175 := gdm_wimax_ioctl($p45, $p4, $i7);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1350} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i40 == 1;
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p41 := $M.33;
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} vslice_dummy_var_174 := gdm_wimax_ioctl($p41, $p4, $i7);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $M.23 := 3;
    call {:si_unique_call 1348} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i36 == 1;
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p37 := $M.33;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} vslice_dummy_var_173 := gdm_wimax_ioctl($p37, $p4, $i7);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1346} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb15:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i17 == 1);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i23 := $M.23;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i27 := $M.23;
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i31 := $M.23;
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 2);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb33:
    assume $i32 == 1;
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p33 := $M.33;
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} vslice_dummy_var_172 := gdm_wimax_set_config($p33, $p1);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1344} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i28 == 1;
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p29 := $M.33;
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} vslice_dummy_var_171 := gdm_wimax_set_config($p29, $p1);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $M.23 := 3;
    call {:si_unique_call 1342} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i24 == 1;
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p25 := $M.33;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} vslice_dummy_var_170 := gdm_wimax_set_config($p25, $p1);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1340} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb19:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb21:
    assume $i18 == 1;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i19 := $M.23;
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i20 == 1;
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p21 := $M.33;
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} vslice_dummy_var_169 := gdm_wimax_close($p21);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1338} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    goto $bb25;
}



const ldv_ndo_init_2: ref;

axiom ldv_ndo_init_2 == $sub.ref(0, 404266);

procedure ldv_ndo_init_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1378} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1379} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_2: ref;

axiom ldv_ndo_uninit_2 == $sub.ref(0, 405298);

procedure ldv_ndo_uninit_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1380} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1381} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 406330);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_usb_driver_1: ref;

axiom ldv_usb_driver_1 == $sub.ref(0, 407362);

procedure ldv_usb_driver_1();
  free requires assertsPassed;
  modifies $M.50, $M.0, $CurrAddr;



implementation ldv_usb_driver_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $p0 := ldv_zalloc(1520);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $M.50 := $p0;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 408394);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.51, $M.52, $M.49, $M.53, $M.23, $M.0, $M.54, $M.55, $M.14, $M.56, $M.57, $M.58, $M.46, $M.1, $M.47, $M.48, $M.33, $M.50, $M.43, $M.60, $M.20, $M.15, $M.21, $M.22, $M.16, $M.18, $M.17, $M.19, $M.75, $M.76, $M.24, $M.40, $M.77, $CurrAddr, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.44, $M.45, $M.29, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, assertsPassed, $M.28, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.42, $M.30, $M.31, $M.32;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;

  $bb0:
    call {:si_unique_call 1383} $initialize();
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $p1 := ldv_zalloc(32);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} ldv_initialize();
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_77 := $M.51;
    call {:si_unique_call 1388} cmdloc_dummy_var_78 := $memset.i8(cmdloc_dummy_var_77, $p3, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.51 := cmdloc_dummy_var_78;
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 1389} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 1390} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1391} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 1392} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78 := main_loop_$bb1($p0, $p2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} ldv_stop();
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb68_dummy;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i77 := $M.23;
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb99:
    assume $i78 == 1;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} ldv_main_exported_2();
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    goto $bb101;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i60 := $M.53;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb69:
    assume $i61 == 1;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1419} $i62 := __VERIFIER_nondet_int();
    call {:si_unique_call 1420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i62);
    call {:si_unique_call 1421} {:cexpr "tmp___2"} boogie_si_record_i32($i62);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i62, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} ldv_stop();
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb74:
    assume $i64 == 1;
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i70 := $M.53;
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 1);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb87:
    assume $i71 == 1;
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $i72 := usb_gdm_wimax_init();
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $M.58 := $i72;
    call {:si_unique_call 1426} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i72);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i73 := $M.58;
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i75 := $M.58;
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb92:
    assume $i76 == 1;
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1428} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} ldv_check_final_state();
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb89:
    assume $i74 == 1;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1427} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb72:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i62, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb76;

  $bb77:
    assume $i65 == 1;
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i66 := $M.53;
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 3);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb79:
    assume $i67 == 1;
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i68 := $M.49;
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb81;

  $bb82:
    assume $i69 == 1;
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} usb_gdm_wimax_exit();
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 1423} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb3:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb9;

  $bb10:
    assume $i8 == 1;
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i9 := $M.52;
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb12:
    assume $i10 == 1;
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1396} $i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 1397} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
    call {:si_unique_call 1398} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} ldv_stop();
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb21:
    assume $i15 == 1;
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i54 := $M.52;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 3);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb59:
    assume $i55 == 1;
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p56 := $M.50;
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $i57 := gdm_resume($p56);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $M.57 := $i57;
    call {:si_unique_call 1416} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i57);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i58 := $M.57;
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume $i59 == 1;
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1417} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i14 == 1;
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i46 := $M.52;
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 2);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb53:
    assume $i47 == 1;
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p48 := $M.50;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.51, $p49);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i51 := gdm_suspend($p48, $i50);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $M.56 := $i51;
    call {:si_unique_call 1413} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i51);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i52 := $M.56;
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb55:
    assume $i53 == 1;
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.52 := 3;
    call {:si_unique_call 1414} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i32 := $M.52;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i39 := $M.52;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb47:
    assume $i40 == 1;
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i41 := $M.48;
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb49;

  $bb50:
    assume $i42 == 1;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p43 := $M.50;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} gdm_usb_disconnect($p43);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1410} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i44 := $M.49;
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i44, 1);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $M.49 := $i45;
    call {:si_unique_call 1411} {:cexpr "ref_cnt"} boogie_si_record_i32($i45);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb41:
    assume $i33 == 1;
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i34 := $M.48;
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb43;

  $bb44:
    assume $i35 == 1;
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p36 := $M.50;
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} gdm_usb_disconnect($p36);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1407} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i37 := $M.49;
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32($i37, 1);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $M.49 := $i38;
    call {:si_unique_call 1408} {:cexpr "ref_cnt"} boogie_si_record_i32($i38);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb15:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i16 == 1);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i26 := $M.52;
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 3);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p28 := $M.50;
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $i29 := gdm_resume($p28);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $M.55 := $i29;
    call {:si_unique_call 1404} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i29);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i30 := $M.55;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i31 == 1;
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1405} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb23;

  $bb26:
    assume $i17 == 1;
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i18 := $M.52;
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i19 == 1;
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p20 := $M.50;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $i21 := gdm_usb_probe($p20, $p2);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $M.54 := $i21;
    call {:si_unique_call 1400} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i21);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i22 := $M.54;
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i23 == 1;
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1401} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i24 := $M.49;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 1);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $M.49 := $i25;
    call {:si_unique_call 1402} {:cexpr "ref_cnt"} boogie_si_record_i32($i25);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb68_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1393} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1394} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1395} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 409426);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    return;
}



const usb_gdm_wimax_exit: ref;

axiom usb_gdm_wimax_exit == $sub.ref(0, 410458);

procedure usb_gdm_wimax_exit();
  free requires assertsPassed;
  modifies $M.52;



implementation usb_gdm_wimax_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} {:cexpr "k_mode_stop"} boogie_si_record_i32(1);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} __wake_up(k_wait, 3, 1, $0.ref);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} ldv_usb_deregister_37(gdm_usb_driver);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    return;
}



const usb_gdm_wimax_init: ref;

axiom usb_gdm_wimax_init == $sub.ref(0, 411490);

procedure usb_gdm_wimax_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.52, $M.48, $M.50, $M.0, $CurrAddr;



implementation usb_gdm_wimax_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var vslice_dummy_var_184: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $p0 := kthread_create_on_node.ref.ref.i32.ref(k_mode_thread, $0.ref, $sub.i32(0, 1), .str.86);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i2 := IS_ERR($p1);
    call {:si_unique_call 1437} {:cexpr "tmp___0"} boogie_si_record_i64($i2);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $i5 := ldv_usb_register_driver_36(gdm_usb_driver, __this_module, .str.9);
    call {:si_unique_call 1440} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} vslice_dummy_var_184 := wake_up_process($p0);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 412522);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p0 := $M.15;
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} ldv_error();
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $M.21;
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} ldv_error();
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $M.22;
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i7 == 1);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} ldv_error();
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $M.43;
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} ldv_error();
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $M.60;
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} ldv_error();
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const k_mode_thread: ref;

axiom k_mode_thread == $sub.ref(0, 413554);

procedure k_mode_thread($p0: ref) returns ($r: i32);



const kthread_create_on_node: ref;

axiom kthread_create_on_node == $sub.ref(0, 414586);

procedure kthread_create_on_node.ref.ref.i32.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kthread_create_on_node.ref.ref.i32.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} {:cexpr "kthread_create_on_node:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $p4 := external_alloc();
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 415618);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1449} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const wake_up_process: ref;

axiom wake_up_process == $sub.ref(0, 416650);

procedure wake_up_process($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wake_up_process($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1450} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1451} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_register_driver_36: ref;

axiom ldv_usb_register_driver_36 == $sub.ref(0, 417682);

procedure ldv_usb_register_driver_36($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.52, $M.48, $M.50, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_36($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1453} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1455} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} ldv_usb_driver_1();
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 418714);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1457} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1458} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 419746);

procedure schedule_timeout($i0: i64) returns ($r: i64);



const ldv_usb_submit_urb_34: ref;

axiom ldv_usb_submit_urb_34 == $sub.ref(0, 420778);

procedure ldv_usb_submit_urb_34($p0: ref, $i1: i32) returns ($r: i32);



const ldv_usb_submit_urb_35: ref;

axiom ldv_usb_submit_urb_35 == $sub.ref(0, 421810);

procedure ldv_usb_submit_urb_35($p0: ref, $i1: i32) returns ($r: i32);



const interruptible_sleep_on: ref;

axiom interruptible_sleep_on == $sub.ref(0, 422842);

procedure interruptible_sleep_on($p0: ref);



const ldv_usb_deregister_37: ref;

axiom ldv_usb_deregister_37 == $sub.ref(0, 423874);

procedure ldv_usb_deregister_37($p0: ref);
  free requires assertsPassed;
  modifies $M.52;



implementation ldv_usb_deregister_37($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} usb_deregister($p0);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 424906);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 425938);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1461} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 1} true;
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 426970);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 428002);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 429034);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 430066);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 431098);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 432130);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 433162);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 434194);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 435226);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 436258);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 437290);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1462} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 1463} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1464} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1465} __VERIFIER_assume($i6);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 438322);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 439354);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 440386);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1466} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1467} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1468} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1469} __VERIFIER_assume($i4);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 441418);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 442450);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 443482);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 444514);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 445546);

procedure __VERIFIER_nondet_long() returns ($r: i64);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 446578);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 447610);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 448642);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 449674);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 450706);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1470} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1471} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1472} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1473} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1474} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1475} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1476} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1477} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1478} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1479} __VERIFIER_assume($i7);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1480} __VERIFIER_assume($i11);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 451738);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 452770);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 453802);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 454834);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 455866);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 456898);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 457930);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 458962);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 459994);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1481} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1482} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1483} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1484} __VERIFIER_assume($i10);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 461026);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1485} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 1486} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1487} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 462058);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1488} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1489} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1490} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 463090);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1491} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1492} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 464122);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 465154);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1493} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1494} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 466186);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 467218);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 468250);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1495} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1496} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1497} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1498} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $p6 := malloc($i5);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_79 := $M.0;
    call {:si_unique_call 1500} cmdloc_dummy_var_80 := $memset.i8(cmdloc_dummy_var_79, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_80;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 469282);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 470314);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.33, $M.23, $M.46, $M.47, $M.48, $M.49, $M.50, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.43, $M.60, $M.20, $M.15, $M.21, $M.22, $M.16, $M.18, $M.17, $M.19, $M.75, $M.76, $M.0, $M.24, $M.40, $M.77;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1501} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.33 := $0.ref;
    $M.23 := 0;
    call {:si_unique_call 1502} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1503} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1504} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1505} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1506} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.50 := $0.ref;
    $M.52 := 0;
    call {:si_unique_call 1507} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1508} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 1509} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1510} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1511} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1512} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 1513} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1514} {:cexpr "INTERF_STATE"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 1515} {:cexpr "SERIAL_STATE"} boogie_si_record_i32(0);
    $M.20 := $0.ref;
    $M.15 := $0.ref;
    $M.21 := $0.ref;
    $M.22 := 0;
    call {:si_unique_call 1516} {:cexpr "dev_counter"} boogie_si_record_i32(0);
    $M.16 := 0;
    call {:si_unique_call 1517} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 1518} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    $M.17 := $0.ref;
    $M.19 := $0.ref;
    $M.75 := $store.i16($M.75, id_table, 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(0, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(0, 32)), $mul.ref(4, 1)), 32288);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(1, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(1, 32)), $mul.ref(4, 1)), 32304);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(2, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(2, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(2, 32)), $mul.ref(4, 1)), 32256);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(2, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(3, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(3, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(3, 32)), $mul.ref(4, 1)), 32257);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(3, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(4, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(4, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(4, 32)), $mul.ref(4, 1)), 32258);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(4, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(5, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(5, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(5, 32)), $mul.ref(4, 1)), 32259);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(5, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(6, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(6, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(6, 32)), $mul.ref(4, 1)), 32260);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(6, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(7, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(7, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(7, 32)), $mul.ref(4, 1)), 32261);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(7, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(8, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(8, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(8, 32)), $mul.ref(4, 1)), 32262);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(8, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(9, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(9, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(9, 32)), $mul.ref(4, 1)), 32263);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(9, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(10, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(10, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(10, 32)), $mul.ref(4, 1)), 32264);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(10, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(11, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(11, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(11, 32)), $mul.ref(4, 1)), 32265);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(11, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(12, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(12, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(12, 32)), $mul.ref(4, 1)), 32266);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(12, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(13, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(13, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(13, 32)), $mul.ref(4, 1)), 32267);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(13, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(14, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(14, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(14, 32)), $mul.ref(4, 1)), 32268);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(14, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(15, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(15, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(15, 32)), $mul.ref(4, 1)), 32269);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(15, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(16, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(16, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(16, 32)), $mul.ref(4, 1)), 32270);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(16, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(17, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(17, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(17, 32)), $mul.ref(4, 1)), 32271);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(17, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(18, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(18, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(18, 32)), $mul.ref(4, 1)), 32544);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(19, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(19, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(19, 32)), $mul.ref(4, 1)), 32560);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(20, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(20, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(20, 32)), $mul.ref(4, 1)), 32512);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(20, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(21, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(21, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(21, 32)), $mul.ref(4, 1)), 32513);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(21, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(21, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(22, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(22, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(22, 32)), $mul.ref(4, 1)), 32514);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(22, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(22, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(23, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(23, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(23, 32)), $mul.ref(4, 1)), 32515);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(23, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(23, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(24, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(24, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(24, 32)), $mul.ref(4, 1)), 32516);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(24, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(24, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(25, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(25, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(25, 32)), $mul.ref(4, 1)), 32517);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(25, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(25, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(26, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(26, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(26, 32)), $mul.ref(4, 1)), 32518);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(26, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(26, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(27, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(27, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(27, 32)), $mul.ref(4, 1)), 32519);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(27, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(27, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(27, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(28, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(28, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(28, 32)), $mul.ref(4, 1)), 32520);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(28, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(28, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(28, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(28, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(29, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(29, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(29, 32)), $mul.ref(4, 1)), 32521);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(29, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(29, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(29, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(29, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(30, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(30, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(30, 32)), $mul.ref(4, 1)), 32522);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(30, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(30, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(30, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(30, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(30, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(30, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(30, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(30, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(30, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(30, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(31, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(31, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(31, 32)), $mul.ref(4, 1)), 32523);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(31, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(31, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(31, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(31, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(31, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(31, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(31, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(31, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(31, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(31, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(32, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(32, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(32, 32)), $mul.ref(4, 1)), 32524);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(32, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(32, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(32, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(32, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(32, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(32, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(32, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(32, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(32, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(32, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(33, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(33, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(33, 32)), $mul.ref(4, 1)), 32525);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(33, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(33, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(33, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(33, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(33, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(33, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(33, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(33, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(33, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(33, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(34, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(34, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(34, 32)), $mul.ref(4, 1)), 32526);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(34, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(34, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(34, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(34, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(34, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(34, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(34, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(34, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(34, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(34, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(35, 32)), $mul.ref(0, 1)), 131);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(35, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(35, 32)), $mul.ref(4, 1)), 32527);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(35, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(35, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(35, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(35, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(35, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(35, 32)), $mul.ref(13, 1)), 10);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(35, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(35, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(35, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(35, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(36, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(36, 32)), $mul.ref(2, 1)), 4214);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(36, 32)), $mul.ref(4, 1)), 29199);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(36, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(36, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(36, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(36, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(36, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(36, 32)), $mul.ref(13, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(36, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(36, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(36, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(36, 32)), $mul.ref(24, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(37, 32)), $mul.ref(0, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(37, 32)), $mul.ref(2, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(37, 32)), $mul.ref(4, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(37, 32)), $mul.ref(6, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(37, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(37, 32)), $mul.ref(10, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(37, 32)), $mul.ref(11, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(37, 32)), $mul.ref(12, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(37, 32)), $mul.ref(13, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(37, 32)), $mul.ref(14, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(37, 32)), $mul.ref(15, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(37, 32)), $mul.ref(16, 1)), 0);
    $M.75 := $store.i64($M.75, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 1216)), $mul.ref(37, 32)), $mul.ref(24, 1)), 0);
    $M.76 := $store.ref($M.76, gdm_usb_driver, .str.85);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), gdm_usb_probe);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), gdm_usb_disconnect);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), gdm_suspend);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), gdm_resume);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), gdm_resume);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), id_table);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.76 := $store.i64($M.76, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(gdm_usb_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 2);
    call {:si_unique_call 1519} {:cexpr "k_mode_stop"} boogie_si_record_i32(0);
    $M.0 := $store.i32($M.0, k_wait, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(k_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(k_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(k_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(k_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(k_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(k_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(k_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.81);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(k_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(k_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(k_wait, $mul.ref(0, 88)), $mul.ref(72, 1)), $mul.ref(0, 1)), $add.ref(k_wait, $mul.ref(72, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(k_wait, $mul.ref(0, 88)), $mul.ref(72, 1)), $mul.ref(8, 1)), $add.ref(k_wait, $mul.ref(72, 1)));
    $M.0 := $store.ref($M.0, k_list, k_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(k_list, $mul.ref(0, 16)), $mul.ref(8, 1)), k_list);
    $M.0 := $store.i32($M.0, k_lock, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(k_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(k_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(k_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(k_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(k_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(k_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(k_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.80);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(k_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(k_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, netlink_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.63);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(netlink_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(netlink_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(112, 1)), netlink_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.64);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, wm_event, 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(16, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(120, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, gdm_wimax_macaddr, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(gdm_wimax_macaddr, $mul.ref(0, 6)), $mul.ref(1, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(gdm_wimax_macaddr, $mul.ref(0, 6)), $mul.ref(2, 1)), 59);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(gdm_wimax_macaddr, $mul.ref(0, 6)), $mul.ref(3, 1)), $sub.i8(0, 16));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(gdm_wimax_macaddr, $mul.ref(0, 6)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(gdm_wimax_macaddr, $mul.ref(0, 6)), $mul.ref(5, 1)), 48);
    $M.0 := $store.ref($M.0, gdm_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(16, 1)), gdm_wimax_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(24, 1)), gdm_wimax_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(32, 1)), gdm_wimax_tx);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(64, 1)), gdm_wimax_set_mac_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(80, 1)), gdm_wimax_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(88, 1)), gdm_wimax_set_config);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(128, 1)), gdm_wimax_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 448)), $mul.ref(440, 1)), $0.ref);
    $M.24 := $0.ref;
    $M.0 := $store.ref($M.0, qos_free_list, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qos_free_list, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.40 := $0.ref;
    $M.0 := $store.i8($M.0, .str.80, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 7)), $mul.ref(1, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 7)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 7)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 7)), $mul.ref(5, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i8($M.77, .str, 119);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str, $mul.ref(0, 5)), $mul.ref(1, 1)), 109);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str, $mul.ref(0, 5)), $mul.ref(2, 1)), 37);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 6)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 6)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 6)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 6)), $mul.ref(4, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.33, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 7)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 7)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 7)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 7)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 7)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    call {:si_unique_call 1520} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 471346);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref, arg4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.16, $M.18, $CurrAddr, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref, arg4: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(gdm_usb_send, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 1521} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 1522} $i2 := gdm_usb_send(arg, arg1, arg2, arg3, arg4);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    $r := $i2;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 472378);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 473410);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1523} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 474442);

procedure devirtbounce.3(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.42, $M.15, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.43, $CurrAddr, $M.28, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed, $M.19;



implementation devirtbounce.3(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(gdm_usb_send_complete, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i16 == 1);
    $i15 := $eq.ref(gdm_usb_rcv_complete, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i15 == 1);
    $i14 := $eq.ref(netlink_rcv, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i14 == 1);
    $i13 := $eq.ref(__gdm_wimax_event_send, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i13 == 1);
    $i12 := $eq.ref(ether_setup, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i12 == 1);
    $i11 := $eq.ref(do_pm_control, $p0);
    assume {:branchcond $i11} true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i11 == 1);
    $i10 := $eq.ref(gdm_usb_disconnect, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i10 == 1);
    $i9 := $eq.ref(sock_wfree, $p0);
    assume {:branchcond $i9} true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i9 == 1);
    $i8 := $eq.ref(tx_complete, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1524} tx_complete($p1);
    return;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 1525} sock_wfree(arg);
    return;

  $bb4:
    assume $i10 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1526} gdm_usb_disconnect($p2);
    return;

  $bb5:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1527} do_pm_control($p3);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1528} ether_setup($p4);
    return;

  $bb7:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1529} __gdm_wimax_event_send($p5);
    return;

  $bb8:
    assume $i14 == 1;
    call {:si_unique_call 1530} netlink_rcv(arg);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i15 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1531} gdm_usb_rcv_complete($p6);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1532} gdm_usb_send_complete($p7);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 475474);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 476506);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 477538);

procedure devirtbounce.6(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.16, $M.18, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, $M.19, assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i22 := $eq.ref(do_pm_control, $p0);
    assume {:branchcond $i22} true;
    goto $bb35, $bb33;

  $bb33:
    assume !($i22 == 1);
    $i21 := $eq.ref(netlink_rcv, $p0);
    assume true;
    goto $bb34, $bb31;

  $bb31:
    assume !($i21 == 1);
    $i20 := $eq.ref(gdm_usb_rcv_complete, $p0);
    assume true;
    goto $bb32, $bb29;

  $bb29:
    assume !($i20 == 1);
    $i19 := $eq.ref(gdm_usb_send_complete, $p0);
    assume true;
    goto $bb30, $bb28;

  $bb28:
    assume !($i19 == 1);
    $i18 := $eq.ref(__gdm_wimax_event_send, $p0);
    assume {:branchcond $i18} true;
    goto $bb10, $bb27;

  $bb27:
    assume !($i18 == 1);
    $i17 := $eq.ref(ether_setup, $p0);
    assume true;
    goto $bb9, $bb26;

  $bb26:
    assume !($i17 == 1);
    $i16 := $eq.ref(gdm_usb_disconnect, $p0);
    assume true;
    goto $bb8, $bb25;

  $bb25:
    assume !($i16 == 1);
    $i15 := $eq.ref(sock_wfree, $p0);
    assume true;
    goto $bb7, $bb23;

  $bb23:
    assume !($i15 == 1);
    $i14 := $eq.ref(do_pm_control, $p0);
    assume true;
    goto $bb24, $bb21;

  $bb21:
    assume !($i14 == 1);
    $i13 := $eq.ref(netlink_rcv, $p0);
    assume true;
    goto $bb22, $bb19;

  $bb19:
    assume !($i13 == 1);
    $i12 := $eq.ref(gdm_usb_rcv_complete, $p0);
    assume true;
    goto $bb20, $bb17;

  $bb17:
    assume !($i12 == 1);
    $i11 := $eq.ref(gdm_usb_send_complete, $p0);
    assume {:branchcond $i11} true;
    goto $bb18, $bb16;

  $bb16:
    assume !($i11 == 1);
    $i10 := $eq.ref(tx_complete, $p0);
    assume true;
    goto $bb2, $bb15;

  $bb15:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1533} tx_complete($p1);
    return;

  $bb18:
    assume $i11 == 1;
    goto $bb11;

  $bb11:
    call {:si_unique_call 1542} gdm_usb_send_complete(arg);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    call {:si_unique_call 1543} gdm_usb_rcv_complete(arg);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i13 == 1;
    goto $bb13;

  $bb13:
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1544} netlink_rcv($p8);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i14 == 1;
    goto $bb14;

  $bb14:
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1545} do_pm_control($p9);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1538} sock_wfree($p4);
    return;

  $bb8:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1539} gdm_usb_disconnect($p5);
    return;

  $bb9:
    assume $i17 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1540} ether_setup($p6);
    return;

  $bb10:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1541} __gdm_wimax_event_send($p7);
    return;

  $bb30:
    assume $i19 == 1;
    goto $bb11;

  $bb32:
    assume $i20 == 1;
    goto $bb12;

  $bb34:
    assume $i21 == 1;
    goto $bb13;

  $bb35:
    assume $i22 == 1;
    goto $bb14;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 478570);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(gdm_usb_receive, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 1546} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 1547} $i2 := gdm_usb_receive(arg, arg1, arg2);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    $r := $i2;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 479602);

procedure devirtbounce.8(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1548} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 480634);

procedure devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 481666);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i16, arg2: ref, arg3: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.16, $M.18, $CurrAddr, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i16, arg2: ref, arg3: i32)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(gdm_wimax_event_rcv, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1549} gdm_wimax_event_rcv(arg, arg1, arg2, arg3);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 482698);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 483730);

procedure devirtbounce.12(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.42, $M.15, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.43, $CurrAddr, $M.28, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed, $M.19;



implementation devirtbounce.12(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i17 := $eq.ref(gdm_usb_send_complete, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i17 == 1);
    $i16 := $eq.ref(gdm_usb_rcv_complete, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i16 == 1);
    $i15 := $eq.ref(netlink_rcv, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(__gdm_wimax_event_send, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i14 == 1);
    $i13 := $eq.ref(ether_setup, $p0);
    assume true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(do_pm_control, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i12 == 1);
    $i11 := $eq.ref(gdm_usb_disconnect, $p0);
    assume {:branchcond $i11} true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i11 == 1);
    $i10 := $eq.ref(sock_wfree, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i10 == 1);
    $i9 := $eq.ref(tx_complete, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    call {:si_unique_call 1550} tx_complete(arg);
    return;

  $bb3:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1551} sock_wfree($p1);
    return;

  $bb4:
    assume $i11 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1552} gdm_usb_disconnect($p2);
    return;

  $bb5:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1553} do_pm_control($p3);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1554} ether_setup($p4);
    return;

  $bb7:
    assume $i14 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1555} __gdm_wimax_event_send($p5);
    return;

  $bb8:
    assume $i15 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1556} netlink_rcv($p6);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1557} gdm_usb_rcv_complete($p7);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i17 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1558} gdm_usb_send_complete($p8);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 484762);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.31, $M.32, $M.16, $M.18, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.15, $M.19, $M.42, $M.28, $M.43, $M.23, $M.22, $M.21, assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: i32)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(rx_complete, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    $i1 := $eq.ref(prepare_rx_complete, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1559} prepare_rx_complete(arg, arg1, arg2);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 1560} rx_complete(arg, arg1, arg2);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.33, $M.23, $M.46, $M.47, $M.48, $M.49, $M.50, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.43, $M.60, $M.20, $M.15, $M.21, $M.22, $M.16, $M.18, $M.17, $M.19, $M.75, $M.76, $M.0, $M.24, $M.40, $M.77, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1561} __SMACK_static_init();
    call {:si_unique_call 1562} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.51, $M.52, $M.49, $M.53, $M.23, $M.0, $M.54, $M.55, $M.14, $M.56, $M.57, $M.58, $M.46, $M.1, $M.47, $M.48, $M.33, $M.50, $M.43, $M.60, $M.20, $M.15, $M.21, $M.22, $M.16, $M.18, $M.17, $M.19, $M.75, $M.76, $M.24, $M.40, $M.77, $CurrAddr, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.44, $M.45, $M.29, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.28, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.42, $M.30, $M.31, $M.32;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation gdm_qos_release_list_loop_$bb146(in_$p1: ref, in_$i434: i64, in_$p436: ref, in_$p437: ref, in_$p438: ref, in_$p440: ref, in_$p441: ref, in_$p443: ref, in_$i444: i64, in_$i445: i1) returns (out_$p436: ref, out_$p437: ref, out_$p438: ref, out_$p440: ref, out_$p441: ref, out_$p443: ref, out_$i444: i64, out_$i445: i1)
{

  entry:
    out_$p436, out_$p437, out_$p438, out_$p440, out_$p441, out_$p443, out_$i444, out_$i445 := in_$p436, in_$p437, in_$p438, in_$p440, in_$p441, in_$p443, in_$i444, in_$i445;
    goto $bb146, exit;

  $bb146:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_959;

  $bb148:
    assume out_$i445 == 1;
    assume {:verifier.code 0} true;
    out_$p436, out_$p437 := out_$p441, out_$p436;
    goto $bb148_dummy;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    out_$i445 := $ne.i64(out_$i444, in_$i434);
    goto corral_source_split_968;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    out_$i444 := $p2i.ref.i64(out_$p443);
    goto corral_source_split_967;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    out_$p443 := $add.ref($add.ref(out_$p436, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_966;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    goto corral_source_split_965;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    out_$p441 := $load.ref($M.0, out_$p440);
    goto corral_source_split_964;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    out_$p440 := $add.ref($add.ref($add.ref(out_$p436, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_963;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} list_move_tail(out_$p438, in_$p1);
    goto corral_source_split_962;

  $bb147:
    assume {:verifier.code 0} true;
    out_$p438 := $add.ref($add.ref(out_$p437, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb148_dummy:
    call {:si_unique_call 1} out_$p436, out_$p437, out_$p438, out_$p440, out_$p441, out_$p443, out_$i444, out_$i445 := gdm_qos_release_list_loop_$bb146(in_$p1, in_$i434, out_$p436, out_$p437, out_$p438, out_$p440, out_$p441, out_$p443, out_$i444, out_$i445);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb146(in_$p1: ref, in_$i434: i64, in_$p436: ref, in_$p437: ref, in_$p438: ref, in_$p440: ref, in_$p441: ref, in_$p443: ref, in_$i444: i64, in_$i445: i1) returns (out_$p436: ref, out_$p437: ref, out_$p438: ref, out_$p440: ref, out_$p441: ref, out_$p443: ref, out_$i444: i64, out_$i445: i1);



implementation gdm_qos_release_list_loop_$bb137(in_$p1: ref, in_$i407: i64, in_$p409: ref, in_$p410: ref, in_$p411: ref, in_$p413: ref, in_$p414: ref, in_$p416: ref, in_$i417: i64, in_$i418: i1) returns (out_$p409: ref, out_$p410: ref, out_$p411: ref, out_$p413: ref, out_$p414: ref, out_$p416: ref, out_$i417: i64, out_$i418: i1)
{

  entry:
    out_$p409, out_$p410, out_$p411, out_$p413, out_$p414, out_$p416, out_$i417, out_$i418 := in_$p409, in_$p410, in_$p411, in_$p413, in_$p414, in_$p416, in_$i417, in_$i418;
    goto $bb137, exit;

  $bb137:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_928;

  $bb139:
    assume out_$i418 == 1;
    assume {:verifier.code 0} true;
    out_$p409, out_$p410 := out_$p414, out_$p409;
    goto $bb139_dummy;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    out_$i418 := $ne.i64(out_$i417, in_$i407);
    goto corral_source_split_937;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    out_$i417 := $p2i.ref.i64(out_$p416);
    goto corral_source_split_936;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    out_$p416 := $add.ref($add.ref(out_$p409, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    goto corral_source_split_934;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$p414 := $load.ref($M.0, out_$p413);
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$p413 := $add.ref($add.ref($add.ref(out_$p409, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} list_move_tail(out_$p411, in_$p1);
    goto corral_source_split_931;

  $bb138:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref($add.ref(out_$p410, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_930;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb139_dummy:
    call {:si_unique_call 1} out_$p409, out_$p410, out_$p411, out_$p413, out_$p414, out_$p416, out_$i417, out_$i418 := gdm_qos_release_list_loop_$bb137(in_$p1, in_$i407, out_$p409, out_$p410, out_$p411, out_$p413, out_$p414, out_$p416, out_$i417, out_$i418);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb137(in_$p1: ref, in_$i407: i64, in_$p409: ref, in_$p410: ref, in_$p411: ref, in_$p413: ref, in_$p414: ref, in_$p416: ref, in_$i417: i64, in_$i418: i1) returns (out_$p409: ref, out_$p410: ref, out_$p411: ref, out_$p413: ref, out_$p414: ref, out_$p416: ref, out_$i417: i64, out_$i418: i1);



implementation gdm_qos_release_list_loop_$bb128(in_$p1: ref, in_$i380: i64, in_$p382: ref, in_$p383: ref, in_$p384: ref, in_$p386: ref, in_$p387: ref, in_$p389: ref, in_$i390: i64, in_$i391: i1) returns (out_$p382: ref, out_$p383: ref, out_$p384: ref, out_$p386: ref, out_$p387: ref, out_$p389: ref, out_$i390: i64, out_$i391: i1)
{

  entry:
    out_$p382, out_$p383, out_$p384, out_$p386, out_$p387, out_$p389, out_$i390, out_$i391 := in_$p382, in_$p383, in_$p384, in_$p386, in_$p387, in_$p389, in_$i390, in_$i391;
    goto $bb128, exit;

  $bb128:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_897;

  $bb130:
    assume out_$i391 == 1;
    assume {:verifier.code 0} true;
    out_$p382, out_$p383 := out_$p387, out_$p382;
    goto $bb130_dummy;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$i391 := $ne.i64(out_$i390, in_$i380);
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$i390 := $p2i.ref.i64(out_$p389);
    goto corral_source_split_905;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    out_$p389 := $add.ref($add.ref(out_$p382, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$p387 := $load.ref($M.0, out_$p386);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$p386 := $add.ref($add.ref($add.ref(out_$p382, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} list_move_tail(out_$p384, in_$p1);
    goto corral_source_split_900;

  $bb129:
    assume {:verifier.code 0} true;
    out_$p384 := $add.ref($add.ref(out_$p383, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_899;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb130_dummy:
    call {:si_unique_call 1} out_$p382, out_$p383, out_$p384, out_$p386, out_$p387, out_$p389, out_$i390, out_$i391 := gdm_qos_release_list_loop_$bb128(in_$p1, in_$i380, out_$p382, out_$p383, out_$p384, out_$p386, out_$p387, out_$p389, out_$i390, out_$i391);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb128(in_$p1: ref, in_$i380: i64, in_$p382: ref, in_$p383: ref, in_$p384: ref, in_$p386: ref, in_$p387: ref, in_$p389: ref, in_$i390: i64, in_$i391: i1) returns (out_$p382: ref, out_$p383: ref, out_$p384: ref, out_$p386: ref, out_$p387: ref, out_$p389: ref, out_$i390: i64, out_$i391: i1);



implementation gdm_qos_release_list_loop_$bb119(in_$p1: ref, in_$i353: i64, in_$p355: ref, in_$p356: ref, in_$p357: ref, in_$p359: ref, in_$p360: ref, in_$p362: ref, in_$i363: i64, in_$i364: i1) returns (out_$p355: ref, out_$p356: ref, out_$p357: ref, out_$p359: ref, out_$p360: ref, out_$p362: ref, out_$i363: i64, out_$i364: i1)
{

  entry:
    out_$p355, out_$p356, out_$p357, out_$p359, out_$p360, out_$p362, out_$i363, out_$i364 := in_$p355, in_$p356, in_$p357, in_$p359, in_$p360, in_$p362, in_$i363, in_$i364;
    goto $bb119, exit;

  $bb119:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_866;

  $bb121:
    assume out_$i364 == 1;
    assume {:verifier.code 0} true;
    out_$p355, out_$p356 := out_$p360, out_$p355;
    goto $bb121_dummy;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$i364 := $ne.i64(out_$i363, in_$i353);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$i363 := $p2i.ref.i64(out_$p362);
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p362 := $add.ref($add.ref(out_$p355, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$p360 := $load.ref($M.0, out_$p359);
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$p359 := $add.ref($add.ref($add.ref(out_$p355, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_870;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} list_move_tail(out_$p357, in_$p1);
    goto corral_source_split_869;

  $bb120:
    assume {:verifier.code 0} true;
    out_$p357 := $add.ref($add.ref(out_$p356, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb121_dummy:
    call {:si_unique_call 1} out_$p355, out_$p356, out_$p357, out_$p359, out_$p360, out_$p362, out_$i363, out_$i364 := gdm_qos_release_list_loop_$bb119(in_$p1, in_$i353, out_$p355, out_$p356, out_$p357, out_$p359, out_$p360, out_$p362, out_$i363, out_$i364);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb119(in_$p1: ref, in_$i353: i64, in_$p355: ref, in_$p356: ref, in_$p357: ref, in_$p359: ref, in_$p360: ref, in_$p362: ref, in_$i363: i64, in_$i364: i1) returns (out_$p355: ref, out_$p356: ref, out_$p357: ref, out_$p359: ref, out_$p360: ref, out_$p362: ref, out_$i363: i64, out_$i364: i1);



implementation gdm_qos_release_list_loop_$bb110(in_$p1: ref, in_$i326: i64, in_$p328: ref, in_$p329: ref, in_$p330: ref, in_$p332: ref, in_$p333: ref, in_$p335: ref, in_$i336: i64, in_$i337: i1) returns (out_$p328: ref, out_$p329: ref, out_$p330: ref, out_$p332: ref, out_$p333: ref, out_$p335: ref, out_$i336: i64, out_$i337: i1)
{

  entry:
    out_$p328, out_$p329, out_$p330, out_$p332, out_$p333, out_$p335, out_$i336, out_$i337 := in_$p328, in_$p329, in_$p330, in_$p332, in_$p333, in_$p335, in_$i336, in_$i337;
    goto $bb110, exit;

  $bb110:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_835;

  $bb112:
    assume out_$i337 == 1;
    assume {:verifier.code 0} true;
    out_$p328, out_$p329 := out_$p333, out_$p328;
    goto $bb112_dummy;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    out_$i337 := $ne.i64(out_$i336, in_$i326);
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i336 := $p2i.ref.i64(out_$p335);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$p335 := $add.ref($add.ref(out_$p328, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$p333 := $load.ref($M.0, out_$p332);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$p332 := $add.ref($add.ref($add.ref(out_$p328, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} list_move_tail(out_$p330, in_$p1);
    goto corral_source_split_838;

  $bb111:
    assume {:verifier.code 0} true;
    out_$p330 := $add.ref($add.ref(out_$p329, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb112_dummy:
    call {:si_unique_call 1} out_$p328, out_$p329, out_$p330, out_$p332, out_$p333, out_$p335, out_$i336, out_$i337 := gdm_qos_release_list_loop_$bb110(in_$p1, in_$i326, out_$p328, out_$p329, out_$p330, out_$p332, out_$p333, out_$p335, out_$i336, out_$i337);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb110(in_$p1: ref, in_$i326: i64, in_$p328: ref, in_$p329: ref, in_$p330: ref, in_$p332: ref, in_$p333: ref, in_$p335: ref, in_$i336: i64, in_$i337: i1) returns (out_$p328: ref, out_$p329: ref, out_$p330: ref, out_$p332: ref, out_$p333: ref, out_$p335: ref, out_$i336: i64, out_$i337: i1);



implementation gdm_qos_release_list_loop_$bb101(in_$p1: ref, in_$i299: i64, in_$p301: ref, in_$p302: ref, in_$p303: ref, in_$p305: ref, in_$p306: ref, in_$p308: ref, in_$i309: i64, in_$i310: i1) returns (out_$p301: ref, out_$p302: ref, out_$p303: ref, out_$p305: ref, out_$p306: ref, out_$p308: ref, out_$i309: i64, out_$i310: i1)
{

  entry:
    out_$p301, out_$p302, out_$p303, out_$p305, out_$p306, out_$p308, out_$i309, out_$i310 := in_$p301, in_$p302, in_$p303, in_$p305, in_$p306, in_$p308, in_$i309, in_$i310;
    goto $bb101, exit;

  $bb101:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_804;

  $bb103:
    assume out_$i310 == 1;
    assume {:verifier.code 0} true;
    out_$p301, out_$p302 := out_$p306, out_$p301;
    goto $bb103_dummy;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$i310 := $ne.i64(out_$i309, in_$i299);
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$i309 := $p2i.ref.i64(out_$p308);
    goto corral_source_split_812;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$p308 := $add.ref($add.ref(out_$p301, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto corral_source_split_810;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$p306 := $load.ref($M.0, out_$p305);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref($add.ref(out_$p301, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} list_move_tail(out_$p303, in_$p1);
    goto corral_source_split_807;

  $bb102:
    assume {:verifier.code 0} true;
    out_$p303 := $add.ref($add.ref(out_$p302, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb103_dummy:
    call {:si_unique_call 1} out_$p301, out_$p302, out_$p303, out_$p305, out_$p306, out_$p308, out_$i309, out_$i310 := gdm_qos_release_list_loop_$bb101(in_$p1, in_$i299, out_$p301, out_$p302, out_$p303, out_$p305, out_$p306, out_$p308, out_$i309, out_$i310);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb101(in_$p1: ref, in_$i299: i64, in_$p301: ref, in_$p302: ref, in_$p303: ref, in_$p305: ref, in_$p306: ref, in_$p308: ref, in_$i309: i64, in_$i310: i1) returns (out_$p301: ref, out_$p302: ref, out_$p303: ref, out_$p305: ref, out_$p306: ref, out_$p308: ref, out_$i309: i64, out_$i310: i1);



implementation gdm_qos_release_list_loop_$bb92(in_$p1: ref, in_$i272: i64, in_$p274: ref, in_$p275: ref, in_$p276: ref, in_$p278: ref, in_$p279: ref, in_$p281: ref, in_$i282: i64, in_$i283: i1) returns (out_$p274: ref, out_$p275: ref, out_$p276: ref, out_$p278: ref, out_$p279: ref, out_$p281: ref, out_$i282: i64, out_$i283: i1)
{

  entry:
    out_$p274, out_$p275, out_$p276, out_$p278, out_$p279, out_$p281, out_$i282, out_$i283 := in_$p274, in_$p275, in_$p276, in_$p278, in_$p279, in_$p281, in_$i282, in_$i283;
    goto $bb92, exit;

  $bb92:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_773;

  $bb94:
    assume out_$i283 == 1;
    assume {:verifier.code 0} true;
    out_$p274, out_$p275 := out_$p279, out_$p274;
    goto $bb94_dummy;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i283 := $ne.i64(out_$i282, in_$i272);
    goto corral_source_split_782;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    out_$i282 := $p2i.ref.i64(out_$p281);
    goto corral_source_split_781;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(out_$p274, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_780;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    goto corral_source_split_779;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    out_$p279 := $load.ref($M.0, out_$p278);
    goto corral_source_split_778;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    out_$p278 := $add.ref($add.ref($add.ref(out_$p274, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} list_move_tail(out_$p276, in_$p1);
    goto corral_source_split_776;

  $bb93:
    assume {:verifier.code 0} true;
    out_$p276 := $add.ref($add.ref(out_$p275, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb94_dummy:
    call {:si_unique_call 1} out_$p274, out_$p275, out_$p276, out_$p278, out_$p279, out_$p281, out_$i282, out_$i283 := gdm_qos_release_list_loop_$bb92(in_$p1, in_$i272, out_$p274, out_$p275, out_$p276, out_$p278, out_$p279, out_$p281, out_$i282, out_$i283);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb92(in_$p1: ref, in_$i272: i64, in_$p274: ref, in_$p275: ref, in_$p276: ref, in_$p278: ref, in_$p279: ref, in_$p281: ref, in_$i282: i64, in_$i283: i1) returns (out_$p274: ref, out_$p275: ref, out_$p276: ref, out_$p278: ref, out_$p279: ref, out_$p281: ref, out_$i282: i64, out_$i283: i1);



implementation gdm_qos_release_list_loop_$bb83(in_$p1: ref, in_$i245: i64, in_$p247: ref, in_$p248: ref, in_$p249: ref, in_$p251: ref, in_$p252: ref, in_$p254: ref, in_$i255: i64, in_$i256: i1) returns (out_$p247: ref, out_$p248: ref, out_$p249: ref, out_$p251: ref, out_$p252: ref, out_$p254: ref, out_$i255: i64, out_$i256: i1)
{

  entry:
    out_$p247, out_$p248, out_$p249, out_$p251, out_$p252, out_$p254, out_$i255, out_$i256 := in_$p247, in_$p248, in_$p249, in_$p251, in_$p252, in_$p254, in_$i255, in_$i256;
    goto $bb83, exit;

  $bb83:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_742;

  $bb85:
    assume out_$i256 == 1;
    assume {:verifier.code 0} true;
    out_$p247, out_$p248 := out_$p252, out_$p247;
    goto $bb85_dummy;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    out_$i256 := $ne.i64(out_$i255, in_$i245);
    goto corral_source_split_751;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$i255 := $p2i.ref.i64(out_$p254);
    goto corral_source_split_750;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$p254 := $add.ref($add.ref(out_$p247, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    goto corral_source_split_748;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    out_$p252 := $load.ref($M.0, out_$p251);
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref($add.ref(out_$p247, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} list_move_tail(out_$p249, in_$p1);
    goto corral_source_split_745;

  $bb84:
    assume {:verifier.code 0} true;
    out_$p249 := $add.ref($add.ref(out_$p248, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_744;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb85_dummy:
    call {:si_unique_call 1} out_$p247, out_$p248, out_$p249, out_$p251, out_$p252, out_$p254, out_$i255, out_$i256 := gdm_qos_release_list_loop_$bb83(in_$p1, in_$i245, out_$p247, out_$p248, out_$p249, out_$p251, out_$p252, out_$p254, out_$i255, out_$i256);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb83(in_$p1: ref, in_$i245: i64, in_$p247: ref, in_$p248: ref, in_$p249: ref, in_$p251: ref, in_$p252: ref, in_$p254: ref, in_$i255: i64, in_$i256: i1) returns (out_$p247: ref, out_$p248: ref, out_$p249: ref, out_$p251: ref, out_$p252: ref, out_$p254: ref, out_$i255: i64, out_$i256: i1);



implementation gdm_qos_release_list_loop_$bb74(in_$p1: ref, in_$i218: i64, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$p224: ref, in_$p225: ref, in_$p227: ref, in_$i228: i64, in_$i229: i1) returns (out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$p224: ref, out_$p225: ref, out_$p227: ref, out_$i228: i64, out_$i229: i1)
{

  entry:
    out_$p220, out_$p221, out_$p222, out_$p224, out_$p225, out_$p227, out_$i228, out_$i229 := in_$p220, in_$p221, in_$p222, in_$p224, in_$p225, in_$p227, in_$i228, in_$i229;
    goto $bb74, exit;

  $bb74:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_711;

  $bb76:
    assume out_$i229 == 1;
    assume {:verifier.code 0} true;
    out_$p220, out_$p221 := out_$p225, out_$p220;
    goto $bb76_dummy;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    out_$i229 := $ne.i64(out_$i228, in_$i218);
    goto corral_source_split_720;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    out_$i228 := $p2i.ref.i64(out_$p227);
    goto corral_source_split_719;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    out_$p227 := $add.ref($add.ref(out_$p220, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_718;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    goto corral_source_split_717;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    out_$p225 := $load.ref($M.0, out_$p224);
    goto corral_source_split_716;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$p224 := $add.ref($add.ref($add.ref(out_$p220, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_715;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} list_move_tail(out_$p222, in_$p1);
    goto corral_source_split_714;

  $bb75:
    assume {:verifier.code 0} true;
    out_$p222 := $add.ref($add.ref(out_$p221, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb76_dummy:
    call {:si_unique_call 1} out_$p220, out_$p221, out_$p222, out_$p224, out_$p225, out_$p227, out_$i228, out_$i229 := gdm_qos_release_list_loop_$bb74(in_$p1, in_$i218, out_$p220, out_$p221, out_$p222, out_$p224, out_$p225, out_$p227, out_$i228, out_$i229);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb74(in_$p1: ref, in_$i218: i64, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$p224: ref, in_$p225: ref, in_$p227: ref, in_$i228: i64, in_$i229: i1) returns (out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$p224: ref, out_$p225: ref, out_$p227: ref, out_$i228: i64, out_$i229: i1);



implementation gdm_qos_release_list_loop_$bb65(in_$p1: ref, in_$i191: i64, in_$p193: ref, in_$p194: ref, in_$p195: ref, in_$p197: ref, in_$p198: ref, in_$p200: ref, in_$i201: i64, in_$i202: i1) returns (out_$p193: ref, out_$p194: ref, out_$p195: ref, out_$p197: ref, out_$p198: ref, out_$p200: ref, out_$i201: i64, out_$i202: i1)
{

  entry:
    out_$p193, out_$p194, out_$p195, out_$p197, out_$p198, out_$p200, out_$i201, out_$i202 := in_$p193, in_$p194, in_$p195, in_$p197, in_$p198, in_$p200, in_$i201, in_$i202;
    goto $bb65, exit;

  $bb65:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_680;

  $bb67:
    assume out_$i202 == 1;
    assume {:verifier.code 0} true;
    out_$p193, out_$p194 := out_$p198, out_$p193;
    goto $bb67_dummy;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    out_$i202 := $ne.i64(out_$i201, in_$i191);
    goto corral_source_split_689;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$i201 := $p2i.ref.i64(out_$p200);
    goto corral_source_split_688;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(out_$p193, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    goto corral_source_split_686;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    out_$p198 := $load.ref($M.0, out_$p197);
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref($add.ref(out_$p193, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} list_move_tail(out_$p195, in_$p1);
    goto corral_source_split_683;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(out_$p194, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb67_dummy:
    call {:si_unique_call 1} out_$p193, out_$p194, out_$p195, out_$p197, out_$p198, out_$p200, out_$i201, out_$i202 := gdm_qos_release_list_loop_$bb65(in_$p1, in_$i191, out_$p193, out_$p194, out_$p195, out_$p197, out_$p198, out_$p200, out_$i201, out_$i202);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb65(in_$p1: ref, in_$i191: i64, in_$p193: ref, in_$p194: ref, in_$p195: ref, in_$p197: ref, in_$p198: ref, in_$p200: ref, in_$i201: i64, in_$i202: i1) returns (out_$p193: ref, out_$p194: ref, out_$p195: ref, out_$p197: ref, out_$p198: ref, out_$p200: ref, out_$i201: i64, out_$i202: i1);



implementation gdm_qos_release_list_loop_$bb56(in_$p1: ref, in_$i164: i64, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p170: ref, in_$p171: ref, in_$p173: ref, in_$i174: i64, in_$i175: i1) returns (out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p170: ref, out_$p171: ref, out_$p173: ref, out_$i174: i64, out_$i175: i1)
{

  entry:
    out_$p166, out_$p167, out_$p168, out_$p170, out_$p171, out_$p173, out_$i174, out_$i175 := in_$p166, in_$p167, in_$p168, in_$p170, in_$p171, in_$p173, in_$i174, in_$i175;
    goto $bb56, exit;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_649;

  $bb58:
    assume out_$i175 == 1;
    assume {:verifier.code 0} true;
    out_$p166, out_$p167 := out_$p171, out_$p166;
    goto $bb58_dummy;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    out_$i175 := $ne.i64(out_$i174, in_$i164);
    goto corral_source_split_658;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    out_$i174 := $p2i.ref.i64(out_$p173);
    goto corral_source_split_657;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(out_$p166, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_656;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    goto corral_source_split_655;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    out_$p171 := $load.ref($M.0, out_$p170);
    goto corral_source_split_654;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref($add.ref(out_$p166, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_653;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} list_move_tail(out_$p168, in_$p1);
    goto corral_source_split_652;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(out_$p167, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_651;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb58_dummy:
    call {:si_unique_call 1} out_$p166, out_$p167, out_$p168, out_$p170, out_$p171, out_$p173, out_$i174, out_$i175 := gdm_qos_release_list_loop_$bb56(in_$p1, in_$i164, out_$p166, out_$p167, out_$p168, out_$p170, out_$p171, out_$p173, out_$i174, out_$i175);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb56(in_$p1: ref, in_$i164: i64, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p170: ref, in_$p171: ref, in_$p173: ref, in_$i174: i64, in_$i175: i1) returns (out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p170: ref, out_$p171: ref, out_$p173: ref, out_$i174: i64, out_$i175: i1);



implementation gdm_qos_release_list_loop_$bb47(in_$p1: ref, in_$i137: i64, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p143: ref, in_$p144: ref, in_$p146: ref, in_$i147: i64, in_$i148: i1) returns (out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p143: ref, out_$p144: ref, out_$p146: ref, out_$i147: i64, out_$i148: i1)
{

  entry:
    out_$p139, out_$p140, out_$p141, out_$p143, out_$p144, out_$p146, out_$i147, out_$i148 := in_$p139, in_$p140, in_$p141, in_$p143, in_$p144, in_$p146, in_$i147, in_$i148;
    goto $bb47, exit;

  $bb47:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_618;

  $bb49:
    assume out_$i148 == 1;
    assume {:verifier.code 0} true;
    out_$p139, out_$p140 := out_$p144, out_$p139;
    goto $bb49_dummy;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    out_$i148 := $ne.i64(out_$i147, in_$i137);
    goto corral_source_split_627;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    out_$i147 := $p2i.ref.i64(out_$p146);
    goto corral_source_split_626;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(out_$p139, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_625;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    goto corral_source_split_624;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    out_$p144 := $load.ref($M.0, out_$p143);
    goto corral_source_split_623;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($add.ref(out_$p139, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_622;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} list_move_tail(out_$p141, in_$p1);
    goto corral_source_split_621;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(out_$p140, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_620;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb49_dummy:
    call {:si_unique_call 1} out_$p139, out_$p140, out_$p141, out_$p143, out_$p144, out_$p146, out_$i147, out_$i148 := gdm_qos_release_list_loop_$bb47(in_$p1, in_$i137, out_$p139, out_$p140, out_$p141, out_$p143, out_$p144, out_$p146, out_$i147, out_$i148);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb47(in_$p1: ref, in_$i137: i64, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p143: ref, in_$p144: ref, in_$p146: ref, in_$i147: i64, in_$i148: i1) returns (out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p143: ref, out_$p144: ref, out_$p146: ref, out_$i147: i64, out_$i148: i1);



implementation gdm_qos_release_list_loop_$bb38(in_$p1: ref, in_$i110: i64, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p116: ref, in_$p117: ref, in_$p119: ref, in_$i120: i64, in_$i121: i1) returns (out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p116: ref, out_$p117: ref, out_$p119: ref, out_$i120: i64, out_$i121: i1)
{

  entry:
    out_$p112, out_$p113, out_$p114, out_$p116, out_$p117, out_$p119, out_$i120, out_$i121 := in_$p112, in_$p113, in_$p114, in_$p116, in_$p117, in_$p119, in_$i120, in_$i121;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_587;

  $bb40:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$p112, out_$p113 := out_$p117, out_$p112;
    goto $bb40_dummy;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i64(out_$i120, in_$i110);
    goto corral_source_split_596;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    out_$i120 := $p2i.ref.i64(out_$p119);
    goto corral_source_split_595;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p112, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_594;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_592;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_591;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} list_move_tail(out_$p114, in_$p1);
    goto corral_source_split_590;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p113, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_589;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb40_dummy:
    call {:si_unique_call 1} out_$p112, out_$p113, out_$p114, out_$p116, out_$p117, out_$p119, out_$i120, out_$i121 := gdm_qos_release_list_loop_$bb38(in_$p1, in_$i110, out_$p112, out_$p113, out_$p114, out_$p116, out_$p117, out_$p119, out_$i120, out_$i121);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb38(in_$p1: ref, in_$i110: i64, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p116: ref, in_$p117: ref, in_$p119: ref, in_$i120: i64, in_$i121: i1) returns (out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p116: ref, out_$p117: ref, out_$p119: ref, out_$i120: i64, out_$i121: i1);



implementation gdm_qos_release_list_loop_$bb29(in_$p1: ref, in_$i83: i64, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p89: ref, in_$p90: ref, in_$p92: ref, in_$i93: i64, in_$i94: i1) returns (out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p89: ref, out_$p90: ref, out_$p92: ref, out_$i93: i64, out_$i94: i1)
{

  entry:
    out_$p85, out_$p86, out_$p87, out_$p89, out_$p90, out_$p92, out_$i93, out_$i94 := in_$p85, in_$p86, in_$p87, in_$p89, in_$p90, in_$p92, in_$i93, in_$i94;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_556;

  $bb31:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    out_$p85, out_$p86 := out_$p90, out_$p85;
    goto $bb31_dummy;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i64(out_$i93, in_$i83);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$i93 := $p2i.ref.i64(out_$p92);
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p85, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, out_$p89);
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(out_$p85, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} list_move_tail(out_$p87, in_$p1);
    goto corral_source_split_559;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p86, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p85, out_$p86, out_$p87, out_$p89, out_$p90, out_$p92, out_$i93, out_$i94 := gdm_qos_release_list_loop_$bb29(in_$p1, in_$i83, out_$p85, out_$p86, out_$p87, out_$p89, out_$p90, out_$p92, out_$i93, out_$i94);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb29(in_$p1: ref, in_$i83: i64, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p89: ref, in_$p90: ref, in_$p92: ref, in_$i93: i64, in_$i94: i1) returns (out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p89: ref, out_$p90: ref, out_$p92: ref, out_$i93: i64, out_$i94: i1);



implementation gdm_qos_release_list_loop_$bb20(in_$p1: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$p65: ref, in_$i66: i64, in_$i67: i1) returns (out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$p65: ref, out_$i66: i64, out_$i67: i1)
{

  entry:
    out_$p58, out_$p59, out_$p60, out_$p62, out_$p63, out_$p65, out_$i66, out_$i67 := in_$p58, in_$p59, in_$p60, in_$p62, in_$p63, in_$p65, in_$i66, in_$i67;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  $bb22:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    out_$p58, out_$p59 := out_$p63, out_$p58;
    goto $bb22_dummy;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i64(out_$i66, in_$i56);
    goto corral_source_split_534;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    out_$i66 := $p2i.ref.i64(out_$p65);
    goto corral_source_split_533;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p58, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_532;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    goto corral_source_split_531;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_530;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(out_$p58, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_529;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} list_move_tail(out_$p60, in_$p1);
    goto corral_source_split_528;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_527;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p58, out_$p59, out_$p60, out_$p62, out_$p63, out_$p65, out_$i66, out_$i67 := gdm_qos_release_list_loop_$bb20(in_$p1, in_$i56, out_$p58, out_$p59, out_$p60, out_$p62, out_$p63, out_$p65, out_$i66, out_$i67);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb20(in_$p1: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$p65: ref, in_$i66: i64, in_$i67: i1) returns (out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$p65: ref, out_$i66: i64, out_$i67: i1);



implementation gdm_qos_release_list_loop_$bb10(in_$p1: ref, in_$i28: i64, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p30: ref, in_$p31: ref) returns (out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p30: ref, out_$p31: ref)
{

  entry:
    out_$p32, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p30, out_$p31 := in_$p32, in_$p34, in_$p35, in_$p37, in_$i38, in_$i39, in_$p30, in_$p31;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_490;

  $bb12:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$p30, out_$p31 := out_$p35, out_$p30;
    goto $bb12_dummy;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, in_$i28);
    goto corral_source_split_499;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_498;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p30, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_497;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    goto corral_source_split_496;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_494;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} list_move_tail(out_$p32, in_$p1);
    goto corral_source_split_493;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_492;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p32, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p30, out_$p31 := gdm_qos_release_list_loop_$bb10(in_$p1, in_$i28, out_$p32, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p30, out_$p31);
    return;

  exit:
    return;
}



procedure gdm_qos_release_list_loop_$bb10(in_$p1: ref, in_$i28: i64, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p30: ref, in_$p31: ref) returns (out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p30: ref, out_$p31: ref);



implementation free_qos_entry_list_loop_$bb4(in_$i11: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i27: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$p21: ref, out_$p22: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i27: i32)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$p24, out_$i25, out_$i26, out_$i14, out_$p15, out_$p16, out_$i27 := in_$p17, in_$p18, in_$i19, in_$p21, in_$p22, in_$p24, in_$i25, in_$i26, in_$i14, in_$p15, in_$p16, in_$i27;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1159;

  $bb6:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$p15, out_$p16 := out_$i19, out_$p16, out_$p22;
    goto $bb6_dummy;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i19;
    assume true;
    goto $bb6;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, in_$i11);
    goto corral_source_split_1171;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_1170;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p16, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1169;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    goto corral_source_split_1168;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_1167;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1166;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i14, 1);
    call {:si_unique_call 156} {:cexpr "total_free"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_1165;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} kfree(out_$p18);
    goto corral_source_split_1164;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_1163;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} list_del(out_$p17);
    goto corral_source_split_1162;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p15, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1161;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$p24, out_$i25, out_$i26, out_$i14, out_$p15, out_$p16, out_$i27 := free_qos_entry_list_loop_$bb4(in_$i11, out_$p17, out_$p18, out_$i19, out_$p21, out_$p22, out_$p24, out_$i25, out_$i26, out_$i14, out_$p15, out_$p16, out_$i27);
    return;

  exit:
    return;
}



procedure free_qos_entry_list_loop_$bb4(in_$i11: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i27: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$p21: ref, out_$p22: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i27: i32);



implementation get_qos_index_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i15: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$i22: i64, in_$p25: ref, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i14: i32) returns (out_$i15: i64, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$i22: i64, out_$p25: ref, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i14: i32)
{

  entry:
    out_$i15, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i14 := in_$i15, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p25, in_$i26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i14;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;

  $bb21:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i36;
    goto $bb21_dummy;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    out_$i37 := $ule.i32(out_$i36, 15);
    goto corral_source_split_1588;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i14, 1);
    call {:si_unique_call 239} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_1587;

  $bb13:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i14;
    assume true;
    goto $bb17;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_1583;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} out_$i33 := chk_ipv4_rule(out_$p32, in_$p1, in_$p2);
    call {:si_unique_call 238} {:cexpr "tmp"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_1582;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p30, $mul.ref(out_$i31, 88));
    goto corral_source_split_1581;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i32.i64(out_$i14);
    goto corral_source_split_1580;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_1579;

  $bb14:
    assume out_$i28 == 1;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1));
    goto corral_source_split_1578;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_1576;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(out_$i26);
    goto corral_source_split_1575;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i16($M.0, out_$p25);
    goto corral_source_split_1574;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i32.i64(out_$i14);
    out_$p25 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(out_$i22, 88)), $mul.ref(10, 1));
    goto corral_source_split_1573;

  $bb12:
    assume out_$i21 == 1;
    goto corral_source_split_1572;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_1570;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i8.i32(out_$i19);
    goto corral_source_split_1569;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i8($M.0, out_$p18);
    goto corral_source_split_1568;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i14);
    out_$p18 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(out_$i15, 88)), $mul.ref(0, 1));
    goto corral_source_split_1567;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i15, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i14 := get_qos_index_loop_$bb10(in_$p0, in_$p1, in_$p2, out_$i15, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i14);
    return;

  exit:
    return;
}



procedure get_qos_index_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i15: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$i22: i64, in_$p25: ref, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i14: i32) returns (out_$i15: i64, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$i22: i64, out_$p25: ref, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i14: i32);



implementation {:SIextraRecBound 16} extract_qos_list_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i4: i64, in_$p7: ref, in_$i8: i8, in_$i9: i32, in_$i10: i1, in_$i11: i64, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i26: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i32, in_$i40: i8, in_$i41: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$i54: i32, in_$i55: i1, in_$i3: i32, in_vslice_dummy_var_95: i32) returns (out_$i4: i64, out_$p7: ref, out_$i8: i8, out_$i9: i32, out_$i10: i1, out_$i11: i64, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i26: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i32, out_$i40: i8, out_$i41: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$i54: i32, out_$i55: i1, out_$i3: i32, out_vslice_dummy_var_95: i32)
{

  entry:
    out_$i4, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i54, out_$i55, out_$i3, out_vslice_dummy_var_95 := in_$i4, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p44, in_$p45, in_$p46, in_$i47, in_$p48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i54, in_$i55, in_$i3, in_vslice_dummy_var_95;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1594;

  $bb15:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i54;
    goto $bb15_dummy;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    out_$i55 := $sle.i32(out_$i54, 15);
    goto corral_source_split_1640;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i3, 1);
    call {:si_unique_call 247} {:cexpr "i"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_1639;

  $bb4:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} out_vslice_dummy_var_95 := netdev_warn.ref.ref.i32(out_$p52, .str.72, out_$i3);
    goto corral_source_split_1637;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_1636;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2208)), $mul.ref(0, 1));
    goto corral_source_split_1635;

  $bb9:
    assume out_$i50 == 1;
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 0);
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} out_$i49 := list_empty(out_$p48);
    call {:si_unique_call 245} {:cexpr "tmp"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p46, $mul.ref(out_$i47, 16));
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i3);
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p44, out_$i40);
    out_$p45 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_1627;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i3);
    out_$p44 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(out_$i41, 88)), $mul.ref(8, 1));
    goto corral_source_split_1626;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i32.i8(out_$i39);
    goto corral_source_split_1625;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i38, 1);
    goto corral_source_split_1624;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i37);
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.0, out_$p36);
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i3);
    out_$p36 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(out_$i33, 88)), $mul.ref(8, 1));
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} list_move_tail(out_$p32, in_$p1);
    goto corral_source_split_1620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_1618;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_1617;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i3);
    out_$p29 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1)), $mul.ref(out_$i26, 16)), $mul.ref(8, 1));
    goto corral_source_split_1616;

  $bb7:
    assume out_$i25 == 1;
    goto corral_source_split_1615;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_1613;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} out_$i24 := list_empty(out_$p23);
    call {:si_unique_call 242} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1612;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p21, $mul.ref(out_$i22, 16));
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i3);
    goto corral_source_split_1610;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_1609;

  $bb5:
    assume out_$i19 == 1;
    out_$p20 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(0, 1));
    goto corral_source_split_1608;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$i19 := $ult.i32(out_$i16, out_$i18);
    goto corral_source_split_1606;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_1605;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    out_$p17 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(1744, 1));
    goto corral_source_split_1604;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.0, out_$p14);
    goto corral_source_split_1603;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i3);
    out_$p14 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(out_$i11, 88)), $mul.ref(8, 1));
    goto corral_source_split_1602;

  $bb3:
    assume out_$i10 == 1;
    goto corral_source_split_1601;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_1599;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i8.i32(out_$i8);
    goto corral_source_split_1598;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i8($M.0, out_$p7);
    goto corral_source_split_1597;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i3);
    out_$p7 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(out_$i4, 88)), $mul.ref(0, 1));
    goto corral_source_split_1596;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i4, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i54, out_$i55, out_$i3, out_vslice_dummy_var_95 := extract_qos_list_loop_$bb1(in_$p0, in_$p1, out_$i4, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i54, out_$i55, out_$i3, out_vslice_dummy_var_95);
    return;

  exit:
    return;
}



procedure extract_qos_list_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i4: i64, in_$p7: ref, in_$i8: i8, in_$i9: i32, in_$i10: i1, in_$i11: i64, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i26: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i32, in_$i40: i8, in_$i41: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$i54: i32, in_$i55: i1, in_$i3: i32, in_vslice_dummy_var_95: i32) returns (out_$i4: i64, out_$p7: ref, out_$i8: i8, out_$i9: i32, out_$i10: i1, out_$i11: i64, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i26: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i32, out_$i40: i8, out_$i41: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$i54: i32, out_$i55: i1, out_$i3: i32, out_vslice_dummy_var_95: i32);
  modifies $M.0;



implementation send_qos_list_loop_$bb4(in_$i11: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p13: ref, in_$p14: ref, in_vslice_dummy_var_96: i32) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p13: ref, out_$p14: ref, out_vslice_dummy_var_96: i32)
{

  entry:
    out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p13, out_$p14, out_vslice_dummy_var_96 := in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p21, in_$p23, in_$p24, in_$p26, in_$i27, in_$i28, in_$p13, in_$p14, in_vslice_dummy_var_96;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1656;

  $bb6:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p13, out_$p14 := out_$p24, out_$p13;
    goto $bb6_dummy;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i11);
    goto corral_source_split_1672;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p13, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1670;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_1668;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1667;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} free_qos_entry(out_$p21);
    goto corral_source_split_1666;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_1665;

  SeqInstr_24:
    goto corral_source_split_1664;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} out_vslice_dummy_var_96 := gdm_wimax_send_tx(out_$p17, out_$p19);
    goto SeqInstr_23;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_1663;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1662;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_1661;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1660;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} list_del(out_$p15);
    goto corral_source_split_1659;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1658;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p13, out_$p14, out_vslice_dummy_var_96 := send_qos_list_loop_$bb4(in_$i11, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p13, out_$p14, out_vslice_dummy_var_96);
    return;

  exit:
    return;
}



procedure send_qos_list_loop_$bb4(in_$i11: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p13: ref, in_$p14: ref, in_vslice_dummy_var_96: i32) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p13: ref, out_$p14: ref, out_vslice_dummy_var_96: i32);
  modifies $M.0, $M.28, $M.16, $M.18, $CurrAddr, $M.15, $M.19, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation skb_orphan_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} skb_orphan_loop_$bb6();
    return;

  exit:
    return;
}



procedure skb_orphan_loop_$bb6();



implementation gdm_suspend_loop_$bb8(in_$i22: i64, in_$p25: ref, in_$p26: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p24: ref, in_vslice_dummy_var_104: i32) returns (out_$p25: ref, out_$p26: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p24: ref, out_vslice_dummy_var_104: i32)
{

  entry:
    out_$p25, out_$p26, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p24, out_vslice_dummy_var_104 := in_$p25, in_$p26, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p24, in_vslice_dummy_var_104;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2331;

  $bb10:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p24 := out_$p30;
    goto $bb10_dummy;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i22);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p24, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} out_vslice_dummy_var_104 := usb_unlink_urb(out_$p26);
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_2334;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_2333;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p24, out_vslice_dummy_var_104 := gdm_suspend_loop_$bb8(in_$i22, out_$p25, out_$p26, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p24, out_vslice_dummy_var_104);
    return;

  exit:
    return;
}



procedure gdm_suspend_loop_$bb8(in_$i22: i64, in_$p25: ref, in_$p26: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p24: ref, in_vslice_dummy_var_104: i32) returns (out_$p25: ref, out_$p26: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p24: ref, out_vslice_dummy_var_104: i32);



implementation gdm_resume_loop_$bb8(in_$i19: i64, in_$p22: ref, in_$p23: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p21: ref, in_vslice_dummy_var_105: i32) returns (out_$p22: ref, out_$p23: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p21: ref, out_vslice_dummy_var_105: i32)
{

  entry:
    out_$p22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p21, out_vslice_dummy_var_105 := in_$p22, in_$p23, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p21, in_vslice_dummy_var_105;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2371;

  $bb10:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p21 := out_$p27;
    goto $bb10_dummy;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, in_$i19);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_2378;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2376;

  SeqInstr_39:
    goto corral_source_split_2375;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} out_vslice_dummy_var_105 := ldv_usb_submit_urb_33(out_$p23, 32);
    goto SeqInstr_38;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_2374;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p21, out_vslice_dummy_var_105 := gdm_resume_loop_$bb8(in_$i19, out_$p22, out_$p23, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p21, out_vslice_dummy_var_105);
    return;

  exit:
    return;
}



procedure gdm_resume_loop_$bb8(in_$i19: i64, in_$p22: ref, in_$p23: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p21: ref, in_vslice_dummy_var_105: i32) returns (out_$p22: ref, out_$p23: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p21: ref, out_vslice_dummy_var_105: i32);
  modifies $M.16, $M.18, $M.0, $M.15, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, $M.19, assertsPassed;



implementation ldv_stop___1_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop___1_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop___1_loop_$bb1();



implementation release_usb_loop_$bb36(in_$i107: i64, in_$p111: ref, in_$p113: ref, in_$p114: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p109: ref, in_$p110: ref) returns (out_$p111: ref, out_$p113: ref, out_$p114: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p109: ref, out_$p110: ref)
{

  entry:
    out_$p111, out_$p113, out_$p114, out_$p116, out_$i117, out_$i118, out_$p109, out_$p110 := in_$p111, in_$p113, in_$p114, in_$p116, in_$i117, in_$i118, in_$p109, in_$p110;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2593;

  $bb38:
    assume out_$i118 == 1;
    assume {:verifier.code 0} true;
    out_$p109, out_$p110 := out_$p114, out_$p109;
    goto $bb38_dummy;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i64(out_$i117, in_$i107);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$i117 := $p2i.ref.i64(out_$p116);
    goto corral_source_split_2602;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p109, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    goto corral_source_split_2600;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.0, out_$p113);
    goto corral_source_split_2599;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref($add.ref(out_$p109, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2598;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} free_rx_struct(out_$p110);
    goto corral_source_split_2597;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} list_del(out_$p111);
    goto corral_source_split_2596;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p110, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2595;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p111, out_$p113, out_$p114, out_$p116, out_$i117, out_$i118, out_$p109, out_$p110 := release_usb_loop_$bb36(in_$i107, out_$p111, out_$p113, out_$p114, out_$p116, out_$i117, out_$i118, out_$p109, out_$p110);
    return;

  exit:
    return;
}



procedure release_usb_loop_$bb36(in_$i107: i64, in_$p111: ref, in_$p113: ref, in_$p114: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p109: ref, in_$p110: ref) returns (out_$p111: ref, out_$p113: ref, out_$p114: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p109: ref, out_$p110: ref);
  modifies $M.15;



implementation release_usb_loop_$bb28(in_$i85: i64, in_$p89: ref, in_$p91: ref, in_$p92: ref, in_$i94: i64, in_$i95: i1, in_$p87: ref, in_$p88: ref) returns (out_$p89: ref, out_$p91: ref, out_$p92: ref, out_$i94: i64, out_$i95: i1, out_$p87: ref, out_$p88: ref)
{

  entry:
    out_$p89, out_$p91, out_$p92, out_$i94, out_$i95, out_$p87, out_$p88 := in_$p89, in_$p91, in_$p92, in_$i94, in_$i95, in_$p87, in_$p88;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2567;

  $bb30:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$p87, out_$p88 := out_$p92, out_$p87;
    goto $bb30_dummy;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i64(out_$i94, in_$i85);
    goto corral_source_split_2576;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(out_$p87);
    goto corral_source_split_2575;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    goto corral_source_split_2574;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(out_$p87, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2572;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} free_rx_struct(out_$p88);
    goto corral_source_split_2571;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} list_del(out_$p89);
    goto corral_source_split_2570;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p88, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2569;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p89, out_$p91, out_$p92, out_$i94, out_$i95, out_$p87, out_$p88 := release_usb_loop_$bb28(in_$i85, out_$p89, out_$p91, out_$p92, out_$i94, out_$i95, out_$p87, out_$p88);
    return;

  exit:
    return;
}



procedure release_usb_loop_$bb28(in_$i85: i64, in_$p89: ref, in_$p91: ref, in_$p92: ref, in_$i94: i64, in_$i95: i1, in_$p87: ref, in_$p88: ref) returns (out_$p89: ref, out_$p91: ref, out_$p92: ref, out_$i94: i64, out_$i95: i1, out_$p87: ref, out_$p88: ref);
  modifies $M.15;



implementation release_usb_loop_$bb20(in_$i61: i64, in_$p65: ref, in_$p67: ref, in_$p68: ref, in_$i70: i64, in_$i71: i1, in_$p63: ref, in_$p64: ref) returns (out_$p65: ref, out_$p67: ref, out_$p68: ref, out_$i70: i64, out_$i71: i1, out_$p63: ref, out_$p64: ref)
{

  entry:
    out_$p65, out_$p67, out_$p68, out_$i70, out_$i71, out_$p63, out_$p64 := in_$p65, in_$p67, in_$p68, in_$i70, in_$i71, in_$p63, in_$p64;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2539;

  $bb22:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$p63, out_$p64 := out_$p64, out_$p68;
    goto $bb22_dummy;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, in_$i61);
    goto corral_source_split_2548;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_2547;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    goto corral_source_split_2546;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_2545;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(out_$p64, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2544;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} free_tx_struct(out_$p63);
    goto corral_source_split_2543;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} list_del(out_$p65);
    goto corral_source_split_2542;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p63, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2541;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p65, out_$p67, out_$p68, out_$i70, out_$i71, out_$p63, out_$p64 := release_usb_loop_$bb20(in_$i61, out_$p65, out_$p67, out_$p68, out_$i70, out_$i71, out_$p63, out_$p64);
    return;

  exit:
    return;
}



procedure release_usb_loop_$bb20(in_$i61: i64, in_$p65: ref, in_$p67: ref, in_$p68: ref, in_$i70: i64, in_$i71: i1, in_$p63: ref, in_$p64: ref) returns (out_$p65: ref, out_$p67: ref, out_$p68: ref, out_$i70: i64, out_$i71: i1, out_$p63: ref, out_$p64: ref);
  modifies $M.15;



implementation release_usb_loop_$bb12(in_$i40: i64, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p42: ref, in_$p43: ref) returns (out_$p44: ref, out_$p46: ref, out_$p47: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p42: ref, out_$p43: ref)
{

  entry:
    out_$p44, out_$p46, out_$p47, out_$p49, out_$i50, out_$i51, out_$p42, out_$p43 := in_$p44, in_$p46, in_$p47, in_$p49, in_$i50, in_$i51, in_$p42, in_$p43;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2513;

  $bb14:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$p42, out_$p43 := out_$p43, out_$p47;
    goto $bb14_dummy;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, in_$i40);
    goto corral_source_split_2523;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_2522;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p43, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2521;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    goto corral_source_split_2520;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_2519;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2518;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} free_tx_struct(out_$p42);
    goto corral_source_split_2517;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} list_del(out_$p44);
    goto corral_source_split_2516;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p42, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2515;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p44, out_$p46, out_$p47, out_$p49, out_$i50, out_$i51, out_$p42, out_$p43 := release_usb_loop_$bb12(in_$i40, out_$p44, out_$p46, out_$p47, out_$p49, out_$i50, out_$i51, out_$p42, out_$p43);
    return;

  exit:
    return;
}



procedure release_usb_loop_$bb12(in_$i40: i64, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p42: ref, in_$p43: ref) returns (out_$p44: ref, out_$p46: ref, out_$p47: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p42: ref, out_$p43: ref);
  modifies $M.15;



implementation release_usb_loop_$bb4(in_$i17: i64, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p19: ref, in_$p20: ref) returns (out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p19: ref, out_$p20: ref)
{

  entry:
    out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p19, out_$p20 := in_$p21, in_$p23, in_$p24, in_$p26, in_$i27, in_$i28, in_$p19, in_$p20;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2486;

  $bb6:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p19, out_$p20 := out_$p20, out_$p24;
    goto $bb6_dummy;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i17);
    goto corral_source_split_2496;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p20, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2494;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    goto corral_source_split_2493;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_2492;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2491;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} free_tx_struct(out_$p19);
    goto corral_source_split_2490;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} list_del(out_$p21);
    goto corral_source_split_2489;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2488;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p19, out_$p20 := release_usb_loop_$bb4(in_$i17, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p19, out_$p20);
    return;

  exit:
    return;
}



procedure release_usb_loop_$bb4(in_$i17: i64, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p19: ref, in_$p20: ref) returns (out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p19: ref, out_$p20: ref);
  modifies $M.15;



implementation gdm_wimax_event_exit_loop_$bb16(in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p37: ref, in_$p38: ref) returns (out_$p39: ref, out_$p41: ref, out_$p42: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p37: ref, out_$p38: ref)
{

  entry:
    out_$p39, out_$p41, out_$p42, out_$p44, out_$i45, out_$i46, out_$p37, out_$p38 := in_$p39, in_$p41, in_$p42, in_$p44, in_$i45, in_$i46, in_$p37, in_$p38;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2736;

  $bb18:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$p37, out_$p38 := out_$p38, out_$p42;
    goto $bb18_dummy;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, $p2i.ref.i64($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(104, 1))));
    goto corral_source_split_2746;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p38, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_2744;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_2742;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 2080)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} free_event_entry(out_$p37);
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} list_del(out_$p39);
    goto corral_source_split_2739;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p37, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p39, out_$p41, out_$p42, out_$p44, out_$i45, out_$i46, out_$p37, out_$p38 := gdm_wimax_event_exit_loop_$bb16(out_$p39, out_$p41, out_$p42, out_$p44, out_$i45, out_$i46, out_$p37, out_$p38);
    return;

  exit:
    return;
}



procedure gdm_wimax_event_exit_loop_$bb16(in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p37: ref, in_$p38: ref) returns (out_$p39: ref, out_$p41: ref, out_$p42: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p37: ref, out_$p38: ref);



implementation gdm_wimax_event_exit_loop_$bb8(in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p18: ref, in_$p19: ref) returns (out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p18: ref, out_$p19: ref)
{

  entry:
    out_$p20, out_$p22, out_$p23, out_$p25, out_$i26, out_$i27, out_$p18, out_$p19 := in_$p20, in_$p22, in_$p23, in_$p25, in_$i26, in_$i27, in_$p18, in_$p19;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2711;

  $bb10:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p18, out_$p19 := out_$p19, out_$p23;
    goto $bb10_dummy;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, $p2i.ref.i64($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(16, 1))));
    goto corral_source_split_2721;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_2720;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p19, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 2080)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} free_event_entry(out_$p18);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} list_del(out_$p20);
    goto corral_source_split_2714;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p18, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p20, out_$p22, out_$p23, out_$p25, out_$i26, out_$i27, out_$p18, out_$p19 := gdm_wimax_event_exit_loop_$bb8(out_$p20, out_$p22, out_$p23, out_$p25, out_$i26, out_$i27, out_$p18, out_$p19);
    return;

  exit:
    return;
}



procedure gdm_wimax_event_exit_loop_$bb8(in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p18: ref, in_$p19: ref) returns (out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p18: ref, out_$p19: ref);



implementation usb_boot_loop_$bb21(in_$i1: i16, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p39: ref, in_$i44: i64, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$i69: i1, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$i43: i32, in_$i145: i32, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8) returns (out_$i44: i64, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$i69: i1, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$i43: i32, out_$i145: i32, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8)
{

  entry:
    out_$i44, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i60, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i142, out_$i143, out_$i144, out_$i43, out_$i145, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35 := in_$i44, in_$p46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i60, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$p83, in_$p84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i142, in_$i143, in_$i144, in_$i43, in_$i145, in_cmdloc_dummy_var_30, in_cmdloc_dummy_var_31, in_cmdloc_dummy_var_32, in_cmdloc_dummy_var_33, in_cmdloc_dummy_var_34, in_cmdloc_dummy_var_35;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2935;

  $bb49:
    assume out_$i144 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := out_$i142;
    goto $bb49_dummy;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    out_$i145 := out_$i142;
    assume true;
    goto $bb49;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    out_$i144 := $ult.i32(out_$i142, out_$i143);
    goto corral_source_split_2996;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i32($M.0, in_$p39);
    goto corral_source_split_2995;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i142 := $add.i32(out_$i43, 1);
    call {:si_unique_call 507} {:cexpr "i"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_2994;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i88 == 1;
    goto corral_source_split_2992;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    out_$i89 := out_$i43;
    assume true;
    goto $bb32;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i86, out_$i87);
    goto corral_source_split_2990;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i16.i32(in_$i1);
    goto corral_source_split_2989;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    out_$i86 := $and.i32(out_$i85, 65535);
    goto corral_source_split_2988;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.0, out_$p84);
    goto corral_source_split_2987;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p3, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2986;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} array_le32_to_cpu(out_$p83, 8);
    goto corral_source_split_2985;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2984;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_33 := $M.0;
    out_cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 505} out_cmdloc_dummy_var_35 := $memcpy.i8(out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_$p78, out_$p82, 240, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_35;
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_30 := $M.0;
    out_cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 504} out_cmdloc_dummy_var_32 := $memcpy.i8(out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_$p73, out_$p77, 240, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_32;
    goto corral_source_split_2975;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref(out_$p76, $mul.ref(out_$i64, 1));
    goto corral_source_split_2974;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.27, out_$p75);
    goto corral_source_split_2973;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p74, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2972;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.25, in_$p4);
    goto corral_source_split_2971;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2970;

  $bb29:
    assume out_$i72 == 1;
    goto corral_source_split_2969;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i72 := $ugt.i64(240, 63);
    goto corral_source_split_2967;

  $bb27:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    out_$i69 := $ult.i64(out_$i67, out_$i68);
    goto corral_source_split_2961;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i64(out_$i64, 240);
    goto corral_source_split_2960;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.26, out_$p66);
    goto corral_source_split_2959;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p65, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2958;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.25, in_$p4);
    goto corral_source_split_2957;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i32.i64(out_$i63);
    call {:si_unique_call 502} {:cexpr "pos"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_2956;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_2955;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 140)), $mul.ref(12, 1)), $mul.ref(out_$i60, 4));
    goto corral_source_split_2954;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i43);
    goto corral_source_split_2953;

  $bb24:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i43;
    assume true;
    goto $bb24;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    out_$i50 := $ugt.i32(out_$i47, out_$i49);
    goto corral_source_split_2942;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    goto corral_source_split_2941;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p2, $mul.ref(0, 140)), $mul.ref(8, 1));
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p46);
    goto corral_source_split_2939;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 140)), $mul.ref(12, 1)), $mul.ref(out_$i44, 4));
    goto corral_source_split_2938;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_2937;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(out_$p81, $mul.ref(out_$i64, 1));
    goto corral_source_split_2982;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.27, out_$p80);
    goto corral_source_split_2981;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p79, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2980;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.25, in_$p4);
    goto corral_source_split_2979;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2978;

  $bb30:
    assume !(out_$i72 == 1);
    goto corral_source_split_2977;

  $bb49_dummy:
    call {:si_unique_call 1} out_$i44, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i60, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i142, out_$i143, out_$i144, out_$i43, out_$i145, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35 := usb_boot_loop_$bb21(in_$i1, in_$p2, in_$p3, in_$p4, in_$p39, out_$i44, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i60, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i142, out_$i143, out_$i144, out_$i43, out_$i145, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35);
    return;

  exit:
    return;
}



procedure usb_boot_loop_$bb21(in_$i1: i16, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p39: ref, in_$i44: i64, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$i69: i1, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$i43: i32, in_$i145: i32, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8) returns (out_$i44: i64, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$i69: i1, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$i43: i32, out_$i145: i32, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8);
  modifies $M.0;



implementation gdm_usb_send_loop_$bb32(in_$i99: i64, in_$p102: ref, in_$p103: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$i111: i1, in_$p101: ref, in_vslice_dummy_var_120: i32) returns (out_$p102: ref, out_$p103: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$i111: i1, out_$p101: ref, out_vslice_dummy_var_120: i32)
{

  entry:
    out_$p102, out_$p103, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$p101, out_vslice_dummy_var_120 := in_$p102, in_$p103, in_$p106, in_$p107, in_$p108, in_$p109, in_$i110, in_$i111, in_$p101, in_vslice_dummy_var_120;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3211;

  $bb34:
    assume out_$i111 == 1;
    assume {:verifier.code 0} true;
    out_$p101 := out_$p107;
    goto $bb34_dummy;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i64(out_$i110, in_$i99);
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$i110 := $p2i.ref.i64(out_$p109);
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p108, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3219;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    out_$p108 := $bitcast.ref.ref(out_$p107);
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.0, out_$p106);
    goto corral_source_split_3217;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref($add.ref(out_$p101, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} out_vslice_dummy_var_120 := usb_unlink_urb(out_$p103);
    goto corral_source_split_3215;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    goto corral_source_split_3214;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p101, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p102, out_$p103, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$p101, out_vslice_dummy_var_120 := gdm_usb_send_loop_$bb32(in_$i99, out_$p102, out_$p103, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$p101, out_vslice_dummy_var_120);
    return;

  exit:
    return;
}



procedure gdm_usb_send_loop_$bb32(in_$i99: i64, in_$p102: ref, in_$p103: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$i111: i1, in_$p101: ref, in_vslice_dummy_var_120: i32) returns (out_$p102: ref, out_$p103: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$i111: i1, out_$p101: ref, out_vslice_dummy_var_120: i32);



implementation gdm_usb_send_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} gdm_usb_send_loop_$bb7();
    return;

  exit:
    return;
}



procedure gdm_usb_send_loop_$bb7();



implementation do_pm_control_loop_$bb14(in_$i38: i64, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p40: ref, in_$p41: ref) returns (out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p40: ref, out_$p41: ref)
{

  entry:
    out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p40, out_$p41 := in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p40, in_$p41;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  $bb19:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$p40, out_$p41 := out_$p54, out_$p40;
    goto $bb19_dummy;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, in_$i38);
    goto corral_source_split_3865;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_3864;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p40, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p53, $mul.ref($sub.ref(0, 16), 72));
    goto corral_source_split_3862;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_3861;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_3860;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p40, $mul.ref(0, 72)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3859;

  $bb17:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_66:
    goto corral_source_split_3857;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} __gdm_usb_send_complete(out_$p49);
    goto SeqInstr_65;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p41, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p47, $0.ref);
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p41, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_3853;

  $bb16:
    assume out_$i46 == 1;
    goto corral_source_split_3852;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_3850;

  SeqInstr_63:
    call {:si_unique_call 746} {:cexpr "ret"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3849;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} out_$i45 := ldv_usb_submit_urb_26(out_$p44, 32);
    goto SeqInstr_62;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p41, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} list_del(out_$p42);
    goto corral_source_split_3846;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p40, out_$p41 := do_pm_control_loop_$bb14(in_$i38, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p40, out_$p41);
    return;

  exit:
    return;
}



procedure do_pm_control_loop_$bb14(in_$i38: i64, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p40: ref, in_$p41: ref) returns (out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p40: ref, out_$p41: ref);
  modifies $M.0, $M.15, $M.16, $M.18, $M.42, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $M.43, $CurrAddr, $M.28, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed, $M.19;



implementation gdm_wimax_transmit_aggr_pkt_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$i8: i16, in_$i9: i32, in_$i10: i16, in_$i11: i16, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p22: ref, in_$i23: i16, in_$i24: i32, in_$i25: i16, in_$i26: i16, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i1, in_$p4: ref, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i16, out_$i9: i32, out_$i10: i16, out_$i11: i16, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p22: ref, out_$i23: i16, out_$i24: i32, out_$i25: i16, out_$i26: i16, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i1, out_$p4: ref, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$p4, out_$i5 := in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p14, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$p4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4438;

  $bb13:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$p4, out_$i5 := out_$p39, out_$i37;
    goto $bb13_dummy;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    out_$i40 := $sgt.i32(out_$i37, 0);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p4, $mul.ref(out_$i38, 1));
    goto corral_source_split_4479;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i36);
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i32(out_$i5, out_$i36);
    call {:si_unique_call 896} {:cexpr "len"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_4477;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i35, 8);
    call {:si_unique_call 895} {:cexpr "length"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_4476;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4475;

  $bb11:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := out_$i27;
    goto $bb12;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i34;
    goto $bb12;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i33, out_$i27);
    call {:si_unique_call 894} {:cexpr "length"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_4473;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(4, out_$i32);
    goto corral_source_split_4472;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i27, 3);
    goto corral_source_split_4471;

  $bb10:
    assume out_$i31 == 1;
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_4468;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i32(out_$i27, 3);
    goto corral_source_split_4467;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} gdm_wimax_netif_rx(in_$p0, out_$p29, out_$i27);
    goto corral_source_split_4466;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p6, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_4464;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(out_$i26);
    call {:si_unique_call 892} {:cexpr "length"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_4463;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} out_$i26 := __fswab16(out_$i25);
    call {:si_unique_call 891} {:cexpr "tmp___1"} boogie_si_record_i16(out_$i26);
    goto corral_source_split_4462;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i32.i16(out_$i24);
    goto corral_source_split_4461;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i16.i32(out_$i23);
    goto corral_source_split_4460;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i16($M.0, out_$p22);
    goto corral_source_split_4459;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p6, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4458;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    out_$p14 := out_$p4;
    assume true;
    goto $bb7;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 33283);
    goto corral_source_split_4447;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i16.i32(out_$i11);
    goto corral_source_split_4446;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} out_$i11 := __fswab16(out_$i10);
    call {:si_unique_call 886} {:cexpr "tmp___0"} boogie_si_record_i16(out_$i11);
    goto corral_source_split_4445;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    out_$i10 := $trunc.i32.i16(out_$i9);
    goto corral_source_split_4444;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i16.i32(out_$i8);
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i16($M.0, out_$p7);
    goto corral_source_split_4442;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4441;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_4440;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$p4, out_$i5 := gdm_wimax_transmit_aggr_pkt_loop_$bb4(in_$p0, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$p4, out_$i5);
    return;

  exit:
    return;
}



procedure gdm_wimax_transmit_aggr_pkt_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$i8: i16, in_$i9: i32, in_$i10: i16, in_$i11: i16, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p22: ref, in_$i23: i16, in_$i24: i32, in_$i25: i16, in_$i26: i16, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i1, in_$p4: ref, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i16, out_$i9: i32, out_$i10: i16, out_$i11: i16, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p22: ref, out_$i23: i16, out_$i24: i32, out_$i25: i16, out_$i26: i16, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i1, out_$p4: ref, out_$i5: i32);
  modifies $M.0;



implementation gdm_recv_qos_hci_packet_loop_$bb36(in_$p4: ref, in_$i519: i64, in_$p523: ref, in_$p525: ref, in_$p526: ref, in_$p528: ref, in_$i529: i64, in_$i530: i1, in_$p521: ref, in_$p522: ref) returns (out_$p523: ref, out_$p525: ref, out_$p526: ref, out_$p528: ref, out_$i529: i64, out_$i530: i1, out_$p521: ref, out_$p522: ref)
{

  entry:
    out_$p523, out_$p525, out_$p526, out_$p528, out_$i529, out_$i530, out_$p521, out_$p522 := in_$p523, in_$p525, in_$p526, in_$p528, in_$i529, in_$i530, in_$p521, in_$p522;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4987;

  $bb38:
    assume out_$i530 == 1;
    assume {:verifier.code 0} true;
    out_$p521, out_$p522 := out_$p526, out_$p521;
    goto $bb38_dummy;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$i530 := $ne.i64(out_$i529, in_$i519);
    goto corral_source_split_4996;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    out_$i529 := $p2i.ref.i64(out_$p528);
    goto corral_source_split_4995;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    out_$p528 := $add.ref($add.ref(out_$p521, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$p526 := $load.ref($M.0, out_$p525);
    goto corral_source_split_4992;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    out_$p525 := $add.ref($add.ref($add.ref(out_$p521, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4991;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} list_move_tail(out_$p523, in_$p4);
    goto corral_source_split_4990;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p523 := $add.ref($add.ref(out_$p522, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4989;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p523, out_$p525, out_$p526, out_$p528, out_$i529, out_$i530, out_$p521, out_$p522 := gdm_recv_qos_hci_packet_loop_$bb36(in_$p4, in_$i519, out_$p523, out_$p525, out_$p526, out_$p528, out_$i529, out_$i530, out_$p521, out_$p522);
    return;

  exit:
    return;
}



procedure gdm_recv_qos_hci_packet_loop_$bb36(in_$p4: ref, in_$i519: i64, in_$p523: ref, in_$p525: ref, in_$p526: ref, in_$p528: ref, in_$i529: i64, in_$i530: i1, in_$p521: ref, in_$p522: ref) returns (out_$p523: ref, out_$p525: ref, out_$p526: ref, out_$p528: ref, out_$i529: i64, out_$i530: i1, out_$p521: ref, out_$p522: ref);



implementation gdm_recv_qos_hci_packet_loop_$bb6(in_$p1: ref, in_$p7: ref, in_$p8: ref, in_$p16: ref, in_$i20: i32, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i64, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i64, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i8, in_$i63: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i19: i32) returns (out_$i20: i32, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i64, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i64, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i8, out_$i63: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i19: i32)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p66, out_$i67, out_$i68, out_$i69, out_$i19 := in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$p66, in_$i67, in_$i68, in_$i69, in_$i19;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4549;

  $bb12:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i67;
    goto $bb12_dummy;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    out_$i69 := $ugt.i32(out_$i68, out_$i67);
    goto corral_source_split_4601;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, in_$p16);
    goto corral_source_split_4600;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i19, 1);
    call {:si_unique_call 929} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_4599;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p66, out_$i62);
    goto corral_source_split_4598;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i52);
    out_$p66 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 2208)), $mul.ref(456, 1)), $mul.ref(264, 1)), $mul.ref(out_$i63, 88)), $mul.ref(8, 1));
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.0, out_$p61);
    goto corral_source_split_4596;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(in_$p1, $mul.ref(out_$i60, 1));
    goto corral_source_split_4595;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i32.i64(out_$i59);
    goto corral_source_split_4594;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i58, 10);
    goto corral_source_split_4593;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i58 := $mul.i32(out_$i19, 5);
    goto corral_source_split_4592;

  $bb9:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, $sub.i32(0, 1));
    goto corral_source_split_4584;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} out_$i52 := get_csr(in_$p8, out_$i51, 0);
    call {:si_unique_call 926} {:cexpr "index"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_4583;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i50, out_$i44);
    call {:si_unique_call 924} {:cexpr "SFID"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.0, out_$p48);
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(in_$p1, $mul.ref(out_$i47, 1));
    goto corral_source_split_4579;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i32.i64(out_$i46);
    goto corral_source_split_4578;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i45, 9);
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    out_$i45 := $mul.i32(out_$i19, 5);
    goto corral_source_split_4576;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i43, out_$i35);
    call {:si_unique_call 923} {:cexpr "SFID"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_4575;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, 65535);
    goto corral_source_split_4574;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    out_$i42 := $shl.i32(out_$i41, 8);
    goto corral_source_split_4573;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i32(out_$i40);
    goto corral_source_split_4572;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.0, out_$p39);
    goto corral_source_split_4571;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(in_$p1, $mul.ref(out_$i38, 1));
    goto corral_source_split_4570;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i32.i64(out_$i37);
    goto corral_source_split_4569;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i36, 8);
    goto corral_source_split_4568;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    out_$i36 := $mul.i32(out_$i19, 5);
    goto corral_source_split_4567;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i34, out_$i26);
    call {:si_unique_call 922} {:cexpr "SFID"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4566;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i32(out_$i33, 16711680);
    goto corral_source_split_4565;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    out_$i33 := $shl.i32(out_$i32, 16);
    goto corral_source_split_4564;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i31);
    goto corral_source_split_4563;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i8($M.0, out_$p30);
    goto corral_source_split_4562;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(in_$p1, $mul.ref(out_$i29, 1));
    goto corral_source_split_4561;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i32.i64(out_$i28);
    goto corral_source_split_4560;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i27, 7);
    goto corral_source_split_4559;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    out_$i27 := $mul.i32(out_$i19, 5);
    goto corral_source_split_4558;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    out_$i26 := $shl.i32(out_$i25, 24);
    call {:si_unique_call 921} {:cexpr "SFID"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_4557;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    goto corral_source_split_4556;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.0, out_$p23);
    goto corral_source_split_4555;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(in_$p1, $mul.ref(out_$i22, 1));
    goto corral_source_split_4554;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i32.i64(out_$i21);
    goto corral_source_split_4553;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i20, 6);
    goto corral_source_split_4552;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i20 := $mul.i32(out_$i19, 5);
    goto corral_source_split_4551;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p66, out_$i67, out_$i68, out_$i69, out_$i19 := gdm_recv_qos_hci_packet_loop_$bb6(in_$p1, in_$p7, in_$p8, in_$p16, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p66, out_$i67, out_$i68, out_$i69, out_$i19);
    return;

  exit:
    return;
}



procedure gdm_recv_qos_hci_packet_loop_$bb6(in_$p1: ref, in_$p7: ref, in_$p8: ref, in_$p16: ref, in_$i20: i32, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i64, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i64, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i8, in_$i63: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i19: i32) returns (out_$i20: i32, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i64, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i64, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i8, out_$i63: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i19: i32);
  modifies $M.0;



implementation get_csr_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i7: i64, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i6: i32) returns (out_$i7: i64, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i6: i32)
{

  entry:
    out_$i7, out_$p10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i17, out_$i6 := in_$i7, in_$p10, in_$i11, in_$i12, in_$i13, in_$i15, in_$i16, in_$i17, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5011;

  $bb10:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i15;
    goto $bb10_dummy;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    out_$i17 := $ult.i32(out_$i15, out_$i16);
    goto corral_source_split_5024;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, in_$p3);
    goto corral_source_split_5023;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i6, 1);
    call {:si_unique_call 992} {:cexpr "i"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_5022;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i6;
    assume true;
    goto $bb7;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, in_$i1);
    goto corral_source_split_5016;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, out_$p10);
    goto corral_source_split_5015;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1752)), $mul.ref(264, 1)), $mul.ref(out_$i7, 88)), $mul.ref(4, 1));
    goto corral_source_split_5014;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    goto corral_source_split_5013;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i7, out_$p10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i17, out_$i6 := get_csr_loop_$bb4(in_$p0, in_$i1, in_$p3, out_$i7, out_$p10, out_$i11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i17, out_$i6);
    return;

  exit:
    return;
}



procedure get_csr_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i7: i64, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i6: i32) returns (out_$i7: i64, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i6: i32);



implementation __gdm_wimax_event_send_loop_$bb4(in_$p1: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i7: i64, in_$i27: i64, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i7: i64, out_$i27: i64, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i7, out_$i27, out_vslice_dummy_var_155, out_vslice_dummy_var_156 := in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p15, in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$p22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i7, in_$i27, in_vslice_dummy_var_155, in_vslice_dummy_var_156;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5272;

  $bb6:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i23;
    goto $bb6_dummy;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i23;
    assume true;
    goto $bb6;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 0);
    goto corral_source_split_5295;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} out_$i25 := list_empty($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(16, 1)));
    call {:si_unique_call 1049} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_5294;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} put_event_entry(out_$p9);
    goto corral_source_split_5293;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} list_del(out_$p24);
    goto corral_source_split_5292;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p9, $mul.ref(0, 2080)), $mul.ref(0, 1));
    goto corral_source_split_5291;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} out_$i23 := _raw_spin_lock_irqsave(out_$p22);
    call {:si_unique_call 1045} {:cexpr "flags"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_5290;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} out_$p22 := spinlock_check($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)));
    goto corral_source_split_5289;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} out_vslice_dummy_var_156 := netlink_send(out_$p15, out_$i16, 0, out_$p18, out_$i20);
    goto corral_source_split_5288;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_5287;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p9, $mul.ref(0, 2080)), $mul.ref(2072, 1));
    goto corral_source_split_5286;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_5285;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p9, $mul.ref(0, 2080)), $mul.ref(24, 1));
    goto corral_source_split_5284;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.41, in_$p1);
    goto corral_source_split_5283;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, $add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(8, 1)));
    goto corral_source_split_5282;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} out_vslice_dummy_var_155 := sscanf.ref.ref.ref(out_$p13, .str, in_$p1);
    goto corral_source_split_5281;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_5280;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 3048)), $mul.ref(0, 1));
    goto corral_source_split_5279;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_5278;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 2080)), $mul.ref(16, 1));
    goto corral_source_split_5277;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} spin_unlock_irqrestore($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(32, 1)), out_$i7);
    goto corral_source_split_5276;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    out_$p9 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_5275;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, $add.ref($add.ref($add.ref(wm_event, $mul.ref(0, 200)), $mul.ref(16, 1)), $mul.ref(0, 1)));
    goto corral_source_split_5274;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i7, out_$i27, out_vslice_dummy_var_155, out_vslice_dummy_var_156 := __gdm_wimax_event_send_loop_$bb4(in_$p1, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i7, out_$i27, out_vslice_dummy_var_155, out_vslice_dummy_var_156);
    return;

  exit:
    return;
}



procedure __gdm_wimax_event_send_loop_$bb4(in_$p1: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i7: i64, in_$i27: i64, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i7: i64, out_$i27: i64, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32);
  modifies $M.0;



implementation put_event_entry_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} put_event_entry_loop_$bb3();
    return;

  exit:
    return;
}



procedure put_event_entry_loop_$bb3();



implementation gdm_usb_rcv_complete_loop_$bb25(in_$i78: i64, in_$p81: ref, in_$p82: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p80: ref, in_vslice_dummy_var_165: i32) returns (out_$p81: ref, out_$p82: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p80: ref, out_vslice_dummy_var_165: i32)
{

  entry:
    out_$p81, out_$p82, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p80, out_vslice_dummy_var_165 := in_$p81, in_$p82, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p80, in_vslice_dummy_var_165;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5930;

  $bb27:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$p80 := out_$p86;
    goto $bb27_dummy;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, in_$i78);
    goto corral_source_split_5940;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_5939;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p87, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5938;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p86);
    goto corral_source_split_5937;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_5936;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($add.ref(out_$p80, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5935;

  SeqInstr_126:
    goto corral_source_split_5934;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} out_vslice_dummy_var_165 := ldv_usb_submit_urb_21(out_$p82, 32);
    goto SeqInstr_125;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_5933;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p80, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_5932;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p81, out_$p82, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p80, out_vslice_dummy_var_165 := gdm_usb_rcv_complete_loop_$bb25(in_$i78, out_$p81, out_$p82, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p80, out_vslice_dummy_var_165);
    return;

  exit:
    return;
}



procedure gdm_usb_rcv_complete_loop_$bb25(in_$i78: i64, in_$p81: ref, in_$p82: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p80: ref, in_vslice_dummy_var_165: i32) returns (out_$p81: ref, out_$p82: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p80: ref, out_vslice_dummy_var_165: i32);
  modifies $M.16, $M.18, $M.0, $M.15, $M.42, $M.43, $M.23, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.21, $CurrAddr, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, $M.19, assertsPassed;



implementation gdm_usb_rcv_complete_loop_$bb14(in_$i52: i64, in_$p55: ref, in_$p56: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p54: ref, in_vslice_dummy_var_164: i32) returns (out_$p55: ref, out_$p56: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p54: ref, out_vslice_dummy_var_164: i32)
{

  entry:
    out_$p55, out_$p56, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p54, out_vslice_dummy_var_164 := in_$p55, in_$p56, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p54, in_vslice_dummy_var_164;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5906;

  $bb16:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$p54 := out_$p60;
    goto $bb16_dummy;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, in_$i52);
    goto corral_source_split_5916;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_5915;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p61, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5914;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_5913;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_5912;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(out_$p54, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5911;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} out_vslice_dummy_var_164 := usb_unlink_urb(out_$p56);
    goto corral_source_split_5910;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_5909;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p54, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_5908;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p55, out_$p56, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p54, out_vslice_dummy_var_164 := gdm_usb_rcv_complete_loop_$bb14(in_$i52, out_$p55, out_$p56, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p54, out_vslice_dummy_var_164);
    return;

  exit:
    return;
}



procedure gdm_usb_rcv_complete_loop_$bb14(in_$i52: i64, in_$p55: ref, in_$p56: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p54: ref, in_vslice_dummy_var_164: i32) returns (out_$p55: ref, out_$p56: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p54: ref, out_vslice_dummy_var_164: i32);



implementation array_le32_to_cpu_loop_$bb4(in_$i1: i32, in_$i5: i32, in_$i6: i32, in_$p7: ref, in_$i8: i1, in_$p3: ref, in_$i4: i32) returns (out_$i5: i32, out_$i6: i32, out_$p7: ref, out_$i8: i1, out_$p3: ref, out_$i4: i32)
{

  entry:
    out_$i5, out_$i6, out_$p7, out_$i8, out_$p3, out_$i4 := in_$i5, in_$i6, in_$p7, in_$i8, in_$p3, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6067;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$p3, out_$i4 := out_$p7, out_$i6;
    goto $bb6_dummy;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i6, in_$i1);
    goto corral_source_split_6073;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref(out_$p3, $mul.ref(1, 4));
    goto corral_source_split_6072;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    out_$i6 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1255} {:cexpr "i"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_6071;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p3, out_$i5);
    goto corral_source_split_6070;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $load.i32($M.0, out_$p3);
    goto corral_source_split_6069;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6, out_$p7, out_$i8, out_$p3, out_$i4 := array_le32_to_cpu_loop_$bb4(in_$i1, out_$i5, out_$i6, out_$p7, out_$i8, out_$p3, out_$i4);
    return;

  exit:
    return;
}



procedure array_le32_to_cpu_loop_$bb4(in_$i1: i32, in_$i5: i32, in_$i6: i32, in_$p7: ref, in_$i8: i1, in_$p3: ref, in_$i4: i32) returns (out_$i5: i32, out_$i6: i32, out_$p7: ref, out_$i8: i1, out_$p3: ref, out_$i4: i32);
  modifies $M.0;



implementation download_image_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i20: i1, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$i18: i64, in_$i19: i32, in_$i35: i32, in_cmdloc_dummy_var_71: [ref]i8, in_cmdloc_dummy_var_72: [ref]i8, in_cmdloc_dummy_var_73: [ref]i8) returns (out_$i20: i1, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$i18: i64, out_$i19: i32, out_$i35: i32, out_cmdloc_dummy_var_71: [ref]i8, out_cmdloc_dummy_var_72: [ref]i8, out_cmdloc_dummy_var_73: [ref]i8)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i18, out_$i19, out_$i35, out_cmdloc_dummy_var_71, out_cmdloc_dummy_var_72, out_cmdloc_dummy_var_73 := in_$i20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i18, in_$i19, in_$i35, in_cmdloc_dummy_var_71, in_cmdloc_dummy_var_72, in_cmdloc_dummy_var_73;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6098;

  $bb16:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i18, out_$i19 := out_$i33, out_$i31;
    goto $bb16_dummy;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i28;
    assume true;
    goto $bb16;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i31, 0);
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i64(out_$i32, out_$i18);
    call {:si_unique_call 1272} {:cexpr "pos"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i32.i64(out_$i21);
    goto corral_source_split_6118;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i31 := $sub.i32(out_$i19, out_$i21);
    call {:si_unique_call 1271} {:cexpr "img_len"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_6117;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i28;
    assume true;
    goto $bb14;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i28, 0);
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} out_$i28 := gdm_wibro_send(in_$p0, out_$p27, out_$i21);
    call {:si_unique_call 1270} {:cexpr "ret"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    out_$p27 := $M.24;
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_71 := $M.0;
    out_cmdloc_dummy_var_72 := $M.0;
    call {:si_unique_call 1268} out_cmdloc_dummy_var_73 := $memcpy.i8(out_cmdloc_dummy_var_71, out_cmdloc_dummy_var_72, out_$p23, out_$p26, out_$i22, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_73;
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p25, $mul.ref(out_$i18, 1));
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.27, out_$p24);
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$p23 := $M.24;
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i32.i64(out_$i21);
    call {:si_unique_call 1267} {:cexpr "__len"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_6105;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6104;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := out_$i19;
    goto $bb12;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$i21 := 1024;
    goto $bb12;

  $bb10:
    assume out_$i20 == 1;
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $ugt.i32(out_$i19, 1024);
    goto corral_source_split_6100;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i18, out_$i19, out_$i35, out_cmdloc_dummy_var_71, out_cmdloc_dummy_var_72, out_cmdloc_dummy_var_73 := download_image_loop_$bb8(in_$p0, in_$p1, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i18, out_$i19, out_$i35, out_cmdloc_dummy_var_71, out_cmdloc_dummy_var_72, out_cmdloc_dummy_var_73);
    return;

  exit:
    return;
}



procedure download_image_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i20: i1, in_$i21: i32, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$i18: i64, in_$i19: i32, in_$i35: i32, in_cmdloc_dummy_var_71: [ref]i8, in_cmdloc_dummy_var_72: [ref]i8, in_cmdloc_dummy_var_73: [ref]i8) returns (out_$i20: i1, out_$i21: i32, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$i18: i64, out_$i19: i32, out_$i35: i32, out_cmdloc_dummy_var_71: [ref]i8, out_cmdloc_dummy_var_72: [ref]i8, out_cmdloc_dummy_var_73: [ref]i8);
  modifies $CurrAddr, $M.0;



implementation em_download_image_loop_$bb18(in_$p0: ref, in_$p3: ref, in_$p12: ref, in_$i32: i1, in_$i33: i32, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i46: i64, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i30: i32, in_$i31: i64, in_cmdloc_dummy_var_74: [ref]i8, in_cmdloc_dummy_var_75: [ref]i8, in_cmdloc_dummy_var_76: [ref]i8) returns (out_$i32: i1, out_$i33: i32, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i46: i64, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i30: i32, out_$i31: i64, out_cmdloc_dummy_var_74: [ref]i8, out_cmdloc_dummy_var_75: [ref]i8, out_cmdloc_dummy_var_76: [ref]i8)
{

  entry:
    out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i30, out_$i31, out_cmdloc_dummy_var_74, out_cmdloc_dummy_var_75, out_cmdloc_dummy_var_76 := in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i30, in_$i31, in_cmdloc_dummy_var_74, in_cmdloc_dummy_var_75, in_cmdloc_dummy_var_76;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6188;

  $bb29:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i30, out_$i31 := out_$i45, out_$i46;
    goto $bb29_dummy;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i54 := $sgt.i32(out_$i45, 0);
    goto corral_source_split_6220;

  $bb27:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i51;
    assume true;
    goto $bb27;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i51, 0);
    goto corral_source_split_6216;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} out_$i51 := em_wait_ack(in_$p0, out_$i50);
    call {:si_unique_call 1305} {:cexpr "ret"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_6215;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i1.i32(out_$i49);
    goto corral_source_split_6214;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 0);
    goto corral_source_split_6213;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    out_$i48 := $and.i32(out_$i47, 511);
    goto corral_source_split_6212;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i33, 0);
    goto corral_source_split_6211;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i64(out_$i31, 2048);
    call {:si_unique_call 1303} {:cexpr "pos"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_6210;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i30, $sub.i32(0, 2048));
    call {:si_unique_call 1302} {:cexpr "img_len"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_6209;

  $bb24:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i42;
    assume true;
    goto $bb24;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i42, 0);
    goto corral_source_split_6205;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} out_$i42 := gdm_wibro_send(in_$p0, in_$p12, out_$i41);
    call {:si_unique_call 1301} {:cexpr "ret"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_6204;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i33, 0);
    goto corral_source_split_6203;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_74 := $M.0;
    out_cmdloc_dummy_var_75 := $M.0;
    call {:si_unique_call 1299} out_cmdloc_dummy_var_76 := $memcpy.i8(out_cmdloc_dummy_var_74, out_cmdloc_dummy_var_75, out_$p36, out_$p40, out_$i34, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_76;
    goto corral_source_split_6202;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p39, $mul.ref(out_$i31, 1));
    goto corral_source_split_6201;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.27, out_$p38);
    goto corral_source_split_6200;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6199;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.25, in_$p3);
    goto corral_source_split_6198;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(in_$p12, $mul.ref(out_$i35, 1));
    goto corral_source_split_6197;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(0);
    goto corral_source_split_6196;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    call {:si_unique_call 1298} {:cexpr "__len"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_6195;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6194;

  $bb21:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := out_$i30;
    goto $bb22;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    out_$i33 := 2048;
    goto $bb22;

  $bb20:
    assume out_$i32 == 1;
    goto corral_source_split_6192;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i32 := $sgt.i32(out_$i30, 2048);
    goto corral_source_split_6190;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i30, out_$i31, out_cmdloc_dummy_var_74, out_cmdloc_dummy_var_75, out_cmdloc_dummy_var_76 := em_download_image_loop_$bb18(in_$p0, in_$p3, in_$p12, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i30, out_$i31, out_cmdloc_dummy_var_74, out_cmdloc_dummy_var_75, out_cmdloc_dummy_var_76);
    return;

  exit:
    return;
}



procedure em_download_image_loop_$bb18(in_$p0: ref, in_$p3: ref, in_$p12: ref, in_$i32: i1, in_$i33: i32, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i46: i64, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i30: i32, in_$i31: i64, in_cmdloc_dummy_var_74: [ref]i8, in_cmdloc_dummy_var_75: [ref]i8, in_cmdloc_dummy_var_76: [ref]i8) returns (out_$i32: i1, out_$i33: i32, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i46: i64, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i30: i32, out_$i31: i64, out_cmdloc_dummy_var_74: [ref]i8, out_cmdloc_dummy_var_75: [ref]i8, out_cmdloc_dummy_var_76: [ref]i8);
  modifies $CurrAddr, $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i4: i32, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i1) returns (out_$i4: i32, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i1)
{

  entry:
    out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78 := in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1393} out_$i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1394} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i4);
    call {:si_unique_call 1395} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i4);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb68_dummy;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb13:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $M.49 := out_$i25;
    call {:si_unique_call 1402} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_6536;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i24, 1);
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$i24 := $M.49;
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1401} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6533;

  $bb30:
    assume out_$i23 == 1;
    goto corral_source_split_6532;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 0);
    goto corral_source_split_6530;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    out_$i22 := $M.54;
    goto corral_source_split_6529;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $M.54 := out_$i21;
    call {:si_unique_call 1400} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_6528;

  SeqInstr_156:
    goto corral_source_split_6527;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} out_$i21 := gdm_usb_probe(out_$p20, in_$p2);
    goto SeqInstr_155;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    out_$p20 := $M.50;
    goto corral_source_split_6526;

  $bb28:
    assume out_$i19 == 1;
    goto corral_source_split_6525;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i18, 1);
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    out_$i18 := $M.52;
    goto corral_source_split_6522;

  $bb26:
    assume out_$i17 == 1;
    goto corral_source_split_6521;

  $bb24:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i11, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb15:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_6503:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1396} out_$i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 1397} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i11);
    call {:si_unique_call 1398} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i11);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i10 == 1;
    goto corral_source_split_6503;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_6501;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    out_$i9 := $M.52;
    goto corral_source_split_6500;

  $bb10:
    assume out_$i8 == 1;
    goto corral_source_split_6499;

  $bb3:
    assume out_$i5 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb36:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1405} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6546;

  $bb37:
    assume out_$i31 == 1;
    goto corral_source_split_6545;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_6543;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$i30 := $M.55;
    goto corral_source_split_6542;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $M.55 := out_$i29;
    call {:si_unique_call 1404} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_6541;

  SeqInstr_159:
    goto corral_source_split_6540;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} out_$i29 := gdm_resume(out_$p28);
    goto SeqInstr_158;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    out_$p28 := $M.50;
    goto corral_source_split_6539;

  $bb35:
    assume out_$i27 == 1;
    goto corral_source_split_6538;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 3);
    goto corral_source_split_6519;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    out_$i26 := $M.52;
    goto corral_source_split_6518;

  $bb25:
    assume !(out_$i16 == 1);
    goto corral_source_split_6517;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $M.49 := out_$i45;
    call {:si_unique_call 1411} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_6573;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    out_$i45 := $sub.i32(out_$i44, 1);
    goto corral_source_split_6572;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    out_$i44 := $M.49;
    goto corral_source_split_6571;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1410} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6570;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} gdm_usb_disconnect(out_$p43);
    goto corral_source_split_6569;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    out_$p43 := $M.50;
    goto corral_source_split_6568;

  $bb50:
    assume out_$i42 == 1;
    goto corral_source_split_6567;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 0);
    goto corral_source_split_6565;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$i41 := $M.48;
    goto corral_source_split_6564;

  $bb47:
    assume out_$i40 == 1;
    goto corral_source_split_6563;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 2);
    goto corral_source_split_6561;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i39 := $M.52;
    goto corral_source_split_6560;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $M.49 := out_$i38;
    call {:si_unique_call 1408} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_6558;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    out_$i38 := $sub.i32(out_$i37, 1);
    goto corral_source_split_6557;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    out_$i37 := $M.49;
    goto corral_source_split_6556;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1407} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6555;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} gdm_usb_disconnect(out_$p36);
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$p36 := $M.50;
    goto corral_source_split_6553;

  $bb44:
    assume out_$i35 == 1;
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 0);
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$i34 := $M.48;
    goto corral_source_split_6549;

  $bb41:
    assume out_$i33 == 1;
    goto corral_source_split_6548;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 3);
    goto corral_source_split_6507;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    out_$i32 := $M.52;
    goto corral_source_split_6506;

  $bb17:
    assume out_$i13 == 1;
    goto corral_source_split_6505;

  $bb16:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb43;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb43;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb49;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb49;

  $bb54:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.52 := 3;
    call {:si_unique_call 1414} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_6585;

  $bb55:
    assume out_$i53 == 1;
    goto corral_source_split_6584;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 0);
    goto corral_source_split_6582;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    out_$i52 := $M.56;
    goto corral_source_split_6581;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $M.56 := out_$i51;
    call {:si_unique_call 1413} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_6580;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} out_$i51 := gdm_suspend(out_$p48, out_$i50);
    goto corral_source_split_6579;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.51, out_$p49);
    goto corral_source_split_6578;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6577;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    out_$p48 := $M.50;
    goto corral_source_split_6576;

  $bb53:
    assume out_$i47 == 1;
    goto corral_source_split_6575;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 2);
    goto corral_source_split_6511;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    out_$i46 := $M.52;
    goto corral_source_split_6510;

  $bb19:
    assume out_$i14 == 1;
    goto corral_source_split_6509;

  $bb18:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb60:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb62:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $M.52 := 2;
    call {:si_unique_call 1417} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6595;

  $bb61:
    assume out_$i59 == 1;
    goto corral_source_split_6594;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 0);
    goto corral_source_split_6592;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    out_$i58 := $M.57;
    goto corral_source_split_6591;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $M.57 := out_$i57;
    call {:si_unique_call 1416} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_6590;

  SeqInstr_162:
    goto corral_source_split_6589;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} out_$i57 := gdm_resume(out_$p56);
    goto SeqInstr_161;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    out_$p56 := $M.50;
    goto corral_source_split_6588;

  $bb59:
    assume out_$i55 == 1;
    goto corral_source_split_6587;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 3);
    goto corral_source_split_6515;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    out_$i54 := $M.52;
    goto corral_source_split_6514;

  $bb21:
    assume out_$i15 == 1;
    goto corral_source_split_6513;

  $bb20:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} ldv_stop();
    goto corral_source_split_6597;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i15 == 1);
    goto $bb23;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb23;

  $bb70:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb81;

  $bb83:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb81;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 0);
    goto corral_source_split_6611;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    out_$i68 := $M.49;
    goto corral_source_split_6610;

  $bb79:
    assume out_$i67 == 1;
    goto corral_source_split_6609;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 3);
    goto corral_source_split_6607;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    out_$i66 := $M.53;
    goto corral_source_split_6606;

  $bb77:
    assume out_$i65 == 1;
    goto corral_source_split_6605;

  $bb72:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i62, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i62, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_6599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1419} out_$i62 := __VERIFIER_nondet_int();
    call {:si_unique_call 1420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i62);
    call {:si_unique_call 1421} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i62);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb69:
    assume out_$i61 == 1;
    goto corral_source_split_6599;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_6493;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    out_$i60 := $M.53;
    goto corral_source_split_6492;

  $bb5:
    assume out_$i6 == 1;
    goto corral_source_split_6491;

  $bb4:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb88:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb93:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i75, 0);
    goto corral_source_split_6629;

  $bb91:
    assume {:verifier.code 0} true;
    out_$i75 := $M.58;
    goto corral_source_split_6628;

  $bb90:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $M.53 := 3;
    call {:si_unique_call 1427} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6626;

  $bb89:
    assume out_$i74 == 1;
    goto corral_source_split_6625;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 0);
    goto corral_source_split_6623;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    out_$i73 := $M.58;
    goto corral_source_split_6622;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $M.58 := out_$i72;
    call {:si_unique_call 1426} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_6621;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} out_$i72 := usb_gdm_wimax_init();
    goto corral_source_split_6620;

  $bb87:
    assume out_$i71 == 1;
    goto corral_source_split_6619;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 1);
    goto corral_source_split_6603;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    out_$i70 := $M.53;
    goto corral_source_split_6602;

  $bb74:
    assume out_$i64 == 1;
    goto corral_source_split_6601;

  $bb73:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i62, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} ldv_stop();
    goto corral_source_split_6634;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb75:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb76;

  $bb78:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb76;

  $bb100:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    goto $bb101;

  SeqInstr_168:
    goto corral_source_split_6637;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} ldv_main_exported_2();
    goto SeqInstr_167;

  $bb99:
    assume out_$i78 == 1;
    goto corral_source_split_6636;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i77, 0);
    goto corral_source_split_6497;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    out_$i77 := $M.23;
    goto corral_source_split_6496;

  $bb7:
    assume out_$i7 == 1;
    goto corral_source_split_6495;

  $bb6:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} ldv_stop();
    goto corral_source_split_6639;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i7 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb9;

  $bb68_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78 := main_loop_$bb1(in_$p0, in_$p2, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i4: i32, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i1) returns (out_$i4: i32, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i1);
  modifies $M.49, $M.52, $M.54, $M.0, $M.24, $CurrAddr, $M.22, $M.21, $M.44, $M.45, $M.23, $M.29, $M.20, $M.15, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.33, $M.28, $M.16, $M.18, $M.19, $M.42, $M.43, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.30, $M.31, $M.32, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed, $M.55, $M.56, $M.14, $M.57, $M.53, $M.58, $M.48, $M.50, $M.46, $M.1, $M.47;


