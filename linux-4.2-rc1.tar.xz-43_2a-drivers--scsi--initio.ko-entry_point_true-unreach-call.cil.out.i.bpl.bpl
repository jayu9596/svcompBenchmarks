var $M.0: [ref]i32;

var $M.1: [ref]i8;

var $M.2: i32;

var $M.3: [ref]i8;

var $M.4: i32;

var $M.5: i32;

var $M.6: i32;

var $M.7: i32;

var $M.8: i32;

var $M.9: i32;

var $M.10: i32;

var $M.11: i32;

var $M.12: i32;

var $M.13: ref;

var $M.14: [ref]i8;

var $M.15: ref;

var $M.16: ref;

var $M.17: ref;

var $M.18: ref;

var $M.19: ref;

var $M.20: i32;

var $M.21: [ref]i8;

var $M.22: [ref]i8;

var $M.23: [ref]i8;

var $M.25: ref;

var $M.26: i32;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.33: [ref]i32;

var $M.34: [ref]i32;

var $M.35: [ref]i32;

var $M.36: [ref]i32;

var $M.37: [ref]i32;

var $M.38: [ref]i32;

var $M.39: [ref]i64;

var $M.40: [ref]i32;

var $M.41: [ref]i32;

var $M.42: [ref]i32;

var $M.43: [ref]i32;

var $M.44: [ref]i32;

var $M.45: [ref]i32;

var $M.46: [ref]i64;

var $M.96: [ref]i8;

var $M.97: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 288680);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 1028);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 2056);

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 3084);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 4112);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 5140);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 6168);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 7200);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 8228);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 9260);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 10288);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 11320);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 12348);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 13380);

const initio_pci_driver_group1: ref;

axiom initio_pci_driver_group1 == $sub.ref(0, 14412);

const initio_template_group0: ref;

axiom initio_template_group0 == $sub.ref(0, 15444);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 16472);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 17500);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 18528);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 19556);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 20584);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 21612);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 22640);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 23668);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 24696);

const {:count 6} __mod_pci__i91u_pci_devices_device_table: ref;

axiom __mod_pci__i91u_pci_devices_device_table == $sub.ref(0, 25912);

const {:count 6} __mod_pci__initio_pci_tbl_device_table: ref;

axiom __mod_pci__initio_pci_tbl_device_table == $sub.ref(0, 27128);

const i91unvramp: ref;

axiom i91unvramp == $sub.ref(0, 28160);

const {:count 64} i91udftNvRam: ref;

axiom i91udftNvRam == $sub.ref(0, 29248);

const i91unvram: ref;

axiom i91unvram == $sub.ref(0, 30336);

const initio_tag_enable: ref;

axiom initio_tag_enable == $sub.ref(0, 31364);

const initio_template: ref;

axiom initio_template == $sub.ref(0, 32724);

const {:count 6} initio_pci_tbl: ref;

axiom initio_pci_tbl == $sub.ref(0, 33940);

const initio_pci_driver: ref;

axiom initio_pci_driver == $sub.ref(0, 35276);

const {:count 8} initio_rate_tbl: ref;

axiom initio_rate_tbl == $sub.ref(0, 36308);

const {:count 7} .str.1: ref;

axiom .str.1 == $sub.ref(0, 37339);

const ioport_resource: ref;

axiom ioport_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 38} .str.6: ref;

axiom .str.6 == $sub.ref(0, 38401);

const {:count 45} .str.7: ref;

axiom .str.7 == $sub.ref(0, 39470);

const {:count 5} .str.8: ref;

axiom .str.8 == $sub.ref(0, 40499);

const {:count 39} .str.9: ref;

axiom .str.9 == $sub.ref(0, 41562);

const {:count 37} .str.10: ref;

axiom .str.10 == $sub.ref(0, 42623);

const {:count 29} .str.11: ref;

axiom .str.11 == $sub.ref(0, 43676);

const {:count 28} .str.12: ref;

axiom .str.12 == $sub.ref(0, 44728);

const {:count 35} .str.13: ref;

axiom .str.13 == $sub.ref(0, 45787);

const .str: ref;

axiom .str == $sub.ref(0, 46832);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 57} .str.17: ref;

axiom .str.17 == $sub.ref(0, 47913);

const {:count 28} .str.18: ref;

axiom .str.18 == $sub.ref(0, 48965);

const {:count 39} .str.14: ref;

axiom .str.14 == $sub.ref(0, 50028);

const {:count 9} .str.15: ref;

axiom .str.15 == $sub.ref(0, 51061);

const {:count 200} .str.2: ref;

axiom .str.2 == $sub.ref(0, 52285);

const {:count 41} .str.5: ref;

axiom .str.5 == $sub.ref(0, 53350);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 36} .str.3: ref;

axiom .str.3 == $sub.ref(0, 54410);

const {:count 17} .str.4: ref;

axiom .str.4 == $sub.ref(0, 55451);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 56483);

const {:count 3} .str.1.42: ref;

axiom .str.1.42 == $sub.ref(0, 57510);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 58548);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 59576);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 60608);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 61640);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const initio_probe_one: ref;

axiom initio_probe_one == $sub.ref(0, 62672);

procedure initio_probe_one($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.4, $M.5, $M.7, $M.9, $M.11, $CurrAddr, $M.15, $M.13, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.14, $M.22, assertsPassed;



implementation initio_probe_one($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i60: i32;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $i66: i32;
  var $p67: ref;
  var $i70: i32;
  var $i71: i1;
  var $i59: i32;
  var $p72: ref;
  var $i73: i32;
  var $i68: i32;
  var $p69: ref;
  var $i74: i64;
  var $i75: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i1;
  var $i96: i8;
  var $p97: ref;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $i102: i1;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p103: ref;
  var $p104: ref;
  var $p91: ref;
  var $p92: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i16;
  var $i121: i64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i16;
  var $i127: i32;
  var $p128: ref;
  var $p129: ref;
  var $i130: i8;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $p140: ref;
  var $p141: ref;
  var $i142: i16;
  var $i143: i64;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i32;
  var $p148: ref;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i152: i32;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i160: i32;
  var $p161: ref;
  var $i154: i32;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i77: i32;
  var $p165: ref;
  var $i166: i16;
  var $i167: i64;
  var $i55: i32;
  var $i30: i32;
  var $i7: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var vslice_dummy_var_9: i32;
  var vslice_dummy_var_10: i32;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i32;
  var vslice_dummy_var_14: ref;
  var vslice_dummy_var_15: ref;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $i5 := pci_enable_device($p0);
    call {:si_unique_call 5} {:cexpr "error"} boogie_si_record_i32($i5);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} vslice_dummy_var_9 := pci_read_config_dword($p0, 68, $p2);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p2);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 255);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    call {:si_unique_call 7} {:cexpr "bios_seg"} boogie_si_record_i16($i13);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p2);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 65280);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i32($i15, 8);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 255);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i13);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32($i18, 8);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p2);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 65280);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i32($i21, 8);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i19, $i24);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    call {:si_unique_call 8} {:cexpr "bios_seg"} boogie_si_record_i16($i26);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i27 := pci_set_dma_mask($p0, 4294967295);
    call {:si_unique_call 10} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p31 := ldv_scsi_host_alloc_25(initio_template, 464);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p31, $mul.ref(0, 3832)), $mul.ref(3832, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    call {:si_unique_call 15} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p37, 0, 464, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_1;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.1, $p40);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i16($i41);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p43, $i42);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(2, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p44, $i26);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.1, $p45);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i64($i46);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p48 := __request_region(ioport_resource, $i47, 256, .str.8, 0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i56 := $M.2;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := 19;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb22;

  $bb22:
    call $i60, $i61, $p62, $p63, $i64, $i65, $i66, $p67, $i70, $i71, $i59, $p72, $i73 := initio_probe_one_loop_$bb22($i60, $i61, $p62, $p63, $i64, $i65, $i66, $p67, $i70, $i71, $i59, $p72, $i73);
    goto $bb22_last;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i60 := $mul.i32($i59, 352);
    call {:si_unique_call 19} {:cexpr "i"} boogie_si_record_i32($i60);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i60);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p62 := kzalloc($i61, 1);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i66, $p67 := $i59, $p62;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32($i59, 1);
    call {:si_unique_call 21} {:cexpr "num_scb"} boogie_si_record_i32($i70);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i71 := $sgt.i32($i70, 18);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p72, $i73 := $p62, $i70;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i68, $p69 := $i73, $p72;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p69);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i74, 0);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p78, $p0);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(14, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p79, 1);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(384, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vslice_dummy_var_14 := spinlock_check($p80);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(384, 1)), $mul.ref(0, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} __raw_spin_lock_init($p84, .str.11, $p3);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i68);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(7, 1));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p86, $i85);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(40, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p87, $p69);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(56, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p88, $p69);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(32, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p89, $p69);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i90 := $slt.i32(0, $i68);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p91, $p92 := $p69, $0.ref;
    assume {:branchcond $i90} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p92, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p105, $0.ref);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(48, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p106, $p91);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p107, $p69);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p108, $p92);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(312, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_15 := spinlock_check($p109);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} __raw_spin_lock_init($p113, .str.12, $p4);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i26);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i115 := $shl.i32($i114, 4);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i116 := $zext.i32.i64($i115);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p117 := phys_to_virt($i116);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} initio_init($p36, $p117);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p118, 0);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i120 := $load.i16($M.1, $p119);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i64($i120);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p31, $mul.ref(0, 3832)), $mul.ref(928, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p122, $i121);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p31, $mul.ref(0, 3832)), $mul.ref(936, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p123, $sub.i8(0, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p31, $mul.ref(0, 3832)), $mul.ref(812, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p124, $i68);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i126 := $load.i16($M.1, $p125);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i126);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p31, $mul.ref(0, 3832)), $mul.ref(800, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p128, $i127);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(6, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.1, $p129);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i130);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p31, $mul.ref(0, 3832)), $mul.ref(788, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p132, $i131);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p31, $mul.ref(0, 3832)), $mul.ref(792, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p133, 32);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.1, $p134);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p31, $mul.ref(0, 3832)), $mul.ref(940, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p136, $i135);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(5, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.1, $p137);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p31, $mul.ref(0, 3832)), $mul.ref(808, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p140, $i139);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i142 := $load.i16($M.1, $p141);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i64($i142);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p31, $mul.ref(0, 3832)), $mul.ref(920, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p144, $i143);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p31, $mul.ref(0, 3832)), $mul.ref(818, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p145, 32);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.1, $p146);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p31);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i149 := ldv_request_irq_26($i147, i91u_intr, 128, .str.8, $p148);
    call {:si_unique_call 32} {:cexpr "error"} boogie_si_record_i32($i149);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i149, 0);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p31);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} pci_set_drvdata($p0, $p155);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i157 := scsi_add_host($p31, $p156);
    call {:si_unique_call 37} {:cexpr "error"} boogie_si_record_i32($i157);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} scsi_scan_host($p31);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb50:
    assume $i158 == 1;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.1, $p159);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p31);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} ldv_free_irq_27($i160, $p161);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i154 := $i157;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(40, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.1, $p162);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} kfree($p164);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i77 := $i154;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i166 := $load.i16($M.1, $p165);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i167 := $zext.i16.i64($i166);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} __release_region(ioport_resource, $i167, 256);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i55 := $i77;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} scsi_host_put($p31);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i30 := $i55;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} pci_disable_device($p0);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i7 := $i30;
    goto $bb3;

  $bb46:
    assume $i150 == 1;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.1, $p151);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_16 := printk.ref.i32(.str.13, $i152);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i154 := $i149;
    goto $bb48;

  $bb35:
    assume $i90 == 1;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i93, $p94, $p95 := 0, $0.ref, $p69;
    goto $bb38;

  $bb38:
    call $i96, $p97, $i98, $p99, $i100, $p101, $i102, $i93, $p94, $p95, $p103, $p104 := initio_probe_one_loop_$bb38($i68, $i96, $p97, $i98, $p99, $i100, $p101, $i102, $i93, $p94, $p95, $p103, $p104);
    goto $bb38_last;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i93);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p95, $mul.ref(0, 352)), $mul.ref(59, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p97, $i96);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i93, 0);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i93, 1);
    call {:si_unique_call 26} {:cexpr "i"} boogie_si_record_i32($i100);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p95, $mul.ref(1, 352));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i100, $i68);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p103, $p104 := $p101, $p95;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p91, $p92 := $p103, $p104;
    goto $bb37;

  $bb43:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    $i93, $p94, $p95 := $i100, $p95, $p101;
    goto $bb43_dummy;

  $bb40:
    assume $i98 == 1;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p94, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p99, $p95);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb31:
    assume $i75 == 1;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_13 := printk.ref(.str.10);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32(0, 12);
    goto $bb33;

  $bb28:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i59 := $i70;
    goto $bb28_dummy;

  $bb24:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i68, $p69 := $i66, $p67;
    goto $bb26;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i57 == 1;
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i58 := 32;
    goto $bb21;

  $bb15:
    assume $i50 == 1;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p36, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.1, $p51);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} vslice_dummy_var_12 := printk.ref.i32(.str.9, $i53);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 19);
    goto $bb17;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_11 := printk.ref(.str.7);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 12);
    goto $bb10;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} vslice_dummy_var_10 := printk.ref(.str.6);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb10;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  $bb43_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_131;

  $bb28_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_82;
}



const initio_remove_one: ref;

axiom initio_remove_one == $sub.ref(0, 63704);

procedure initio_remove_one($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.7, $M.9, $M.11;



implementation initio_remove_one($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3832)), $mul.ref(3832, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} ldv_scsi_remove_host_28($p2);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} ldv_free_irq_29($i6, $p7);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, $p8);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i64($i9);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} __release_region(ioport_resource, $i10, 256);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} scsi_host_put($p2);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} pci_disable_device($p0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 64736);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_scsi_remove_host_28: ref;

axiom ldv_scsi_remove_host_28 == $sub.ref(0, 65768);

procedure ldv_scsi_remove_host_28($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_scsi_remove_host_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} scsi_remove_host($p0);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $M.4 := 0;
    call {:si_unique_call 48} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_29: ref;

axiom ldv_free_irq_29 == $sub.ref(0, 66800);

procedure ldv_free_irq_29($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation ldv_free_irq_29($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} {:cexpr "ldv_free_irq_29:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} free_irq($i0, $p1);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 67832);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 53} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    return;
}



const scsi_host_put: ref;

axiom scsi_host_put == $sub.ref(0, 68864);

procedure scsi_host_put($p0: ref);
  free requires assertsPassed;



implementation scsi_host_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 69896);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 70928);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 71960);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i2 := $M.5;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.7;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.9;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.11;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i16 := $M.12;
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 59} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i12 := $M.10;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 58} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i8 := $M.8;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 57} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i4 := $M.6;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 56} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const scsi_remove_host: ref;

axiom scsi_remove_host == $sub.ref(0, 72992);

procedure scsi_remove_host($p0: ref);
  free requires assertsPassed;



implementation scsi_remove_host($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 74024);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 75056);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 1} true;
    call {:si_unique_call 60} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 61} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_read_config_dword: ref;

axiom pci_read_config_dword == $sub.ref(0, 76088);

procedure pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} {:cexpr "pci_read_config_dword:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i7 := pci_bus_read_config_dword($p4, $i6, $i1, $p2);
    call {:si_unique_call 64} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_set_dma_mask: ref;

axiom pci_set_dma_mask == $sub.ref(0, 77120);

procedure pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} {:cexpr "pci_set_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i3 := dma_set_mask($p2, $i1);
    call {:si_unique_call 67} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 78152);

procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 1} true;
    call {:si_unique_call 68} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 69} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 1} true;
    call {:si_unique_call 70} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 71} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 1} true;
    call {:si_unique_call 72} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 73} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 1} true;
    call {:si_unique_call 74} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 75} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_scsi_host_alloc_25: ref;

axiom ldv_scsi_host_alloc_25 == $sub.ref(0, 79184);

procedure ldv_scsi_host_alloc_25($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, $M.15;



implementation ldv_scsi_host_alloc_25($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} {:cexpr "ldv_scsi_host_alloc_25:arg:privsize"} boogie_si_record_i32($i1);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $p2 := scsi_host_alloc($p0, $i1);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 78} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} ldv_initialize_scsi_host_template_3();
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 80216);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const __request_region: ref;

axiom __request_region == $sub.ref(0, 81248);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 81} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 82} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p5 := external_alloc();
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 82280);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 85} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} ldv_check_alloc_flags($i1);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $p2 := ldv_undef_ptr();
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 83312);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 84344);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    return;
}



const phys_to_virt: ref;

axiom phys_to_virt == $sub.ref(0, 85376);

procedure phys_to_virt($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation phys_to_virt($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} {:cexpr "phys_to_virt:arg:address"} boogie_si_record_i64($i0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i1 := $add.i64($i0, $sub.i64(0, 131941395333120));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const initio_init: ref;

axiom initio_init == $sub.ref(0, 86408);

procedure initio_init($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.13, $M.14, $M.22;



implementation initio_init($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i64;
  var $p5: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $p23: ref;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i16;
  var $p34: ref;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i8;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i8;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $i91: i32;
  var $i92: i8;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $i104: i32;
  var $i105: i8;
  var $p106: ref;
  var $i107: i16;
  var $i108: i32;
  var $i109: i32;
  var $p110: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i1;
  var $i122: i8;
  var $i123: i16;
  var $i124: i64;
  var $p127: ref;
  var $i128: i64;
  var $p131: ref;
  var $i132: i16;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i136: i64;
  var $p139: ref;
  var $i140: i64;
  var $p143: ref;
  var $i144: i64;
  var $p147: ref;
  var $p148: ref;
  var $i149: i8;
  var $i150: i64;
  var $p153: ref;
  var $p154: ref;
  var $i155: i8;
  var $i156: i64;
  var $p159: ref;
  var $i160: i64;
  var $p163: ref;
  var $i164: i8;
  var $i165: i32;
  var $i166: i1;
  var $i167: i64;
  var $p170: ref;
  var $i171: i64;
  var $p174: ref;
  var $i175: i64;
  var $p176: ref;
  var $i177: i8;
  var $i178: i64;
  var $p181: ref;
  var $i182: i64;
  var $p185: ref;
  var $i186: i16;
  var $i187: i32;
  var $i188: i32;
  var $i189: i16;
  var $i190: i64;
  var $p193: ref;
  var $i194: i64;
  var $p196: ref;
  var $i197: i64;
  var $p199: ref;
  var $i200: i32;
  var $p201: ref;
  var $i202: i8;
  var $i203: i32;
  var $i204: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $p205: ref;
  var $i206: i16;
  var $i207: i32;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i211: i32;
  var $p212: ref;
  var $i213: i16;
  var $i214: i32;
  var $p215: ref;
  var $i216: i8;
  var $i217: i32;
  var $p219: ref;
  var $i220: i8;
  var $i221: i32;
  var $i222: i32;
  var $i223: i1;
  var $p226: ref;
  var $i227: i16;
  var $i228: i32;
  var $i229: i32;
  var $p230: ref;
  var $i231: i16;
  var $i232: i32;
  var $i233: i32;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.1, $p2);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i64($i3);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} initio_read_eeprom($i4);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p5 := $M.13;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(3, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.14, $p8);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 8);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(6, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, 16);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $M.13;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(1, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.14, $p17);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(11, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, $i18);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p20 := $M.13;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.14, $p23);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(5, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, $i24);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(5, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i29 := $shl.i32(1, $i28);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i32 := $xor.i32($i31, $sub.i32(0, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(12, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p34, $i33);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.1, $p35);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 224);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} outb(31, $i38);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} initio_stop_bm($p0);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.1, $p39);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 133);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} outb(2, $i42);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(5, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i46 := $shl.i32($i45, 4);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.1, $p48);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 137);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} outb($i47, $i51);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(11, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.1, $p52);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 2);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i56 == 1);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(19, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p58, $sub.i8(0, 61));
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(19, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.1, $p59);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.1, $p63);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, 135);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} outb($i62, $i66);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.1, $p67);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, 134);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} outb(4, $i70);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.1, $p71);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, 136);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} outb(0, $i74);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.1, $p75);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i77, 138);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} outb($sub.i8(0, 103), $i78);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(11, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.1, $p79);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 12);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.1, $p84);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, 228);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} outb($i83, $i87);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.1, $p88);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, 85);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i92 := inb($i91);
    call {:si_unique_call 100} {:cexpr "tmp"} boogie_si_record_i8($i92);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(11, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.1, $p93);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 16);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i97 := $ashr.i32($i96, 4);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i99 := $sext.i8.i32($i98);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i100 := $sext.i8.i32($i92);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, $sub.i32(0, 2));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i102 := $or.i32($i99, $i101);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i8($i104);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.1, $p106);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i108, 85);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} outb($i105, $i109);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p110 := $M.13;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p110, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p1, $mul.ref(384, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(6, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.1, $p115);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i118 := $sgt.i32($i117, 0);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i206 := $load.i16($M.1, $p205);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i207 := $zext.i16.i32($i206);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.1, $p208);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p209, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i211 := $load.i32($M.1, $p210);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(2, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i213 := $load.i16($M.1, $p212);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i214 := $zext.i16.i32($i213);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(5, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i216 := $load.i8($M.1, $p215);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i217 := $zext.i8.i32($i216);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} vslice_dummy_var_17 := printk.ref.i32.i32.i32.i32(.str.17, $i207, $i211, $i214, $i217);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(11, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i220 := $load.i8($M.1, $p219);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i32($i220);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i222 := $and.i32($i221, 1);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i227 := $load.i16($M.1, $p226);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i228 := $zext.i16.i32($i227);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i229 := $add.i32($i228, 148);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} outb(23, $i229);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i231 := $load.i16($M.1, $p230);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i232 := $zext.i16.i32($i231);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i233 := $add.i32($i232, 132);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} outb($sub.i8(0, 23), $i233);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i223 == 1;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} vslice_dummy_var_18 := printk.ref(.str.18);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} vslice_dummy_var_19 := initio_reset_scsi($p0, 10);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb7:
    assume $i118 == 1;
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p119, $p120, $i121 := $p114, $p113, 0;
    goto $bb10;

  $bb10:
    call $i122, $i123, $i124, $p127, $i128, $p131, $i132, $i133, $i134, $i135, $i136, $p139, $i140, $p143, $i144, $p147, $p148, $i149, $i150, $p153, $p154, $i155, $i156, $p159, $i160, $p163, $i164, $i165, $i166, $i167, $p170, $i171, $p174, $i175, $p176, $i177, $i178, $p181, $i182, $p185, $i186, $i187, $i188, $i189, $i190, $p193, $i194, $p196, $i197, $p199, $i200, $p201, $i202, $i203, $i204, $p119, $p120, $i121 := initio_init_loop_$bb10($p0, $p115, $i122, $i123, $i124, $p127, $i128, $p131, $i132, $i133, $i134, $i135, $i136, $p139, $i140, $p143, $i144, $p147, $p148, $i149, $i150, $p153, $p154, $i155, $i156, $p159, $i160, $p163, $i164, $i165, $i166, $i167, $p170, $i171, $p174, $i175, $p176, $i177, $i178, $p181, $i182, $p185, $i186, $i187, $i188, $i189, $i190, $p193, $i194, $p196, $i197, $p199, $i200, $p201, $i202, $i203, $i204, $p119, $p120, $i121);
    goto $bb10_last;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.14, $p120);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i16($i122);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i121);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i124, 8)), $mul.ref(0, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p127, $i123);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i128 := $sext.i32.i64($i121);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i128, 8)), $mul.ref(0, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i132 := $load.i16($M.1, $p131);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i132);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, 64);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i135 == 1);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i121);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i140, 8)), $mul.ref(4, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p143, 0);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i144 := $sext.i32.i64($i121);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i144, 8)), $mul.ref(2, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p147, 0);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(19, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.1, $p148);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i121);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i150, 8)), $mul.ref(3, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p153, $i149);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p119, $mul.ref(1, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.3, $p119);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i156 := $sext.i32.i64($i121);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i156, 8)), $mul.ref(6, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p159, $i155);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i160 := $sext.i32.i64($i121);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i160, 8)), $mul.ref(6, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.1, $p163);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i164);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 255);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i166 == 1);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i121);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i171, 8)), $mul.ref(4, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p174, 0);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $i175 := $add.i64(1, 1);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p119, $mul.ref($i175, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.3, $p154);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i121);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i178, 8)), $mul.ref(7, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p181, $i177);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i182 := $sext.i32.i64($i121);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i182, 8)), $mul.ref(0, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i186 := $load.i16($M.1, $p185);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i187 := $zext.i16.i32($i186);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i188 := $and.i32($i187, 64511);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i189 := $trunc.i32.i16($i188);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i190 := $sext.i32.i64($i121);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i190, 8)), $mul.ref(0, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p193, $i189);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i194 := $sext.i32.i64($i121);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref($i194, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p196, 0);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i197 := $sext.i32.i64($i121);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(152, 1)), $mul.ref($i197, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p199, $sub.i8(0, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i200 := $add.i32($i121, 1);
    call {:si_unique_call 102} {:cexpr "i"} boogie_si_record_i32($i200);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($p120, $mul.ref(1, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.1, $p115);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i32($i202);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i204 := $sgt.i32($i203, $i200);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i204 == 1);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18:
    assume $i204 == 1;
    assume {:verifier.code 0} true;
    $p119, $p120, $i121 := $p176, $p201, $i200;
    goto $bb18_dummy;

  $bb15:
    assume $i166 == 1;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i121);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i167, 8)), $mul.ref(4, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p170, 1024);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i135 == 1;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i136 := $sext.i32.i64($i121);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i136, 8)), $mul.ref(4, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p139, 1024);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i56 == 1;
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(19, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p57, $sub.i8(0, 29));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(6, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 8);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_513;
}



const i91u_intr: ref;

axiom i91u_intr == $sub.ref(0, 87440);

procedure i91u_intr($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.1, $M.4, $M.5, $M.7, $M.9, $M.11;



implementation i91u_intr($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} {:cexpr "i91u_intr:arg:irqno"} boogie_si_record_i32($i0);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} ldv_spin_lock();
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3832)), $mul.ref(3832, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i5 := initio_isr($p4);
    call {:si_unique_call 111} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 3832)), $mul.ref(216, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} spin_unlock_irqrestore($p7, $u0);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i5, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;
}



const ldv_request_irq_26: ref;

axiom ldv_request_irq_26 == $sub.ref(0, 88472);

procedure ldv_request_irq_26($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.16, $M.5, $M.8, $M.17, $M.7, $M.10, $M.18, $M.9, $M.12, $M.19, $M.11;



implementation ldv_request_irq_26($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} {:cexpr "ldv_request_irq_26:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 114} {:cexpr "ldv_request_irq_26:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 116} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i6 := reg_check_1($p1);
    call {:si_unique_call 118} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 89504);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} dev_set_drvdata($p2, $p1);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    return;
}



const scsi_add_host: ref;

axiom scsi_add_host == $sub.ref(0, 90536);

procedure scsi_add_host($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.15;



implementation scsi_add_host($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i2 := ldv_scsi_add_host_with_dma_24($p0, $p1, $p1);
    call {:si_unique_call 122} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const scsi_scan_host: ref;

axiom scsi_scan_host == $sub.ref(0, 91568);

procedure scsi_scan_host($p0: ref);
  free requires assertsPassed;



implementation scsi_scan_host($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_27: ref;

axiom ldv_free_irq_27 == $sub.ref(0, 92600);

procedure ldv_free_irq_27($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation ldv_free_irq_27($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} {:cexpr "ldv_free_irq_27:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} free_irq($i0, $p1);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 93632);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} free_($p0);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 94664);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 127} $free($p0);
    return;
}



const ldv_scsi_add_host_with_dma_24: ref;

axiom ldv_scsi_add_host_with_dma_24 == $sub.ref(0, 95696);

procedure ldv_scsi_add_host_with_dma_24($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.15;



implementation ldv_scsi_add_host_with_dma_24($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i3 := scsi_add_host_with_dma($p0, $p1, $p2);
    call {:si_unique_call 129} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 130} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} ldv_initialize_scsi_host_template_3();
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const scsi_add_host_with_dma: ref;

axiom scsi_add_host_with_dma == $sub.ref(0, 96728);

procedure scsi_add_host_with_dma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_add_host_with_dma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 1} true;
    call {:si_unique_call 132} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 133} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_initialize_scsi_host_template_3: ref;

axiom ldv_initialize_scsi_host_template_3 == $sub.ref(0, 97760);

procedure ldv_initialize_scsi_host_template_3();
  free requires assertsPassed;
  modifies $M.15;



implementation ldv_initialize_scsi_host_template_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 1} true;
    call {:si_unique_call 134} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 135} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 98792);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p1);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 99824);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 137} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 139} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 100856);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(i91u_intr));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 101888);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.16, $M.5, $M.8, $M.17, $M.7, $M.10, $M.18, $M.9, $M.12, $M.19, $M.11;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i2 := $M.5;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.7;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.9;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.11;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $M.12 := $i0;
    call {:si_unique_call 147} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $M.19 := $p1;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 148} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $M.10 := $i0;
    call {:si_unique_call 145} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $M.18 := $p1;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 146} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $M.8 := $i0;
    call {:si_unique_call 143} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $M.17 := $p1;
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 144} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.6 := $i0;
    call {:si_unique_call 141} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $M.16 := $p1;
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 142} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 102920);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 149} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 150} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 1} true;
    call {:si_unique_call 151} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 103952);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.20;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 153} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    return;
}



const initio_isr: ref;

axiom initio_isr == $sub.ref(0, 104984);

procedure initio_isr($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $M.4, $M.5, $M.7, $M.9, $M.11;



implementation initio_isr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 220);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i5 := inb($i4);
    call {:si_unique_call 155} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(14, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.1, $p12);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 224);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} outb(31, $i15);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(14, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, 0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} vslice_dummy_var_20 := tulip_main($p0);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(14, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, 1);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.1, $p19);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 224);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} outb(15, $i22);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb5;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 106016);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.20;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} ldv_spin_unlock();
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 107048);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.20;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 162} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 108080);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 109112);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    return;
}



const inb: ref;

axiom inb == $sub.ref(0, 110144);

procedure inb($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} {:cexpr "inb:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 167} $i1 := devirtbounce(0, $i0);
    call {:si_unique_call 168} {:cexpr "value"} boogie_si_record_i8($i1);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 111176);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 170} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 171} devirtbounce.1(0, $i0, $i1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    return;
}



const tulip_main: ref;

axiom tulip_main == $sub.ref(0, 112208);

procedure tulip_main($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $M.4, $M.5, $M.7, $M.9, $M.11;



implementation tulip_main($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i8;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p84: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i32;
  var $i95: i8;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p4: ref;
  var $p106: ref;
  var $i107: i16;
  var $i108: i32;
  var $i109: i32;
  var $i110: i8;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p1, $i2, $i3, $p5, $i6, $i7, $i8, $p9, $i10, $i11, $i12, $p14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $p24, $p25, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $i42, $p43, $p44, $i45, $i46, $i47, $i48, $p49, $i50, $i51, $p52, $p53, $i54, $p55, $p56, $i57, $i58, $i59, $i60, $p61, $p62, $p63, $i64, $i65, $i66, $i67, $p68, $p69, $p70, $p71, $p73, $p75, $p77, $p79, $p81, $p83, $p85, $i86, $i87, $i88, $p89, $p90, $p84, $p91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $i100, $i101, $p102, $p103, $p104, $p105, $p4, $p106, $i107, $i108, $i109, $i110, $i111, $i112, $p113, $p114, $i115, $i116, $p117, $i118, $i119 := tulip_main_loop_$bb1($p0, $p1, $i2, $i3, $p5, $i6, $i7, $i8, $p9, $i10, $i11, $i12, $p14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $p24, $p25, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $i42, $p43, $p44, $i45, $i46, $i47, $i48, $p49, $i50, $i51, $p52, $p53, $i54, $p55, $p56, $i57, $i58, $i59, $i60, $p61, $p62, $p63, $i64, $i65, $i66, $i67, $p68, $p69, $p70, $p71, $p73, $p75, $p77, $p79, $p81, $p83, $p85, $i86, $i87, $i88, $p89, $p90, $p84, $p91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $i100, $i101, $p102, $p103, $p104, $p105, $p4, $p106, $i107, $i108, $i109, $i110, $i111, $i112, $p113, $p114, $i115, $i116, $p117, $i118, $i119);
    goto $bb1_last;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p1 := initio_find_done_scb($p0);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.1, $p106);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i108, 133);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i110 := inb($i109);
    call {:si_unique_call 179} {:cexpr "tmp"} boogie_si_record_i8($i110);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i111 := $sext.i8.i32($i110);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i111, 0);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.1, $p113);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $p117 := initio_find_first_pend_scb($p0);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i119 := $eq.i64($i118, 0);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  $bb41:
    assume $i119 == 1;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb37:
    assume $i116 == 1;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb33:
    assume $i112 == 1;
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb2:
    assume $i3 == 1;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p4 := $p1;
    goto $bb5;

  $bb5:
    call $p5, $i6, $i7, $i8, $p9, $i10, $i11, $i12, $p14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $p24, $p25, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $i42, $p43, $p85, $i86, $i87, $i88, $p89, $p90, $p84, $p91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $i100, $i101, $p102, $p103, $p104, $p105, $p4 := tulip_main_loop_$bb5($p0, $p5, $i6, $i7, $i8, $p9, $i10, $i11, $i12, $p14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $p24, $p25, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $i42, $p43, $p85, $i86, $i87, $i88, $p89, $p90, $p84, $p91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $i100, $i101, $p102, $p103, $p104, $p105, $p4);
    goto $bb5_last;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 40);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(10, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 1);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.1, $p85);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 2);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p90, 2);
    assume {:verifier.code 0} true;
    $p84 := $p4;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p84, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.1, $p91);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i94 := $or.i32($i93, 1);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p96, $i95);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.1, $p97);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 2);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p26 := initio_find_done_scb($p0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p26;
    goto $bb10_dummy;

  $bb29:
    assume $i101 == 1;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p84, $mul.ref(0, 352)), $mul.ref(80, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.1, $p102);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p0);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p84);
    call {:si_unique_call 180} devirtbounce.2($p103, $p104, $p105);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i88 == 1;
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p89, 20);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.1, $p34);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 2);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p84 := $p4;
    goto $bb25;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 4);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p43 := $p4;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(53, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.1, $p44);
    call {:si_unique_call 176} {:cexpr "len"} boogie_si_record_i8($i45);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $i45;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(53, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.1, $p49);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p52, $i51);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(76, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(44, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p55, $i54);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.1, $p56);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 103);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p61, $i60);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(10, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p62, 1);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(57, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.1, $p63);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 191);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(57, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p68, $i67);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p69, 0);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p70, 0);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(56, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p71, 6);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(0, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p73, 3);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(1, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p75, 0);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(2, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p77, 0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(3, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p79, 0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(4, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p81, $i48);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(5, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p83, 0);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} initio_push_pend_scb($p0, $p43);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i47 == 1;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb21;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref($i12, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 255);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(152, 1)), $mul.ref($i22, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, $i18);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, 0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} initio_append_pend_scb($p0, $p4);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_803;

  $bb35_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} tulip_scsi($p0);
    goto corral_source_split_796;
}



const tulip_scsi: ref;

axiom tulip_scsi == $sub.ref(0, 113240);

procedure tulip_scsi($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.20, $M.4, $M.5, $M.7, $M.9, $M.11;



implementation tulip_scsi($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $i73: i8;
  var $i74: i32;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i8;
  var $i81: i32;
  var $i82: i8;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i64;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i16;
  var $i103: i32;
  var $i104: i32;
  var $i105: i16;
  var $p106: ref;
  var $p107: ref;
  var $i108: i16;
  var $i109: i32;
  var $i110: i32;
  var $i111: i16;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i8;
  var $p117: ref;
  var $i118: i16;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $i122: i16;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i16;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i8;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i1;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i8;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 133);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i5 := inb($i4);
    call {:si_unique_call 183} {:cexpr "tmp___0"} boogie_si_record_i8($i5);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, $i5);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i5);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.1, $p62);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p66 := initio_find_first_pend_scb($p0);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(5, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.1, $p69);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i72 := $shl.i32($i71, 4);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i72);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i74 := $sext.i8.i32($i73);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.1, $p75);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i77 := $sext.i8.i32($i76);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i77, 15);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i74, $i78);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i8($i79);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i81);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.1, $p83);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i85, 137);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} outb($i82, $i86);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(40, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.1, $p87);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 1);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i90 == 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(40, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.1, $p146);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 2);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i149 == 1);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(40, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.1, $p162);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i32($i163);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 3);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i165 == 1);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} initio_unlink_pend_scb($p0, $p66);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p172, 22);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} initio_append_done_scb($p0, $p66);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb80:
    assume $i165 == 1;
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(88, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.1, $p166);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i168 := initio_abort_srb($p0, $p167);
    call {:si_unique_call 214} {:cexpr "tmp___5"} boogie_si_record_i32($i168);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i169 == 1);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(40, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p170, 2);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} initio_select_atn_stop($p0, $p66);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p171, 8);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb82:
    assume $i169 == 1;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} initio_unlink_pend_scb($p0, $p66);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} initio_release_scb($p0, $p66);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb62:
    assume $i149 == 1;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} initio_select_atn_stop($p0, $p66);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p150, 8);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.1, $p151);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 64);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb64:
    assume $i155 == 1;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i156 := wait_tulip($p0);
    call {:si_unique_call 208} {:cexpr "tmp___4"} boogie_si_record_i32($i156);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i156, $sub.i32(0, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb66:
    assume $i157 == 1;
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    call $i158, $i159, $i160, $i161 := tulip_scsi_loop_$bb69($p0, $i158, $i159, $i160, $i161);
    goto $bb69_last;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i158 := initio_next_state($p0);
    call {:si_unique_call 210} {:cexpr "tmp___3"} boogie_si_record_i32($i158);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, $sub.i32(0, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i160 := wait_tulip($p0);
    call {:si_unique_call 212} {:cexpr "tmp___4"} boogie_si_record_i32($i160);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, $sub.i32(0, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i161 == 1);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb75_dummy;

  $bb71:
    assume $i159 == 1;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb32:
    assume $i90 == 1;
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.1, $p93);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i64($i94);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.1, $p97);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i100 == 1);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p92, $mul.ref($i95, 8)), $mul.ref(4, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.1, $p107);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 63487);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i16($i110);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p92, $mul.ref($i95, 8)), $mul.ref(4, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p112, $i111);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p92, $mul.ref($i95, 8)), $mul.ref(2, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.1, $p113);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i8($i115);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i118 := $load.i16($M.1, $p117);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i118);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i119, 136);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} outb($i116, $i120);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p92, $mul.ref($i95, 8)), $mul.ref(0, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i122 := $load.i16($M.1, $p121);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 288);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i125 == 1);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p92, $mul.ref($i95, 8)), $mul.ref(0, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i127 := $load.i16($M.1, $p126);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i127);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 528);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 0);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i130 == 1);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.1, $p131);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i134 == 1);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} initio_select_atn($p0, $p66);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p66, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.1, $p135);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i138 := $and.i32($i137, 64);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb46:
    assume $i139 == 1;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i140 := wait_tulip($p0);
    call {:si_unique_call 201} {:cexpr "tmp___2"} boogie_si_record_i32($i140);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, $sub.i32(0, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb48:
    assume $i141 == 1;
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    call $i142, $i143, $i144, $i145 := tulip_scsi_loop_$bb51($p0, $i142, $i143, $i144, $i145);
    goto $bb51_last;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i142 := initio_next_state($p0);
    call {:si_unique_call 203} {:cexpr "tmp___1"} boogie_si_record_i32($i142);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, $sub.i32(0, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i144 := wait_tulip($p0);
    call {:si_unique_call 205} {:cexpr "tmp___2"} boogie_si_record_i32($i144);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, $sub.i32(0, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i145 == 1);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb57_dummy;

  $bb53:
    assume $i143 == 1;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb43:
    assume $i134 == 1;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} initio_select_atn3($p0, $p66);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i130 == 1;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} initio_select_atn_stop($p0, $p66);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i125 == 1;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} initio_select_atn_stop($p0, $p66);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i100 == 1;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p92, $mul.ref($i95, 8)), $mul.ref(4, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.1, $p101);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i104 := $or.i32($i103, 2048);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i16($i104);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p92, $mul.ref($i95, 8)), $mul.ref(4, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p106, $i105);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb29:
    assume $i68 == 1;
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb26:
    assume $i65 == 1;
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 7);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, $i13);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.1, $p15);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 134);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i19 := inb($i18);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(18, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p20, $i19);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.1, $p21);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 132);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i25 := inb($i24);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, $i25);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 16);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i35 := $sext.i8.i32($i34);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.1, $p40);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 64);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.1, $p46);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 8);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.1, $p52);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 33);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb21:
    assume $i60 == 1;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} vslice_dummy_var_25 := initio_next_state($p0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i50 == 1;
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} vslice_dummy_var_24 := int_initio_busfree($p0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} vslice_dummy_var_23 := int_initio_busfree($p0);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i37 := int_initio_resel($p0);
    call {:si_unique_call 188} {:cexpr "tmp"} boogie_si_record_i32($i37);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_22 := initio_next_state($p0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i31 == 1;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vslice_dummy_var_21 := int_initio_scsi_rst($p0);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb75_dummy:
    assume false;
    return;

  $bb69_last:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb57_dummy:
    assume false;
    return;

  $bb51_last:
    assume {:verifier.code 0} true;
    goto $bb52;
}



const initio_append_pend_scb: ref;

axiom initio_append_pend_scb == $sub.ref(0, 114272);

procedure initio_append_pend_scb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_append_pend_scb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2, 2);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $0.ref);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p1);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $p1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p1);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $p1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const initio_push_pend_scb: ref;

axiom initio_push_pend_scb == $sub.ref(0, 115304);

procedure initio_push_pend_scb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_push_pend_scb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2, 2);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $p4);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p4);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p1);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, $p1);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const initio_find_done_scb: ref;

axiom initio_find_done_scb == $sub.ref(0, 116336);

procedure initio_find_done_scb($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_find_done_scb($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p6);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p6);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $0.ref);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(144, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $0.ref);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const initio_find_first_pend_scb: ref;

axiom initio_find_first_pend_scb == $sub.ref(0, 117368);

procedure initio_find_first_pend_scb($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation initio_find_first_pend_scb($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i64;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i64;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i64;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p68: ref;
  var $p75: ref;
  var $p76: ref;
  var $p6: ref;
  var $p74: ref;
  var $p5: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p5 := $p2;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p12 := $p5;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p6 := $p2;
    goto $bb4;

  $bb4:
    call $p7, $i8, $i9, $i10, $p11, $p13, $i14, $i15, $i16, $p17, $i18, $i19, $i20, $p22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $i39, $i40, $i41, $p43, $i44, $i45, $p46, $i47, $i48, $i49, $p51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $p62, $i63, $i64, $i65, $i66, $i67, $p69, $p70, $p71, $i72, $i73, $p68, $p75, $p76, $p6, $p74 := initio_find_first_pend_scb_loop_$bb4($p0, $p7, $i8, $i9, $i10, $p11, $p13, $i14, $i15, $i16, $p17, $i18, $i19, $i20, $p22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $i39, $i40, $i41, $p43, $i44, $i45, $p46, $i47, $i48, $i49, $p51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $p62, $i63, $i64, $i65, $i66, $i67, $p69, $p70, $p71, $i72, $i73, $p68, $p75, $p76, $p6, $p74);
    goto $bb4_last;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(40, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 1);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p11 := $p6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref($i41, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.1, $p46);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(152, 1)), $mul.ref($i49, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.1, $p51);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i54 := $sge.i32($i45, $i53);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.1, $p56);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i59, 8)), $mul.ref(0, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.1, $p62);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 1024);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i55, $i65);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p68 := $p6;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p12 := $p68;
    goto $bb8;

  $bb19:
    assume $i67 == 1;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p71 := $p70;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p74 := $p71;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p5 := $p74;
    goto $bb3;

  $bb22:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p71;
    goto $bb22_dummy;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref($i20, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p71 := $p76;
    goto $bb21;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i29, 8)), $mul.ref(0, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.1, $p32);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 1024);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p37 := $p6;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb14;

  $bb15:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p12 := $p37;
    goto $bb8;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p12 := $p11;
    goto $bb8;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1308;
}



const int_initio_scsi_rst: ref;

axiom int_initio_scsi_rst == $sub.ref(0, 118400);

procedure int_initio_scsi_rst($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation int_initio_scsi_rst($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p35: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $i47: i64;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i32;
  var $i54: i16;
  var $i55: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $i46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 221);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i5 := inb($i4);
    call {:si_unique_call 221} {:cexpr "tmp___0"} boogie_si_record_i8($i5);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $p32 := initio_pop_busy_scb($p0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p40, $0.ref);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p41, $0.ref);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(6, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.1, $p42);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 0);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 1);
    return;

  $bb20:
    assume $i45 == 1;
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb23;

  $bb23:
    call $i47, $p50, $i51, $i52, $i53, $i54, $i55, $p58, $i59, $i60, $i61, $i62, $i46 := int_initio_scsi_rst_loop_$bb23($p0, $p42, $i47, $p50, $i51, $i52, $i53, $i54, $i55, $p58, $i59, $i60, $i61, $i62, $i46);
    goto $bb23_last;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i47, 8)), $mul.ref(0, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.1, $p50);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 64767);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i46);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i55, 8)), $mul.ref(0, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p58, $i54);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i46, 1);
    call {:si_unique_call 232} {:cexpr "i"} boogie_si_record_i32($i59);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.1, $p42);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, $i59);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i62 == 1);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i46 := $i59;
    goto $bb25_dummy;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p35 := $p32;
    goto $bb15;

  $bb15:
    call $p36, $p37, $i38, $i39, $p35 := int_initio_scsi_rst_loop_$bb15($p0, $p36, $p37, $i38, $i39, $p35);
    goto $bb15_last;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p36, 20);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} initio_append_done_scb($p0, $p35);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $p37 := initio_pop_busy_scb($p0);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $p35 := $p37;
    goto $bb17_dummy;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.1, $p9);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 216);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} outb(12, $i12);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.1, $p13);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 220);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i17 := inb($i16);
    call {:si_unique_call 224} {:cexpr "tmp"} boogie_si_record_i8($i17);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 4);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.1, $p28);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 133);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} outb(16, $i31);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $i21, $i22, $i23, $i24, $i25, $i26, $i27 := int_initio_scsi_rst_loop_$bb6($p13, $i21, $i22, $i23, $i24, $i25, $i26, $i27);
    goto $bb6_last;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} cpu_relax();
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.1, $p13);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 220);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i24 := inb($i23);
    call {:si_unique_call 227} {:cexpr "tmp"} boogie_si_record_i8($i24);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 4);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb8_dummy;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1460;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1438;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const int_initio_resel: ref;

axiom int_initio_resel == $sub.ref(0, 119432);

procedure int_initio_resel($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation int_initio_resel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i8;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i8;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i32;
  var $i102: i8;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $i126: i16;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i16;
  var $i131: i32;
  var $i132: i32;
  var $i133: i16;
  var $i134: i32;
  var $i135: i16;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $i139: i32;
  var $p140: ref;
  var $p141: ref;
  var $i142: i16;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i1;
  var $i58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.1, $p17);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 137);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i21 := inb($i20);
    call {:si_unique_call 234} {:cexpr "tar"} boogie_si_record_i8($i21);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.1, $p22);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 138);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i26 := inb($i25);
    call {:si_unique_call 236} {:cexpr "tmp"} boogie_si_record_i8($i26);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 15);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    call {:si_unique_call 237} {:cexpr "lun"} boogie_si_record_i8($i29);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i21);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p31, $mul.ref($i32, 8));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, $p33);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p31, $mul.ref($i32, 8)), $mul.ref(3, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.1, $p39);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 135);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} outb($i38, $i42);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p31, $mul.ref($i32, 8)), $mul.ref(2, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.1, $p47);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 136);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} outb($i46, $i50);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p31, $mul.ref($i32, 8)), $mul.ref(4, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.1, $p51);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 2048);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i55 == 1);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i16($i21);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i127 := $sext.i16.i32($i126);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i29);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i129 := $shl.i32($i128, 8);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i16($i129);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i131 := $sext.i16.i32($i130);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i132 := $or.i32($i127, $i131);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i16($i132);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32($i133);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $p136 := initio_find_busy_scb($p0, $i135);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i138 := $eq.i64($i137, 0);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p140, $p136);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p31, $mul.ref($i32, 8)), $mul.ref(4, 1));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i142 := $load.i16($M.1, $p141);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i142);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i144 := $and.i32($i143, 2048);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 0);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $r := $i58;
    return;

  $bb51:
    assume $i145 == 1;
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i146 := initio_msgin_accept($p0);
    call {:si_unique_call 266} {:cexpr "tmp___8"} boogie_si_record_i32($i146);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, $sub.i32(0, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i147 == 1;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 1);
    goto $bb11;

  $bb48:
    assume $i138 == 1;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i139 := initio_msgout_abort_targ($p0);
    call {:si_unique_call 264} {:cexpr "tmp___7"} boogie_si_record_i32($i139);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i58 := $i139;
    goto $bb11;

  $bb7:
    assume $i55 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i56 := initio_msgin_accept($p0);
    call {:si_unique_call 241} {:cexpr "tmp___0"} boogie_si_record_i32($i56);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, $sub.i32(0, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.1, $p59);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 7);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.1, $p63);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, 128);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} outl(1, $i66);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.1, $p67);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, 145);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} outb($sub.i8(0, 125), $i70);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i71 := wait_tulip($p0);
    call {:si_unique_call 246} {:cexpr "tmp___1"} boogie_si_record_i32($i71);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, $sub.i32(0, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.1, $p73);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, 140);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i77 := inb($i76);
    call {:si_unique_call 248} {:cexpr "msg"} boogie_si_record_i8($i77);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i79 := $ule.i32($i78, 31);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i79 == 1);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i77);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i81 := $ugt.i32($i80, 34);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i82 := initio_msgin_accept($p0);
    call {:si_unique_call 250} {:cexpr "tmp___2"} boogie_si_record_i32($i82);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, $sub.i32(0, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.1, $p84);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 7);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.1, $p88);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, 128);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} outl(1, $i91);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.1, $p92);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i94, 145);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} outb($sub.i8(0, 125), $i95);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i96 := wait_tulip($p0);
    call {:si_unique_call 254} {:cexpr "tmp___3"} boogie_si_record_i32($i96);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, $sub.i32(0, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.1, $p98);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, 140);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i102 := inb($i101);
    call {:si_unique_call 256} {:cexpr "tag"} boogie_si_record_i8($i102);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(40, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.1, $p103);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i64($i102);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p104, $mul.ref($i105, 352));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p104, $mul.ref($i105, 352)), $mul.ref(42, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.1, $p107);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i21);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i109, $i110);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb35, $bb37;

  $bb37:
    assume !($i111 == 1);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p104, $mul.ref($i105, 352)), $mul.ref(43, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.1, $p112);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i29);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i114, $i115);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p104, $mul.ref($i105, 352)), $mul.ref(8, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.1, $p118);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 16);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p123, $p106);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i124 := initio_msgin_accept($p0);
    call {:si_unique_call 262} {:cexpr "tmp___6"} boogie_si_record_i32($i124);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, $sub.i32(0, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i125 == 1;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 1);
    goto $bb11;

  $bb41:
    assume $i121 == 1;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i122 := initio_msgout_abort_tag($p0);
    call {:si_unique_call 260} {:cexpr "tmp___5"} boogie_si_record_i32($i122);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i58 := $i122;
    goto $bb11;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i117 := initio_msgout_abort_tag($p0);
    call {:si_unique_call 258} {:cexpr "tmp___4"} boogie_si_record_i32($i117);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i58 := $i117;
    goto $bb11;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb36;

  $bb32:
    assume $i97 == 1;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 1);
    goto $bb11;

  $bb29:
    assume $i87 == 1;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb26:
    assume $i83 == 1;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 1);
    goto $bb11;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb21;

  $bb17:
    assume $i72 == 1;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 1);
    goto $bb11;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i57 == 1;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 1);
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 8);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, $0.ref);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 247);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, $i14);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const initio_next_state: ref;

axiom initio_next_state == $sub.ref(0, 120464);

procedure initio_next_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20;



implementation initio_next_state($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i27: i32;
  var $i18: i32;
  var $i28: i1;
  var $i29: i32;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    call {:si_unique_call 267} {:cexpr "next"} boogie_si_record_i32($i5);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb1;

  $bb1:
    call $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i18, $i28, $i29 := initio_next_state_loop_$bb1($p0, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i18, $i28, $i29);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i6, 8);
    assume {:verifier.code 0} true;
    $i10 := $i6;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i27 := initio_bad_seq($p0);
    call {:si_unique_call 285} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i26 := $i27;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i25 := initio_bus_device_reset($p0);
    call {:si_unique_call 271} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb23;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i24 := initio_state_7($p0);
    call {:si_unique_call 269} {:cexpr "next"} boogie_si_record_i32($i24);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i18 := $i24;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i28 := $sle.i32($i18, 0);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i29 := $i18;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i6 := $i18;
    goto $bb27_dummy;

  $bb25:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i26 := $i29;
    goto $bb23;

  $bb5:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i6, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i12 == 1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i23 := initio_state_6($p0);
    call {:si_unique_call 275} {:cexpr "next"} boogie_si_record_i32($i23);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i18 := $i23;
    goto $bb22;

  $bb12:
    assume $i12 == 1;
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i22 := initio_state_5($p0);
    call {:si_unique_call 273} {:cexpr "next"} boogie_si_record_i32($i22);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i18 := $i22;
    goto $bb22;

  $bb3:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i6, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i14 == 1);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i21 := initio_state_4($p0);
    call {:si_unique_call 279} {:cexpr "next"} boogie_si_record_i32($i21);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i18 := $i21;
    goto $bb22;

  $bb16:
    assume $i14 == 1;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i20 := initio_state_3($p0);
    call {:si_unique_call 277} {:cexpr "next"} boogie_si_record_i32($i20);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i18 := $i20;
    goto $bb22;

  $bb14:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i15 == 1);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i19 := initio_state_2($p0);
    call {:si_unique_call 281} {:cexpr "next"} boogie_si_record_i32($i19);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i18 := $i19;
    goto $bb22;

  $bb18:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb20:
    assume $i16 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i17 := initio_state_1($p0);
    call {:si_unique_call 283} {:cexpr "next"} boogie_si_record_i32($i17);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb22;

  $bb27_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb2;
}



const int_initio_busfree: ref;

axiom int_initio_busfree == $sub.ref(0, 121496);

procedure int_initio_busfree($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation int_initio_busfree($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.1, $p14);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 133);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} outb(16, $i17);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.1, $p18);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 135);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} outb($sub.i8(0, 61), $i21);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.1, $p22);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 134);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} outb(4, $i25);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 1);
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 8);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} initio_unlink_busy_scb($p0, $p2);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 19);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} initio_append_done_scb($p0, $p2);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $0.ref);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $0.ref);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} initio_unlink_pend_scb($p0, $p2);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 17);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} initio_append_done_scb($p0, $p2);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const initio_select_atn_stop: ref;

axiom initio_select_atn_stop == $sub.ref(0, 122528);

procedure initio_select_atn_stop($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_select_atn_stop($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 8);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, $i6);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 1);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p1);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p11, $mul.ref($i14, 8));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, $p15);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.1, $p17);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 145);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} outb(30, $i20);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    return;
}



const initio_select_atn3: ref;

axiom initio_select_atn3 == $sub.ref(0, 123560);

procedure initio_select_atn3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_select_atn3($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i38: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i8;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $i37: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 8);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, $i6);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 2);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(57, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.1, $p13);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 140);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} outb($i12, $i16);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.1, $p21);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 140);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} outb($i20, $i24);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(59, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.1, $p29);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 140);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} outb($i28, $i32);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(56, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, 0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.1, $p54);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i64($i55);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p53, $mul.ref($i56, 8));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p58, $p57);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p59, $p1);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.1, $p60);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 145);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} outb(49, $i63);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i36 == 1;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb4;

  $bb4:
    call $i38, $p40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i37 := initio_select_atn3_loop_$bb4($p0, $p1, $p33, $i38, $p40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i37);
    goto $bb4_last;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref($i38, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.1, $p40);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.1, $p44);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i46, 140);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} outb($i43, $i47);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i37, 1);
    call {:si_unique_call 298} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p33);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i51 := $sgt.i32($i50, $i48);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i51 == 1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i37 := $i48;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1842;
}



const initio_select_atn: ref;

axiom initio_select_atn == $sub.ref(0, 124592);

procedure initio_select_atn($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_select_atn($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i22: i64;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $i21: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 8);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, $i6);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 2);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(57, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.1, $p13);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 140);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} outb($i12, $i16);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(56, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, 0);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p37, $mul.ref($i40, 8));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p42, $p41);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p43, $p1);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.1, $p44);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i46, 145);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} outb(17, $i47);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb4;

  $bb4:
    call $i22, $p24, $i25, $i26, $i27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i21 := initio_select_atn_loop_$bb4($p0, $p1, $p17, $i22, $p24, $i25, $i26, $i27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i21);
    goto $bb4_last;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref($i22, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.1, $p28);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 140);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} outb($i27, $i31);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i21, 1);
    call {:si_unique_call 302} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p17);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, $i32);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i35 == 1);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i32;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1903;
}



const wait_tulip: ref;

axiom wait_tulip == $sub.ref(0, 125624);

procedure wait_tulip($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation wait_tulip($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i8;
  var $p79: ref;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i16;
  var $i95: i32;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $p104: ref;
  var $p105: ref;
  var $i106: i16;
  var $i107: i32;
  var $i108: i32;
  var $p109: ref;
  var $i110: i16;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 133);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i5 := inb($i4);
    call {:si_unique_call 305} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, $i5);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i5);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i8 := $sge.i32($i7, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.1, $p15);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 132);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i19 := inb($i18);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p20, $i19);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 7);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, $i25);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.1, $p27);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 134);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i31 := inb($i30);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(18, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, $i31);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i35 := $sext.i8.i32($i34);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.1, $p39);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 64);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 16);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.1, $p51);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 8);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.1, $p114);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i117 := $and.i32($i116, 33);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.1, $p122);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i38 := $i124;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb28:
    assume $i118 == 1;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.1, $p119);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i38 := $i121;
    goto $bb11;

  $bb19:
    assume $i55 == 1;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(8, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.1, $p56);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 32);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(8, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.1, $p88);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 1);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i113 := int_initio_busfree($p0);
    call {:si_unique_call 326} {:cexpr "tmp___3"} boogie_si_record_i32($i113);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i38 := $i113;
    goto $bb11;

  $bb24:
    assume $i92 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i94 := $load.i16($M.1, $p93);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i94);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, 133);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} outb(16, $i96);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p97, $0.ref);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p98, $0.ref);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(8, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.1, $p99);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 254);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(8, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p104, $i103);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.1, $p105);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i107, 135);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} outb($sub.i8(0, 61), $i108);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.1, $p109);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i110);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i111, 134);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} outb(4, $i112);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 1);
    goto $bb11;

  $bb21:
    assume $i60 == 1;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.1, $p61);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, 133);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} outb(16, $i64);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} initio_unlink_busy_scb($p0, $p66);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p69, 0);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.1, $p70);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} initio_append_done_scb($p0, $p71);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p72, $0.ref);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p73, $0.ref);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(8, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.1, $p74);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 223);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(8, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p79, $i78);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.1, $p80);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, 135);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} outb($sub.i8(0, 61), $i83);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.1, $p84);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, 134);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} outb(4, $i87);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 1);
    goto $bb11;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i50 := int_initio_scsi_rst($p0);
    call {:si_unique_call 316} {:cexpr "tmp___2"} boogie_si_record_i32($i50);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i38 := $i50;
    goto $bb11;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i44 := int_initio_busfree($p0);
    call {:si_unique_call 314} {:cexpr "tmp___1"} boogie_si_record_i32($i44);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i38 := $i44;
    goto $bb11;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i37 := int_initio_resel($p0);
    call {:si_unique_call 312} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb11;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i9, $i10, $i11, $i12, $i13, $i14 := wait_tulip_loop_$bb4($p1, $p6, $i9, $i10, $i11, $i12, $i13, $i14);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} cpu_relax();
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, $p1);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 133);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i12 := inb($i11);
    call {:si_unique_call 308} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, $i12);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i14 := $sge.i32($i13, 0);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const initio_abort_srb: ref;

axiom initio_abort_srb == $sub.ref(0, 126656);

procedure initio_abort_srb($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.1, $M.4, $M.5, $M.7, $M.9, $M.11;



implementation initio_abort_srb($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p27: ref;
  var $p28: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i64;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $i116: i8;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i64;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i8;
  var $p150: ref;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i64;
  var $i164: i1;
  var $p87: ref;
  var $p88: ref;
  var $p165: ref;
  var $i22: i32;
  var vslice_dummy_var_26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} ldv_spin_lock();
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(14, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(384, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} spin_unlock_irqrestore($p165, $u0);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i22 := 4;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb34:
    assume $i86 == 1;
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p87, $p88 := $p84, $p84;
    goto $bb37;

  $bb37:
    call $p89, $p90, $i91, $i92, $i93, $p94, $p95, $p161, $p162, $i163, $i164, $p87, $p88 := initio_abort_srb_loop_$bb37($p1, $p89, $p90, $i91, $i92, $i93, $p94, $p95, $p161, $p162, $i163, $i164, $p87, $p88);
    goto $bb37_last;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 352)), $mul.ref(88, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.1, $p89);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p1);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i91, $i92);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p94, $p95 := $p88, $p87;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p88, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.1, $p161);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p162);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i164 := $ne.i64($i163, 0);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i164 == 1);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb58:
    assume $i164 == 1;
    assume {:verifier.code 0} true;
    $p87, $p88 := $p88, $p162;
    goto $bb58_dummy;

  $bb39:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.1, $p96);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p94);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i98, $i99);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i100 == 1);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p94, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.1, $p102);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 0);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i105 == 1);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p94, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.1, $p107);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i109);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref($i110, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.1, $p112);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i115 := $sub.i32($i114, 1);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i8($i115);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p94, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.1, $p117);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i119);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref($i120, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p122, $i116);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.1, $p123);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p94);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i127 := $eq.i64($i125, $i126);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i127 == 1);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p94, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.1, $p134);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p95, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p136, $p135);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.1, $p137);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p138);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p94);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i141 := $eq.i64($i139, $i140);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p94, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p143, $0.ref);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p94, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p144, 26);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p94, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.1, $p145);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i148 := $or.i32($i147, 1);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i8($i148);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p94, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p150, $i149);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p94, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.1, $p151);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 2);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(384, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} spin_unlock_irqrestore($p160, $u0);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb6;

  $bb54:
    assume $i155 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p94, $mul.ref(0, 352)), $mul.ref(80, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.1, $p156);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p0);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p94);
    call {:si_unique_call 339} devirtbounce.2($p157, $p158, $p159);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i141 == 1;
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p142, $p95);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb45:
    assume $i127 == 1;
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p94, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.1, $p128);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p130, $p129);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p129);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i132 := $eq.i64($i131, 0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i132 == 1;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p133, $0.ref);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb43:
    assume $i105 == 1;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(384, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} spin_unlock_irqrestore($p106, $u0);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i22 := 3;
    goto $bb6;

  $bb41:
    assume $i100 == 1;
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(384, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} spin_unlock_irqrestore($p101, $u0);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i22 := 3;
    goto $bb6;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p27, $p28 := $p24, $p24;
    goto $bb11;

  $bb11:
    call $p29, $p30, $i31, $i32, $i33, $p34, $p35, $p79, $p80, $i81, $i82, $p27, $p28 := initio_abort_srb_loop_$bb11($p1, $p29, $p30, $i31, $i32, $i33, $p34, $p35, $p79, $p80, $i81, $i82, $p27, $p28);
    goto $bb11_last;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 352)), $mul.ref(88, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p1);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p34, $p35 := $p28, $p27;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p28, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, $p79);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i82 == 1);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb31:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $p27, $p28 := $p28, $p80;
    goto $bb31_dummy;

  $bb13:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p34);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i38, $i39);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p34);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i44, $i45);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p34, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p35, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p55, $p54);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p34);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i58, $i59);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p34, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p62, 26);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p34, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.1, $p63);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i65, 1);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p34, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p68, $i67);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p34, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.1, $p69);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 2);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(384, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} spin_unlock_irqrestore($p78, $u0);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb6;

  $bb27:
    assume $i73 == 1;
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p34, $mul.ref(0, 352)), $mul.ref(80, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.1, $p74);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p0);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p34);
    call {:si_unique_call 335} devirtbounce.2($p75, $p76, $p77);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i60 == 1;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p61, $p35);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p34, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p49, $p48);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p48);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i51 == 1;
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p52, $0.ref);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(384, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} spin_unlock_irqrestore($p41, $u0);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i22 := 3;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.1, $p10);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 224);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} outb(31, $i13);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(384, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} spin_unlock_irqrestore($p14, $u0);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} vslice_dummy_var_26 := tulip_main($p0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} ldv_spin_lock();
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(14, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, 1);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.1, $p17);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 224);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} outb(15, $i20);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(384, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} spin_unlock_irqrestore($p21, $u0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb6;

  $bb58_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2246;

  $bb31_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2155;
}



const initio_unlink_pend_scb: ref;

axiom initio_unlink_pend_scb == $sub.ref(0, 127688);

procedure initio_unlink_pend_scb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_unlink_pend_scb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p6, $p7 := $p3, $p3;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $p11, $p12, $p34, $p35, $i36, $i37, $p6, $p7 := initio_unlink_pend_scb_loop_$bb4($p1, $i8, $i9, $i10, $p11, $p12, $p34, $p35, $i36, $i37, $p6, $p7);
    goto $bb4_last;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p7);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i8, $i9);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p11, $p12 := $p7, $p6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $p6, $p7 := $p7, $p35;
    goto $bb19_dummy;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p11);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i15, $i16);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, $p25);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p11);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i29, $i30);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, $0.ref);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p32, $p12);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, $p19);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p19);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, $0.ref);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2368;
}



const initio_release_scb: ref;

axiom initio_release_scb == $sub.ref(0, 128720);

procedure initio_release_scb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.20, $M.1;



implementation initio_release_scb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} ldv_spin_lock();
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(88, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $0.ref);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p3, 0);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $0.ref);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $p1);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, $p1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(312, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} spin_unlock_irqrestore($p15, $u0);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $p1);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p1);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const initio_append_done_scb: ref;

axiom initio_append_done_scb == $sub.ref(0, 129752);

procedure initio_append_done_scb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_append_done_scb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2, 32);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $0.ref);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(144, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p1);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(144, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $p1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(144, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p1);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(144, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $p1);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cpu_relax: ref;

axiom cpu_relax == $sub.ref(0, 130784);

procedure cpu_relax();
  free requires assertsPassed;



implementation cpu_relax()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} rep_nop();
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    return;
}



const initio_unlink_busy_scb: ref;

axiom initio_unlink_busy_scb == $sub.ref(0, 131816);

procedure initio_unlink_busy_scb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_unlink_busy_scb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i64;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i16;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p6, $p7 := $p3, $p3;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $p11, $p12, $p72, $p73, $i74, $i75, $p6, $p7 := initio_unlink_busy_scb_loop_$bb4($p1, $i8, $i9, $i10, $p11, $p12, $p72, $p73, $i74, $i75, $p6, $p7);
    goto $bb4_last;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p7);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i8, $i9);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p11, $p12 := $p7, $p6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p7, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i75 == 1);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $p6, $p7 := $p7, $p73;
    goto $bb22_dummy;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p11);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i15, $i16);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, $p25);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p11);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i29, $i30);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, $0.ref);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.1, $p34);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.1, $p54);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i57, 8)), $mul.ref(0, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.1, $p60);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 64511);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.1, $p65);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i68, 8)), $mul.ref(0, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p71, $i64);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref($i41, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i45, 1);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p48);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref($i51, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p53, $i47);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p32, $p12);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, $p19);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p19);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, $0.ref);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2481;
}



const rep_nop: ref;

axiom rep_nop == $sub.ref(0, 132848);

procedure rep_nop();
  free requires assertsPassed;



implementation rep_nop()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} devirtbounce.3(0);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    return;
}



const initio_state_1: ref;

axiom initio_state_1 == $sub.ref(0, 133880);

procedure initio_state_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_state_1($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i8;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i16;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i16;
  var $i83: i32;
  var $i84: i32;
  var $i85: i16;
  var $p86: ref;
  var $p87: ref;
  var $i88: i16;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $i94: i32;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $i100: i16;
  var $i101: i32;
  var $i102: i32;
  var $i103: i64;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i8;
  var $p108: ref;
  var $i109: i16;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $i113: i16;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $i117: i16;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $p123: ref;
  var $i124: i16;
  var $i125: i32;
  var $i126: i32;
  var $p127: ref;
  var $i128: i16;
  var $i129: i32;
  var $i130: i32;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i8;
  var $p135: ref;
  var $i136: i16;
  var $i137: i32;
  var $i138: i32;
  var $i122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} initio_unlink_pend_scb($p0, $p2);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} initio_append_busy_scb($p0, $p2);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.1, $p9);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 135);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} outb($i8, $i12);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 6);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i124 := $load.i16($M.1, $p123);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i32($i124);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i125, 133);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} outb(16, $i126);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i128 := $load.i16($M.1, $p127);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i129 := $zext.i16.i32($i128);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i130 := $add.i32($i129, 144);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i131 := inb($i130);
    call {:si_unique_call 367} {:cexpr "tmp___0"} boogie_si_record_i8($i131);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i132, 71);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i8($i133);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i136 := $load.i16($M.1, $p135);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i137 := $zext.i16.i32($i136);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i137, 144);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} outb($i134, $i138);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i122 := 3;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $r := $i122;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.1, $p17);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 134);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} outb(5, $i20);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(57, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.1, $p25);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 140);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} outb($i24, $i28);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.1, $p49);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 288);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i53 == 1);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.1, $p76);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 528);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i117 := $load.i16($M.1, $p116);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i32($i117);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i118, 145);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} outb(3, $i119);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i120 := wait_tulip($p0);
    call {:si_unique_call 359} {:cexpr "tmp"} boogie_si_record_i32($i120);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, $sub.i32(0, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i121 == 1;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i122 := $sub.i32(0, 1);
    goto $bb14;

  $bb9:
    assume $i80 == 1;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.1, $p81);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i83, 512);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p86, $i85);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i88 := $load.i16($M.1, $p87);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i88);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, 140);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} outb(1, $i90);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.1, $p91);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, 140);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} outb(3, $i94);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.1, $p95);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i97, 140);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} outb(1, $i98);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.1, $p99);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 7);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i102);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref($i103, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.21, $p104);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8($i106);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.1, $p108);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i110, 140);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} outb($i107, $i111);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i113 := $load.i16($M.1, $p112);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i113);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i114, 140);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} outb(15, $i115);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i53 == 1;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.1, $p54);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i56, 256);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p59, $i58);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.1, $p60);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 140);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} outb(1, $i63);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.1, $p64);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 140);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} outb(2, $i67);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.1, $p68);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, 140);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} outb(3, $i71);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.1, $p72);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 140);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} outb(1, $i75);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i32 == 1;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.1, $p37);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 140);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} outb($i36, $i40);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(59, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.1, $p45);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 140);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} outb($i44, $i48);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const initio_state_2: ref;

axiom initio_state_2 == $sub.ref(0, 134912);

procedure initio_state_2($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_state_2($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} initio_unlink_pend_scb($p0, $p2);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} initio_append_busy_scb($p0, $p2);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.1, $p9);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 135);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} outb($i8, $i12);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(18, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 32);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.1, $p19);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 133);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} outb(16, $i22);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.1, $p23);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 144);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i27 := inb($i26);
    call {:si_unique_call 374} {:cexpr "tmp"} boogie_si_record_i8($i27);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 71);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.1, $p31);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 144);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} outb($i30, $i34);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i18 := 3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i18 := 4;
    goto $bb3;
}



const initio_state_3: ref;

axiom initio_state_3 == $sub.ref(0, 135944);

procedure initio_state_3($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_state_3($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i13: i1;
  var $i12: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i20: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i19: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var $i69: i32;
  var $i70: i16;
  var $p71: ref;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $i87: i32;
  var $i88: i64;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i8;
  var $p93: ref;
  var $i94: i16;
  var $i95: i32;
  var $i96: i32;
  var $p97: ref;
  var $i98: i16;
  var $i99: i32;
  var $i100: i32;
  var $p101: ref;
  var $i102: i16;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i16;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $i112: i16;
  var $i113: i32;
  var $i114: i32;
  var $i115: i8;
  var $i116: i32;
  var $i117: i32;
  var $i118: i8;
  var $p119: ref;
  var $i120: i16;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i12, $p46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $p71, $p72, $i73, $i74, $i75, $p76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $p93, $i94, $i95, $i96, $p97, $i98, $i99, $i100, $p101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $p119, $i120, $i121, $i122 := initio_state_3_loop_$bb1($p0, $p2, $p4, $p5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i12, $p46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $p71, $p72, $i73, $i74, $i75, $p76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $p93, $i94, $i95, $i96, $p97, $i98, $i99, $i100, $p101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $p119, $i120, $i121, $i122);
    goto $bb1_last;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i123 := initio_bad_seq($p0);
    call {:si_unique_call 404} {:cexpr "tmp___6"} boogie_si_record_i32($i123);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i40 := $i123;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p46, 3);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i47 := initio_msgin($p0);
    call {:si_unique_call 377} {:cexpr "tmp___1"} boogie_si_record_i32($i47);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, $sub.i32(0, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  $bb32:
    assume $i48 == 1;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 1);
    goto $bb27;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.1, $p51);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 528);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i55 == 1);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.1, $p66);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i68, 512);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p71, $i70);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.1, $p72);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 140);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} outb(1, $i75);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.1, $p76);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 140);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} outb(3, $i79);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.1, $p80);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, 140);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} outb(1, $i83);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.1, $p84);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 7);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i87);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref($i88, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.21, $p89);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i8($i91);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i94 := $load.i16($M.1, $p93);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i94);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, 140);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} outb($i92, $i96);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i98 := $load.i16($M.1, $p97);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i98);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, 140);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} outb(15, $i100);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.1, $p101);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, 145);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} outb(3, $i104);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i105 := wait_tulip($p0);
    call {:si_unique_call 398} {:cexpr "tmp___4"} boogie_si_record_i32($i105);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, $sub.i32(0, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.1, $p107);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i109, 133);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} outb(16, $i110);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i112 := $load.i16($M.1, $p111);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i112);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i113, 144);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i115 := inb($i114);
    call {:si_unique_call 401} {:cexpr "tmp___5"} boogie_si_record_i8($i115);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i117 := $and.i32($i116, 71);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i8($i117);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i120 := $load.i16($M.1, $p119);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i120);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i121, 144);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} outb($i118, $i122);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb45:
    assume $i106 == 1;
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 1);
    goto $bb27;

  $bb39:
    assume $i55 == 1;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.1, $p56);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 140);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} outb(8, $i59);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.1, $p60);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 145);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} outb(3, $i63);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i64 := wait_tulip($p0);
    call {:si_unique_call 390} {:cexpr "tmp___3"} boogie_si_record_i32($i64);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, $sub.i32(0, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i65 == 1;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 1);
    goto $bb27;

  $bb3:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i7, 3);
    assume {:verifier.code 0} true;
    $i12 := $i7;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb12:
    assume $i13 == 1;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i49 := initio_status_msg($p0);
    call {:si_unique_call 379} {:cexpr "tmp___2"} boogie_si_record_i32($i49);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, $sub.i32(0, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36:
    assume $i50 == 1;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 1);
    goto $bb27;

  $bb10:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(56, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 0);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.1, $p34);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 145);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} outb(3, $i37);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i38 := wait_tulip($p0);
    call {:si_unique_call 384} {:cexpr "tmp"} boogie_si_record_i32($i38);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, $sub.i32(0, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 2);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i40 := 4;
    goto $bb27;

  $bb29:
    assume $i44 == 1;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i45 := initio_bad_seq($p0);
    call {:si_unique_call 386} {:cexpr "tmp___0"} boogie_si_record_i32($i45);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i40 := $i45;
    goto $bb27;

  $bb25:
    assume $i39 == 1;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 1);
    goto $bb27;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb20;

  $bb20:
    call $i20, $p22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i19 := initio_state_3_loop_$bb20($p0, $p2, $p15, $i20, $p22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i19);
    goto $bb20_last;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref($i20, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.1, $p26);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 140);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} outb($i25, $i29);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i19, 1);
    call {:si_unique_call 381} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.1, $p15);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i32, $i30);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i33 == 1);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i30;
    goto $bb22_dummy;

  $bb22_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2826;

  $bb35_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_2798;
}



const initio_state_4: ref;

axiom initio_state_4 == $sub.ref(0, 136976);

procedure initio_state_4($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_state_4($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i16: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 24);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 24);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $p12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i16, $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $p44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i57, $i58 := initio_state_4_loop_$bb8($p0, $p2, $p9, $p12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i16, $p24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $p44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i57, $i58);
    goto $bb8_last;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 3);
    assume {:verifier.code 0} true;
    $i16 := $i14;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i14, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i14, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i14, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i56 := initio_bad_seq($p0);
    call {:si_unique_call 420} {:cexpr "tmp___5"} boogie_si_record_i32($i56);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i8 := $i56;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb18:
    assume $i19 == 1;
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, 4);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i33 := initio_msgin($p0);
    call {:si_unique_call 406} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, $sub.i32(0, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p9);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb50_dummy;

  $bb9:
    assume $i58 == 1;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := 6;
    goto $bb3;

  $bb37:
    assume $i34 == 1;
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 8);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i39 == 1);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.1, $p44);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i46, 140);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} outb(8, $i47);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.1, $p48);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 145);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} outb(3, $i51);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i52 := wait_tulip($p0);
    call {:si_unique_call 418} {:cexpr "tmp___2"} boogie_si_record_i32($i52);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, $sub.i32(0, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb45:
    assume $i53 == 1;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;

  $bb40:
    assume $i39 == 1;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p40, 0);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p41, 18);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i42 := initio_msgout_ide($p0);
    call {:si_unique_call 414} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, $sub.i32(0, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i8 := 6;
    goto $bb3;

  $bb42:
    assume $i43 == 1;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;

  $bb14:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i14, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb20;

  $bb21:
    assume $i20 == 1;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 24);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i30 := initio_status_msg($p0);
    call {:si_unique_call 412} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, $sub.i32(0, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i31 == 1;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;

  $bb30:
    assume $i28 == 1;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, 18);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb12:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i16, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i16, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb27;

  $bb25:
    assume $i22 == 1;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i54 := initio_xfer_data_in($p0);
    call {:si_unique_call 408} {:cexpr "tmp___3"} boogie_si_record_i32($i54);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i8 := $i54;
    goto $bb3;

  $bb23:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i16, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb27;

  $bb28:
    assume $i23 == 1;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i55 := initio_xfer_data_out($p0);
    call {:si_unique_call 410} {:cexpr "tmp___4"} boogie_si_record_i32($i55);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i8 := $i55;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i8 := 6;
    goto $bb3;

  $bb50_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const initio_state_5: ref;

axiom initio_state_5 == $sub.ref(0, 138008);

procedure initio_state_5($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_state_5($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i8;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i16;
  var $i76: i32;
  var $i77: i32;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i64;
  var $i83: i64;
  var $p85: ref;
  var $i86: i16;
  var $i87: i32;
  var $i88: i32;
  var $i89: i8;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i84: i64;
  var $i93: i64;
  var $p94: ref;
  var $i95: i16;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i103: i16;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $i107: i16;
  var $i108: i32;
  var $i109: i32;
  var $i110: i8;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i114: i16;
  var $i115: i32;
  var $i116: i32;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i121: i1;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i16;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $p134: ref;
  var $i135: i16;
  var $i136: i32;
  var $i137: i32;
  var $i138: i8;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i16;
  var $i144: i32;
  var $i145: i32;
  var $i133: i64;
  var $i59: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $i149: i32;
  var $i150: i64;
  var $i151: i64;
  var $i152: i32;
  var $p153: ref;
  var $p154: ref;
  var $i155: i8;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i16;
  var $i162: i64;
  var $p163: ref;
  var $p164: ref;
  var $i165: i16;
  var $i166: i64;
  var $p167: ref;
  var $i168: i16;
  var $i169: i64;
  var $i170: i1;
  var $p174: ref;
  var $i175: i32;
  var $i176: i64;
  var $i177: i64;
  var $i178: i1;
  var $p179: ref;
  var $i180: i64;
  var $i181: i64;
  var $p182: ref;
  var $i183: i32;
  var $i184: i64;
  var $i185: i64;
  var $p186: ref;
  var $i187: i32;
  var $i188: i32;
  var $i189: i32;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i193: i32;
  var $i194: i32;
  var $p195: ref;
  var $p196: ref;
  var $i197: i32;
  var $i198: i32;
  var $p199: ref;
  var $i200: i16;
  var $i201: i32;
  var $i202: i32;
  var $i203: i32;
  var $i204: i32;
  var $p205: ref;
  var $p206: ref;
  var $i207: i16;
  var $i208: i8;
  var $i209: i32;
  var $i210: i8;
  var $i211: i32;
  var $i212: i32;
  var $i213: i8;
  var $p214: ref;
  var $i215: i16;
  var $p216: ref;
  var $p217: ref;
  var $i218: i64;
  var $i219: i16;
  var $i220: i64;
  var $i221: i1;
  var $i171: i64;
  var $p172: ref;
  var $i173: i64;
  var $p222: ref;
  var $i223: i32;
  var $i224: i32;
  var $i225: i32;
  var $p226: ref;
  var $i132: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 128);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i7 := inl($i6);
    call {:si_unique_call 422} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, 16777215);
    call {:si_unique_call 423} {:cexpr "cnt"} boogie_si_record_i64($i9);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.1, $p10);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 216);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i14 := inb($i13);
    call {:si_unique_call 425} {:cexpr "tmp___10"} boogie_si_record_i8($i14);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 32);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.1, $p60);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 134);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $i64 := inb($i63);
    call {:si_unique_call 427} {:cexpr "tmp___5"} boogie_si_record_i8($i64);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 4);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i93 := $i9;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.1, $p94);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i96, 221);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i98 := inb($i97);
    call {:si_unique_call 445} {:cexpr "tmp___7"} boogie_si_record_i8($i98);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 1);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i121 := $eq.i64($i93, 1);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i135 := $load.i16($M.1, $p134);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i136 := $zext.i16.i32($i135);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i137 := $add.i32($i136, 134);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i138 := inb($i137);
    call {:si_unique_call 453} {:cexpr "tmp___9"} boogie_si_record_i8($i138);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i140 := $and.i32($i139, 4);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 0);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i133 := $i93;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i59 := $i133;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i146 := $eq.i64($i59, 0);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.1, $p148);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i150 := $zext.i32.i64($i149);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i151 := $sub.i64($i150, $i59);
    call {:si_unique_call 458} {:cexpr "xcnt"} boogie_si_record_i64($i151);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i64.i32($i59);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p153, $i152);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.1, $p154);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i156 := $sext.i8.i32($i155);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i157 := $slt.i32($i156, 0);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i157 == 1);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(44, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.1, $p222);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i64.i32($i151);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i225 := $add.i32($i223, $i224);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(44, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p226, $i225);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i132 := 4;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $r := $i132;
    return;

  $bb51:
    assume $i157 == 1;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(96, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(12, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i161 := $load.i16($M.1, $p160);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i162 := $zext.i16.i64($i161);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p159, $mul.ref($i162, 8));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(12, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i165 := $load.i16($M.1, $p164);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i166 := $zext.i16.i64($i165);
    call {:si_unique_call 459} {:cexpr "i"} boogie_si_record_i64($i166);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(14, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i168 := $load.i16($M.1, $p167);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i169 := $zext.i16.i64($i168);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i170 := $ugt.i64($i169, $i166);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i132 := 6;
    goto $bb42;

  $bb53:
    assume $i170 == 1;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i171, $p172, $i173 := $i166, $p163, $i151;
    goto $bb56;

  $bb56:
    call $p174, $i175, $i176, $i177, $i178, $p179, $i180, $i181, $p217, $i218, $i219, $i220, $i221, $i171, $p172, $i173 := initio_state_5_loop_$bb56($p167, $p174, $i175, $i176, $i177, $i178, $p179, $i180, $i181, $p217, $i218, $i219, $i220, $i221, $i171, $p172, $i173);
    goto $bb56_last;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p172, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.1, $p174);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i176 := $zext.i32.i64($i175);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i177 := $sub.i64($i173, $i176);
    call {:si_unique_call 460} {:cexpr "xcnt"} boogie_si_record_i64($i177);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i178 := $slt.i64($i177, 0);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p179, $i180, $i181 := $p172, $i171, $i177;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p172, $mul.ref(1, 8));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i218 := $add.i64($i171, 1);
    call {:si_unique_call 462} {:cexpr "i"} boogie_si_record_i64($i218);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i219 := $load.i16($M.1, $p167);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i220 := $zext.i16.i64($i219);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i221 := $ugt.i64($i220, $i218);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i221 == 1);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb61:
    assume $i221 == 1;
    assume {:verifier.code 0} true;
    $i171, $p172, $i173 := $i218, $p217, $i177;
    goto $bb61_dummy;

  $bb58:
    assume $i178 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p179, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.1, $p182);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i184 := $zext.i32.i64($i183);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i185 := $add.i64($i184, $i181);
    call {:si_unique_call 461} {:cexpr "xcnt"} boogie_si_record_i64($i185);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p179, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.1, $p186);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i188 := $trunc.i64.i32($i185);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i189 := $add.i32($i187, $i188);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p179, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p190, $i189);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p179, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.1, $p191);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i64.i32($i185);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i194 := $sub.i32($i192, $i193);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p179, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p195, $i194);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(44, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.1, $p196);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i64.i32($i180);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(12, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i200 := $load.i16($M.1, $p199);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i200);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i202 := $sub.i32($i198, $i201);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i203 := $shl.i32($i202, 3);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i204 := $add.i32($i197, $i203);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(44, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p205, $i204);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(14, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i207 := $load.i16($M.1, $p206);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i208 := $trunc.i16.i8($i207);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32($i208);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i210 := $trunc.i64.i8($i180);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i32($i210);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i212 := $sub.i32($i209, $i211);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i213 := $trunc.i32.i8($i212);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(52, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p214, $i213);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i64.i16($i180);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(12, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p216, $i215);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i132 := 4;
    goto $bb42;

  $bb48:
    assume $i146 == 1;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p147, 0);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i132 := 6;
    goto $bb42;

  $bb45:
    assume $i141 == 1;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i143 := $load.i16($M.1, $p142);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i144 := $zext.i16.i32($i143);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i145 := $add.i32($i144, 133);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} outb(16, $i145);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb35:
    assume $i121 == 1;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.1, $p122);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb37;

  $bb38:
    assume $i125 == 1;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i127 := $load.i16($M.1, $p126);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i127);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i129 := $add.i32($i128, 145);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} outb(3, $i129);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i130 := wait_tulip($p0);
    call {:si_unique_call 456} {:cexpr "tmp___8"} boogie_si_record_i32($i130);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, $sub.i32(0, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i133 := 0;
    goto $bb44;

  $bb40:
    assume $i131 == 1;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i132 := $sub.i32(0, 1);
    goto $bb42;

  $bb24:
    assume $i101 == 1;
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i103 := $load.i16($M.1, $p102);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i103);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i104, 216);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} outb(4, $i105);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.1, $p106);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i108, 220);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i110 := inb($i109);
    call {:si_unique_call 448} {:cexpr "tmp___6"} boogie_si_record_i8($i110);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, 4);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i113 == 1;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call $i114, $i115, $i116, $i117, $i118, $i119, $i120 := initio_state_5_loop_$bb29($p106, $i114, $i115, $i116, $i117, $i118, $i119, $i120);
    goto $bb29_last;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} cpu_relax();
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.1, $p106);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, 220);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i117 := inb($i116);
    call {:si_unique_call 451} {:cexpr "tmp___6"} boogie_si_record_i8($i117);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 4);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i120 == 1);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb31_dummy;

  $bb18:
    assume $i67 == 1;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.1, $p68);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.1, $p70);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i72 := $sext.i8.i32($i71);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, 0);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i73 == 1);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.1, $p85);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i87, 131);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i89 := inb($i88);
    call {:si_unique_call 442} {:cexpr "tmp___4"} boogie_si_record_i8($i89);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i64($i89);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i91 := $and.i64($i90, 31);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i92 := $add.i64($i91, $i9);
    call {:si_unique_call 443} {:cexpr "cnt"} boogie_si_record_i64($i92);
    assume {:verifier.code 0} true;
    $i84 := $i92;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i93 := $i84;
    goto $bb23;

  $bb20:
    assume $i73 == 1;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.1, $p74);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i76, 131);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i78 := inb($i77);
    call {:si_unique_call 439} {:cexpr "tmp___3"} boogie_si_record_i8($i78);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 31);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i81 := $shl.i32($i80, 1);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, $i9);
    call {:si_unique_call 440} {:cexpr "cnt"} boogie_si_record_i64($i83);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i84 := $i83;
    goto $bb22;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 8);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.1, $p24);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 221);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i28 := inb($i27);
    call {:si_unique_call 429} {:cexpr "tmp___2"} boogie_si_record_i8($i28);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 1);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i59 := $i9;
    goto $bb17;

  $bb6:
    assume $i31 == 1;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.1, $p32);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 228);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i36 := inb($i35);
    call {:si_unique_call 431} {:cexpr "tmp___0"} boogie_si_record_i8($i36);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, 128);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.1, $p40);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 228);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} outb($i39, $i43);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.1, $p44);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i46, 221);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i48 := inb($i47);
    call {:si_unique_call 434} {:cexpr "tmp___1"} boogie_si_record_i8($i48);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 1);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i51 == 1;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $i52, $i53, $i54, $i55, $i56, $i57, $i58 := initio_state_5_loop_$bb11($p44, $i52, $i53, $i54, $i55, $i56, $i57, $i58);
    goto $bb11_last;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} cpu_relax();
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.1, $p44);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 221);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i55 := inb($i54);
    call {:si_unique_call 437} {:cexpr "tmp___1"} boogie_si_record_i8($i55);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 1);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i58 == 1);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb13_dummy;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, 18);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb61_dummy:
    assume false;
    return;

  $bb56_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3283;

  $bb31_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const initio_state_6: ref;

axiom initio_state_6 == $sub.ref(0, 139040);

procedure initio_state_6($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_state_6($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i7: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i7, $i15, $i16, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30 := initio_state_6_loop_$bb1($p0, $p2, $p3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i7, $i15, $i16, $p18, $i19, $i20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30);
    goto $bb1_last;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 3);
    assume {:verifier.code 0} true;
    $i7 := $i5;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i5, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i5, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i5, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i33 := initio_bad_seq($p0);
    call {:si_unique_call 476} {:cexpr "tmp___4"} boogie_si_record_i32($i33);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i17 := $i33;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, 6);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i19 := initio_msgin($p0);
    call {:si_unique_call 468} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, $sub.i32(0, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb26:
    assume $i20 == 1;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 1);
    goto $bb23;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.1, $p21);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 140);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} outb(8, $i24);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.1, $p25);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 145);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} outb(3, $i28);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i29 := wait_tulip($p0);
    call {:si_unique_call 466} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, $sub.i32(0, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29:
    assume $i30 == 1;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 1);
    goto $bb23;

  $bb5:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb11;

  $bb12:
    assume $i11 == 1;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i15 := initio_status_msg($p0);
    call {:si_unique_call 470} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, $sub.i32(0, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb21:
    assume $i16 == 1;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 1);
    goto $bb23;

  $bb3:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb18;

  $bb16:
    assume $i13 == 1;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i31 := initio_xpad_in($p0);
    call {:si_unique_call 472} {:cexpr "tmp___2"} boogie_si_record_i32($i31);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i17 := $i31;
    goto $bb23;

  $bb14:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb18;

  $bb19:
    assume $i14 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i32 := initio_xpad_out($p0);
    call {:si_unique_call 474} {:cexpr "tmp___3"} boogie_si_record_i32($i32);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i17 := $i32;
    goto $bb23;

  $bb25_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_3345;
}



const initio_state_7: ref;

axiom initio_state_7 == $sub.ref(0, 140072);

procedure initio_state_7($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_state_7($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i16: i32;
  var $i17: i1;
  var $i10: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var vslice_dummy_var_27: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 131);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i5 := inb($i4);
    call {:si_unique_call 478} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 31);
    call {:si_unique_call 479} {:cexpr "cnt"} boogie_si_record_i32($i7);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i25 := 6;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i24 := initio_bad_seq($p0);
    call {:si_unique_call 483} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb21;

  $bb13:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i20, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb19;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32(0, $i7);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    call $p11, $i12, $i13, $i14, $i16, $i17, $i10, vslice_dummy_var_27 := initio_state_7_loop_$bb6($p0, $i7, $p11, $i12, $i13, $i14, $i16, $i17, $i10, vslice_dummy_var_27);
    goto $bb6_last;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 140);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} vslice_dummy_var_27 := inb($i14);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i10, 1);
    call {:si_unique_call 481} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, $i7);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i16;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3403;
}



const initio_bus_device_reset: ref;

axiom initio_bus_device_reset == $sub.ref(0, 141104);

procedure initio_bus_device_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20;



implementation initio_bus_device_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p23: ref;
  var $p24: ref;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 6);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} initio_unlink_pend_scb($p0, $p2);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} initio_release_scb($p0, $p2);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    call {:si_unique_call 488} {:cexpr "tar"} boogie_si_record_i8($i12);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.1, $p13);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 63743);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p18, $i17);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.1, $p56);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 140);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} outb(12, $i59);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.1, $p60);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 145);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} outb(3, $i63);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i64 := initio_wait_disc($p0);
    call {:si_unique_call 493} {:cexpr "tmp___2"} boogie_si_record_i32($i64);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i10 := $i64;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p23, $p24 := $p20, $p20;
    goto $bb8;

  $bb8:
    call $p25, $i26, $i27, $i28, $i29, $p30, $p31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p23, $p24 := initio_bus_device_reset_loop_$bb8($p0, $i12, $p25, $i26, $i27, $i28, $i29, $p30, $p31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p23, $p24);
    goto $bb8_last;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i12);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i27, $i28);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $p51 := $p24;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p24, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i55 == 1);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb22:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $p23, $p24 := $p51, $p53;
    goto $bb22_dummy;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p24);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i32, $i33);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p24, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p23, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p43, $p42);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p24);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i46, $i47);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p24, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p50, 26);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} initio_append_done_scb($p0, $p24);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p51 := $p23;
    goto $bb21;

  $bb18:
    assume $i48 == 1;
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p49, $p23);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p24, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, $p36);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p36);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p40, $0.ref);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i9 := int_initio_bad_seq($p0);
    call {:si_unique_call 485} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3457;
}



const initio_bad_seq: ref;

axiom initio_bad_seq == $sub.ref(0, 142136);

procedure initio_bad_seq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_bad_seq($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i12: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(9, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_28 := printk.ref.i32(.str, $i3);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} initio_stop_bm($p0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vslice_dummy_var_29 := initio_reset_scsi($p0, 8);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i12 := initio_post_scsi_rst($p0);
    call {:si_unique_call 500} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} initio_unlink_busy_scb($p0, $p6);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, 20);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 0);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} initio_append_done_scb($p0, $p6);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const initio_stop_bm: ref;

axiom initio_stop_bm == $sub.ref(0, 143168);

procedure initio_stop_bm($p0: ref);
  free requires assertsPassed;



implementation initio_stop_bm($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 221);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i5 := inb($i4);
    call {:si_unique_call 502} {:cexpr "tmp___0"} boogie_si_record_i8($i5);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.1, $p28);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 133);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} outb(16, $i31);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.1, $p9);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 216);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} outb(12, $i12);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.1, $p13);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 220);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i17 := inb($i16);
    call {:si_unique_call 505} {:cexpr "tmp"} boogie_si_record_i8($i17);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 4);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $i21, $i22, $i23, $i24, $i25, $i26, $i27 := initio_stop_bm_loop_$bb6($p13, $i21, $i22, $i23, $i24, $i25, $i26, $i27);
    goto $bb6_last;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} cpu_relax();
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.1, $p13);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 220);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i24 := inb($i23);
    call {:si_unique_call 508} {:cexpr "tmp"} boogie_si_record_i8($i24);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 4);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const initio_reset_scsi: ref;

axiom initio_reset_scsi == $sub.ref(0, 144200);

procedure initio_reset_scsi($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_reset_scsi($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var vslice_dummy_var_30: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} {:cexpr "initio_reset_scsi:arg:seconds"} boogie_si_record_i32($i1);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.1, $p2);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 133);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} outb(1, $i5);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.1, $p6);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 132);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i10 := inb($i9);
    call {:si_unique_call 513} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, $i10);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i10);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 16);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.1, $p22);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 144);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} outb(0, $i25);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i1, 250);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} initio_do_pause($i26);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.1, $p27);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 132);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} vslice_dummy_var_30 := inb($i30);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $r := 2;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i15, $i16, $i17, $i18, $i19, $i20, $i21 := initio_reset_scsi_loop_$bb4($p6, $p11, $i15, $i16, $i17, $i18, $i19, $i20, $i21);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} cpu_relax();
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.1, $p6);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 132);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i18 := inb($i17);
    call {:si_unique_call 516} {:cexpr "tmp"} boogie_si_record_i8($i18);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, $i18);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 16);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const initio_post_scsi_rst: ref;

axiom initio_post_scsi_rst == $sub.ref(0, 145232);

procedure initio_post_scsi_rst($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_post_scsi_rst($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p7: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $i24: i16;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $p29: ref;
  var $p31: ref;
  var $i32: i64;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i32;
  var $i39: i16;
  var $i40: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i18: i32;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $0.ref);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $0.ref);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(8, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p3, 0);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p4 := initio_pop_busy_scb($p0);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(6, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 0);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 1);
    return;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i18, $p19 := 0, $p12;
    goto $bb12;

  $bb12:
    call $p20, $i21, $i22, $i23, $i24, $p25, $p26, $p27, $i28, $p29, $p31, $i32, $p35, $i36, $i37, $i38, $i39, $i40, $p43, $p44, $i45, $i46, $i47, $i48, $i18, $p19 := initio_post_scsi_rst_loop_$bb12($p0, $p14, $p20, $i21, $i22, $i23, $i24, $p25, $p26, $p27, $i28, $p29, $p31, $i32, $p35, $i36, $i37, $i38, $i39, $i40, $p43, $p44, $i45, $i46, $i47, $i48, $i18, $p19);
    goto $bb12_last;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.1, $p20);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 64767);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p19, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p25, $i24);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p19, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, 0);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(19, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p19, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, $i28);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p31, 0);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i18);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i32, 8)), $mul.ref(0, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.1, $p35);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 64511);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i18);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i40, 8)), $mul.ref(0, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p43, $i39);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p19, $mul.ref(1, 8));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i18, 1);
    call {:si_unique_call 523} {:cexpr "i"} boogie_si_record_i32($i45);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p14);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, $i45);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i48 == 1);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i18, $p19 := $i45, $p44;
    goto $bb14_dummy;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p7 := $p4;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $i11, $p7 := initio_post_scsi_rst_loop_$bb4($p0, $p8, $p9, $i10, $i11, $p7);
    goto $bb4_last;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 20);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} initio_append_done_scb($p0, $p7);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p9 := initio_pop_busy_scb($p0);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb6_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3666;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3646;
}



const initio_pop_busy_scb: ref;

axiom initio_pop_busy_scb == $sub.ref(0, 146264);

procedure initio_pop_busy_scb($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_pop_busy_scb($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i64;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i64;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $i42: i16;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i64;
  var $p49: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p6);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p6);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $0.ref);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i35, 8)), $mul.ref(0, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.1, $p38);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 64511);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i46, 8)), $mul.ref(0, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p49, $i42);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref($i19, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i23, 1);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref($i29, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p31, $i25);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $0.ref);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const initio_do_pause: ref;

axiom initio_do_pause == $sub.ref(0, 147296);

procedure initio_do_pause($i0: i32);
  free requires assertsPassed;



implementation initio_do_pause($i0: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} {:cexpr "initio_do_pause:arg:amount"} boogie_si_record_i32($i0);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.3, jiffies);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i1, $i2);
    call {:si_unique_call 525} {:cexpr "the_time"} boogie_si_record_i64($i3);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.3, jiffies);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64($i3, $i4);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i6 := $sge.i64($i5, 0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i7, $i8, $i9 := initio_do_pause_loop_$bb4($i3, $i7, $i8, $i9);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} cpu_relax();
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.3, jiffies);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64($i3, $i7);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i9 := $sge.i64($i8, 0);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const int_initio_bad_seq: ref;

axiom int_initio_bad_seq == $sub.ref(0, 148328);

procedure int_initio_bad_seq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation int_initio_bad_seq($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p5: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i15: i64;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $i23: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i14: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} vslice_dummy_var_31 := initio_reset_scsi($p0, 10);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p2 := initio_pop_busy_scb($p0);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(6, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 1);
    return;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb12;

  $bb12:
    call $i15, $p18, $i19, $i20, $i21, $i22, $i23, $p26, $i27, $i28, $i29, $i30, $i14 := int_initio_bad_seq_loop_$bb12($p0, $p10, $i15, $p18, $i19, $i20, $i21, $i22, $i23, $p26, $i27, $i28, $i29, $i30, $i14);
    goto $bb12_last;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i15, 8)), $mul.ref(0, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.1, $p18);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 64767);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i14);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i23, 8)), $mul.ref(0, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p26, $i22);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i14, 1);
    call {:si_unique_call 531} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p10);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, $i27);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i27;
    goto $bb14_dummy;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p5 := $p2;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $i9, $p5 := int_initio_bad_seq_loop_$bb4($p0, $p6, $p7, $i8, $i9, $p5);
    goto $bb4_last;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 20);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} initio_append_done_scb($p0, $p5);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $p7 := initio_pop_busy_scb($p0);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p7;
    goto $bb6_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3801;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;
}



const initio_wait_disc: ref;

axiom initio_wait_disc == $sub.ref(0, 149360);

procedure initio_wait_disc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_wait_disc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 133);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i5 := inb($i4);
    call {:si_unique_call 533} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, $i5);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i5);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i8 := $sge.i32($i7, 0);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.1, $p15);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 132);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i19 := inb($i18);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p20, $i19);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 16);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 8);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i46 := initio_bad_seq($p0);
    call {:si_unique_call 544} {:cexpr "tmp___1"} boogie_si_record_i32($i46);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i27 := $i46;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.1, $p33);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 133);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} outb(16, $i36);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.1, $p37);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 135);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} outb($sub.i8(0, 61), $i40);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.1, $p41);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 134);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} outb(4, $i44);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, $0.ref);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 1);
    goto $bb11;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i26 := int_initio_scsi_rst($p0);
    call {:si_unique_call 539} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb11;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i9, $i10, $i11, $i12, $i13, $i14 := initio_wait_disc_loop_$bb4($p1, $p6, $i9, $i10, $i11, $i12, $i13, $i14);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} cpu_relax();
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, $p1);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 133);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i12 := inb($i11);
    call {:si_unique_call 536} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, $i12);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i14 := $sge.i32($i13, 0);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const initio_status_msg: ref;

axiom initio_status_msg == $sub.ref(0, 150392);

procedure initio_status_msg($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_status_msg($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 145);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} outb($sub.i8(0, 124), $i6);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i7 := wait_tulip($p0);
    call {:si_unique_call 547} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.1, $p10);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 140);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i14 := inb($i13);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, $i14);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 6);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 7);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i95 := initio_bad_seq($p0);
    call {:si_unique_call 573} {:cexpr "tmp___7"} boogie_si_record_i32($i95);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i9 := $i95;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.1, $p42);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 140);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i46 := inb($i45);
    call {:si_unique_call 555} {:cexpr "msg"} boogie_si_record_i8($i46);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.1, $p47);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 8);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i46);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i46);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 10);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i86 == 1);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i46);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 11);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.1, $p89);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, 24);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 16);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i93 == 1;
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i94 := initio_msgin_accept($p0);
    call {:si_unique_call 571} {:cexpr "tmp___6"} boogie_si_record_i32($i94);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i9 := $i94;
    goto $bb3;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb29;

  $bb22:
    assume $i69 == 1;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.1, $p70);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 24);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 16);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.1, $p76);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 133);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} outb(16, $i79);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.1, $p80);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, 145);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} outb(15, $i83);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i84 := initio_wait_done_disc($p0);
    call {:si_unique_call 569} {:cexpr "tmp___5"} boogie_si_record_i32($i84);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i9 := $i84;
    goto $bb3;

  $bb24:
    assume $i74 == 1;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i75 := initio_bad_seq($p0);
    call {:si_unique_call 565} {:cexpr "tmp___4"} boogie_si_record_i32($i75);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i9 := $i75;
    goto $bb3;

  $bb13:
    assume $i51 == 1;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i52 := initio_msgin_accept($p0);
    call {:si_unique_call 557} {:cexpr "tmp___1"} boogie_si_record_i32($i52);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, $sub.i32(0, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.1, $p54);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 6);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.1, $p59);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, 140);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} outb(9, $i62);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.1, $p63);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, 145);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} outb(3, $i66);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i67 := wait_tulip($p0);
    call {:si_unique_call 563} {:cexpr "tmp___3"} boogie_si_record_i32($i67);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i9 := $i67;
    goto $bb3;

  $bb18:
    assume $i57 == 1;
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i58 := initio_bad_seq($p0);
    call {:si_unique_call 559} {:cexpr "tmp___2"} boogie_si_record_i32($i58);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i9 := $i58;
    goto $bb3;

  $bb15:
    assume $i53 == 1;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 8);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.1, $p29);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 140);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} outb(8, $i32);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.1, $p33);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 145);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} outb(3, $i36);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i37 := wait_tulip($p0);
    call {:si_unique_call 553} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i9 := $i37;
    goto $bb3;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.1, $p25);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 140);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} outb(9, $i28);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb3;
}



const initio_msgin: ref;

axiom initio_msgin == $sub.ref(0, 151424);

procedure initio_msgin($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_msgin($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i16;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i8;
  var $i67: i32;
  var $i68: i8;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $i72: i32;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i15: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p1, $i2, $i3, $i4, $p5, $i6, $i7, $i8, $p9, $i10, $i11, $i12, $i13, $i14, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $p51, $p52, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $i72, $p86, $i87, $i88, $i89, vslice_dummy_var_32, vslice_dummy_var_33, vslice_dummy_var_34, vslice_dummy_var_35, vslice_dummy_var_36 := initio_msgin_loop_$bb1($p0, $p1, $i2, $i3, $i4, $p5, $i6, $i7, $i8, $p9, $i10, $i11, $i12, $i13, $i14, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $p51, $p52, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $i72, $p86, $i87, $i88, $i89, vslice_dummy_var_32, vslice_dummy_var_33, vslice_dummy_var_34, vslice_dummy_var_35, vslice_dummy_var_36);
    goto $bb1_last;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 133);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} outb(16, $i4);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.1, $p5);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 128);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} outl(1, $i8);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.1, $p9);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 145);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} outb($sub.i8(0, 125), $i12);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i13 := wait_tulip($p0);
    call {:si_unique_call 578} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $sub.i32(0, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.1, $p16);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 140);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i20 := inb($i19);
    call {:si_unique_call 580} {:cexpr "tmp___0"} boogie_si_record_i8($i20);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i21, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i21, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} vslice_dummy_var_36 := initio_msgout_reject($p0);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.1, $p86);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 7);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb39_dummy;

  $bb37:
    assume $i89 == 1;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.1, $p90);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i15 := $i92;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} vslice_dummy_var_32 := initio_msgin_accept($p0);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb11:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i21, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} vslice_dummy_var_33 := initio_msgin_accept($p0);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb9:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i21, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i27 == 1);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.1, $p39);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 144);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i43 := inb($i42);
    call {:si_unique_call 584} {:cexpr "tmp___2"} boogie_si_record_i8($i43);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 71);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.1, $p47);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 144);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} outb($i46, $i50);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.1, $p53);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 528);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vslice_dummy_var_35 := initio_msgin_accept($p0);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb33:
    assume $i57 == 1;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.1, $p58);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 144);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i62 := inb($i61);
    call {:si_unique_call 595} {:cexpr "tmp___3"} boogie_si_record_i8($i62);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i63 := $sext.i8.i32($i62);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 71);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i64, 8);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.1, $p69);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, 144);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} outb($i68, $i72);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb19:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i21, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.1, $p33);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 145);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} outb(15, $i36);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i37 := initio_wait_disc($p0);
    call {:si_unique_call 588} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i15 := $i37;
    goto $bb4;

  $bb7:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i21, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb25:
    assume $i30 == 1;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb23:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i31 == 1);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} vslice_dummy_var_34 := initio_msgin_extend($p0);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb28:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i21, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb15;

  $bb30:
    assume $i32 == 1;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.1, $p76);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 133);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} outb(16, $i79);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.1, $p80);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, 145);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} outb(15, $i83);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i84 := initio_wait_done_disc($p0);
    call {:si_unique_call 593} {:cexpr "tmp___4"} boogie_si_record_i32($i84);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i15 := $i84;
    goto $bb4;

  $bb2:
    assume $i14 == 1;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 1);
    goto $bb4;

  $bb39_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4030;
}



const initio_xpad_in: ref;

axiom initio_xpad_in == $sub.ref(0, 152456);

procedure initio_xpad_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_xpad_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $i29: i32;
  var vslice_dummy_var_37: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 24);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $p30, $i31, $i32, $i33, $p38, $i39, $i40, $i41, vslice_dummy_var_37 := initio_xpad_in_loop_$bb4($p0, $p4, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $p30, $i31, $i32, $i33, $p38, $i39, $i40, $i41, vslice_dummy_var_37);
    goto $bb4_last;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.1, $p19);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 128);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} outl(1, $i22);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.1, $p23);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 145);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} outb($sub.i8(0, 125), $i26);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i27 := wait_tulip($p0);
    call {:si_unique_call 603} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, $sub.i32(0, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.1, $p30);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 1);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.1, $p38);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 140);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} vslice_dummy_var_37 := inb($i41);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    goto corral_source_split_4204_dummy;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.1, $p34);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 133);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} outb(16, $i37);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i29 := 6;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 1);
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.1, $p15);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 128);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} outl(2, $i18);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 18);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_4204_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4158;
}



const initio_xpad_out: ref;

axiom initio_xpad_out == $sub.ref(0, 153488);

procedure initio_xpad_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_xpad_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 24);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $p34, $i35, $i36, $i37 := initio_xpad_out_loop_$bb4($p0, $p4, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $p34, $i35, $i36, $i37);
    goto $bb4_last;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.1, $p19);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 128);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} outl(1, $i22);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.1, $p23);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 140);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} outb(0, $i26);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.1, $p27);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 145);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} outb(3, $i30);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i31 := wait_tulip($p0);
    call {:si_unique_call 611} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, $sub.i32(0, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.1, $p34);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb12:
    assume $i37 == 1;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.1, $p38);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 134);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} outb(4, $i41);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.1, $p42);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 133);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} outb(16, $i45);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i33 := 6;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 1);
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.1, $p15);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 128);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} outl(2, $i18);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 18);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4221;
}



const outl: ref;

axiom outl == $sub.ref(0, 154520);

procedure outl($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation outl($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} {:cexpr "outl:arg:value"} boogie_si_record_i32($i0);
    call {:si_unique_call 615} {:cexpr "outl:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 616} devirtbounce.4(0, $i0, $i1);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    return;
}



const initio_msgin_accept: ref;

axiom initio_msgin_accept == $sub.ref(0, 155552);

procedure initio_msgin_accept($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_msgin_accept($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 145);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} outb(15, $i4);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i5 := wait_tulip($p0);
    call {:si_unique_call 619} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const initio_msgin_extend: ref;

axiom initio_msgin_extend == $sub.ref(0, 156584);

procedure initio_msgin_extend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_msgin_extend($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i52: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i26: i8;
  var $i27: i8;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i90: i32;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $i94: i32;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i8;
  var $i100: i32;
  var $i101: i8;
  var $p102: ref;
  var $i103: i16;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $p111: ref;
  var $i112: i16;
  var $i113: i32;
  var $i114: i32;
  var $p116: ref;
  var $i117: i16;
  var $i118: i32;
  var $i119: i32;
  var $p120: ref;
  var $i121: i16;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $i125: i16;
  var $i126: i32;
  var $i127: i32;
  var $p129: ref;
  var $i130: i8;
  var $i131: i32;
  var $i132: i8;
  var $p133: ref;
  var $i134: i16;
  var $i135: i32;
  var $i136: i32;
  var $p138: ref;
  var $i139: i8;
  var $i140: i32;
  var $i141: i8;
  var $p142: ref;
  var $i143: i16;
  var $i144: i32;
  var $i145: i32;
  var $p146: ref;
  var $i147: i16;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i1;
  var $p157: ref;
  var $i158: i8;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i16;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $p170: ref;
  var $p172: ref;
  var $i173: i8;
  var $i174: i32;
  var $i175: i1;
  var $i176: i32;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i1;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i16;
  var $i188: i32;
  var $i189: i32;
  var $i190: i1;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i16;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $i200: i16;
  var $i201: i32;
  var $i202: i32;
  var $i203: i8;
  var $i204: i32;
  var $i205: i32;
  var $i206: i32;
  var $i207: i8;
  var $i208: i32;
  var $i209: i8;
  var $p210: ref;
  var $i211: i16;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $p215: ref;
  var $i216: i16;
  var $i217: i32;
  var $i218: i32;
  var $i219: i8;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $i223: i8;
  var $i224: i32;
  var $i225: i8;
  var $p226: ref;
  var $i227: i16;
  var $i228: i32;
  var $i229: i32;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $i233: i8;
  var $i234: i32;
  var $p235: ref;
  var $i236: i16;
  var $i237: i32;
  var $i238: i32;
  var $p239: ref;
  var $i240: i16;
  var $i241: i32;
  var $i242: i32;
  var $p243: ref;
  var $i244: i16;
  var $i245: i32;
  var $i246: i32;
  var $p248: ref;
  var $i249: i8;
  var $i250: i32;
  var $i251: i8;
  var $p252: ref;
  var $i253: i16;
  var $i254: i32;
  var $i255: i32;
  var $p256: ref;
  var $i257: i16;
  var $i258: i32;
  var $i259: i32;
  var $i260: i32;
  var $i6: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i1 := initio_msgin_accept($p0);
    call {:si_unique_call 621} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 7);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.1, $p7);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 128);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} outl(1, $i10);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 145);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} outb($sub.i8(0, 125), $i14);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i15 := wait_tulip($p0);
    call {:si_unique_call 625} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, $sub.i32(0, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.1, $p17);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 140);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i21 := inb($i20);
    call {:si_unique_call 627} {:cexpr "len"} boogie_si_record_i8($i21);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, $i21);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i21);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(1, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.1, $p61);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 1);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.1, $p152);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 2);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb40, $bb42;

  $bb42:
    assume !($i155 == 1);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(1, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.1, $p157);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i158);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 3);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.1, $p162);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p163, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i165 := $load.i16($M.1, $p164);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i166 := $zext.i16.i32($i165);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i167 := $and.i32($i166, 32);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i168 == 1);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.1, $p172);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i32($i173);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i175 := $ugt.i32($i174, 2);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.1, $p178);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 2);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i181 == 1);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.1, $p184);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p185, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i187 := $load.i16($M.1, $p186);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i188 := $zext.i16.i32($i187);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i189 := $and.i32($i188, 32);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 0);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i216 := $load.i16($M.1, $p215);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i217 := $zext.i16.i32($i216);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i218 := $add.i32($i217, 144);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $i219 := inb($i218);
    call {:si_unique_call 662} {:cexpr "tmp___13"} boogie_si_record_i8($i219);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i220 := $sext.i8.i32($i219);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i221 := $and.i32($i220, 71);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i222 := $or.i32($i221, 8);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i32.i8($i222);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i224 := $zext.i8.i32($i223);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i225 := $trunc.i32.i8($i224);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i227 := $load.i16($M.1, $p226);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i228 := $zext.i16.i32($i227);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i229 := $add.i32($i228, 144);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} outb($i225, $i229);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i230 := initio_msgin_accept($p0);
    call {:si_unique_call 665} {:cexpr "tmp___14"} boogie_si_record_i32($i230);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 6);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i236 := $load.i16($M.1, $p235);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i237 := $zext.i16.i32($i236);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i238 := $add.i32($i237, 140);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} outb(1, $i238);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i240 := $load.i16($M.1, $p239);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i241 := $zext.i16.i32($i240);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i242 := $add.i32($i241, 140);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} outb(2, $i242);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i244 := $load.i16($M.1, $p243);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i245 := $zext.i16.i32($i244);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i246 := $add.i32($i245, 140);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} outb(3, $i246);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i249 := $load.i8($M.1, $p248);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i249);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i251 := $trunc.i32.i8($i250);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i253 := $load.i16($M.1, $p252);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i254 := $zext.i16.i32($i253);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i255 := $add.i32($i254, 140);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} outb($i251, $i255);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i257 := $load.i16($M.1, $p256);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i258 := $zext.i16.i32($i257);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i259 := $add.i32($i258, 145);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} outb(3, $i259);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i260 := wait_tulip($p0);
    call {:si_unique_call 680} {:cexpr "tmp___15"} boogie_si_record_i32($i260);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i6 := $i260;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb61:
    assume $i231 == 1;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.1, $p232);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i32($i233);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i6 := $i234;
    goto $bb3;

  $bb55:
    assume $i190 == 1;
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_40 := wdtr_done($p0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.1, $p192);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p193, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i195 := $load.i16($M.1, $p194);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i196 := $zext.i16.i32($i195);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i197 := $and.i32($i196, 528);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 0);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i214 := initio_msgin_accept($p0);
    call {:si_unique_call 673} {:cexpr "tmp___12"} boogie_si_record_i32($i214);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i6 := $i214;
    goto $bb3;

  $bb57:
    assume $i198 == 1;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i200 := $load.i16($M.1, $p199);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i200);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i202 := $add.i32($i201, 144);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i203 := inb($i202);
    call {:si_unique_call 670} {:cexpr "tmp___11"} boogie_si_record_i8($i203);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i204 := $sext.i8.i32($i203);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i205 := $and.i32($i204, 71);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i206 := $or.i32($i205, 8);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i32.i8($i206);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i32($i207);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i209 := $trunc.i32.i8($i208);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i211 := $load.i16($M.1, $p210);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i212 := $zext.i16.i32($i211);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i213 := $add.i32($i212, 144);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} outb($i209, $i213);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb52:
    assume $i181 == 1;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p183, 1);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i175 == 1;
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i176 := initio_msgout_reject($p0);
    call {:si_unique_call 667} {:cexpr "tmp___10"} boogie_si_record_i32($i176);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i6 := $i176;
    goto $bb3;

  $bb46:
    assume $i168 == 1;
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p170, 0);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $i161 := initio_msgout_reject($p0);
    call {:si_unique_call 660} {:cexpr "tmp___9"} boogie_si_record_i32($i161);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i6 := $i161;
    goto $bb3;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb41;

  $bb22:
    assume $i64 == 1;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.1, $p66);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 3);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.1, $p73);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 16);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i77 == 1);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i80 := initio_msgin_sync($p0);
    call {:si_unique_call 640} {:cexpr "tmp___6"} boogie_si_record_i32($i80);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.1, $p91);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, 144);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i95 := inb($i94);
    call {:si_unique_call 642} {:cexpr "r"} boogie_si_record_i8($i95);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i96 := $sext.i8.i32($i95);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 71);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i97, 8);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i100);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i103 := $load.i16($M.1, $p102);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i103);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i104, 144);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} outb($i101, $i105);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i106 := initio_msgin_accept($p0);
    call {:si_unique_call 645} {:cexpr "tmp___7"} boogie_si_record_i32($i106);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 6);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i112 := $load.i16($M.1, $p111);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i112);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i113, 133);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} outb(16, $i114);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} vslice_dummy_var_39 := initio_sync_done($p0);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i117 := $load.i16($M.1, $p116);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i32($i117);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i118, 140);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} outb(1, $i119);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i121 := $load.i16($M.1, $p120);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i121);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i122, 140);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} outb(3, $i123);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i125 := $load.i16($M.1, $p124);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i126 := $zext.i16.i32($i125);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i126, 140);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} outb(1, $i127);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.1, $p129);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i130);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i32.i8($i131);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i134 := $load.i16($M.1, $p133);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i135 := $zext.i16.i32($i134);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i135, 140);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} outb($i132, $i136);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(3, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.1, $p138);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i139);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i8($i140);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i143 := $load.i16($M.1, $p142);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i144 := $zext.i16.i32($i143);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i145 := $add.i32($i144, 140);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} outb($i141, $i145);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i147 := $load.i16($M.1, $p146);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i148 := $zext.i16.i32($i147);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i149 := $add.i32($i148, 145);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} outb(3, $i149);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i150 := wait_tulip($p0);
    call {:si_unique_call 658} {:cexpr "tmp___8"} boogie_si_record_i32($i150);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i6 := $i150;
    goto $bb3;

  $bb36:
    assume $i107 == 1;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.1, $p108);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i6 := $i110;
    goto $bb3;

  $bb30:
    assume $i81 == 1;
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.1, $p82);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.1, $p84);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 512);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb32;

  $bb33:
    assume $i88 == 1;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_38 := initio_sync_done($p0);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i90 := initio_msgin_accept($p0);
    call {:si_unique_call 648} {:cexpr "tmp___5"} boogie_si_record_i32($i90);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i6 := $i90;
    goto $bb3;

  $bb27:
    assume $i77 == 1;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(3, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p79, 0);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i69 == 1;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i70 := initio_msgout_reject($p0);
    call {:si_unique_call 638} {:cexpr "tmp___4"} boogie_si_record_i32($i70);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i6 := $i70;
    goto $bb3;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i26, $i27 := 1, $i21;
    goto $bb11;

  $bb11:
    call $i28, $i29, $p33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $p54, $i55, $i56, $i57, $i58, $i59, $i26, $i27 := initio_msgin_extend_loop_$bb11($p0, $i28, $i29, $p33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $p54, $i55, $i56, $i57, $i58, $i59, $i26, $i27);
    goto $bb11_last;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i28 := initio_msgin_accept($p0);
    call {:si_unique_call 629} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 7);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.1, $p33);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 128);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} outl(1, $i36);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.1, $p37);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 145);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} outb($sub.i8(0, 125), $i40);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i41 := wait_tulip($p0);
    call {:si_unique_call 633} {:cexpr "tmp___2"} boogie_si_record_i32($i41);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, $sub.i32(0, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i26);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    call {:si_unique_call 634} {:cexpr "idx"} boogie_si_record_i8($i45);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.1, $p46);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 140);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i50 := inb($i49);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i26);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref($i52, 1));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p54, $i50);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i27);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i55, 1);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    call {:si_unique_call 636} {:cexpr "len"} boogie_si_record_i8($i57);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i59 == 1);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb19:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i26, $i27 := $i45, $i57;
    goto $bb19_dummy;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.1, $p30);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i6 := $i32;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4321;
}



const initio_wait_done_disc: ref;

axiom initio_wait_done_disc == $sub.ref(0, 157616);

procedure initio_wait_done_disc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_wait_done_disc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 133);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i5 := inb($i4);
    call {:si_unique_call 682} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, $i5);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i5);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i8 := $sge.i32($i7, 0);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.1, $p15);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 132);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i19 := inb($i18);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p20, $i19);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 16);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(17, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 8);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i50 := initio_bad_seq($p0);
    call {:si_unique_call 695} {:cexpr "tmp___1"} boogie_si_record_i32($i50);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i27 := $i50;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.1, $p33);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 133);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} outb(16, $i36);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.1, $p37);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 135);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} outb($sub.i8(0, 61), $i40);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.1, $p41);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 134);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} outb(4, $i44);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} initio_unlink_busy_scb($p0, $p46);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} initio_append_done_scb($p0, $p48);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p49, $0.ref);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 1);
    goto $bb11;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i26 := int_initio_scsi_rst($p0);
    call {:si_unique_call 688} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb11;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i9, $i10, $i11, $i12, $i13, $i14 := initio_wait_done_disc_loop_$bb4($p1, $p6, $i9, $i10, $i11, $i12, $i13, $i14);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} cpu_relax();
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, $p1);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 133);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i12 := inb($i11);
    call {:si_unique_call 685} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, $i12);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i14 := $sge.i32($i13, 0);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const initio_msgout_reject: ref;

axiom initio_msgout_reject == $sub.ref(0, 158648);

procedure initio_msgout_reject($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_msgout_reject($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 144);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i5 := inb($i4);
    call {:si_unique_call 697} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 71);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 8);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.1, $p12);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 144);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} outb($i11, $i15);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $i16 := initio_msgin_accept($p0);
    call {:si_unique_call 700} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, $sub.i32(0, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 6);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i18 := $i34;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.1, $p23);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 140);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} outb(7, $i26);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.1, $p27);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 145);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} outb(3, $i30);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i31 := wait_tulip($p0);
    call {:si_unique_call 704} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i18 := $i31;
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 1);
    goto $bb3;
}



const initio_msgin_sync: ref;

axiom initio_msgin_sync == $sub.ref(0, 159680);

procedure initio_msgin_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_msgin_sync($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 7);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref($i7, 1));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.21, $p8);
    call {:si_unique_call 705} {:cexpr "default_period"} boogie_si_record_i8($i9);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(3, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i32($i13, 15);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(3, 1));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.1, $p34);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.1, $p39);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i42 := $sext.i8.i32($i9);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i41, $i42);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.1, $p47);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32($i49, 58);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb17:
    assume $i50 == 1;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(3, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p52, 0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb5;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p45, $i9);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb5;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb5;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(3, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, 15);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i9);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, $i21);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i29, 58);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb5;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(3, 1));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, 0);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, $i9);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb5;
}



const initio_sync_done: ref;

axiom initio_sync_done == $sub.ref(0, 160712);

procedure initio_sync_done($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_sync_done($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i8;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i8;
  var $p78: ref;
  var $i79: i16;
  var $i80: i32;
  var $i81: i32;
  var $i82: i8;
  var $i83: i32;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i1;
  var $i89: i8;
  var $i90: i32;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $i96: i8;
  var $i97: i32;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i1;
  var $i103: i8;
  var $i104: i32;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i1;
  var $i110: i8;
  var $i111: i32;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i1;
  var $i117: i8;
  var $i118: i32;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i1;
  var $i124: i8;
  var $i125: i32;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 512);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p10, $i7);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(3, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.1, $p62);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.1, $p64);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.1, $p68);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, 135);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} outb($i67, $i71);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.1, $p74);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.1, $p78);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i80, 136);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} outb($i77, $i81);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 1);
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(3, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i20, $i24);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, $i26);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.21, initio_rate_tbl);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i36 := $sge.i32($i31, $i35);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i37 := 0;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(1, 1)));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.1, $p85);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i88 := $sge.i32($i83, $i87);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i37 := 1;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(2, 1)));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.1, $p92);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i95 := $sge.i32($i90, $i94);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i37 := 2;
    assume {:branchcond $i95} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(3, 1)));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.1, $p99);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i102 := $sge.i32($i97, $i101);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i37 := 3;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(4, 1)));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.1, $p106);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i109 := $sge.i32($i104, $i108);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i37 := 4;
    assume {:branchcond $i109} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(5, 1)));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.1, $p113);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i116 := $sge.i32($i111, $i115);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i37 := 5;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(6, 1)));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.1, $p120);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i123 := $sge.i32($i118, $i122);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i37 := 6;
    assume {:branchcond $i123} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(7, 1)));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.1, $p127);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i130 := $sge.i32($i125, $i129);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i37 := 7;
    assume {:branchcond $i130} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i38 := 8;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i43 := $sext.i8.i32($i42);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i44 := $shl.i32($i38, 4);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i46 := $sext.i8.i32($i45);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i43, $i46);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p51, $i48);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.1, $p54);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i56, 2);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p61, $i58);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb8;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb6;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb6;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb6;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb6;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb6;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb6;
}



const wdtr_done: ref;

axiom wdtr_done == $sub.ref(0, 161744);

procedure wdtr_done($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation wdtr_done($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i8;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i8;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 65023);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p10, $i7);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.1, $p13);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 256);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p20, $i17);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, 0);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 253);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.1, $p46);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p48, $i45);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.1, $p51);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.1, $p55);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, 135);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} outb($i54, $i58);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.1, $p61);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.1, $p65);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i67, 136);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} outb($i64, $i68);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.1, $p31);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 128);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p38, $i35);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const inl: ref;

axiom inl == $sub.ref(0, 162776);

procedure inl($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation inl($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} {:cexpr "inl:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 711} $i1 := devirtbounce.5(0, $i0);
    call {:si_unique_call 712} {:cexpr "value"} boogie_si_record_i32($i1);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const initio_msgout_ide: ref;

axiom initio_msgout_ide == $sub.ref(0, 163808);

procedure initio_msgout_ide($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_msgout_ide($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 140);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} outb(5, $i4);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.1, $p5);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 145);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} outb(3, $i8);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i9 := wait_tulip($p0);
    call {:si_unique_call 716} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const initio_xfer_data_in: ref;

axiom initio_xfer_data_in == $sub.ref(0, 164840);

procedure initio_xfer_data_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_xfer_data_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 24);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 16);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 128);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} outl($i10, $i14);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.1, $p15);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 145);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} outb($sub.i8(0, 61), $i18);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.1, $p43);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 208);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} outl($i42, $i46);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(44, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.1, $p49);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 192);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} outl($i48, $i52);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.1, $p53);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, 216);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} outb(33, $i56);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p57, 5);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(52, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 3);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.1, $p27);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 208);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} outl($i26, $i30);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(44, 1));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.1, $p33);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 192);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} outl($i32, $i36);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.1, $p37);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 216);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} outb($sub.i8(0, 95), $i40);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i8 := 6;
    goto $bb3;
}



const initio_xfer_data_out: ref;

axiom initio_xfer_data_out == $sub.ref(0, 165872);

procedure initio_xfer_data_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_xfer_data_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 24);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 8);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 128);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} outl($i10, $i14);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.1, $p15);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 145);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} outb(67, $i18);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.1, $p43);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 208);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} outl($i42, $i46);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(44, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.1, $p49);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 192);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} outl($i48, $i52);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.1, $p53);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, 216);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} outb(1, $i56);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p57, 5);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(52, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 3);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.1, $p27);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 208);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} outl($i26, $i30);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(44, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.1, $p33);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 192);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} outl($i32, $i36);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.1, $p37);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 216);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} outb($sub.i8(0, 127), $i40);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i8 := 6;
    goto $bb3;
}



const initio_append_busy_scb: ref;

axiom initio_append_busy_scb == $sub.ref(0, 166904);

procedure initio_append_busy_scb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_append_busy_scb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i64;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i64;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i25, 8)), $mul.ref(0, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.1, $p28);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 1024);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref($i36, 8)), $mul.ref(0, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p39, $i32);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p40, 16);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p41, $0.ref);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i45 == 1);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p50, $p1);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p51, $p1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i45 == 1;
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.1, $p46);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p48, $p1);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p49, $p1);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref($i9, 1));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref($i19, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, $i15);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const initio_msgout_abort_tag: ref;

axiom initio_msgout_abort_tag == $sub.ref(0, 167936);

procedure initio_msgout_abort_tag($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_msgout_abort_tag($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 144);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i5 := inb($i4);
    call {:si_unique_call 734} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 71);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 8);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.1, $p12);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 144);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} outb($i11, $i15);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i16 := initio_msgin_accept($p0);
    call {:si_unique_call 737} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, $sub.i32(0, 1));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 6);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.1, $p24);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 140);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} outb(13, $i27);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.1, $p28);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 145);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} outb(3, $i31);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i32 := initio_wait_disc($p0);
    call {:si_unique_call 743} {:cexpr "tmp___2"} boogie_si_record_i32($i32);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i18 := $i32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $i23 := initio_bad_seq($p0);
    call {:si_unique_call 739} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i18 := $i23;
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 1);
    goto $bb3;
}



const initio_find_busy_scb: ref;

axiom initio_find_busy_scb == $sub.ref(0, 168968);

procedure initio_find_busy_scb($p0: ref, $i1: i16) returns ($r: ref);
  free requires assertsPassed;



implementation initio_find_busy_scb($p0: ref, $i1: i16) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p7: ref;
  var $p29: ref;
  var $p6: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} {:cexpr "initio_find_busy_scb:arg:tarlun"} boogie_si_record_i16($i1);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p6 := $p3;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $p6;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $r := $p24;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $p25, $p26, $i27, $i28, $p7, $p29 := initio_find_busy_scb_loop_$bb4($i1, $p8, $i9, $i10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $p25, $p26, $i27, $i28, $p7, $p29);
    goto $bb4_last;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 352)), $mul.ref(43, 1));
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 8);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i13 := $sext.i16.i32($i12);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i16($i15);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i17 := $sext.i16.i32($i16);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i13, $i17);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    call {:si_unique_call 745} {:cexpr "scbp_tarlun"} boogie_si_record_i16($i19);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i1);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i20, $i21);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p23 := $p7;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p29 := $p26;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p6 := $p29;
    goto $bb3;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p26;
    goto $bb10_dummy;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p24 := $p23;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5302;
}



const initio_msgout_abort_targ: ref;

axiom initio_msgout_abort_targ == $sub.ref(0, 170000);

procedure initio_msgout_abort_targ($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_msgout_abort_targ($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 144);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i5 := inb($i4);
    call {:si_unique_call 747} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 71);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 8);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.1, $p12);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 144);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} outb($i11, $i15);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i16 := initio_msgin_accept($p0);
    call {:si_unique_call 750} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, $sub.i32(0, 1));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 6);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.1, $p24);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 140);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} outb(6, $i27);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.1, $p28);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 145);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} outb(3, $i31);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i32 := initio_wait_disc($p0);
    call {:si_unique_call 756} {:cexpr "tmp___2"} boogie_si_record_i32($i32);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i18 := $i32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i23 := initio_bad_seq($p0);
    call {:si_unique_call 752} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i18 := $i23;
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 1);
    goto $bb3;
}



const initio_read_eeprom: ref;

axiom initio_read_eeprom == $sub.ref(0, 171032);

procedure initio_read_eeprom($i0: i64);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.22;



implementation initio_read_eeprom($i0: i64)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} {:cexpr "initio_read_eeprom:arg:base"} boogie_si_record_i64($i0);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $M.13 := i91unvram;
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i64.i32($i0);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 84);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i3 := inb($i2);
    call {:si_unique_call 759} {:cexpr "gctrl"} boogie_si_record_i8($i3);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 4);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i0);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 84);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} outb($i6, $i8);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i9 := initio_se2_rd_all($i0);
    call {:si_unique_call 762} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 1);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i0);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 84);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $i14 := inb($i13);
    call {:si_unique_call 766} {:cexpr "gctrl"} boogie_si_record_i8($i14);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 251);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i0);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 84);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} outb($i17, $i19);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} initio_se2_update_all($i0);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_41 := initio_se2_rd_all($i0);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const initio_se2_rd_all: ref;

axiom initio_se2_rd_all == $sub.ref(0, 172064);

procedure initio_se2_rd_all($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.14;



implementation initio_se2_rd_all($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p3: ref;
  var $i4: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i16;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i30: i1;
  var $i17: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $i38: i64;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i16;
  var $i45: i64;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i16;
  var $i52: i64;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i16;
  var $i59: i64;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i16;
  var $i66: i64;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i16;
  var $i73: i64;
  var $p74: ref;
  var $i75: i16;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i16;
  var $i80: i64;
  var $p81: ref;
  var $i82: i16;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i16;
  var $i87: i64;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i16;
  var $i94: i64;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i16;
  var $i101: i64;
  var $p102: ref;
  var $i103: i16;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i16;
  var $i108: i64;
  var $p109: ref;
  var $i110: i16;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i16;
  var $i115: i64;
  var $p116: ref;
  var $i117: i16;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i16;
  var $i122: i64;
  var $p123: ref;
  var $i124: i16;
  var $i125: i32;
  var $i126: i32;
  var $i127: i32;
  var $i128: i16;
  var $i129: i64;
  var $p130: ref;
  var $i131: i16;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i16;
  var $i136: i64;
  var $p137: ref;
  var $i138: i16;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $i142: i16;
  var $i143: i64;
  var $p144: ref;
  var $i145: i16;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i16;
  var $i150: i64;
  var $p151: ref;
  var $i152: i16;
  var $i153: i32;
  var $i154: i32;
  var $i155: i32;
  var $i156: i16;
  var $i157: i64;
  var $p158: ref;
  var $i159: i16;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $i163: i16;
  var $i164: i64;
  var $p165: ref;
  var $i166: i16;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i16;
  var $i171: i64;
  var $p172: ref;
  var $i173: i16;
  var $i174: i32;
  var $i175: i32;
  var $i176: i32;
  var $i177: i16;
  var $i178: i64;
  var $p179: ref;
  var $i180: i16;
  var $i181: i32;
  var $i182: i32;
  var $i183: i32;
  var $i184: i16;
  var $i185: i64;
  var $p186: ref;
  var $i187: i16;
  var $i188: i32;
  var $i189: i32;
  var $i190: i32;
  var $i191: i16;
  var $i192: i64;
  var $p193: ref;
  var $i194: i16;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $i198: i16;
  var $i199: i64;
  var $p200: ref;
  var $i201: i16;
  var $i202: i32;
  var $i203: i32;
  var $i204: i32;
  var $i205: i16;
  var $i206: i64;
  var $p207: ref;
  var $i208: i16;
  var $i209: i32;
  var $i210: i32;
  var $i211: i32;
  var $i212: i16;
  var $i213: i64;
  var $p214: ref;
  var $i215: i16;
  var $i216: i32;
  var $i217: i32;
  var $i218: i32;
  var $i219: i16;
  var $i220: i64;
  var $p221: ref;
  var $i222: i16;
  var $i223: i32;
  var $i224: i32;
  var $i225: i32;
  var $i226: i16;
  var $i227: i64;
  var $p228: ref;
  var $i229: i16;
  var $i230: i32;
  var $i231: i32;
  var $i232: i32;
  var $i233: i16;
  var $i234: i16;
  var $i235: i32;
  var $i236: i32;
  var $i237: i32;
  var $i29: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} {:cexpr "initio_se2_rd_all:arg:base"} boogie_si_record_i64($i0);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $M.13 := i91unvram;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p1 := $M.13;
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p3, $i4 := $p1, 0;
    goto $bb1;

  $bb1:
    call $p5, $i6, $i7, $i8, $i9, $i10, $i11, $p3, $i4 := initio_se2_rd_all_loop_$bb1($i0, $p5, $i6, $i7, $i8, $i9, $i10, $i11, $p3, $i4);
    goto $bb1_last;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref(1, 2));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i4);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i9 := initio_se2_rd($i0, $i8);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.14 := $store.i16($M.14, $p3, $i9);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i4, 1);
    call {:si_unique_call 770} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i11 := $sle.i32($i10, 31);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $M.13;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.14, $p13);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 51493);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $M.13;
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(1, 2));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.14, $p19);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    call {:si_unique_call 771} {:cexpr "chksum"} boogie_si_record_i16($i23);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $i31 := $add.i64(1, 1);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p19, $mul.ref($i31, 2));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.14, $p20);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i23);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i34, $i35);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $i38 := $add.i64($i31, 1);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p19, $mul.ref($i38, 2));
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.14, $p32);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i37);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i41, $i42);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $i45 := $add.i64($i38, 1);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p19, $mul.ref($i45, 2));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.14, $p39);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i44);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i48, $i49);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $i52 := $add.i64($i45, 1);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p19, $mul.ref($i52, 2));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.14, $p46);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i51);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i55, $i56);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $i59 := $add.i64($i52, 1);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p19, $mul.ref($i59, 2));
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.14, $p53);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i58);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i62, $i63);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    $i66 := $add.i64($i59, 1);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p19, $mul.ref($i66, 2));
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.14, $p60);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i65);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i69, $i70);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $i73 := $add.i64($i66, 1);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p19, $mul.ref($i73, 2));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.14, $p67);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i72);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i76, $i77);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i78);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $i80 := $add.i64($i73, 1);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p19, $mul.ref($i80, 2));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.14, $p74);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i79);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i83, $i84);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $i87 := $add.i64($i80, 1);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p19, $mul.ref($i87, 2));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.14, $p81);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i86);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i90, $i91);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i16($i92);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $i94 := $add.i64($i87, 1);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p19, $mul.ref($i94, 2));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.14, $p88);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i93);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i97, $i98);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i99);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    $i101 := $add.i64($i94, 1);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p19, $mul.ref($i101, 2));
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i103 := $load.i16($M.14, $p95);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i103);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i100);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i104, $i105);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $i108 := $add.i64($i101, 1);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p19, $mul.ref($i108, 2));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.14, $p102);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i110);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i107);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i111, $i112);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    $i115 := $add.i64($i108, 1);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p19, $mul.ref($i115, 2));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i117 := $load.i16($M.14, $p109);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i32($i117);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i114);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i118, $i119);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i16($i120);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    $i122 := $add.i64($i115, 1);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p19, $mul.ref($i122, 2));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i124 := $load.i16($M.14, $p116);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i32($i124);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i126 := $zext.i16.i32($i121);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i125, $i126);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i16($i127);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    $i129 := $add.i64($i122, 1);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p19, $mul.ref($i129, 2));
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i131 := $load.i16($M.14, $p123);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i131);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i128);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i132, $i133);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    $i136 := $add.i64($i129, 1);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p19, $mul.ref($i136, 2));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i138 := $load.i16($M.14, $p130);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i138);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i140 := $zext.i16.i32($i135);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i141 := $add.i32($i139, $i140);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i16($i141);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    $i143 := $add.i64($i136, 1);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p19, $mul.ref($i143, 2));
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i145 := $load.i16($M.14, $p137);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i146 := $zext.i16.i32($i145);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i32($i142);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i148 := $add.i32($i146, $i147);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i16($i148);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    $i150 := $add.i64($i143, 1);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p19, $mul.ref($i150, 2));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i152 := $load.i16($M.14, $p144);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i153 := $zext.i16.i32($i152);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i154 := $zext.i16.i32($i149);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i155 := $add.i32($i153, $i154);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i16($i155);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    $i157 := $add.i64($i150, 1);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p19, $mul.ref($i157, 2));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i159 := $load.i16($M.14, $p151);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i160 := $zext.i16.i32($i159);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i156);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i160, $i161);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i16($i162);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    $i164 := $add.i64($i157, 1);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p19, $mul.ref($i164, 2));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i166 := $load.i16($M.14, $p158);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i167 := $zext.i16.i32($i166);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i168 := $zext.i16.i32($i163);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i169 := $add.i32($i167, $i168);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i32.i16($i169);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    $i171 := $add.i64($i164, 1);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p19, $mul.ref($i171, 2));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i173 := $load.i16($M.14, $p165);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i174 := $zext.i16.i32($i173);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i175 := $zext.i16.i32($i170);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i176 := $add.i32($i174, $i175);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i177 := $trunc.i32.i16($i176);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    $i178 := $add.i64($i171, 1);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($p19, $mul.ref($i178, 2));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i180 := $load.i16($M.14, $p172);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i181 := $zext.i16.i32($i180);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i182 := $zext.i16.i32($i177);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i183 := $add.i32($i181, $i182);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i32.i16($i183);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    $i185 := $add.i64($i178, 1);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p19, $mul.ref($i185, 2));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i187 := $load.i16($M.14, $p179);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i188 := $zext.i16.i32($i187);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i189 := $zext.i16.i32($i184);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i188, $i189);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i32.i16($i190);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    $i192 := $add.i64($i185, 1);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p19, $mul.ref($i192, 2));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i194 := $load.i16($M.14, $p186);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i194);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i196 := $zext.i16.i32($i191);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i197 := $add.i32($i195, $i196);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i32.i16($i197);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    $i199 := $add.i64($i192, 1);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($p19, $mul.ref($i199, 2));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i201 := $load.i16($M.14, $p193);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i202 := $zext.i16.i32($i201);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i203 := $zext.i16.i32($i198);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i204 := $add.i32($i202, $i203);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i16($i204);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    $i206 := $add.i64($i199, 1);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p19, $mul.ref($i206, 2));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i208 := $load.i16($M.14, $p200);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i209 := $zext.i16.i32($i208);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i210 := $zext.i16.i32($i205);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i211 := $add.i32($i209, $i210);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i212 := $trunc.i32.i16($i211);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    $i213 := $add.i64($i206, 1);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($p19, $mul.ref($i213, 2));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i215 := $load.i16($M.14, $p207);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i216 := $zext.i16.i32($i215);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i217 := $zext.i16.i32($i212);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i218 := $add.i32($i216, $i217);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i16($i218);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    $i220 := $add.i64($i213, 1);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p19, $mul.ref($i220, 2));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i222 := $load.i16($M.14, $p214);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i223 := $zext.i16.i32($i222);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i224 := $zext.i16.i32($i219);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i225 := $add.i32($i223, $i224);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i226 := $trunc.i32.i16($i225);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    $i227 := $add.i64($i220, 1);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($p19, $mul.ref($i227, 2));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i229 := $load.i16($M.14, $p221);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i230 := $zext.i16.i32($i229);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i231 := $zext.i16.i32($i226);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i232 := $add.i32($i230, $i231);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i233 := $trunc.i32.i16($i232);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i234 := $load.i16($M.14, $p228);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i235 := $zext.i16.i32($i234);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i236 := $zext.i16.i32($i233);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i237 := $add.i32($i235, $i236);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i237);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $M.13;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.14, $p25);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i29);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i27, $i28);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 1);
    goto $bb8;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 1);
    goto $bb8;

  $bb3:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $p3, $i4 := $p5, $i10;
    goto $bb3_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5408;
}



const initio_se2_update_all: ref;

axiom initio_se2_update_all == $sub.ref(0, 173096);

procedure initio_se2_update_all($i0: i64);
  free requires assertsPassed;
  modifies $M.13, $M.22;



implementation initio_se2_update_all($i0: i64)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i16;
  var $p5: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;
  var $i18: i16;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i16;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i16;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i16;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i16;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i16;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i16;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i16;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i16;
  var $i65: i16;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $i70: i16;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i16;
  var $i75: i16;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i16;
  var $i80: i16;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i16;
  var $i85: i16;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i16;
  var $i90: i16;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i16;
  var $i95: i16;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i16;
  var $i100: i16;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i16;
  var $i105: i16;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i16;
  var $i110: i16;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i16;
  var $i115: i16;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i16;
  var $i120: i16;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i16;
  var $i125: i16;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i16;
  var $i130: i16;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $i134: i16;
  var $i135: i16;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i16;
  var $i140: i16;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $i144: i16;
  var $i145: i16;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i16;
  var $i150: i16;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i16;
  var $i155: i16;
  var $i156: i32;
  var $i157: i32;
  var $i158: i32;
  var $i159: i16;
  var $i160: i16;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $i164: i16;
  var $i165: i16;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var $i169: i16;
  var $i170: i16;
  var $i171: i32;
  var $i172: i32;
  var $i173: i32;
  var $i4: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} {:cexpr "initio_se2_update_all:arg:base"} boogie_si_record_i64($i0);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $M.13 := i91unvram;
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.22, i91udftNvRam);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    call {:si_unique_call 773} {:cexpr "chksum"} boogie_si_record_i16($i3);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(1, 2)));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i3);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i26, $i27);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(2, 2)));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i29);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i31, $i32);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(3, 2)));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i34);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i36, $i37);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(4, 2)));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i39);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i41, $i42);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(5, 2)));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i44);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i46, $i47);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(6, 2)));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i49);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i51, $i52);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(7, 2)));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i54);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i56, $i57);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(8, 2)));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i59);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i61, $i62);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(9, 2)));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i64);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i66, $i67);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(10, 2)));
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i69);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i71, $i72);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i73);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(11, 2)));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i74);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i76, $i77);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i78);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(12, 2)));
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i79);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i81, $i82);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(13, 2)));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i84);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i86, $i87);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i16($i88);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i90 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(14, 2)));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i32($i89);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i91, $i92);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i16($i93);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(15, 2)));
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i94);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i96, $i97);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i16($i98);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(16, 2)));
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i99);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i101, $i102);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i16($i103);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i105 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(17, 2)));
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i104);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i106, $i107);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(18, 2)));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i110);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i109);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i111, $i112);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i115 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(19, 2)));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i114);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i116, $i117);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i16($i118);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i120 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(20, 2)));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i120);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i119);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i121, $i122);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i16($i123);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i125 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(21, 2)));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i126 := $zext.i16.i32($i125);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i124);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i126, $i127);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i16($i128);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i130 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(22, 2)));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i131 := $zext.i16.i32($i130);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i129);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i131, $i132);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i16($i133);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i135 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(23, 2)));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i136 := $zext.i16.i32($i135);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i137 := $zext.i16.i32($i134);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i136, $i137);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i140 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(24, 2)));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i140);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i142 := $zext.i16.i32($i139);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i141, $i142);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i32.i16($i143);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i145 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(25, 2)));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i146 := $zext.i16.i32($i145);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i32($i144);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i148 := $add.i32($i146, $i147);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i16($i148);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i150 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(26, 2)));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i150);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i152 := $zext.i16.i32($i149);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i153 := $add.i32($i151, $i152);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i32.i16($i153);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i155 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(27, 2)));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i156 := $zext.i16.i32($i155);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i157 := $zext.i16.i32($i154);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i158 := $add.i32($i156, $i157);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i32.i16($i158);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i160 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(28, 2)));
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i160);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i162 := $zext.i16.i32($i159);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i163 := $add.i32($i161, $i162);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i32.i16($i163);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i165 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(29, 2)));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i166 := $zext.i16.i32($i165);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i167 := $zext.i16.i32($i164);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i168 := $add.i32($i166, $i167);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i16($i168);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i170 := $load.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(30, 2)));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i171 := $zext.i16.i32($i170);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i172 := $zext.i16.i32($i169);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i173 := $add.i32($i171, $i172);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i173);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $add.ref(i91udftNvRam, $mul.ref(31, 2)), $i4);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} initio_se2_ew_en($i0);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p5 := $M.13;
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p7, $i8, $p9 := $p5, 0, i91udftNvRam;
    goto $bb5;

  $bb5:
    call $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $p22, $p23, $i24, $p7, $i8, $p9 := initio_se2_update_all_loop_$bb5($i0, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $p22, $p23, $i24, $p7, $i8, $p9);
    goto $bb5_last;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.22, $p9);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.14, $p7);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i11, $i13);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i8, 1);
    call {:si_unique_call 776} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p9, $mul.ref(1, 2));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p7, $mul.ref(1, 2));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i24 := $sle.i32($i21, 31);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} initio_se2_ew_ds($i0);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p7, $i8, $p9 := $p23, $i21, $p22;
    goto $bb10_dummy;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i8);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.22, $p9);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} initio_se2_wr($i0, $i17, $i20);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5701;
}



const initio_se2_ew_en: ref;

axiom initio_se2_ew_en == $sub.ref(0, 174128);

procedure initio_se2_ew_en($i0: i64);
  free requires assertsPassed;



implementation initio_se2_ew_en($i0: i64)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} {:cexpr "initio_se2_ew_en:arg:base"} boogie_si_record_i64($i0);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} initio_se2_instr($i0, 48);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i64.i32($i0);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 93);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} outb(0, $i2);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} __const_udelay(128850);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    return;
}



const initio_se2_wr: ref;

axiom initio_se2_wr == $sub.ref(0, 175160);

procedure initio_se2_wr($i0: i64, $i1: i8, $i2: i16);
  free requires assertsPassed;



implementation initio_se2_wr($i0: i64, $i1: i8, $i2: i16)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i16;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i16;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i16;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i16;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i16;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i16;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i16;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i16;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i16;
  var $i147: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i32;
  var $i155: i32;
  var $i156: i32;
  var $i157: i16;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i16;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i179: i16;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $i183: i32;
  var $i184: i32;
  var $i185: i32;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $i189: i32;
  var $i190: i16;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i32;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $i198: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} {:cexpr "initio_se2_wr:arg:base"} boogie_si_record_i64($i0);
    call {:si_unique_call 783} {:cexpr "initio_se2_wr:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 784} {:cexpr "initio_se2_wr:arg:val"} boogie_si_record_i16($i2);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i3, 64);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    call {:si_unique_call 785} {:cexpr "instr"} boogie_si_record_i8($i5);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} initio_se2_instr($i0, $i7);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i2);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i0);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 93);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} outb(8, $i13);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} __const_udelay(128850);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i0);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 93);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} outb(12, $i15);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} __const_udelay(128850);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i2);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 1);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    call {:si_unique_call 792} {:cexpr "val"} boogie_si_record_i16($i18);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i37 := $sext.i16.i32($i18);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i0);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 93);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} outb(8, $i40);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} __const_udelay(128850);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i0);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 93);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} outb(12, $i44);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} __const_udelay(128850);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i18);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i46 := $shl.i32($i45, 1);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i48 := $sext.i16.i32($i47);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i64.i32($i0);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 93);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} outb(8, $i51);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} __const_udelay(128850);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i64.i32($i0);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i54, 93);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} outb(12, $i55);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} __const_udelay(128850);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i47);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i57 := $shl.i32($i56, 1);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i59 := $sext.i16.i32($i58);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 0);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i60 == 1);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i0);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, 93);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} outb(8, $i62);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} __const_udelay(128850);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i0);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, 93);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} outb(12, $i66);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} __const_udelay(128850);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i58);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i68 := $shl.i32($i67, 1);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i70 := $sext.i16.i32($i69);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, 0);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i71 == 1);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i64.i32($i0);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i72, 93);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} outb(8, $i73);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} __const_udelay(128850);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i64.i32($i0);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i76, 93);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} outb(12, $i77);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} __const_udelay(128850);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i69);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i79 := $shl.i32($i78, 1);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i16($i79);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i81 := $sext.i16.i32($i80);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i81, 0);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i82 == 1);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i64.i32($i0);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, 93);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} outb(8, $i84);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} __const_udelay(128850);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i64.i32($i0);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i87, 93);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} outb(12, $i88);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} __const_udelay(128850);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i80);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i90 := $shl.i32($i89, 1);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i16($i90);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i92 := $sext.i16.i32($i91);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i92, 0);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i93 == 1);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i64.i32($i0);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i94, 93);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} outb(8, $i95);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} __const_udelay(128850);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i64.i32($i0);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, 93);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} outb(12, $i99);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} __const_udelay(128850);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i91);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i101 := $shl.i32($i100, 1);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i16($i101);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i103 := $sext.i16.i32($i102);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 0);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i104 == 1);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i64.i32($i0);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, 93);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} outb(8, $i106);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} __const_udelay(128850);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i64.i32($i0);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i109, 93);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} outb(12, $i110);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} __const_udelay(128850);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i102);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i112 := $shl.i32($i111, 1);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i16($i112);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i114 := $sext.i16.i32($i113);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i114, 0);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i115 == 1);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i64.i32($i0);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i116, 93);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} outb(8, $i117);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} __const_udelay(128850);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i64.i32($i0);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i120, 93);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} outb(12, $i121);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} __const_udelay(128850);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i113);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i123 := $shl.i32($i122, 1);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i16($i123);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i125 := $sext.i16.i32($i124);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i125, 0);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i126 == 1);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i64.i32($i0);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i127, 93);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} outb(8, $i128);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} __const_udelay(128850);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i64.i32($i0);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i131, 93);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} outb(12, $i132);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} __const_udelay(128850);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i124);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i134 := $shl.i32($i133, 1);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i136 := $sext.i16.i32($i135);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i136, 0);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i137 == 1);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i64.i32($i0);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i138, 93);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} outb(8, $i139);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} __const_udelay(128850);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i64.i32($i0);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i142, 93);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} outb(12, $i143);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} __const_udelay(128850);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i144 := $zext.i16.i32($i135);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i145 := $shl.i32($i144, 1);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i16($i145);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i147 := $sext.i16.i32($i146);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i147, 0);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i148 == 1);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i64.i32($i0);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i149, 93);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} outb(8, $i150);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} __const_udelay(128850);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i64.i32($i0);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i153, 93);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} outb(12, $i154);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} __const_udelay(128850);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i155 := $zext.i16.i32($i146);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i156 := $shl.i32($i155, 1);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i32.i16($i156);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i158 := $sext.i16.i32($i157);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i159 := $slt.i32($i158, 0);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i159 == 1);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i64.i32($i0);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i161 := $add.i32($i160, 93);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} outb(8, $i161);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} __const_udelay(128850);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i64.i32($i0);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i165 := $add.i32($i164, 93);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} outb(12, $i165);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} __const_udelay(128850);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i166 := $zext.i16.i32($i157);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i167 := $shl.i32($i166, 1);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i16($i167);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i169 := $sext.i16.i32($i168);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i170 := $slt.i32($i169, 0);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i170 == 1);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i64.i32($i0);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i172 := $add.i32($i171, 93);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} outb(8, $i172);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} __const_udelay(128850);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i64.i32($i0);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i176 := $add.i32($i175, 93);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} outb(12, $i176);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} __const_udelay(128850);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i177 := $zext.i16.i32($i168);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i178 := $shl.i32($i177, 1);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i16($i178);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i180 := $sext.i16.i32($i179);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i180, 0);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i181 == 1);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i64.i32($i0);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i183 := $add.i32($i182, 93);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} outb(8, $i183);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} __const_udelay(128850);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i64.i32($i0);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i187 := $add.i32($i186, 93);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} outb(12, $i187);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} __const_udelay(128850);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i188 := $zext.i16.i32($i179);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i189 := $shl.i32($i188, 1);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i190 := $trunc.i32.i16($i189);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i191 := $sext.i16.i32($i190);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i192 := $slt.i32($i191, 0);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i192 == 1);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i64.i32($i0);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i194 := $add.i32($i193, 93);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} outb(8, $i194);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} __const_udelay(128850);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i64.i32($i0);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i197, 93);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} outb(12, $i198);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} __const_udelay(128850);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i0);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 93);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} outb(8, $i20);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} __const_udelay(128850);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i0);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 93);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} outb(0, $i22);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} __const_udelay(128850);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i0);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 93);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} outb(8, $i24);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} __const_udelay(128850);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34 := initio_se2_wr_loop_$bb8($i0, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34);
    goto $bb8_last;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 93);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} outb(12, $i26);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} __const_udelay(128850);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i0);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 93);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} outb(8, $i28);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} __const_udelay(128850);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i0);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 93);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i31 := inb($i30);
    call {:si_unique_call 804} {:cexpr "rb"} boogie_si_record_i8($i31);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 1);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i0);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 93);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} outb(0, $i36);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    return;

  $bb69:
    assume $i192 == 1;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i64.i32($i0);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i196 := $add.i32($i195, 93);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} outb(10, $i196);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb65:
    assume $i181 == 1;
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i64.i32($i0);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i185 := $add.i32($i184, 93);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} outb(10, $i185);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb61:
    assume $i170 == 1;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i64.i32($i0);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i174 := $add.i32($i173, 93);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} outb(10, $i174);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb57:
    assume $i159 == 1;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i64.i32($i0);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i163 := $add.i32($i162, 93);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} outb(10, $i163);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb53:
    assume $i148 == 1;
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i64.i32($i0);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i151, 93);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} outb(10, $i152);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb49:
    assume $i137 == 1;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i64.i32($i0);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i141 := $add.i32($i140, 93);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} outb(10, $i141);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb45:
    assume $i126 == 1;
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i64.i32($i0);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i130 := $add.i32($i129, 93);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} outb(10, $i130);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb41:
    assume $i115 == 1;
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i64.i32($i0);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i118, 93);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} outb(10, $i119);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb37:
    assume $i104 == 1;
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i64.i32($i0);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i107, 93);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} outb(10, $i108);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb33:
    assume $i93 == 1;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i64.i32($i0);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i96, 93);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} outb(10, $i97);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i0);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i85, 93);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} outb(10, $i86);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume $i71 == 1;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i64.i32($i0);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 93);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} outb(10, $i75);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i60 == 1;
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i64.i32($i0);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, 93);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} outb(10, $i64);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i0);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 93);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} outb(10, $i53);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i64.i32($i0);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 93);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} outb(10, $i42);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i0);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 93);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} outb(10, $i11);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i0);
    goto corral_source_split_5950;
}



const initio_se2_ew_ds: ref;

axiom initio_se2_ew_ds == $sub.ref(0, 176192);

procedure initio_se2_ew_ds($i0: i64);
  free requires assertsPassed;



implementation initio_se2_ew_ds($i0: i64)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} {:cexpr "initio_se2_ew_ds:arg:base"} boogie_si_record_i64($i0);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} initio_se2_instr($i0, 0);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i64.i32($i0);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 93);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} outb(0, $i2);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} __const_udelay(128850);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    return;
}



const initio_se2_instr: ref;

axiom initio_se2_instr == $sub.ref(0, 177224);

procedure initio_se2_instr($i0: i64, $i1: i8);
  free requires assertsPassed;



implementation initio_se2_instr($i0: i64, $i1: i8)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i40: i8;
  var $i41: i32;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $i55: i8;
  var $i56: i32;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $i70: i8;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i8;
  var $i83: i32;
  var $i84: i1;
  var $i85: i8;
  var $i86: i32;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i8;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i8;
  var $i98: i32;
  var $i99: i1;
  var $i100: i8;
  var $i101: i32;
  var $i102: i8;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i8;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i8;
  var $i113: i32;
  var $i114: i1;
  var $i115: i8;
  var $i116: i32;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} {:cexpr "initio_se2_instr:arg:base"} boogie_si_record_i64($i0);
    call {:si_unique_call 886} {:cexpr "initio_se2_instr:arg:instr"} boogie_si_record_i8($i1);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i0);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 93);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} outb(10, $i3);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} __const_udelay(128850);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i0);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 93);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} outb(14, $i5);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} __const_udelay(128850);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i1);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 8;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i0);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 93);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} outb($i10, $i12);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} __const_udelay(128850);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i8);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, 4);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i0);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 93);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} outb($i15, $i17);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} __const_udelay(128850);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i1);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32($i18, 1);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    call {:si_unique_call 895} {:cexpr "instr"} boogie_si_record_i8($i20);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i20);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := 8;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i0);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 93);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} outb($i27, $i29);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} __const_udelay(128850);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i25);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 4);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i0);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 93);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} outb($i32, $i34);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} __const_udelay(128850);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i20);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i36 := $shl.i32($i35, 1);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i38 := $sext.i8.i32($i37);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 0);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := 8;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i0);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 93);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} outb($i42, $i44);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} __const_udelay(128850);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i40);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, 4);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i0);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 93);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} outb($i47, $i49);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} __const_udelay(128850);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i37);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i51 := $shl.i32($i50, 1);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i53 := $sext.i8.i32($i52);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := 8;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i0);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 93);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} outb($i57, $i59);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} __const_udelay(128850);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i55);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i60, 4);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i64.i32($i0);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, 93);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} outb($i62, $i64);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} __const_udelay(128850);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i52);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i66 := $shl.i32($i65, 1);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i68 := $sext.i8.i32($i67);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 0);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := 8;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i32($i0);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, 93);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} outb($i72, $i74);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} __const_udelay(128850);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i70);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i75, 4);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i64.i32($i0);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 93);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} outb($i77, $i79);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} __const_udelay(128850);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i67);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i81 := $shl.i32($i80, 1);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i81);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i83 := $sext.i8.i32($i82);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i83, 0);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := 8;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i64.i32($i0);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 93);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} outb($i87, $i89);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} __const_udelay(128850);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i85);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i90, 4);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i8($i91);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i64.i32($i0);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, 93);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} outb($i92, $i94);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} __const_udelay(128850);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i82);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i96 := $shl.i32($i95, 1);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i98 := $sext.i8.i32($i97);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i98, 0);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := 8;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i8($i101);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i64.i32($i0);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, 93);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} outb($i102, $i104);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} __const_udelay(128850);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i100);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i106 := $or.i32($i105, 4);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8($i106);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i64.i32($i0);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i108, 93);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} outb($i107, $i109);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} __const_udelay(128850);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i97);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i111 := $shl.i32($i110, 1);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i8($i111);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i113 := $sext.i8.i32($i112);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i113, 0);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i115 := 8;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i8($i116);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i64.i32($i0);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i118, 93);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} outb($i117, $i119);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} __const_udelay(128850);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i115);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i121 := $or.i32($i120, 4);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i8($i121);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i64.i32($i0);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i124 := $add.i32($i123, 93);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} outb($i122, $i124);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} __const_udelay(128850);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i0);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 93);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} outb(8, $i22);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} __const_udelay(128850);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume $i114 == 1;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i115 := 10;
    goto $bb34;

  $bb28:
    assume $i99 == 1;
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i100 := 10;
    goto $bb30;

  $bb24:
    assume $i84 == 1;
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i85 := 10;
    goto $bb26;

  $bb20:
    assume $i69 == 1;
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i70 := 10;
    goto $bb22;

  $bb16:
    assume $i54 == 1;
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i55 := 10;
    goto $bb18;

  $bb12:
    assume $i39 == 1;
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i40 := 10;
    goto $bb14;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i25 := 10;
    goto $bb10;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i8 := 10;
    goto $bb5;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 178256);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    return;
}



const initio_se2_rd: ref;

axiom initio_se2_rd == $sub.ref(0, 179288);

procedure initio_se2_rd($i0: i64, $i1: i8) returns ($r: i16);
  free requires assertsPassed;



implementation initio_se2_rd($i0: i64, $i1: i8) returns ($r: i16)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i16;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i16;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i16;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i8;
  var $i83: i32;
  var $i84: i32;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i16;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i16;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i8;
  var $i103: i32;
  var $i104: i32;
  var $i105: i16;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i16;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i8;
  var $i117: i32;
  var $i118: i32;
  var $i119: i8;
  var $i120: i32;
  var $i121: i32;
  var $i122: i16;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $i126: i16;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i8;
  var $i134: i32;
  var $i135: i32;
  var $i136: i8;
  var $i137: i32;
  var $i138: i32;
  var $i139: i16;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $i143: i16;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i8;
  var $i151: i32;
  var $i152: i32;
  var $i153: i8;
  var $i154: i32;
  var $i155: i32;
  var $i156: i16;
  var $i157: i32;
  var $i158: i32;
  var $i159: i32;
  var $i160: i16;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $i166: i32;
  var $i167: i8;
  var $i168: i32;
  var $i169: i32;
  var $i170: i8;
  var $i171: i32;
  var $i172: i32;
  var $i173: i16;
  var $i174: i32;
  var $i175: i32;
  var $i176: i32;
  var $i177: i16;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i32;
  var $i184: i8;
  var $i185: i32;
  var $i186: i32;
  var $i187: i8;
  var $i188: i32;
  var $i189: i32;
  var $i190: i16;
  var $i191: i32;
  var $i192: i32;
  var $i193: i32;
  var $i194: i16;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $i198: i32;
  var $i199: i32;
  var $i200: i32;
  var $i201: i8;
  var $i202: i32;
  var $i203: i32;
  var $i204: i8;
  var $i205: i32;
  var $i206: i32;
  var $i207: i16;
  var $i208: i32;
  var $i209: i32;
  var $i210: i32;
  var $i211: i16;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i32;
  var $i216: i32;
  var $i217: i32;
  var $i218: i8;
  var $i219: i32;
  var $i220: i32;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i16;
  var $i225: i32;
  var $i226: i32;
  var $i227: i32;
  var $i228: i16;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $i232: i32;
  var $i233: i32;
  var $i234: i32;
  var $i235: i8;
  var $i236: i32;
  var $i237: i32;
  var $i238: i8;
  var $i239: i32;
  var $i240: i32;
  var $i241: i16;
  var $i242: i32;
  var $i243: i32;
  var $i244: i32;
  var $i245: i16;
  var $i246: i32;
  var $i247: i32;
  var $i248: i32;
  var $i249: i32;
  var $i250: i32;
  var $i251: i32;
  var $i252: i8;
  var $i253: i32;
  var $i254: i32;
  var $i255: i8;
  var $i256: i32;
  var $i257: i32;
  var $i258: i16;
  var $i259: i32;
  var $i260: i32;
  var $i261: i32;
  var $i262: i16;
  var $i263: i32;
  var $i264: i32;
  var $i265: i32;
  var $i266: i32;
  var $i267: i32;
  var $i268: i32;
  var $i269: i8;
  var $i270: i32;
  var $i271: i32;
  var $i272: i8;
  var $i273: i32;
  var $i274: i16;
  var $i275: i32;
  var $i276: i32;
  var $i277: i32;
  var $i24: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} {:cexpr "initio_se2_rd:arg:base"} boogie_si_record_i64($i0);
    call {:si_unique_call 928} {:cexpr "initio_se2_rd:arg:addr"} boogie_si_record_i8($i1);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 128);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    call {:si_unique_call 929} {:cexpr "instr"} boogie_si_record_i8($i4);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} initio_se2_instr($i0, $i6);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i0);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 93);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} outb(12, $i8);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} __const_udelay(128850);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i0);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 93);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} outb(8, $i10);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i0);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 93);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $i13 := inb($i12);
    call {:si_unique_call 935} {:cexpr "rb"} boogie_si_record_i8($i13);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 1);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    call {:si_unique_call 936} {:cexpr "rb"} boogie_si_record_i8($i16);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32($i17, 15);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    call {:si_unique_call 937} {:cexpr "val"} boogie_si_record_i16($i21);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} __const_udelay(128850);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i0);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 93);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} outb(12, $i26);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} __const_udelay(128850);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i0);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 93);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} outb(8, $i28);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i0);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 93);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i31 := inb($i30);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 1);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i36 := $shl.i32($i35, 14);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i21);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i38, $i39);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} __const_udelay(128850);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i32($i0);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 93);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} outb(12, $i43);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} __const_udelay(128850);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i64.i32($i0);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 93);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} outb(8, $i45);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i0);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i46, 93);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i48 := inb($i47);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 1);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i53 := $shl.i32($i52, 13);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i41);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i55, $i56);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} __const_udelay(128850);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i0);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i59, 93);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} outb(12, $i60);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} __const_udelay(128850);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i0);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, 93);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} outb(8, $i62);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i64.i32($i0);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, 93);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i65 := inb($i64);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 1);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i70 := $shl.i32($i69, 12);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i58);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i72, $i73);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} __const_udelay(128850);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i64.i32($i0);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i76, 93);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} outb(12, $i77);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} __const_udelay(128850);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i64.i32($i0);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 93);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} outb(8, $i79);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i64.i32($i0);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i80, 93);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i82 := inb($i81);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 1);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i87 := $shl.i32($i86, 11);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i16($i87);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i88);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i75);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i89, $i90);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} __const_udelay(128850);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i64.i32($i0);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, 93);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} outb(12, $i94);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} __const_udelay(128850);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i64.i32($i0);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, 93);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} outb(8, $i96);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i64.i32($i0);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i97, 93);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i99 := inb($i98);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 1);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i8($i101);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $i104 := $shl.i32($i103, 10);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i16($i104);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i92);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i106, $i107);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} __const_udelay(128850);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i64.i32($i0);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i110, 93);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} outb(12, $i111);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} __const_udelay(128850);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i64.i32($i0);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i112, 93);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} outb(8, $i113);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i64.i32($i0);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i114, 93);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i116 := inb($i115);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, 1);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i8($i118);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i121 := $shl.i32($i120, 9);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i16($i121);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i109);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i123, $i124);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i16($i125);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} __const_udelay(128850);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i64.i32($i0);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i127, 93);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} outb(12, $i128);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} __const_udelay(128850);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i64.i32($i0);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i130 := $add.i32($i129, 93);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} outb(8, $i130);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i64.i32($i0);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i131, 93);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i133 := inb($i132);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i135 := $and.i32($i134, 1);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i8($i135);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i138 := $shl.i32($i137, 8);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i140 := $zext.i16.i32($i139);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i126);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i142 := $add.i32($i140, $i141);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i16($i142);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} __const_udelay(128850);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i64.i32($i0);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i145 := $add.i32($i144, 93);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} outb(12, $i145);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} __const_udelay(128850);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i64.i32($i0);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i147 := $add.i32($i146, 93);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} outb(8, $i147);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i64.i32($i0);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i149 := $add.i32($i148, 93);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i150 := inb($i149);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i152 := $and.i32($i151, 1);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i8($i152);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i155 := $shl.i32($i154, 7);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i16($i155);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i157 := $zext.i16.i32($i156);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i158 := $zext.i16.i32($i143);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i159 := $add.i32($i157, $i158);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i16($i159);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} __const_udelay(128850);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i64.i32($i0);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i161, 93);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} outb(12, $i162);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} __const_udelay(128850);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i64.i32($i0);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i164 := $add.i32($i163, 93);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} outb(8, $i164);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i64.i32($i0);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i166 := $add.i32($i165, 93);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i167 := inb($i166);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i32($i167);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i169 := $and.i32($i168, 1);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i32.i8($i169);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i172 := $shl.i32($i171, 6);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i32.i16($i172);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i174 := $zext.i16.i32($i173);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i175 := $zext.i16.i32($i160);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i176 := $add.i32($i174, $i175);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i177 := $trunc.i32.i16($i176);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} __const_udelay(128850);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i178 := $trunc.i64.i32($i0);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i179 := $add.i32($i178, 93);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} outb(12, $i179);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} __const_udelay(128850);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i64.i32($i0);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i181 := $add.i32($i180, 93);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} outb(8, $i181);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i64.i32($i0);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i183 := $add.i32($i182, 93);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i184 := inb($i183);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i32($i184);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i186 := $and.i32($i185, 1);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i8($i186);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i189 := $shl.i32($i188, 5);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i190 := $trunc.i32.i16($i189);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i191 := $zext.i16.i32($i190);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i192 := $zext.i16.i32($i177);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i193 := $add.i32($i191, $i192);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i16($i193);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} __const_udelay(128850);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i64.i32($i0);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i196 := $add.i32($i195, 93);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} outb(12, $i196);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} __const_udelay(128850);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i64.i32($i0);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i197, 93);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} outb(8, $i198);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i64.i32($i0);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i200 := $add.i32($i199, 93);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i201 := inb($i200);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i32($i201);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i203 := $and.i32($i202, 1);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i204 := $trunc.i32.i8($i203);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i205 := $zext.i8.i32($i204);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i206 := $shl.i32($i205, 4);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i32.i16($i206);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i208 := $zext.i16.i32($i207);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i209 := $zext.i16.i32($i194);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i210 := $add.i32($i208, $i209);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i32.i16($i210);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} __const_udelay(128850);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i212 := $trunc.i64.i32($i0);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i213 := $add.i32($i212, 93);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} outb(12, $i213);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} __const_udelay(128850);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i214 := $trunc.i64.i32($i0);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i215 := $add.i32($i214, 93);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} outb(8, $i215);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i216 := $trunc.i64.i32($i0);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i217 := $add.i32($i216, 93);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $i218 := inb($i217);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i219 := $zext.i8.i32($i218);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i220 := $and.i32($i219, 1);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i221 := $trunc.i32.i8($i220);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i223 := $shl.i32($i222, 3);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i16($i223);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i225 := $zext.i16.i32($i224);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i226 := $zext.i16.i32($i211);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i227 := $add.i32($i225, $i226);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i228 := $trunc.i32.i16($i227);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} __const_udelay(128850);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i229 := $trunc.i64.i32($i0);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i230 := $add.i32($i229, 93);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} outb(12, $i230);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} __const_udelay(128850);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i64.i32($i0);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i232 := $add.i32($i231, 93);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} outb(8, $i232);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i233 := $trunc.i64.i32($i0);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i234 := $add.i32($i233, 93);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i235 := inb($i234);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i236 := $zext.i8.i32($i235);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i237 := $and.i32($i236, 1);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i238 := $trunc.i32.i8($i237);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i239 := $zext.i8.i32($i238);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i240 := $shl.i32($i239, 2);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i241 := $trunc.i32.i16($i240);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i242 := $zext.i16.i32($i241);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i243 := $zext.i16.i32($i228);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i244 := $add.i32($i242, $i243);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i245 := $trunc.i32.i16($i244);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} __const_udelay(128850);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i246 := $trunc.i64.i32($i0);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i247 := $add.i32($i246, 93);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} outb(12, $i247);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} __const_udelay(128850);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i64.i32($i0);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i249 := $add.i32($i248, 93);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} outb(8, $i249);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i250 := $trunc.i64.i32($i0);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i251 := $add.i32($i250, 93);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i252 := inb($i251);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i253 := $zext.i8.i32($i252);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i254 := $and.i32($i253, 1);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i255 := $trunc.i32.i8($i254);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i256 := $zext.i8.i32($i255);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i257 := $shl.i32($i256, 1);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i258 := $trunc.i32.i16($i257);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i259 := $zext.i16.i32($i258);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i260 := $zext.i16.i32($i245);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i261 := $add.i32($i259, $i260);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i262 := $trunc.i32.i16($i261);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} __const_udelay(128850);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i263 := $trunc.i64.i32($i0);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i264 := $add.i32($i263, 93);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} outb(12, $i264);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} __const_udelay(128850);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i265 := $trunc.i64.i32($i0);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i266 := $add.i32($i265, 93);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} outb(8, $i266);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i64.i32($i0);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i268 := $add.i32($i267, 93);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i269 := inb($i268);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i270 := $zext.i8.i32($i269);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i271 := $and.i32($i270, 1);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i272 := $trunc.i32.i8($i271);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i273 := $zext.i8.i32($i272);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i274 := $trunc.i32.i16($i273);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i275 := $zext.i16.i32($i274);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i276 := $zext.i16.i32($i262);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i277 := $add.i32($i275, $i276);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i277);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} __const_udelay(128850);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i0);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 93);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} outb(0, $i23);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} __const_udelay(128850);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 180320);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i1 := $M.20;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 181352);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1018} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1019} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 182384);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1020} __VERIFIER_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 183416);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1021} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1022} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const scsi_host_alloc: ref;

axiom scsi_host_alloc == $sub.ref(0, 184448);

procedure scsi_host_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_host_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} {:cexpr "scsi_host_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $p2 := external_alloc();
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 185480);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1025} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1026} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1027} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_bus_read_config_dword: ref;

axiom pci_bus_read_config_dword == $sub.ref(0, 186512);

procedure pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1028} {:cexpr "pci_bus_read_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1029} {:cexpr "pci_bus_read_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1030} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1031} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const i91u_queuecommand: ref;

axiom i91u_queuecommand == $sub.ref(0, 187544);

procedure i91u_queuecommand($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.1, $M.4, $M.5, $M.7, $M.9, $M.11;



implementation i91u_queuecommand($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ldv_spin_lock();
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} scsi_cmd_get_serial($p0, $p1);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i4 := i91u_queuecommand_lck($p1, $p3);
    call {:si_unique_call 1035} {:cexpr "rc"} boogie_si_record_i32($i4);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3832)), $mul.ref(216, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} spin_unlock_irqrestore($p6, $u0);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const i91u_bus_reset: ref;

axiom i91u_bus_reset == $sub.ref(0, 188576);

procedure i91u_bus_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20;



implementation i91u_bus_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3832)), $mul.ref(3832, 1));
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 3832)), $mul.ref(216, 1));
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} spin_lock_irq($p12);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} vslice_dummy_var_42 := initio_reset_scsi($p6, 0);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 3832)), $mul.ref(216, 1));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} spin_unlock_irq($p19);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $r := 8194;
    return;
}



const i91u_biosparam: ref;

axiom i91u_biosparam == $sub.ref(0, 189608);

procedure i91u_biosparam($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation i91u_biosparam($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i64;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $p47: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} {:cexpr "i91u_biosparam:arg:capacity"} boogie_si_record_i64($i2);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3832)), $mul.ref(3832, 1));
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3496)), $mul.ref(200, 1));
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref($i12, 8)), $mul.ref(6, 1));
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.3, $p14);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p9, $mul.ref($i12, 8)), $mul.ref(4, 1));
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.3, $p35);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 1024);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i39 == 1);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, 64);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p3, $mul.ref(1, 4));
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, 32);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i45 := $lshr.i64($i2, 11);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p3, $mul.ref(2, 4));
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p47, $i46);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i39 == 1;
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, 255);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p3, $mul.ref(1, 4));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p40, 63);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i41 := $udiv.i64($i2, 16065);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i32($i41);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p3, $mul.ref(2, 4));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p43, $i42);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref($i12, 8)), $mul.ref(6, 1));
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.3, $p18);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, $i20);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p9, $mul.ref($i12, 8)), $mul.ref(7, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.3, $p21);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p3, $mul.ref(1, 4));
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, $i23);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p9, $mul.ref($i12, 8)), $mul.ref(6, 1));
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.3, $p25);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i28 := $udiv.i64($i2, $i27);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref($i12, 8)), $mul.ref(7, 1));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.3, $p29);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i32 := $udiv.i64($i28, $i31);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p3, $mul.ref(2, 4));
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p34, $i33);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 190640);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.20;



implementation spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} ldv_spin_lock();
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} ldv_spin_lock_irq_8($p0);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 191672);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.20;



implementation spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_spin_unlock();
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} ldv_spin_unlock_irq_11($p0);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_11: ref;

axiom ldv_spin_unlock_irq_11 == $sub.ref(0, 192704);

procedure ldv_spin_unlock_irq_11($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_irq_11($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} _raw_spin_unlock_irq($p2);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 193736);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_8: ref;

axiom ldv_spin_lock_irq_8 == $sub.ref(0, 194768);

procedure ldv_spin_lock_irq_8($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_irq_8($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} _raw_spin_lock_irq($p2);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 195800);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    return;
}



const scsi_cmd_get_serial: ref;

axiom scsi_cmd_get_serial == $sub.ref(0, 196832);

procedure scsi_cmd_get_serial($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation scsi_cmd_get_serial($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    return;
}



const i91u_queuecommand_lck: ref;

axiom i91u_queuecommand_lck == $sub.ref(0, 197864);

procedure i91u_queuecommand_lck($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $M.4, $M.5, $M.7, $M.9, $M.11;



implementation i91u_queuecommand_lck($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3832)), $mul.ref(3832, 1));
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, $p1);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p9 := initio_alloc_scb($p7);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} initio_build_scb($p7, $p9, $p0);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} initio_exec_scb($p7, $p9);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i12 := 4181;
    goto $bb3;
}



const initio_alloc_scb: ref;

axiom initio_alloc_scb == $sub.ref(0, 198896);

procedure initio_alloc_scb($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.20, $M.1;



implementation initio_alloc_scb($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} ldv_spin_lock();
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(312, 1));
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} spin_unlock_irqrestore($p13, $u0);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p6);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p6);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $0.ref);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 352)), $mul.ref(8, 1));
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 1);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $0.ref);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const initio_build_scb: ref;

axiom initio_build_scb == $sub.ref(0, 199928);

procedure initio_build_scb($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation initio_build_scb($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i16;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i16;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i32;
  var $p82: ref;
  var $p84: ref;
  var $i85: i8;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i8;
  var $p92: ref;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i1;
  var $p105: ref;
  var $i106: i64;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i64;
  var $i115: i64;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i1;
  var $i101: i64;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i122: i64;
  var $i100: i64;
  var $i123: i32;
  var $i124: i64;
  var $i125: i1;
  var $i126: i32;
  var $p127: ref;
  var $i128: i32;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(80, 1));
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, i91uSCBPost);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(88, 1));
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $p2);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(40, 1));
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, 1);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 2);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 3496)), $mul.ref(200, 1));
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, $i11);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 3496)), $mul.ref(208, 1));
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.1, $p15);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i8($i16);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(43, 1));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, $i17);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 3496)), $mul.ref(208, 1));
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.1, $p21);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i8($i22);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 192);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(57, 1));
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, $i26);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 4);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p33, $i32);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(368, 1));
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $i39 := dma_map_single_attrs($p36, $p38, 14, 2, $0.ref);
    call {:si_unique_call 1053} {:cexpr "dma_addr"} boogie_si_record_i64($i39);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i64.i32($i39);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(76, 1));
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p41, $i40);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(53, 1));
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p42, 14);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i39);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(384, 1)), $mul.ref(0, 1));
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, $p43);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(300, 1));
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.1, $p46);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i16.i8($i47);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(56, 1));
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p49, $i48);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p50, 0);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p51, 0);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(60, 1));
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(300, 1));
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.1, $p56);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i64($i57);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.1;
    cmdloc_dummy_var_3 := $M.1;
    call {:si_unique_call 1054} cmdloc_dummy_var_4 := $memcpy.i8(cmdloc_dummy_var_2, cmdloc_dummy_var_3, $p53, $p55, $i58, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_4;
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(329, 1));
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.1, $p62);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i65 == 1);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p67, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i68 := scsi_dma_map($p2);
    call {:si_unique_call 1056} {:cexpr "nseg"} boogie_si_record_i32($i68);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 0);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i32($i69);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i70);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $i72 := ldv__builtin_expect($i71, 0);
    call {:si_unique_call 1058} {:cexpr "tmp"} boogie_si_record_i64($i72);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i68, 0);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i74 == 1);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p130, 0);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(52, 1));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p131, 0);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i74 == 1;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(96, 1));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i80 := dma_map_single_attrs($p77, $p79, 256, 0, $0.ref);
    call {:si_unique_call 1061} {:cexpr "dma_addr"} boogie_si_record_i64($i80);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i64.i32($i80);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(44, 1));
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p82, $i81);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(384, 1)), $mul.ref(32, 1));
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p84, $i80);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i68);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(52, 1));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p86, $i85);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.1, $p87);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i90 := $or.i32($i89, 128);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i8($i90);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p92, $i91);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(96, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $p95 := scsi_sglist($p2);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(52, 1));
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.1, $p96);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i99 := $sgt.i32($i98, 0);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i100 := 0;
    assume {:branchcond $i99} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i123 := scsi_bufflen($p2);
    call {:si_unique_call 1067} {:cexpr "tmp___2"} boogie_si_record_i32($i123);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i124 := $zext.i32.i64($i123);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i125 := $sle.i64($i124, $i100);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i125 == 1);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i64.i32($i100);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p129, $i128);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i125 == 1;
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i126 := scsi_bufflen($p2);
    call {:si_unique_call 1069} {:cexpr "tmp___1"} boogie_si_record_i32($i126);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p127, $i126);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i99 == 1;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i101, $i102, $p103, $p104 := 0, 0, $p95, $p93;
    goto $bb13;

  $bb13:
    call $p105, $i106, $i107, $p108, $p109, $i110, $p111, $p112, $i113, $i114, $i115, $p116, $i117, $p118, $i119, $i120, $i121, $i101, $i102, $p103, $p104, $i122 := initio_build_scb_loop_$bb13($p96, $p105, $i106, $i107, $p108, $p109, $i110, $p111, $p112, $i113, $i114, $i115, $p116, $i117, $p118, $i119, $i120, $i121, $i101, $i102, $p103, $p104, $i122);
    goto $bb13_last;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p103, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.1, $p105);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i64.i32($i106);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p104, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p108, $i107);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p103, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.1, $p109);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p104, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p111, $i110);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p103, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.1, $p112);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i114 := $zext.i32.i64($i113);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i114, $i101);
    call {:si_unique_call 1063} {:cexpr "total_len"} boogie_si_record_i64($i115);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p104, $mul.ref(1, 8));
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i102, 1);
    call {:si_unique_call 1064} {:cexpr "i"} boogie_si_record_i32($i117);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $p118 := sg_next($p103);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.1, $p96);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i121 := $sgt.i32($i120, $i117);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i122 := $i115;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i100 := $i122;
    goto $bb12;

  $bb15:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $i101, $i102, $p103, $p104 := $i115, $i117, $p118, $p116;
    goto $bb15_dummy;

  $bb4:
    assume $i73 == 1;
    call {:si_unique_call 1059} devirtbounce.6(0, .str.2, 2604, 12);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call initio_build_scb_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i65 == 1;
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p66, 32);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7175;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const initio_exec_scb: ref;

axiom initio_exec_scb == $sub.ref(0, 200960);

procedure initio_exec_scb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.20, $M.4, $M.5, $M.7, $M.9, $M.11;



implementation initio_exec_scb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(10, 1));
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2, 0);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(12, 1));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p3, 0);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(52, 1));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i16($i5);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(14, 1));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p7, $i6);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} ldv_spin_lock();
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} initio_append_pend_scb($p0, $p1);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(14, 1));
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(384, 1));
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} spin_unlock_irqrestore($p24, $u0);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.1, $p12);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 224);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} outb(31, $i15);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(14, 1));
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, 0);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(384, 1));
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} spin_unlock_irqrestore($p17, $u0);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} vslice_dummy_var_43 := tulip_main($p0);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} ldv_spin_lock();
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(14, 1));
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, 1);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.1, $p20);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 224);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} outb(15, $i23);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i91uSCBPost: ref;

axiom i91uSCBPost == $sub.ref(0, 201992);

procedure i91uSCBPost($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.20, $M.1, $M.4, $M.5, $M.7, $M.9, $M.11;



implementation i91uSCBPost($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i64;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(88, 1));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i20, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i20, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} vslice_dummy_var_46 := printk.ref.i32.i32(.str.4, $i40, $i43);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p45, 7);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.1, $p46);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.1, $p49);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i52 := $shl.i32($i51, 16);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i48, $i52);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p54, $i53);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.1, $p55);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} i91u_unmap_scb($p56, $p5);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    call {:si_unique_call 1085} devirtbounce.7($p58, $p5);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} initio_release_scb($p2, $p3);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i25 == 1;
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p37, 5);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb15:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i20, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb19;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb13:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i20, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb19;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p36, 8);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb11:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i20, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25:
    assume $i28 == 1;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb9:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i20, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i20, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i30 == 1);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p35, 3);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb30:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i20, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb19;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p34, 0);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb28:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i20, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb35:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i20, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb19;

  $bb38:
    assume $i33 == 1;
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} vslice_dummy_var_44 := printk.ref(.str.3);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32(1, 0);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1080} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32(1, 0);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} vslice_dummy_var_45 := ldv__builtin_expect($i16, 0);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} initio_release_scb($p2, $p3);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} warn_slowpath_null(.str.2, 2778);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 203024);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1089} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $p5 := get_dma_ops($p0);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 1093} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1095} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i14 := __phys_addr($i13);
    call {:si_unique_call 1098} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 1099} $i21 := devirtbounce.8($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 1100} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i23 := __phys_addr($i22);
    call {:si_unique_call 1102} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 1096} devirtbounce.6(0, .str.5, 19, 12);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 204056);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const scsi_dma_map: ref;

axiom scsi_dma_map == $sub.ref(0, 205088);

procedure scsi_dma_map($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_dma_map($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1104} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 206120);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 1107} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const scsi_sglist: ref;

axiom scsi_sglist == $sub.ref(0, 207152);

procedure scsi_sglist($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_sglist($p0: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const sg_next: ref;

axiom sg_next == $sub.ref(0, 208184);

procedure sg_next($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_next($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $p1 := external_alloc();
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const scsi_bufflen: ref;

axiom scsi_bufflen == $sub.ref(0, 209216);

procedure scsi_bufflen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_bufflen($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(320, 1)), $mul.ref(16, 1));
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 210248);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1110} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.3, dma_ops);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 211280);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    return;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 212312);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 213344);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1113} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1114} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1115} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 214376);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1117} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1118} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1119} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 1120} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 215408);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    return;
}



const i91u_unmap_scb: ref;

axiom i91u_unmap_scb == $sub.ref(0, 216440);

procedure i91u_unmap_scb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation i91u_unmap_scb($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $i19: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(384, 1)), $mul.ref(0, 1));
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i14 := scsi_sg_count($p1);
    call {:si_unique_call 1124} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(384, 1)), $mul.ref(32, 1));
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.1, $p18);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} dma_unmap_single_attrs($p16, $i19, 256, 0, $0.ref);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} scsi_dma_unmap($p1);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(384, 1)), $mul.ref(0, 1));
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} dma_unmap_single_attrs($p7, $i11, 14, 2, $0.ref);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(384, 1)), $mul.ref(0, 1));
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $0.ref);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 217472);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1128} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1129} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $p5 := get_dma_ops($p0);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 1132} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1134} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    call {:si_unique_call 1136} devirtbounce.9($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1135} devirtbounce.6(0, .str.5, 36, 12);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const scsi_sg_count: ref;

axiom scsi_sg_count == $sub.ref(0, 218504);

procedure scsi_sg_count($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_sg_count($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const scsi_dma_unmap: ref;

axiom scsi_dma_unmap == $sub.ref(0, 219536);

procedure scsi_dma_unmap($p0: ref);
  free requires assertsPassed;



implementation scsi_dma_unmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 220568);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1139} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1140} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1141} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 221600);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $p1 := calloc(1, $i0);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1144} __VERIFIER_assume($i4);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 222632);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.23;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1146} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.23;
    call {:si_unique_call 1147} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.23 := cmdloc_dummy_var_6;
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 223664);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.1, $M.4, $M.5, $M.7, $M.9, $M.11;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1148} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1149} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1150} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1151} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1152} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1153} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1154} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1155} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} ldv_stop();
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 1);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i8 := i91u_intr($i1, $p2);
    call {:si_unique_call 1158} {:cexpr "irq_retval"} boogie_si_record_i32($i8);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 224696);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_pci_driver_2: ref;

axiom ldv_pci_driver_2 == $sub.ref(0, 225728);

procedure ldv_pci_driver_2();
  free requires assertsPassed;
  modifies $M.25, $M.1, $CurrAddr;



implementation ldv_pci_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $p0 := ldv_init_zalloc(2976);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $M.25 := $p0;
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 226760);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.5, $M.20, $M.1, $M.4, $M.7, $M.9, $M.11;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1162} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1163} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1164} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} ldv_stop();
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i18 := $M.11;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i19 := $M.12;
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p20 := $M.19;
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $M.5 := $i21;
    call {:si_unique_call 1168} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i14 := $M.9;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i15 := $M.10;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $p16 := $M.18;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $M.5 := $i17;
    call {:si_unique_call 1166} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i10 := $M.7;
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i11 := $M.8;
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $p12 := $M.17;
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $M.5 := $i13;
    call {:si_unique_call 1170} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i7 := $M.6;
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p8 := $M.16;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $M.5 := $i9;
    call {:si_unique_call 1172} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const main: ref;

axiom main == $sub.ref(0, 227792);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.26, $M.27, $M.28, $M.4, $M.29, $M.5, $M.30, $M.1, $M.20, $M.0, $M.31, $M.9, $M.11, $M.7, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.25, $M.15, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.13, $M.22, $M.14, $M.2, $M.96, $M.97, $M.21, $CurrAddr, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i64;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var vslice_dummy_var_47: ref;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;

  $bb0:
    call {:si_unique_call 1174} $initialize();
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $p1 := ldv_init_zalloc(4);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $p3 := ldv_init_zalloc(480);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p5 := ldv_init_zalloc(3816);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1180} $p7 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1181} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p7);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $p9 := ldv_init_zalloc(32);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} ldv_initialize();
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} vslice_dummy_var_47 := ldv_memset($p11, 0, 8);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1185} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 1186} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1187} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $M.4 := 0;
    call {:si_unique_call 1188} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 1189} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i49, $i50, $p51, $i53, $i54, $p55, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51 := main_loop_$bb1($p0, $p2, $p4, $p6, $p8, $p10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i49, $i50, $p51, $i53, $i54, $p55, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} ldv_stop();
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i57 := $M.29;
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb73:
    assume $i58 == 1;
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1215} $i59 := __VERIFIER_nondet_int();
    call {:si_unique_call 1216} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i59);
    call {:si_unique_call 1217} {:cexpr "tmp___7"} boogie_si_record_i32($i59);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i59, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i59, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} ldv_stop();
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb80:
    assume $i62 == 1;
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i75 := $M.29;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 2);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb95:
    assume $i76 == 1;
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} vslice_dummy_var_51 := ldv_shutdown_2();
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 1225} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb78:
    assume $i61 == 1;
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i72 := $M.29;
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 2);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb92:
    assume $i73 == 1;
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p74 := $M.25;
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} initio_remove_one($p74);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1223} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb76:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i59, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb82;

  $bb83:
    assume $i63 == 1;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i64 := $M.29;
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 1);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb85:
    assume $i65 == 1;
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $p66 := $M.25;
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $i67 := initio_probe_one($p66, $p10);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $M.31 := $i67;
    call {:si_unique_call 1219} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i67);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i68 := $M.31;
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb87:
    assume $i69 == 1;
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 1220} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i70 := $M.27;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, 1);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $M.27 := $i71;
    call {:si_unique_call 1221} {:cexpr "ref_cnt"} boogie_si_record_i32($i71);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    goto $bb89;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i38 := $M.4;
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb48:
    assume $i39 == 1;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1205} $i40 := __VERIFIER_nondet_int();
    call {:si_unique_call 1206} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i40);
    call {:si_unique_call 1207} {:cexpr "tmp___6"} boogie_si_record_i32($i40);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} ldv_stop();
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb55:
    assume $i43 == 1;
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i53 := $M.4;
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb67:
    assume $i54 == 1;
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p55 := $M.15;
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} vslice_dummy_var_50 := i91u_bus_reset($p55);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 1213} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb53:
    assume $i42 == 1;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i49 := $M.4;
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb64:
    assume $i50 == 1;
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p51 := $M.15;
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} vslice_dummy_var_49 := i91u_queuecommand($p6, $p51);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 1211} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb51:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb57;

  $bb58:
    assume $i44 == 1;
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i45 := $M.4;
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume $i46 == 1;
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.23, $p0);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} vslice_dummy_var_48 := i91u_biosparam($p8, $p4, $i47, $p2);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 1209} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb3:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i21 := $M.28;
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume $i22 == 1;
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1194} $i23 := __VERIFIER_nondet_int();
    call {:si_unique_call 1195} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i23);
    call {:si_unique_call 1196} {:cexpr "tmp___5"} boogie_si_record_i32($i23);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i23, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} ldv_stop();
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb23:
    assume $i25 == 1;
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i31 := $M.28;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36:
    assume $i32 == 1;
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $i33 := initio_init_driver();
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $M.30 := $i33;
    call {:si_unique_call 1201} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i33);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i34 := $M.30;
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i36 := $M.30;
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i37 == 1;
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1203} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} ldv_check_final_state();
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb38:
    assume $i35 == 1;
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1202} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb21:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i23, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb25;

  $bb26:
    assume $i26 == 1;
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i27 := $M.28;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb28:
    assume $i28 == 1;
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i29 := $M.27;
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb30;

  $bb31:
    assume $i30 == 1;
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} initio_exit_driver();
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 1198} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i19 := $M.26;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} choose_interrupt_1();
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1190} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1191} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 1192} {:cexpr "tmp___4"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 228824);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    return;
}



const initio_exit_driver: ref;

axiom initio_exit_driver == $sub.ref(0, 229856);

procedure initio_exit_driver();
  free requires assertsPassed;
  modifies $M.29;



implementation initio_exit_driver()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} ldv_pci_unregister_driver_31(initio_pci_driver);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    return;
}



const initio_init_driver: ref;

axiom initio_init_driver == $sub.ref(0, 230888);

procedure initio_init_driver() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.25, $M.1, $CurrAddr;



implementation initio_init_driver() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $i0 := ldv___pci_register_driver_30(initio_pci_driver, __this_module, .str.1);
    call {:si_unique_call 1230} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_shutdown_2: ref;

axiom ldv_shutdown_2 == $sub.ref(0, 231920);

procedure ldv_shutdown_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_shutdown_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1231} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1232} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 232952);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    return;
}



const ldv___pci_register_driver_30: ref;

axiom ldv___pci_register_driver_30 == $sub.ref(0, 233984);

procedure ldv___pci_register_driver_30($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.25, $M.1, $CurrAddr;



implementation ldv___pci_register_driver_30($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1234} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1235} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} ldv_pci_driver_2();
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 235016);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1237} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1238} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_pci_unregister_driver_31: ref;

axiom ldv_pci_unregister_driver_31 == $sub.ref(0, 236048);

procedure ldv_pci_unregister_driver_31($p0: ref);
  free requires assertsPassed;
  modifies $M.29;



implementation ldv_pci_unregister_driver_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} pci_unregister_driver($p0);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 1240} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 237080);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 238112);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1241} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 1} true;
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 239144);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 240176);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 241208);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 242240);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 243272);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 244304);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 245336);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 246368);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 247400);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 248432);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 249464);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 250496);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 251528);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1242} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1243} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1244} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1245} __VERIFIER_assume($i4);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 252560);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 253592);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 254624);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 255656);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 256688);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 257720);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 258752);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 259784);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 260816);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1246} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1247} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1248} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1249} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1250} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1251} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1252} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1253} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1254} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1255} __VERIFIER_assume($i7);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1256} __VERIFIER_assume($i11);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 261848);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 262880);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 263912);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 264944);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 265976);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 267008);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 268040);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 269072);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 270104);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1257} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1258} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1259} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 271136);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1260} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1261} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 272168);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 273200);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1262} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1263} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 274232);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 275264);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 276296);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1264} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1265} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1266} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1267} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $p6 := malloc($i5);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.1;
    call {:si_unique_call 1269} cmdloc_dummy_var_8 := $memset.i8(cmdloc_dummy_var_7, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_8;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 277328);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 278360);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.7, $M.5, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.25, $M.15, $M.26, $M.27, $M.28, $M.4, $M.29, $M.30, $M.31, $M.20, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.13, $M.22, $M.14, $M.2, $M.96, $M.97, $M.21;



implementation __SMACK_static_init()
{

  $bb0:
    $M.9 := 0;
    call {:si_unique_call 1270} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1271} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.11 := 0;
    call {:si_unique_call 1272} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 1273} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 1274} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.6 := 0;
    call {:si_unique_call 1275} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.16 := $0.ref;
    $M.8 := 0;
    call {:si_unique_call 1276} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.17 := $0.ref;
    $M.10 := 0;
    call {:si_unique_call 1277} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.18 := $0.ref;
    $M.12 := 0;
    call {:si_unique_call 1278} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.19 := $0.ref;
    $M.25 := $0.ref;
    $M.15 := $0.ref;
    $M.26 := 0;
    call {:si_unique_call 1279} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 1280} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 1281} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.4 := 0;
    call {:si_unique_call 1282} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 1283} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 1284} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1285} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.20 := 0;
    call {:si_unique_call 1286} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    call {:si_unique_call 1287} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    $M.33 := $store.i32($M.33, __mod_pci__i91u_pci_devices_device_table, 0);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.39 := $store.i64($M.39, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.33 := $store.i32($M.33, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.39 := $store.i64($M.39, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.33 := $store.i32($M.33, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.39 := $store.i64($M.39, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.33 := $store.i32($M.33, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.39 := $store.i64($M.39, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.33 := $store.i32($M.33, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.39 := $store.i64($M.39, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.33 := $store.i32($M.33, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.34 := $store.i32($M.34, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.35 := $store.i32($M.35, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.36 := $store.i32($M.36, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.37 := $store.i32($M.37, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(20, 1)), 0);
    $M.39 := $store.i64($M.39, $add.ref($add.ref($add.ref(__mod_pci__i91u_pci_devices_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i32($M.40, __mod_pci__initio_pci_tbl_device_table, 0);
    $M.41 := $store.i32($M.41, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.44 := $store.i32($M.44, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.46 := $store.i64($M.46, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i32($M.41, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.44 := $store.i32($M.44, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.46 := $store.i64($M.46, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i32($M.41, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.44 := $store.i32($M.44, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.46 := $store.i64($M.46, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i32($M.41, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.44 := $store.i32($M.44, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.46 := $store.i64($M.46, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i32($M.41, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.44 := $store.i32($M.44, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.46 := $store.i64($M.46, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.41 := $store.i32($M.41, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.42 := $store.i32($M.42, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.44 := $store.i32($M.44, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(20, 1)), 0);
    $M.46 := $store.i64($M.46, $add.ref($add.ref($add.ref(__mod_pci__initio_pci_tbl_device_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.13 := $0.ref;
    $M.22 := $store.i8($M.22, i91udftNvRam, 37);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(1, 1)), $sub.i8(0, 55));
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(2, 1)), 64);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(3, 1)), 1);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(4, 1)), $sub.i8(0, 107));
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(5, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(6, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(7, 1)), 1);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(8, 1)), 1);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(9, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(12, 1)), 7);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(13, 1)), 19);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(14, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(15, 1)), 16);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(16, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(17, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(18, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(19, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(20, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(21, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(22, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(23, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(24, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(25, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(26, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(27, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(28, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(29, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(30, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(31, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(32, 1)), 7);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(33, 1)), 19);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(34, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(35, 1)), 16);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(36, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(37, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(38, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(39, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(40, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(41, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(42, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(43, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(44, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(45, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(46, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(47, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(48, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(49, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(50, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(51, 1)), 104);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(52, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(53, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(54, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(55, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(56, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(57, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(58, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(59, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(60, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(61, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(62, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(i91udftNvRam, $mul.ref(0, 64)), $mul.ref(63, 1)), 0);
    $M.14 := $store.i16($M.14, i91unvram, 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(2, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(3, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(4, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(5, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(6, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(7, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(8, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(9, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(10, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(11, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(0, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(1, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(2, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(3, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(4, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(5, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(6, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(7, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(8, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(9, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(10, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(11, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(13, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(14, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(15, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(16, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(17, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(18, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(0, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(1, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(2, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(3, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(4, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(5, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(6, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(7, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(8, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(9, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(10, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(11, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(12, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(13, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(14, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(15, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(16, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(17, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(18, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 20)), $mul.ref(19, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(52, 1)), $mul.ref(0, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(52, 1)), $mul.ref(1, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(52, 1)), $mul.ref(2, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(52, 1)), $mul.ref(3, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(52, 1)), $mul.ref(4, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(52, 1)), $mul.ref(5, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(52, 1)), $mul.ref(6, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(52, 1)), $mul.ref(7, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(52, 1)), $mul.ref(8, 1)), 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(52, 1)), $mul.ref(9, 1)), 0);
    $M.14 := $store.i16($M.14, $add.ref($add.ref(i91unvram, $mul.ref(0, 64)), $mul.ref(62, 1)), 0);
    $M.2 := 1;
    call {:si_unique_call 1288} {:cexpr "initio_tag_enable"} boogie_si_record_i32(1);
    $M.96 := $store.i32($M.96, initio_pci_tbl, 4353);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(4, 1)), 38144);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.96 := $store.i64($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(0, 1)), 4353);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(4, 1)), 37888);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.96 := $store.i64($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(0, 1)), 4353);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(4, 1)), 37889);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.96 := $store.i64($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(0, 1)), 4353);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(4, 1)), 2);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.96 := $store.i64($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(0, 1)), 4938);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(4, 1)), 2);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.96 := $store.i64($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(20, 1)), 0);
    $M.96 := $store.i64($M.96, $add.ref($add.ref($add.ref(initio_pci_tbl, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.ref($M.97, initio_pci_driver, $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.1);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), initio_pci_tbl);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), initio_probe_one);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), initio_remove_one);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.97 := $store.i32($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(36, 1)), 0);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.97 := $store.i32($M.97, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.97 := $store.i32($M.97, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.97 := $store.i32($M.97, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.97 := $store.i32($M.97, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.97 := $store.ref($M.97, $add.ref($add.ref($add.ref($add.ref(initio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.21 := $store.i8($M.21, initio_rate_tbl, 12);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(1, 1)), 18);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(2, 1)), 25);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(3, 1)), 31);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(4, 1)), 37);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(5, 1)), 43);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(6, 1)), 50);
    $M.21 := $store.i8($M.21, $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(7, 1)), 62);
    call {:si_unique_call 1289} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 279392);

procedure devirtbounce(funcPtr: ref, arg: i32) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: i32) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 280424);

procedure devirtbounce.1(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 281456);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.20, $M.1, $M.4, $M.5, $M.7, $M.9, $M.11;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(i91uSCBPost, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1290} i91uSCBPost(arg, arg1);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 282488);

procedure devirtbounce.3(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 283520);

procedure devirtbounce.4(funcPtr: ref, arg: i32, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i32, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 284552);

procedure devirtbounce.5(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 285584);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 286616);

procedure devirtbounce.7(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.7, $M.9, $M.11;



implementation devirtbounce.7(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(initio_remove_one, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1291} initio_remove_one($p1);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 287648);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 288680);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.7, $M.5, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.25, $M.15, $M.26, $M.27, $M.28, $M.4, $M.29, $M.30, $M.31, $M.20, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.13, $M.22, $M.14, $M.2, $M.96, $M.97, $M.21, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1292} __SMACK_static_init();
    call {:si_unique_call 1293} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.23, $M.26, $M.27, $M.28, $M.4, $M.29, $M.5, $M.30, $M.1, $M.20, $M.0, $M.31, $M.9, $M.11, $M.7, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.25, $M.15, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.13, $M.22, $M.14, $M.2, $M.96, $M.97, $M.21, $CurrAddr;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation initio_probe_one_loop_$bb38(in_$i68: i32, in_$i96: i8, in_$p97: ref, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$p101: ref, in_$i102: i1, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p103: ref, in_$p104: ref) returns (out_$i96: i8, out_$p97: ref, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$p101: ref, out_$i102: i1, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p103: ref, out_$p104: ref)
{

  entry:
    out_$i96, out_$p97, out_$i98, out_$p99, out_$i100, out_$p101, out_$i102, out_$i93, out_$p94, out_$p95, out_$p103, out_$p104 := in_$i96, in_$p97, in_$i98, in_$p99, in_$i100, in_$p101, in_$i102, in_$i93, in_$p94, in_$p95, in_$p103, in_$p104;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_131;

  $bb43:
    assume out_$i102 == 1;
    assume {:verifier.code 0} true;
    out_$i93, out_$p94, out_$p95 := out_$i100, out_$p95, out_$p101;
    goto $bb43_dummy;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$p103, out_$p104 := out_$p101, out_$p95;
    assume true;
    goto $bb43;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i100, in_$i68);
    goto corral_source_split_144;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref(out_$p95, $mul.ref(1, 352));
    goto corral_source_split_143;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i100 := $add.i32(out_$i93, 1);
    call {:si_unique_call 26} {:cexpr "i"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_142;

  $bb41:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p99, out_$p95);
    goto corral_source_split_140;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p94, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_139;

  $bb40:
    assume out_$i98 == 1;
    goto corral_source_split_138;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i93, 0);
    goto corral_source_split_136;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p97, out_$i96);
    goto corral_source_split_135;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p95, $mul.ref(0, 352)), $mul.ref(59, 1));
    goto corral_source_split_134;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i96 := $trunc.i32.i8(out_$i93);
    goto corral_source_split_133;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb43_dummy:
    call {:si_unique_call 1} out_$i96, out_$p97, out_$i98, out_$p99, out_$i100, out_$p101, out_$i102, out_$i93, out_$p94, out_$p95, out_$p103, out_$p104 := initio_probe_one_loop_$bb38(in_$i68, out_$i96, out_$p97, out_$i98, out_$p99, out_$i100, out_$p101, out_$i102, out_$i93, out_$p94, out_$p95, out_$p103, out_$p104);
    return;

  exit:
    return;
}



procedure initio_probe_one_loop_$bb38(in_$i68: i32, in_$i96: i8, in_$p97: ref, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$p101: ref, in_$i102: i1, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p103: ref, in_$p104: ref) returns (out_$i96: i8, out_$p97: ref, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$p101: ref, out_$i102: i1, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p103: ref, out_$p104: ref);
  modifies $M.1;



implementation initio_probe_one_loop_$bb22(in_$i60: i32, in_$i61: i64, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$i66: i32, in_$p67: ref, in_$i70: i32, in_$i71: i1, in_$i59: i32, in_$p72: ref, in_$i73: i32) returns (out_$i60: i32, out_$i61: i64, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$i66: i32, out_$p67: ref, out_$i70: i32, out_$i71: i1, out_$i59: i32, out_$p72: ref, out_$i73: i32)
{

  entry:
    out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i70, out_$i71, out_$i59, out_$p72, out_$i73 := in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i70, in_$i71, in_$i59, in_$p72, in_$i73;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_82;

  $bb28:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := out_$i70;
    goto $bb28_dummy;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$p72, out_$i73 := out_$p62, out_$i70;
    assume true;
    goto $bb28;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    out_$i71 := $sgt.i32(out_$i70, 18);
    goto corral_source_split_98;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i70 := $sub.i32(out_$i59, 1);
    call {:si_unique_call 21} {:cexpr "num_scb"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_97;

  $bb25:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$i66, out_$p67 := out_$i59, out_$p62;
    assume true;
    goto $bb25;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, 0);
    goto corral_source_split_89;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p62);
    goto corral_source_split_87;

  SeqInstr_3:
    goto corral_source_split_86;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} out_$p62 := kzalloc(out_$i61, 1);
    goto SeqInstr_2;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i60);
    goto corral_source_split_85;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i60 := $mul.i32(out_$i59, 352);
    call {:si_unique_call 19} {:cexpr "i"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i70, out_$i71, out_$i59, out_$p72, out_$i73 := initio_probe_one_loop_$bb22(out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i70, out_$i71, out_$i59, out_$p72, out_$i73);
    return;

  exit:
    return;
}



procedure initio_probe_one_loop_$bb22(in_$i60: i32, in_$i61: i64, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$i66: i32, in_$p67: ref, in_$i70: i32, in_$i71: i1, in_$i59: i32, in_$p72: ref, in_$i73: i32) returns (out_$i60: i32, out_$i61: i64, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$i66: i32, out_$p67: ref, out_$i70: i32, out_$i71: i1, out_$i59: i32, out_$p72: ref, out_$i73: i32);
  modifies assertsPassed;



implementation initio_init_loop_$bb10(in_$p0: ref, in_$p115: ref, in_$i122: i8, in_$i123: i16, in_$i124: i64, in_$p127: ref, in_$i128: i64, in_$p131: ref, in_$i132: i16, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i64, in_$p139: ref, in_$i140: i64, in_$p143: ref, in_$i144: i64, in_$p147: ref, in_$p148: ref, in_$i149: i8, in_$i150: i64, in_$p153: ref, in_$p154: ref, in_$i155: i8, in_$i156: i64, in_$p159: ref, in_$i160: i64, in_$p163: ref, in_$i164: i8, in_$i165: i32, in_$i166: i1, in_$i167: i64, in_$p170: ref, in_$i171: i64, in_$p174: ref, in_$i175: i64, in_$p176: ref, in_$i177: i8, in_$i178: i64, in_$p181: ref, in_$i182: i64, in_$p185: ref, in_$i186: i16, in_$i187: i32, in_$i188: i32, in_$i189: i16, in_$i190: i64, in_$p193: ref, in_$i194: i64, in_$p196: ref, in_$i197: i64, in_$p199: ref, in_$i200: i32, in_$p201: ref, in_$i202: i8, in_$i203: i32, in_$i204: i1, in_$p119: ref, in_$p120: ref, in_$i121: i32) returns (out_$i122: i8, out_$i123: i16, out_$i124: i64, out_$p127: ref, out_$i128: i64, out_$p131: ref, out_$i132: i16, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i64, out_$p139: ref, out_$i140: i64, out_$p143: ref, out_$i144: i64, out_$p147: ref, out_$p148: ref, out_$i149: i8, out_$i150: i64, out_$p153: ref, out_$p154: ref, out_$i155: i8, out_$i156: i64, out_$p159: ref, out_$i160: i64, out_$p163: ref, out_$i164: i8, out_$i165: i32, out_$i166: i1, out_$i167: i64, out_$p170: ref, out_$i171: i64, out_$p174: ref, out_$i175: i64, out_$p176: ref, out_$i177: i8, out_$i178: i64, out_$p181: ref, out_$i182: i64, out_$p185: ref, out_$i186: i16, out_$i187: i32, out_$i188: i32, out_$i189: i16, out_$i190: i64, out_$p193: ref, out_$i194: i64, out_$p196: ref, out_$i197: i64, out_$p199: ref, out_$i200: i32, out_$p201: ref, out_$i202: i8, out_$i203: i32, out_$i204: i1, out_$p119: ref, out_$p120: ref, out_$i121: i32)
{

  entry:
    out_$i122, out_$i123, out_$i124, out_$p127, out_$i128, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p139, out_$i140, out_$p143, out_$i144, out_$p147, out_$p148, out_$i149, out_$i150, out_$p153, out_$p154, out_$i155, out_$i156, out_$p159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p170, out_$i171, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p181, out_$i182, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$p193, out_$i194, out_$p196, out_$i197, out_$p199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p119, out_$p120, out_$i121 := in_$i122, in_$i123, in_$i124, in_$p127, in_$i128, in_$p131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$p139, in_$i140, in_$p143, in_$i144, in_$p147, in_$p148, in_$i149, in_$i150, in_$p153, in_$p154, in_$i155, in_$i156, in_$p159, in_$i160, in_$p163, in_$i164, in_$i165, in_$i166, in_$i167, in_$p170, in_$i171, in_$p174, in_$i175, in_$p176, in_$i177, in_$i178, in_$p181, in_$i182, in_$p185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$p193, in_$i194, in_$p196, in_$i197, in_$p199, in_$i200, in_$p201, in_$i202, in_$i203, in_$i204, in_$p119, in_$p120, in_$i121;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_513;

  $bb18:
    assume out_$i204 == 1;
    assume {:verifier.code 0} true;
    out_$p119, out_$p120, out_$i121 := out_$p176, out_$p201, out_$i200;
    goto $bb18_dummy;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i204 := $sgt.i32(out_$i203, out_$i200);
    goto corral_source_split_589;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    out_$i203 := $zext.i8.i32(out_$i202);
    goto corral_source_split_588;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$i202 := $load.i8($M.1, in_$p115);
    goto corral_source_split_587;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$p201 := $add.ref(out_$p120, $mul.ref(1, 1));
    goto corral_source_split_586;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    out_$i200 := $add.i32(out_$i121, 1);
    call {:si_unique_call 102} {:cexpr "i"} boogie_si_record_i32(out_$i200);
    goto corral_source_split_585;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p199, $sub.i8(0, 1));
    goto corral_source_split_584;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(152, 1)), $mul.ref(out_$i197, 1));
    goto corral_source_split_583;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    out_$i197 := $sext.i32.i64(out_$i121);
    goto corral_source_split_582;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p196, 0);
    goto corral_source_split_581;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref(out_$i194, 1));
    goto corral_source_split_580;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    out_$i194 := $sext.i32.i64(out_$i121);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p193, out_$i189);
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i190, 8)), $mul.ref(0, 1));
    goto corral_source_split_577;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$i190 := $sext.i32.i64(out_$i121);
    goto corral_source_split_576;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$i189 := $trunc.i32.i16(out_$i188);
    goto corral_source_split_575;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    out_$i188 := $and.i32(out_$i187, 64511);
    goto corral_source_split_574;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    out_$i187 := $zext.i16.i32(out_$i186);
    goto corral_source_split_573;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i16($M.1, out_$p185);
    goto corral_source_split_572;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i182, 8)), $mul.ref(0, 1));
    goto corral_source_split_571;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    out_$i182 := $sext.i32.i64(out_$i121);
    goto corral_source_split_570;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p181, out_$i177);
    goto corral_source_split_569;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i178, 8)), $mul.ref(7, 1));
    goto corral_source_split_568;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    out_$i178 := $sext.i32.i64(out_$i121);
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i8($M.3, out_$p154);
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref(out_$p119, $mul.ref(out_$i175, 1));
    goto corral_source_split_565;

  $bb17:
    out_$i175 := $add.i64(1, 1);
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p174, 0);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p170, 1024);
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i167, 8)), $mul.ref(4, 1));
    goto corral_source_split_557;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$i167 := $sext.i32.i64(out_$i121);
    goto corral_source_split_556;

  $bb15:
    assume out_$i166 == 1;
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 255);
    goto corral_source_split_553;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$i165 := $zext.i8.i32(out_$i164);
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i8($M.1, out_$p163);
    goto corral_source_split_551;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i160, 8)), $mul.ref(6, 1));
    goto corral_source_split_550;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    out_$i160 := $sext.i32.i64(out_$i121);
    goto corral_source_split_549;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p159, out_$i155);
    goto corral_source_split_548;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i156, 8)), $mul.ref(6, 1));
    goto corral_source_split_547;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    out_$i156 := $sext.i32.i64(out_$i121);
    goto corral_source_split_546;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i8($M.3, out_$p119);
    goto corral_source_split_545;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref(out_$p119, $mul.ref(1, 1));
    goto corral_source_split_544;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p153, out_$i149);
    goto corral_source_split_543;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i150, 8)), $mul.ref(3, 1));
    goto corral_source_split_542;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    out_$i150 := $sext.i32.i64(out_$i121);
    goto corral_source_split_541;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i8($M.1, out_$p148);
    goto corral_source_split_540;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(19, 1));
    goto corral_source_split_539;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p147, 0);
    goto corral_source_split_538;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i144, 8)), $mul.ref(2, 1));
    goto corral_source_split_537;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i144 := $sext.i32.i64(out_$i121);
    goto corral_source_split_536;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p143, 0);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p139, 1024);
    goto corral_source_split_530;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i136, 8)), $mul.ref(4, 1));
    goto corral_source_split_529;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    out_$i136 := $sext.i32.i64(out_$i121);
    goto corral_source_split_528;

  $bb12:
    assume out_$i135 == 1;
    goto corral_source_split_527;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i32(out_$i134, 0);
    goto corral_source_split_525;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    out_$i134 := $and.i32(out_$i133, 64);
    goto corral_source_split_524;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i16.i32(out_$i132);
    goto corral_source_split_523;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i16($M.1, out_$p131);
    goto corral_source_split_522;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i128, 8)), $mul.ref(0, 1));
    goto corral_source_split_521;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    out_$i128 := $sext.i32.i64(out_$i121);
    goto corral_source_split_520;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p127, out_$i123);
    goto corral_source_split_519;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i124, 8)), $mul.ref(0, 1));
    goto corral_source_split_518;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    out_$i124 := $sext.i32.i64(out_$i121);
    goto corral_source_split_517;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i8.i16(out_$i122);
    goto corral_source_split_516;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i8($M.14, out_$p120);
    goto corral_source_split_515;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i140, 8)), $mul.ref(4, 1));
    goto corral_source_split_534;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    out_$i140 := $sext.i32.i64(out_$i121);
    goto corral_source_split_533;

  $bb13:
    assume !(out_$i135 == 1);
    goto corral_source_split_532;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i171, 8)), $mul.ref(4, 1));
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$i171 := $sext.i32.i64(out_$i121);
    goto corral_source_split_561;

  $bb16:
    assume !(out_$i166 == 1);
    goto corral_source_split_560;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i122, out_$i123, out_$i124, out_$p127, out_$i128, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p139, out_$i140, out_$p143, out_$i144, out_$p147, out_$p148, out_$i149, out_$i150, out_$p153, out_$p154, out_$i155, out_$i156, out_$p159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p170, out_$i171, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p181, out_$i182, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$p193, out_$i194, out_$p196, out_$i197, out_$p199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p119, out_$p120, out_$i121 := initio_init_loop_$bb10(in_$p0, in_$p115, out_$i122, out_$i123, out_$i124, out_$p127, out_$i128, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p139, out_$i140, out_$p143, out_$i144, out_$p147, out_$p148, out_$i149, out_$i150, out_$p153, out_$p154, out_$i155, out_$i156, out_$p159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p170, out_$i171, out_$p174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p181, out_$i182, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$p193, out_$i194, out_$p196, out_$i197, out_$p199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i204, out_$p119, out_$p120, out_$i121);
    return;

  exit:
    return;
}



procedure initio_init_loop_$bb10(in_$p0: ref, in_$p115: ref, in_$i122: i8, in_$i123: i16, in_$i124: i64, in_$p127: ref, in_$i128: i64, in_$p131: ref, in_$i132: i16, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i64, in_$p139: ref, in_$i140: i64, in_$p143: ref, in_$i144: i64, in_$p147: ref, in_$p148: ref, in_$i149: i8, in_$i150: i64, in_$p153: ref, in_$p154: ref, in_$i155: i8, in_$i156: i64, in_$p159: ref, in_$i160: i64, in_$p163: ref, in_$i164: i8, in_$i165: i32, in_$i166: i1, in_$i167: i64, in_$p170: ref, in_$i171: i64, in_$p174: ref, in_$i175: i64, in_$p176: ref, in_$i177: i8, in_$i178: i64, in_$p181: ref, in_$i182: i64, in_$p185: ref, in_$i186: i16, in_$i187: i32, in_$i188: i32, in_$i189: i16, in_$i190: i64, in_$p193: ref, in_$i194: i64, in_$p196: ref, in_$i197: i64, in_$p199: ref, in_$i200: i32, in_$p201: ref, in_$i202: i8, in_$i203: i32, in_$i204: i1, in_$p119: ref, in_$p120: ref, in_$i121: i32) returns (out_$i122: i8, out_$i123: i16, out_$i124: i64, out_$p127: ref, out_$i128: i64, out_$p131: ref, out_$i132: i16, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i64, out_$p139: ref, out_$i140: i64, out_$p143: ref, out_$i144: i64, out_$p147: ref, out_$p148: ref, out_$i149: i8, out_$i150: i64, out_$p153: ref, out_$p154: ref, out_$i155: i8, out_$i156: i64, out_$p159: ref, out_$i160: i64, out_$p163: ref, out_$i164: i8, out_$i165: i32, out_$i166: i1, out_$i167: i64, out_$p170: ref, out_$i171: i64, out_$p174: ref, out_$i175: i64, out_$p176: ref, out_$i177: i8, out_$i178: i64, out_$p181: ref, out_$i182: i64, out_$p185: ref, out_$i186: i16, out_$i187: i32, out_$i188: i32, out_$i189: i16, out_$i190: i64, out_$p193: ref, out_$i194: i64, out_$p196: ref, out_$i197: i64, out_$p199: ref, out_$i200: i32, out_$p201: ref, out_$i202: i8, out_$i203: i32, out_$i204: i1, out_$p119: ref, out_$p120: ref, out_$i121: i32);
  modifies $M.1;



implementation tulip_main_loop_$bb5(in_$p0: ref, in_$p5: ref, in_$i6: i8, in_$i7: i32, in_$i8: i1, in_$p9: ref, in_$i10: i8, in_$i11: i32, in_$i12: i64, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i32, in_$i18: i8, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p85: ref, in_$i86: i8, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$p84: ref, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i32, in_$i95: i8, in_$p96: ref, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p4: ref) returns (out_$p5: ref, out_$i6: i8, out_$i7: i32, out_$i8: i1, out_$p9: ref, out_$i10: i8, out_$i11: i32, out_$i12: i64, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i32, out_$i18: i8, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p85: ref, out_$i86: i8, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$p84: ref, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i32, out_$i95: i8, out_$p96: ref, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p4: ref)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$p84, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p4 := in_$p5, in_$i6, in_$i7, in_$i8, in_$p9, in_$i10, in_$i11, in_$i12, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p85, in_$i86, in_$i87, in_$i88, in_$p89, in_$p90, in_$p84, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p102, in_$p103, in_$p104, in_$p105, in_$p4;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_803;

  $bb10:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p26;
    goto $bb10_dummy;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_831;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} out_$p26 := initio_find_done_scb(in_$p0);
    goto corral_source_split_830;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} initio_append_pend_scb(in_$p0, out_$p4);
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p25, 0);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p24, out_$i18);
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(152, 1)), $mul.ref(out_$i22, 1));
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_822;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.1, out_$p19);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i32.i8(out_$i17);
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i16, 255);
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.1, out_$p14);
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref(out_$i12, 1));
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    goto corral_source_split_814;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i8.i32(out_$i10);
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i8($M.1, out_$p9);
    goto corral_source_split_812;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_811;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_810;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, 40);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i8.i32(out_$i6);
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$i6 := $load.i8($M.1, out_$p5);
    goto corral_source_split_806;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb30:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(out_$p84);
    call {:si_unique_call 180} devirtbounce.2(out_$p103, out_$p104, out_$p105);
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_946;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.1, out_$p102);
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p84, $mul.ref(0, 352)), $mul.ref(80, 1));
    goto corral_source_split_944;

  $bb29:
    assume out_$i101 == 1;
    goto corral_source_split_943;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i32(out_$i100, 0);
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    out_$i100 := $and.i32(out_$i99, 2);
    goto corral_source_split_934;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i8.i32(out_$i98);
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i8($M.1, out_$p97);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p96, out_$i95);
    goto corral_source_split_930;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_929;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    out_$i95 := $trunc.i32.i8(out_$i94);
    goto corral_source_split_928;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$i94 := $or.i32(out_$i93, 1);
    goto corral_source_split_927;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i8.i32(out_$i92);
    goto corral_source_split_926;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i8($M.1, out_$p91);
    goto corral_source_split_925;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p84, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_924;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_923;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p90, 2);
    assume {:verifier.code 0} true;
    out_$p84 := out_$p4;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p84 := out_$p4;
    goto $bb25;

  $bb16:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p4;
    assume true;
    goto $bb18;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i40, 4);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.1, out_$p38);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_855;

  $bb15:
    assume out_$i37 == 1;
    goto corral_source_split_854;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 2);
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.1, out_$p34);
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_843;

  $bb13:
    assume out_$i33 == 1;
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 0);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, 1);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i32(out_$i30);
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.1, out_$p29);
    goto corral_source_split_837;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(10, 1));
    goto corral_source_split_836;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_941;

  $bb27:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p89, 20);
    goto corral_source_split_939;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_938;

  $bb26:
    assume out_$i88 == 1;
    goto corral_source_split_937;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 2);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i8.i32(out_$i86);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i8($M.1, out_$p85);
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_849;

  $bb14:
    assume !(out_$i33 == 1);
    goto corral_source_split_848;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$p84, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p4 := tulip_main_loop_$bb5(in_$p0, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$p84, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p4);
    return;

  exit:
    return;
}



procedure tulip_main_loop_$bb5(in_$p0: ref, in_$p5: ref, in_$i6: i8, in_$i7: i32, in_$i8: i1, in_$p9: ref, in_$i10: i8, in_$i11: i32, in_$i12: i64, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i32, in_$i18: i8, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p85: ref, in_$i86: i8, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$p84: ref, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i32, in_$i95: i8, in_$p96: ref, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p4: ref) returns (out_$p5: ref, out_$i6: i8, out_$i7: i32, out_$i8: i1, out_$p9: ref, out_$i10: i8, out_$i11: i32, out_$i12: i64, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i32, out_$i18: i8, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p85: ref, out_$i86: i8, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$p84: ref, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i32, out_$i95: i8, out_$p96: ref, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p4: ref);
  modifies $M.1, $M.20, $M.4, $M.5, $M.7, $M.9, $M.11;



implementation tulip_main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i3: i1, in_$p5: ref, in_$i6: i8, in_$i7: i32, in_$i8: i1, in_$p9: ref, in_$i10: i8, in_$i11: i32, in_$i12: i64, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i32, in_$i18: i8, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i8, in_$p49: ref, in_$i50: i8, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i32, in_$i60: i8, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i32, in_$i67: i8, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p73: ref, in_$p75: ref, in_$p77: ref, in_$p79: ref, in_$p81: ref, in_$p83: ref, in_$p85: ref, in_$i86: i8, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$p84: ref, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i32, in_$i95: i8, in_$p96: ref, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p4: ref, in_$p106: ref, in_$i107: i16, in_$i108: i32, in_$i109: i32, in_$i110: i8, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$p117: ref, in_$i118: i64, in_$i119: i1) returns (out_$p1: ref, out_$i2: i64, out_$i3: i1, out_$p5: ref, out_$i6: i8, out_$i7: i32, out_$i8: i1, out_$p9: ref, out_$i10: i8, out_$i11: i32, out_$i12: i64, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i32, out_$i18: i8, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i8, out_$p49: ref, out_$i50: i8, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i32, out_$i60: i8, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i32, out_$i67: i8, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p73: ref, out_$p75: ref, out_$p77: ref, out_$p79: ref, out_$p81: ref, out_$p83: ref, out_$p85: ref, out_$i86: i8, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$p84: ref, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i32, out_$i95: i8, out_$p96: ref, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p4: ref, out_$p106: ref, out_$i107: i16, out_$i108: i32, out_$i109: i32, out_$i110: i8, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$p117: ref, out_$i118: i64, out_$i119: i1)
{

  entry:
    out_$p1, out_$i2, out_$i3, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p73, out_$p75, out_$p77, out_$p79, out_$p81, out_$p83, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$p84, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p4, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119 := in_$p1, in_$i2, in_$i3, in_$p5, in_$i6, in_$i7, in_$i8, in_$p9, in_$i10, in_$i11, in_$i12, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$p52, in_$p53, in_$i54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p73, in_$p75, in_$p77, in_$p79, in_$p81, in_$p83, in_$p85, in_$i86, in_$i87, in_$i88, in_$p89, in_$p90, in_$p84, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p102, in_$p103, in_$p104, in_$p105, in_$p4, in_$p106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p113, in_$p114, in_$i115, in_$i116, in_$p117, in_$i118, in_$i119;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} tulip_scsi(in_$p0);
    goto corral_source_split_796;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume out_$i112 == 1;
    goto corral_source_split_949;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i111, 0);
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$i111 := $sext.i8.i32(out_$i110);
    goto corral_source_split_920;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} out_$i110 := inb(out_$i109);
    call {:si_unique_call 179} {:cexpr "tmp"} boogie_si_record_i8(out_$i110);
    goto corral_source_split_919;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i108, 133);
    goto corral_source_split_918;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i16.i32(out_$i107);
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i16($M.1, out_$p106);
    goto corral_source_split_916;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_915;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} initio_push_pend_scb(in_$p0, out_$p43);
    goto corral_source_split_913;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p83, 0);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(5, 1));
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p81, out_$i48);
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(4, 1));
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p79, 0);
    goto corral_source_split_908;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(3, 1));
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p77, 0);
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(2, 1));
    goto corral_source_split_905;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p75, 0);
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(1, 1));
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p73, 3);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(0, 1));
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p71, 6);
    goto corral_source_split_900;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(56, 1));
    goto corral_source_split_899;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p70, 0);
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_897;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p69, 0);
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p68, out_$i67);
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(57, 1));
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$i67 := $trunc.i32.i8(out_$i66);
    goto corral_source_split_892;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i32(out_$i65, 191);
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i32(out_$i64);
    goto corral_source_split_890;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.1, out_$p63);
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(57, 1));
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p62, 1);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(10, 1));
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p61, out_$i60);
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i32.i8(out_$i59);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i32(out_$i58, 103);
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.1, out_$p56);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p55, out_$i54);
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(44, 1));
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.1, out_$p53);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(76, 1));
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p52, out_$i51);
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i8.i32(out_$i50);
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i8($M.1, out_$p49);
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(53, 1));
    goto corral_source_split_870;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_869;

  $bb20:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := out_$i45;
    goto $bb21;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    out_$i48 := 1;
    goto $bb21;

  $bb19:
    assume out_$i47 == 1;
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 0);
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.1, out_$p44);
    call {:si_unique_call 176} {:cexpr "len"} boogie_si_record_i8(out_$i45);
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 352)), $mul.ref(53, 1));
    goto corral_source_split_862;

  $bb17:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p4;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i40, 4);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.1, out_$p38);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_855;

  $bb15:
    assume out_$i37 == 1;
    goto corral_source_split_854;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 2);
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.1, out_$p34);
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_843;

  $bb13:
    assume out_$i33 == 1;
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 0);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, 1);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i32(out_$i30);
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.1, out_$p29);
    goto corral_source_split_837;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(10, 1));
    goto corral_source_split_836;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, 40);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i8.i32(out_$i6);
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$i6 := $load.i8($M.1, out_$p5);
    goto corral_source_split_806;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb5:
    call out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$p84, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p4 := tulip_main_loop_$bb5(in_$p0, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$p84, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p4);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_803;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$p4 := out_$p1;
    goto $bb5;

  $bb10:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p26;
    assume false;
    return;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_831;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} out_$p26 := initio_find_done_scb(in_$p0);
    goto corral_source_split_830;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} initio_append_pend_scb(in_$p0, out_$p4);
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p25, 0);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p24, out_$i18);
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(152, 1)), $mul.ref(out_$i22, 1));
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_822;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.1, out_$p19);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i32.i8(out_$i17);
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i16, 255);
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.1, out_$p14);
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref(out_$i12, 1));
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    goto corral_source_split_814;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i8.i32(out_$i10);
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i8($M.1, out_$p9);
    goto corral_source_split_812;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_811;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_810;

  $bb30:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(out_$p84);
    call {:si_unique_call 180} devirtbounce.2(out_$p103, out_$p104, out_$p105);
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_946;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.1, out_$p102);
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p84, $mul.ref(0, 352)), $mul.ref(80, 1));
    goto corral_source_split_944;

  $bb29:
    assume out_$i101 == 1;
    goto corral_source_split_943;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i32(out_$i100, 0);
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    out_$i100 := $and.i32(out_$i99, 2);
    goto corral_source_split_934;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i8.i32(out_$i98);
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i8($M.1, out_$p97);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p96, out_$i95);
    goto corral_source_split_930;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_929;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    out_$i95 := $trunc.i32.i8(out_$i94);
    goto corral_source_split_928;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$i94 := $or.i32(out_$i93, 1);
    goto corral_source_split_927;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i8.i32(out_$i92);
    goto corral_source_split_926;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i8($M.1, out_$p91);
    goto corral_source_split_925;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p84, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_924;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_923;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p90, 2);
    assume {:verifier.code 0} true;
    out_$p84 := out_$p4;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p84 := out_$p4;
    goto $bb25;

  $bb16:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_941;

  $bb27:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p89, 20);
    goto corral_source_split_939;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_938;

  $bb26:
    assume out_$i88 == 1;
    goto corral_source_split_937;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 2);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i8.i32(out_$i86);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i8($M.1, out_$p85);
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p4, $mul.ref(0, 352)), $mul.ref(55, 1));
    goto corral_source_split_849;

  $bb14:
    assume !(out_$i33 == 1);
    goto corral_source_split_848;

  $bb2:
    assume out_$i3 == 1;
    goto corral_source_split_801;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    out_$i3 := $ne.i64(out_$i2, 0);
    goto corral_source_split_799;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    out_$i2 := $p2i.ref.i64(out_$p1);
    goto corral_source_split_798;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} out_$p1 := initio_find_done_scb(in_$p0);
    goto corral_source_split_797;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb3:
    assume {:verifier.code 0} true;
    assume !(out_$i3 == 1);
    goto $bb4;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb11:
    assume !(out_$i28 == 1);
    goto corral_source_split_834;

  $bb42:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i64(out_$i118, 0);
    goto corral_source_split_960;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    out_$i118 := $p2i.ref.i64(out_$p117);
    goto corral_source_split_959;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} out_$p117 := initio_find_first_pend_scb(in_$p0);
    goto corral_source_split_958;

  $bb38:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i64(out_$i115, 0);
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    out_$i115 := $p2i.ref.i64(out_$p114);
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.1, out_$p113);
    goto corral_source_split_952;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_951;

  $bb34:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p1, out_$i2, out_$i3, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p73, out_$p75, out_$p77, out_$p79, out_$p81, out_$p83, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$p84, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p4, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119 := tulip_main_loop_$bb1(in_$p0, out_$p1, out_$i2, out_$i3, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p73, out_$p75, out_$p77, out_$p79, out_$p81, out_$p83, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$p84, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p4, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119);
    return;

  exit:
    return;
}



procedure tulip_main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i3: i1, in_$p5: ref, in_$i6: i8, in_$i7: i32, in_$i8: i1, in_$p9: ref, in_$i10: i8, in_$i11: i32, in_$i12: i64, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i32, in_$i18: i8, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i8, in_$p49: ref, in_$i50: i8, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i32, in_$i60: i8, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i32, in_$i67: i8, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p73: ref, in_$p75: ref, in_$p77: ref, in_$p79: ref, in_$p81: ref, in_$p83: ref, in_$p85: ref, in_$i86: i8, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$p84: ref, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i32, in_$i95: i8, in_$p96: ref, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p4: ref, in_$p106: ref, in_$i107: i16, in_$i108: i32, in_$i109: i32, in_$i110: i8, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$i116: i1, in_$p117: ref, in_$i118: i64, in_$i119: i1) returns (out_$p1: ref, out_$i2: i64, out_$i3: i1, out_$p5: ref, out_$i6: i8, out_$i7: i32, out_$i8: i1, out_$p9: ref, out_$i10: i8, out_$i11: i32, out_$i12: i64, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i32, out_$i18: i8, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i8, out_$p49: ref, out_$i50: i8, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i32, out_$i60: i8, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i32, out_$i67: i8, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p73: ref, out_$p75: ref, out_$p77: ref, out_$p79: ref, out_$p81: ref, out_$p83: ref, out_$p85: ref, out_$i86: i8, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$p84: ref, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i32, out_$i95: i8, out_$p96: ref, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p4: ref, out_$p106: ref, out_$i107: i16, out_$i108: i32, out_$i109: i32, out_$i110: i8, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$i116: i1, out_$p117: ref, out_$i118: i64, out_$i119: i1);
  modifies $M.1, $M.20, $M.4, $M.5, $M.7, $M.9, $M.11;



implementation tulip_scsi_loop_$bb69(in_$p0: ref, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1) returns (out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1)
{

  entry:
    out_$i158, out_$i159, out_$i160, out_$i161 := in_$i158, in_$i159, in_$i160, in_$i161;
    goto $bb69, exit;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb75:
    assume {:verifier.code 0} true;
    assume out_$i161 == 1;
    goto $bb75_dummy;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$i161 := $ne.i32(out_$i160, $sub.i32(0, 1));
    goto corral_source_split_1212;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} out_$i160 := wait_tulip(in_$p0);
    call {:si_unique_call 212} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i160);
    goto corral_source_split_1211;

  $bb72:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, $sub.i32(0, 1));
    goto corral_source_split_1207;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} out_$i158 := initio_next_state(in_$p0);
    call {:si_unique_call 210} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i158);
    goto corral_source_split_1206;

  $bb75_dummy:
    call {:si_unique_call 1} out_$i158, out_$i159, out_$i160, out_$i161 := tulip_scsi_loop_$bb69(in_$p0, out_$i158, out_$i159, out_$i160, out_$i161);
    return;

  exit:
    return;
}



procedure tulip_scsi_loop_$bb69(in_$p0: ref, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1) returns (out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1);
  modifies $M.1, $M.20;



implementation tulip_scsi_loop_$bb51(in_$p0: ref, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i1) returns (out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i1)
{

  entry:
    out_$i142, out_$i143, out_$i144, out_$i145 := in_$i142, in_$i143, in_$i144, in_$i145;
    goto $bb51, exit;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb57:
    assume {:verifier.code 0} true;
    assume out_$i145 == 1;
    goto $bb57_dummy;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    out_$i145 := $ne.i32(out_$i144, $sub.i32(0, 1));
    goto corral_source_split_1180;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} out_$i144 := wait_tulip(in_$p0);
    call {:si_unique_call 205} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i144);
    goto corral_source_split_1179;

  $bb54:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, $sub.i32(0, 1));
    goto corral_source_split_1175;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} out_$i142 := initio_next_state(in_$p0);
    call {:si_unique_call 203} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_1174;

  $bb57_dummy:
    call {:si_unique_call 1} out_$i142, out_$i143, out_$i144, out_$i145 := tulip_scsi_loop_$bb51(in_$p0, out_$i142, out_$i143, out_$i144, out_$i145);
    return;

  exit:
    return;
}



procedure tulip_scsi_loop_$bb51(in_$p0: ref, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i1) returns (out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i1);
  modifies $M.1, $M.20;



implementation initio_find_first_pend_scb_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i8: i8, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i64, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i64, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i64, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i64, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p68: ref, in_$p75: ref, in_$p76: ref, in_$p6: ref, in_$p74: ref) returns (out_$p7: ref, out_$i8: i8, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i64, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i64, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i64, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i64, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p68: ref, out_$p75: ref, out_$p76: ref, out_$p6: ref, out_$p74: ref)
{

  entry:
    out_$p7, out_$i8, out_$i9, out_$i10, out_$p11, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p68, out_$p75, out_$p76, out_$p6, out_$p74 := in_$p7, in_$i8, in_$i9, in_$i10, in_$p11, in_$p13, in_$i14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$p69, in_$p70, in_$p71, in_$i72, in_$i73, in_$p68, in_$p75, in_$p76, in_$p6, in_$p74;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1308;

  $bb22:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p71;
    goto $bb22_dummy;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    out_$p74 := out_$p71;
    assume true;
    goto $bb22;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, 0);
    goto corral_source_split_1384;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_1383;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1382;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    out_$p71 := out_$p70;
    goto $bb21;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    out_$p71 := out_$p76;
    goto $bb21;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.1, out_$p75);
    goto corral_source_split_1376;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p6, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_1375;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb14;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    out_$p37 := out_$p6;
    assume true;
    goto $bb16;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_1371;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i32(out_$i34, 1024);
    goto corral_source_split_1370;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_1369;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.1, out_$p32);
    goto corral_source_split_1368;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i29, 8)), $mul.ref(0, 1));
    goto corral_source_split_1367;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i28);
    goto corral_source_split_1366;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i8.i32(out_$i27);
    goto corral_source_split_1365;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.1, out_$p26);
    goto corral_source_split_1364;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p6, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1363;

  $bb12:
    assume out_$i25 == 1;
    goto corral_source_split_1362;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_1332;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i23);
    goto corral_source_split_1331;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.1, out_$p22);
    goto corral_source_split_1330;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref(out_$i20, 1));
    goto corral_source_split_1329;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i19);
    goto corral_source_split_1328;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    goto corral_source_split_1327;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.1, out_$p17);
    goto corral_source_split_1326;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p6, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1325;

  $bb10:
    assume out_$i16 == 1;
    goto corral_source_split_1324;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, 0);
    goto corral_source_split_1322;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    goto corral_source_split_1321;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i8($M.1, out_$p13);
    goto corral_source_split_1320;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p6, $mul.ref(0, 352)), $mul.ref(58, 1));
    goto corral_source_split_1319;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    out_$p11 := out_$p6;
    assume true;
    goto $bb7;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 1);
    goto corral_source_split_1313;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i8.i32(out_$i8);
    goto corral_source_split_1312;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i8($M.1, out_$p7);
    goto corral_source_split_1311;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 352)), $mul.ref(40, 1));
    goto corral_source_split_1310;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.1, out_$p69);
    goto corral_source_split_1380;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p6, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_1379;

  $bb19:
    assume out_$i67 == 1;
    goto corral_source_split_1378;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    out_$p68 := out_$p6;
    assume true;
    goto $bb19;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_1360;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    out_$i66 := $or.i32(out_$i55, out_$i65);
    goto corral_source_split_1359;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i32(out_$i64, 1024);
    goto corral_source_split_1358;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i63);
    goto corral_source_split_1357;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i16($M.1, out_$p62);
    goto corral_source_split_1356;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i59, 8)), $mul.ref(0, 1));
    goto corral_source_split_1355;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i58);
    goto corral_source_split_1354;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    goto corral_source_split_1353;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.1, out_$p56);
    goto corral_source_split_1352;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p6, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i1.i32(out_$i54);
    goto corral_source_split_1350;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    out_$i54 := $sge.i32(out_$i45, out_$i53);
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i52);
    goto corral_source_split_1348;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.1, out_$p51);
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(152, 1)), $mul.ref(out_$i49, 1));
    goto corral_source_split_1346;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i48);
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i32(out_$i47);
    goto corral_source_split_1344;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.1, out_$p46);
    goto corral_source_split_1343;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p6, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1342;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i44);
    goto corral_source_split_1341;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.1, out_$p43);
    goto corral_source_split_1340;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref(out_$i41, 1));
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_1338;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_1337;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.1, out_$p38);
    goto corral_source_split_1336;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p6, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_1335;

  $bb11:
    assume !(out_$i16 == 1);
    goto corral_source_split_1334;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$i9, out_$i10, out_$p11, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p68, out_$p75, out_$p76, out_$p6, out_$p74 := initio_find_first_pend_scb_loop_$bb4(in_$p0, out_$p7, out_$i8, out_$i9, out_$i10, out_$p11, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p68, out_$p75, out_$p76, out_$p6, out_$p74);
    return;

  exit:
    return;
}



procedure initio_find_first_pend_scb_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i8: i8, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i64, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i64, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i64, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i64, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p68: ref, in_$p75: ref, in_$p76: ref, in_$p6: ref, in_$p74: ref) returns (out_$p7: ref, out_$i8: i8, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i64, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i64, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i64, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i64, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p68: ref, out_$p75: ref, out_$p76: ref, out_$p6: ref, out_$p74: ref);



implementation int_initio_scsi_rst_loop_$bb23(in_$p0: ref, in_$p42: ref, in_$i47: i64, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i32, in_$i54: i16, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$i60: i8, in_$i61: i32, in_$i62: i1, in_$i46: i32) returns (out_$i47: i64, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i32, out_$i54: i16, out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$i60: i8, out_$i61: i32, out_$i62: i1, out_$i46: i32)
{

  entry:
    out_$i47, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i46 := in_$i47, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i46;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1460;

  $bb25:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := out_$i59;
    goto $bb25_dummy;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    out_$i62 := $sgt.i32(out_$i61, out_$i59);
    goto corral_source_split_1474;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i8.i32(out_$i60);
    goto corral_source_split_1473;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i8($M.1, in_$p42);
    goto corral_source_split_1472;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i46, 1);
    call {:si_unique_call 232} {:cexpr "i"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p58, out_$i54);
    goto corral_source_split_1470;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i55, 8)), $mul.ref(0, 1));
    goto corral_source_split_1469;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i46);
    goto corral_source_split_1468;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i32.i16(out_$i53);
    goto corral_source_split_1467;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    out_$i53 := $and.i32(out_$i52, 64767);
    goto corral_source_split_1466;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(out_$i51);
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i16($M.1, out_$p50);
    goto corral_source_split_1464;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i47, 8)), $mul.ref(0, 1));
    goto corral_source_split_1463;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i46);
    goto corral_source_split_1462;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i47, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i46 := int_initio_scsi_rst_loop_$bb23(in_$p0, in_$p42, out_$i47, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i46);
    return;

  exit:
    return;
}



procedure int_initio_scsi_rst_loop_$bb23(in_$p0: ref, in_$p42: ref, in_$i47: i64, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i32, in_$i54: i16, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$i60: i8, in_$i61: i32, in_$i62: i1, in_$i46: i32) returns (out_$i47: i64, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i32, out_$i54: i16, out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$i60: i8, out_$i61: i32, out_$i62: i1, out_$i46: i32);
  modifies $M.1;



implementation int_initio_scsi_rst_loop_$bb15(in_$p0: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p35: ref) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p35: ref)
{

  entry:
    out_$p36, out_$p37, out_$i38, out_$i39, out_$p35 := in_$p36, in_$p37, in_$i38, in_$i39, in_$p35;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1438;

  $bb17:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$p35 := out_$p37;
    goto $bb17_dummy;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, 0);
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_1444;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} out_$p37 := initio_pop_busy_scb(in_$p0);
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} initio_append_done_scb(in_$p0, out_$p35);
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p36, 20);
    goto corral_source_split_1441;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_1440;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p36, out_$p37, out_$i38, out_$i39, out_$p35 := int_initio_scsi_rst_loop_$bb15(in_$p0, out_$p36, out_$p37, out_$i38, out_$i39, out_$p35);
    return;

  exit:
    return;
}



procedure int_initio_scsi_rst_loop_$bb15(in_$p0: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p35: ref) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p35: ref);
  modifies $M.1;



implementation int_initio_scsi_rst_loop_$bb6(in_$p13: ref, in_$i21: i16, in_$i22: i32, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i1) returns (out_$i21: i16, out_$i22: i32, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i1)
{

  entry:
    out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27 := in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i27 == 1;
    goto $bb8_dummy;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 0);
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i25, 4);
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    goto corral_source_split_1420;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} out_$i24 := inb(out_$i23);
    call {:si_unique_call 227} {:cexpr "tmp"} boogie_si_record_i8(out_$i24);
    goto corral_source_split_1419;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i22, 220);
    goto corral_source_split_1418;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i16.i32(out_$i21);
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i16($M.1, in_$p13);
    goto corral_source_split_1416;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} cpu_relax();
    goto corral_source_split_1415;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27 := int_initio_scsi_rst_loop_$bb6(in_$p13, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27);
    return;

  exit:
    return;
}



procedure int_initio_scsi_rst_loop_$bb6(in_$p13: ref, in_$i21: i16, in_$i22: i32, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i1) returns (out_$i21: i16, out_$i22: i32, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i1);



implementation initio_next_state_loop_$bb1(in_$p0: ref, in_$i6: i32, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i32, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i18: i32, in_$i28: i1, in_$i29: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i32, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i18: i32, out_$i28: i1, out_$i29: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i18, out_$i28, out_$i29 := in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i18, in_$i28, in_$i29;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i6 := out_$i18;
    goto $bb27_dummy;

  $bb26:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i18;
    assume true;
    goto $bb26;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    out_$i28 := $sle.i32(out_$i18, 0);
    goto corral_source_split_1719;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1718;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i24;
    goto $bb22;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i23;
    goto $bb22;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i22;
    goto $bb22;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i21;
    goto $bb22;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i20;
    goto $bb22;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i19;
    goto $bb22;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i17;
    goto $bb22;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} out_$i17 := initio_state_1(in_$p0);
    call {:si_unique_call 283} {:cexpr "next"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_1716;

  $bb20:
    assume out_$i16 == 1;
    goto corral_source_split_1715;

  $bb18:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  $bb14:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i6, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i7 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i6, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} out_$i19 := initio_state_2(in_$p0);
    call {:si_unique_call 281} {:cexpr "next"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_1713;

  $bb19:
    assume !(out_$i15 == 1);
    goto corral_source_split_1712;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} out_$i20 := initio_state_3(in_$p0);
    call {:si_unique_call 277} {:cexpr "next"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_1707;

  $bb16:
    assume out_$i14 == 1;
    goto corral_source_split_1706;

  $bb15:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i6, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} out_$i21 := initio_state_4(in_$p0);
    call {:si_unique_call 279} {:cexpr "next"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_1710;

  $bb17:
    assume !(out_$i14 == 1);
    goto corral_source_split_1709;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} out_$i22 := initio_state_5(in_$p0);
    call {:si_unique_call 273} {:cexpr "next"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1701;

  $bb12:
    assume out_$i12 == 1;
    goto corral_source_split_1700;

  $bb5:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i6, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i6, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} out_$i23 := initio_state_6(in_$p0);
    call {:si_unique_call 275} {:cexpr "next"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1704;

  $bb13:
    assume !(out_$i12 == 1);
    goto corral_source_split_1703;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} out_$i24 := initio_state_7(in_$p0);
    call {:si_unique_call 269} {:cexpr "next"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1695;

  $bb7:
    assume out_$i9 == 1;
    goto corral_source_split_1694;

  $bb6:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i6, 8);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i6;
    assume true;
    goto $bb7;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i18, out_$i28, out_$i29 := initio_next_state_loop_$bb1(in_$p0, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i18, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure initio_next_state_loop_$bb1(in_$p0: ref, in_$i6: i32, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i32, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i18: i32, in_$i28: i1, in_$i29: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i32, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i18: i32, out_$i28: i1, out_$i29: i32);
  modifies $M.1;



implementation initio_select_atn3_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p33: ref, in_$i38: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i8, in_$p44: ref, in_$i45: i16, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i8, in_$i50: i32, in_$i51: i1, in_$i37: i32) returns (out_$i38: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i8, out_$p44: ref, out_$i45: i16, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i8, out_$i50: i32, out_$i51: i1, out_$i37: i32)
{

  entry:
    out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i37 := in_$i38, in_$p40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i37;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1842;

  $bb6:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := out_$i48;
    goto $bb6_dummy;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$i51 := $sgt.i32(out_$i50, out_$i48);
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.1, in_$p33);
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i37, 1);
    call {:si_unique_call 298} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} outb(out_$i43, out_$i47);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i46, 140);
    goto corral_source_split_1852;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i16.i32(out_$i45);
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i16($M.1, out_$p44);
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i32.i8(out_$i42);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i41);
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.1, out_$p40);
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(out_$i38, 1));
    goto corral_source_split_1845;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i37 := initio_select_atn3_loop_$bb4(in_$p0, in_$p1, in_$p33, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i37);
    return;

  exit:
    return;
}



procedure initio_select_atn3_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p33: ref, in_$i38: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i8, in_$p44: ref, in_$i45: i16, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i8, in_$i50: i32, in_$i51: i1, in_$i37: i32) returns (out_$i38: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i8, out_$p44: ref, out_$i45: i16, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i8, out_$i50: i32, out_$i51: i1, out_$i37: i32);



implementation initio_select_atn_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p17: ref, in_$i22: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i8, in_$p28: ref, in_$i29: i16, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$i21: i32) returns (out_$i22: i64, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i8, out_$p28: ref, out_$i29: i16, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$i21: i32)
{

  entry:
    out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i21 := in_$i22, in_$p24, in_$i25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i21;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1903;

  $bb6:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i32;
    goto $bb6_dummy;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$i35 := $sgt.i32(out_$i34, out_$i32);
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.1, in_$p17);
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i21, 1);
    call {:si_unique_call 302} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} outb(out_$i27, out_$i31);
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i30, 140);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i29);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i16($M.1, out_$p28);
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i32.i8(out_$i26);
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i8.i32(out_$i25);
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.1, out_$p24);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(out_$i22, 1));
    goto corral_source_split_1906;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i21 := initio_select_atn_loop_$bb4(in_$p0, in_$p1, in_$p17, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i21);
    return;

  exit:
    return;
}



procedure initio_select_atn_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p17: ref, in_$i22: i64, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i8, in_$p28: ref, in_$i29: i16, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$i21: i32) returns (out_$i22: i64, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i8, out_$p28: ref, out_$i29: i16, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$i21: i32);



implementation wait_tulip_loop_$bb4(in_$p1: ref, in_$p6: ref, in_$i9: i16, in_$i10: i32, in_$i11: i32, in_$i12: i8, in_$i13: i32, in_$i14: i1) returns (out_$i9: i16, out_$i10: i32, out_$i11: i32, out_$i12: i8, out_$i13: i32, out_$i14: i1)
{

  entry:
    out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14 := in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i14 == 1;
    goto $bb6_dummy;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$i14 := $sge.i32(out_$i13, 0);
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i8.i32(out_$i12);
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, in_$p6, out_$i12);
    goto corral_source_split_1956;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} out_$i12 := inb(out_$i11);
    call {:si_unique_call 308} {:cexpr "tmp"} boogie_si_record_i8(out_$i12);
    goto corral_source_split_1955;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i10, 133);
    goto corral_source_split_1954;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i16.i32(out_$i9);
    goto corral_source_split_1953;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i16($M.1, in_$p1);
    goto corral_source_split_1952;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} cpu_relax();
    goto corral_source_split_1951;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14 := wait_tulip_loop_$bb4(in_$p1, in_$p6, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14);
    return;

  exit:
    return;
}



procedure wait_tulip_loop_$bb4(in_$p1: ref, in_$p6: ref, in_$i9: i16, in_$i10: i32, in_$i11: i32, in_$i12: i8, in_$i13: i32, in_$i14: i1) returns (out_$i9: i16, out_$i10: i32, out_$i11: i32, out_$i12: i8, out_$i13: i32, out_$i14: i1);
  modifies $M.1;



implementation initio_abort_srb_loop_$bb37(in_$p1: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p161: ref, in_$p162: ref, in_$i163: i64, in_$i164: i1, in_$p87: ref, in_$p88: ref) returns (out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p161: ref, out_$p162: ref, out_$i163: i64, out_$i164: i1, out_$p87: ref, out_$p88: ref)
{

  entry:
    out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p161, out_$p162, out_$i163, out_$i164, out_$p87, out_$p88 := in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$p94, in_$p95, in_$p161, in_$p162, in_$i163, in_$i164, in_$p87, in_$p88;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2246;

  $bb58:
    assume out_$i164 == 1;
    assume {:verifier.code 0} true;
    out_$p87, out_$p88 := out_$p88, out_$p162;
    goto $bb58_dummy;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    out_$i164 := $ne.i64(out_$i163, 0);
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    out_$i163 := $p2i.ref.i64(out_$p162);
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$p162 := $load.ref($M.1, out_$p161);
    goto corral_source_split_2351;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p88, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2350;

  $bb40:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    out_$p94, out_$p95 := out_$p88, out_$p87;
    assume true;
    goto $bb40;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i64(out_$i91, out_$i92);
    goto corral_source_split_2252;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    out_$i92 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2251;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    out_$i91 := $p2i.ref.i64(out_$p90);
    goto corral_source_split_2250;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.1, out_$p89);
    goto corral_source_split_2249;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p88, $mul.ref(0, 352)), $mul.ref(88, 1));
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb58_dummy:
    call {:si_unique_call 1} out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p161, out_$p162, out_$i163, out_$i164, out_$p87, out_$p88 := initio_abort_srb_loop_$bb37(in_$p1, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p161, out_$p162, out_$i163, out_$i164, out_$p87, out_$p88);
    return;

  exit:
    return;
}



procedure initio_abort_srb_loop_$bb37(in_$p1: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p161: ref, in_$p162: ref, in_$i163: i64, in_$i164: i1, in_$p87: ref, in_$p88: ref) returns (out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p161: ref, out_$p162: ref, out_$i163: i64, out_$i164: i1, out_$p87: ref, out_$p88: ref);



implementation initio_abort_srb_loop_$bb11(in_$p1: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p27: ref, in_$p28: ref) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p27: ref, out_$p28: ref)
{

  entry:
    out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p79, out_$p80, out_$i81, out_$i82, out_$p27, out_$p28 := in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p35, in_$p79, in_$p80, in_$i81, in_$i82, in_$p27, in_$p28;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2155;

  $bb31:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$p27, out_$p28 := out_$p28, out_$p80;
    goto $bb31_dummy;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, 0);
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_2234;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.1, out_$p79);
    goto corral_source_split_2233;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p28, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2232;

  $bb14:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    out_$p34, out_$p35 := out_$p28, out_$p27;
    assume true;
    goto $bb14;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i64(out_$i31, out_$i32);
    goto corral_source_split_2161;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2160;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_2159;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.1, out_$p29);
    goto corral_source_split_2158;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 352)), $mul.ref(88, 1));
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p79, out_$p80, out_$i81, out_$i82, out_$p27, out_$p28 := initio_abort_srb_loop_$bb11(in_$p1, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p79, out_$p80, out_$i81, out_$i82, out_$p27, out_$p28);
    return;

  exit:
    return;
}



procedure initio_abort_srb_loop_$bb11(in_$p1: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p27: ref, in_$p28: ref) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p27: ref, out_$p28: ref);



implementation initio_unlink_pend_scb_loop_$bb4(in_$p1: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p6: ref, in_$p7: ref) returns (out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p6: ref, out_$p7: ref)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p34, out_$p35, out_$i36, out_$i37, out_$p6, out_$p7 := in_$i8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p34, in_$p35, in_$i36, in_$i37, in_$p6, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2368;

  $bb19:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$p6, out_$p7 := out_$p7, out_$p35;
    goto $bb19_dummy;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_2414;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.1, out_$p34);
    goto corral_source_split_2412;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p7, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2411;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$p11, out_$p12 := out_$p7, out_$p6;
    assume true;
    goto $bb7;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i8, out_$i9);
    goto corral_source_split_2372;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_2371;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2370;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p34, out_$p35, out_$i36, out_$i37, out_$p6, out_$p7 := initio_unlink_pend_scb_loop_$bb4(in_$p1, out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p34, out_$p35, out_$i36, out_$i37, out_$p6, out_$p7);
    return;

  exit:
    return;
}



procedure initio_unlink_pend_scb_loop_$bb4(in_$p1: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p6: ref, in_$p7: ref) returns (out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p6: ref, out_$p7: ref);



implementation initio_unlink_busy_scb_loop_$bb4(in_$p1: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$i75: i1, in_$p6: ref, in_$p7: ref) returns (out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$i75: i1, out_$p6: ref, out_$p7: ref)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p72, out_$p73, out_$i74, out_$i75, out_$p6, out_$p7 := in_$i8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p72, in_$p73, in_$i74, in_$i75, in_$p6, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2481;

  $bb22:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$p6, out_$p7 := out_$p7, out_$p73;
    goto $bb22_dummy;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i64(out_$i74, 0);
    goto corral_source_split_2564;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    out_$i74 := $p2i.ref.i64(out_$p73);
    goto corral_source_split_2563;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.1, out_$p72);
    goto corral_source_split_2562;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p7, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_2561;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$p11, out_$p12 := out_$p7, out_$p6;
    assume true;
    goto $bb7;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i8, out_$i9);
    goto corral_source_split_2485;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_2484;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p72, out_$p73, out_$i74, out_$i75, out_$p6, out_$p7 := initio_unlink_busy_scb_loop_$bb4(in_$p1, out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p72, out_$p73, out_$i74, out_$i75, out_$p6, out_$p7);
    return;

  exit:
    return;
}



procedure initio_unlink_busy_scb_loop_$bb4(in_$p1: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$i75: i1, in_$p6: ref, in_$p7: ref) returns (out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$i75: i1, out_$p6: ref, out_$p7: ref);



implementation initio_state_3_loop_$bb20(in_$p0: ref, in_$p2: ref, in_$p15: ref, in_$i20: i64, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i8, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i8, in_$i32: i32, in_$i33: i1, in_$i19: i32) returns (out_$i20: i64, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i8, out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i8, out_$i32: i32, out_$i33: i1, out_$i19: i32)
{

  entry:
    out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i19 := in_$i20, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i19;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2826;

  $bb22:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i30;
    goto $bb22_dummy;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    out_$i33 := $sgt.i32(out_$i32, out_$i30);
    goto corral_source_split_2841;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i31);
    goto corral_source_split_2840;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i8($M.1, in_$p15);
    goto corral_source_split_2839;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i19, 1);
    call {:si_unique_call 381} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_2838;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} outb(out_$i25, out_$i29);
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i28, 140);
    goto corral_source_split_2836;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i27);
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i16($M.1, out_$p26);
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2833;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i32.i8(out_$i24);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i23);
    goto corral_source_split_2831;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.1, out_$p22);
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 352)), $mul.ref(60, 1)), $mul.ref(out_$i20, 1));
    goto corral_source_split_2829;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i19);
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i19 := initio_state_3_loop_$bb20(in_$p0, in_$p2, in_$p15, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i19);
    return;

  exit:
    return;
}



procedure initio_state_3_loop_$bb20(in_$p0: ref, in_$p2: ref, in_$p15: ref, in_$i20: i64, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i8, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i8, in_$i32: i32, in_$i33: i1, in_$i19: i32) returns (out_$i20: i64, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i8, out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i8, out_$i32: i32, out_$i33: i1, out_$i19: i32);



implementation initio_state_3_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$p5: ref, in_$i6: i8, in_$i7: i32, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i13: i1, in_$i12: i32, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i52: i16, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i16, in_$i58: i32, in_$i59: i32, in_$p60: ref, in_$i61: i16, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i16, in_$i68: i32, in_$i69: i32, in_$i70: i16, in_$p71: ref, in_$p72: ref, in_$i73: i16, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i16, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$i85: i16, in_$i86: i32, in_$i87: i32, in_$i88: i64, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i8, in_$p93: ref, in_$i94: i16, in_$i95: i32, in_$i96: i32, in_$p97: ref, in_$i98: i16, in_$i99: i32, in_$i100: i32, in_$p101: ref, in_$i102: i16, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i16, in_$i109: i32, in_$i110: i32, in_$p111: ref, in_$i112: i16, in_$i113: i32, in_$i114: i32, in_$i115: i8, in_$i116: i32, in_$i117: i32, in_$i118: i8, in_$p119: ref, in_$i120: i16, in_$i121: i32, in_$i122: i32) returns (out_$p5: ref, out_$i6: i8, out_$i7: i32, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i13: i1, out_$i12: i32, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i52: i16, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i16, out_$i58: i32, out_$i59: i32, out_$p60: ref, out_$i61: i16, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i16, out_$i68: i32, out_$i69: i32, out_$i70: i16, out_$p71: ref, out_$p72: ref, out_$i73: i16, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i16, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$i85: i16, out_$i86: i32, out_$i87: i32, out_$i88: i64, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i8, out_$p93: ref, out_$i94: i16, out_$i95: i32, out_$i96: i32, out_$p97: ref, out_$i98: i16, out_$i99: i32, out_$i100: i32, out_$p101: ref, out_$i102: i16, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i16, out_$i109: i32, out_$i110: i32, out_$p111: ref, out_$i112: i16, out_$i113: i32, out_$i114: i32, out_$i115: i8, out_$i116: i32, out_$i117: i32, out_$i118: i8, out_$p119: ref, out_$i120: i16, out_$i121: i32, out_$i122: i32)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i13, out_$i12, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122 := in_$p5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i13, in_$i12, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$i110, in_$p111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_2798;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb37:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, $sub.i32(0, 1));
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} out_$i49 := initio_status_msg(in_$p0);
    call {:si_unique_call 379} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_2815;

  $bb12:
    assume out_$i13 == 1;
    goto corral_source_split_2814;

  $bb11:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i7, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  $bb3:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i7, 3);
    assume {:verifier.code 0} true;
    out_$i12 := out_$i7;
    assume true;
    goto $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i7, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i8.i32(out_$i6);
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$i6 := $load.i8($M.1, out_$p5);
    goto corral_source_split_2799;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} outb(out_$i118, out_$i122);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, $sub.i32(0, 1));
    goto corral_source_split_2881;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} out_$i64 := wait_tulip(in_$p0);
    call {:si_unique_call 390} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_2880;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} outb(3, out_$i63);
    goto corral_source_split_2879;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i62, 145);
    goto corral_source_split_2878;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i16.i32(out_$i61);
    goto corral_source_split_2877;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i16($M.1, out_$p60);
    goto corral_source_split_2876;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2875;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} outb(8, out_$i59);
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i58, 140);
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i16.i32(out_$i57);
    goto corral_source_split_2872;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i16($M.1, out_$p56);
    goto corral_source_split_2871;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2870;

  $bb39:
    assume out_$i55 == 1;
    goto corral_source_split_2869;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$i54 := $and.i32(out_$i53, 528);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i52);
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i16($M.1, out_$p51);
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2802;

  $bb5:
    assume out_$i9 == 1;
    goto corral_source_split_2801;

  $bb4:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i7, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    out_$i122 := $add.i32(out_$i121, 144);
    goto corral_source_split_2953;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i16.i32(out_$i120);
    goto corral_source_split_2952;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i16($M.1, out_$p119);
    goto corral_source_split_2951;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2950;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i32.i8(out_$i117);
    goto corral_source_split_2949;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    out_$i117 := $and.i32(out_$i116, 71);
    goto corral_source_split_2948;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    out_$i116 := $zext.i8.i32(out_$i115);
    goto corral_source_split_2947;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} out_$i115 := inb(out_$i114);
    call {:si_unique_call 401} {:cexpr "tmp___5"} boogie_si_record_i8(out_$i115);
    goto corral_source_split_2946;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i113, 144);
    goto corral_source_split_2945;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i16.i32(out_$i112);
    goto corral_source_split_2944;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i16($M.1, out_$p111);
    goto corral_source_split_2943;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2942;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} outb(16, out_$i110);
    goto corral_source_split_2941;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$i110 := $add.i32(out_$i109, 133);
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i16.i32(out_$i108);
    goto corral_source_split_2939;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i16($M.1, out_$p107);
    goto corral_source_split_2938;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2937;

  $bb46:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, $sub.i32(0, 1));
    goto corral_source_split_2931;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} out_$i105 := wait_tulip(in_$p0);
    call {:si_unique_call 398} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_2930;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} outb(3, out_$i104);
    goto corral_source_split_2929;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i103, 145);
    goto corral_source_split_2928;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i16.i32(out_$i102);
    goto corral_source_split_2927;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i16($M.1, out_$p101);
    goto corral_source_split_2926;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2925;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} outb(15, out_$i100);
    goto corral_source_split_2924;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    out_$i100 := $add.i32(out_$i99, 140);
    goto corral_source_split_2923;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i16.i32(out_$i98);
    goto corral_source_split_2922;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i16($M.1, out_$p97);
    goto corral_source_split_2921;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2920;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} outb(out_$i92, out_$i96);
    goto corral_source_split_2919;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i32(out_$i95, 140);
    goto corral_source_split_2918;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i16.i32(out_$i94);
    goto corral_source_split_2917;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i16($M.1, out_$p93);
    goto corral_source_split_2916;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2915;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    out_$i92 := $trunc.i32.i8(out_$i91);
    goto corral_source_split_2914;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i8.i32(out_$i90);
    goto corral_source_split_2913;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i8($M.21, out_$p89);
    goto corral_source_split_2912;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(initio_rate_tbl, $mul.ref(0, 8)), $mul.ref(out_$i88, 1));
    goto corral_source_split_2911;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    out_$i88 := $sext.i32.i64(out_$i87);
    goto corral_source_split_2910;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    out_$i87 := $and.i32(out_$i86, 7);
    goto corral_source_split_2909;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i16.i32(out_$i85);
    goto corral_source_split_2908;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i16($M.1, out_$p84);
    goto corral_source_split_2907;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2906;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} outb(1, out_$i83);
    goto corral_source_split_2905;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i32(out_$i82, 140);
    goto corral_source_split_2904;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i16.i32(out_$i81);
    goto corral_source_split_2903;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i16($M.1, out_$p80);
    goto corral_source_split_2902;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2901;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} outb(3, out_$i79);
    goto corral_source_split_2900;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i78, 140);
    goto corral_source_split_2899;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i16.i32(out_$i77);
    goto corral_source_split_2898;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i16($M.1, out_$p76);
    goto corral_source_split_2897;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2896;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} outb(1, out_$i75);
    goto corral_source_split_2895;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i74, 140);
    goto corral_source_split_2894;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i16.i32(out_$i73);
    goto corral_source_split_2893;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i16($M.1, out_$p72);
    goto corral_source_split_2892;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2891;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p71, out_$i70);
    goto corral_source_split_2890;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2889;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    out_$i70 := $trunc.i32.i16(out_$i69);
    goto corral_source_split_2888;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    out_$i69 := $or.i32(out_$i68, 512);
    goto corral_source_split_2887;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i16.i32(out_$i67);
    goto corral_source_split_2886;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i16($M.1, out_$p66);
    goto corral_source_split_2885;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2884;

  $bb40:
    assume !(out_$i55 == 1);
    goto corral_source_split_2883;

  $bb33:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, $sub.i32(0, 1));
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} out_$i47 := initio_msgin(in_$p0);
    call {:si_unique_call 377} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p46, 3);
    goto corral_source_split_2810;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p2, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_2809;

  $bb7:
    assume out_$i10 == 1;
    goto corral_source_split_2808;

  $bb6:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i7, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i13, out_$i12, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122 := initio_state_3_loop_$bb1(in_$p0, in_$p2, in_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i13, out_$i12, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122);
    return;

  exit:
    return;
}



procedure initio_state_3_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$p5: ref, in_$i6: i8, in_$i7: i32, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i13: i1, in_$i12: i32, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i52: i16, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i16, in_$i58: i32, in_$i59: i32, in_$p60: ref, in_$i61: i16, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i16, in_$i68: i32, in_$i69: i32, in_$i70: i16, in_$p71: ref, in_$p72: ref, in_$i73: i16, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i16, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$i85: i16, in_$i86: i32, in_$i87: i32, in_$i88: i64, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i8, in_$p93: ref, in_$i94: i16, in_$i95: i32, in_$i96: i32, in_$p97: ref, in_$i98: i16, in_$i99: i32, in_$i100: i32, in_$p101: ref, in_$i102: i16, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i16, in_$i109: i32, in_$i110: i32, in_$p111: ref, in_$i112: i16, in_$i113: i32, in_$i114: i32, in_$i115: i8, in_$i116: i32, in_$i117: i32, in_$i118: i8, in_$p119: ref, in_$i120: i16, in_$i121: i32, in_$i122: i32) returns (out_$p5: ref, out_$i6: i8, out_$i7: i32, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i13: i1, out_$i12: i32, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i52: i16, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i16, out_$i58: i32, out_$i59: i32, out_$p60: ref, out_$i61: i16, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i16, out_$i68: i32, out_$i69: i32, out_$i70: i16, out_$p71: ref, out_$p72: ref, out_$i73: i16, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i16, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$i85: i16, out_$i86: i32, out_$i87: i32, out_$i88: i64, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i8, out_$p93: ref, out_$i94: i16, out_$i95: i32, out_$i96: i32, out_$p97: ref, out_$i98: i16, out_$i99: i32, out_$i100: i32, out_$p101: ref, out_$i102: i16, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i16, out_$i109: i32, out_$i110: i32, out_$p111: ref, out_$i112: i16, out_$i113: i32, out_$i114: i32, out_$i115: i8, out_$i116: i32, out_$i117: i32, out_$i118: i8, out_$p119: ref, out_$i120: i16, out_$i121: i32, out_$i122: i32);
  modifies $M.1;



implementation initio_state_4_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p9: ref, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i16: i32, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$p44: ref, in_$i45: i16, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$i49: i16, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i57: i32, in_$i58: i1) returns (out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i16: i32, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$p44: ref, out_$i45: i16, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$i49: i16, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i57: i32, out_$i58: i1)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i20, out_$i16, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i57, out_$i58 := in_$p12, in_$i13, in_$i14, in_$i15, in_$i17, in_$i18, in_$i19, in_$i20, in_$i16, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i57, in_$i58;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb50_dummy;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 0);
    goto corral_source_split_3017;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.1, in_$p9);
    goto corral_source_split_3016;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, $sub.i32(0, 1));
    goto corral_source_split_3012;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} out_$i30 := initio_status_msg(in_$p0);
    call {:si_unique_call 412} {:cexpr "tmp"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_3011;

  $bb31:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p29, 18);
    goto corral_source_split_3009;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p2, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_3008;

  $bb30:
    assume out_$i28 == 1;
    goto corral_source_split_3007;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_2999;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i32(out_$i26, 24);
    goto corral_source_split_2998;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i8.i32(out_$i25);
    goto corral_source_split_2997;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.1, out_$p24);
    goto corral_source_split_2996;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p2, $mul.ref(0, 352)), $mul.ref(41, 1));
    goto corral_source_split_2995;

  $bb21:
    assume out_$i20 == 1;
    goto corral_source_split_2994;

  $bb14:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i14, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  $bb13:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i14, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i14, 3);
    assume {:verifier.code 0} true;
    out_$i16 := out_$i14;
    assume true;
    goto $bb13;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.1, out_$p12);
    goto corral_source_split_2979;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_2978;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, $sub.i32(0, 1));
    goto corral_source_split_3041;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} out_$i52 := wait_tulip(in_$p0);
    call {:si_unique_call 418} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} outb(3, out_$i51);
    goto corral_source_split_3039;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i50, 145);
    goto corral_source_split_3038;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i16.i32(out_$i49);
    goto corral_source_split_3037;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i16($M.1, out_$p48);
    goto corral_source_split_3036;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3035;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} outb(8, out_$i47);
    goto corral_source_split_3034;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i46, 140);
    goto corral_source_split_3033;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i16.i32(out_$i45);
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i16($M.1, out_$p44);
    goto corral_source_split_3031;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3030;

  $bb41:
    assume !(out_$i39 == 1);
    goto corral_source_split_3029;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_2986;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i37, 8);
    goto corral_source_split_2985;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i8.i32(out_$i36);
    goto corral_source_split_2984;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.1, out_$p35);
    goto corral_source_split_2983;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(16, 1));
    goto corral_source_split_2982;

  $bb16:
    assume out_$i18 == 1;
    goto corral_source_split_2981;

  $bb15:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i14, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb38:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, $sub.i32(0, 1));
    goto corral_source_split_2992;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} out_$i33 := initio_msgin(in_$p0);
    call {:si_unique_call 406} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_2991;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p32, 4);
    goto corral_source_split_2990;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p2, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_2989;

  $bb18:
    assume out_$i19 == 1;
    goto corral_source_split_2988;

  $bb17:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i14, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  $bb50_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i20, out_$i16, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i57, out_$i58 := initio_state_4_loop_$bb8(in_$p0, in_$p2, in_$p9, out_$p12, out_$i13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i20, out_$i16, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i57, out_$i58);
    return;

  exit:
    return;
}



procedure initio_state_4_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p9: ref, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i16: i32, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$p44: ref, in_$i45: i16, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$i49: i16, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i57: i32, in_$i58: i1) returns (out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i16: i32, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$p44: ref, out_$i45: i16, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$i49: i16, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i57: i32, out_$i58: i1);
  modifies $M.1;



implementation initio_state_5_loop_$bb56(in_$p167: ref, in_$p174: ref, in_$i175: i32, in_$i176: i64, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$i180: i64, in_$i181: i64, in_$p217: ref, in_$i218: i64, in_$i219: i16, in_$i220: i64, in_$i221: i1, in_$i171: i64, in_$p172: ref, in_$i173: i64) returns (out_$p174: ref, out_$i175: i32, out_$i176: i64, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$i180: i64, out_$i181: i64, out_$p217: ref, out_$i218: i64, out_$i219: i16, out_$i220: i64, out_$i221: i1, out_$i171: i64, out_$p172: ref, out_$i173: i64)
{

  entry:
    out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i171, out_$p172, out_$i173 := in_$p174, in_$i175, in_$i176, in_$i177, in_$i178, in_$p179, in_$i180, in_$i181, in_$p217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i171, in_$p172, in_$i173;
    goto $bb56, exit;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3283;

  $bb61:
    assume out_$i221 == 1;
    assume {:verifier.code 0} true;
    out_$i171, out_$p172, out_$i173 := out_$i218, out_$p217, out_$i177;
    goto $bb61_dummy;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    out_$i221 := $ugt.i64(out_$i220, out_$i218);
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    out_$i220 := $zext.i16.i64(out_$i219);
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$i219 := $load.i16($M.1, in_$p167);
    goto corral_source_split_3335;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    out_$i218 := $add.i64(out_$i171, 1);
    call {:si_unique_call 462} {:cexpr "i"} boogie_si_record_i64(out_$i218);
    goto corral_source_split_3334;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref(out_$p172, $mul.ref(1, 8));
    goto corral_source_split_3333;

  $bb59:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$p179, out_$i180, out_$i181 := out_$p172, out_$i171, out_$i177;
    assume true;
    goto $bb59;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    out_$i178 := $slt.i64(out_$i177, 0);
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$i177 := $sub.i64(out_$i173, out_$i176);
    call {:si_unique_call 460} {:cexpr "xcnt"} boogie_si_record_i64(out_$i177);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$i176 := $zext.i32.i64(out_$i175);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i32($M.1, out_$p174);
    goto corral_source_split_3286;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(out_$p172, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb61_dummy:
    call {:si_unique_call 1} out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i171, out_$p172, out_$i173 := initio_state_5_loop_$bb56(in_$p167, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i171, out_$p172, out_$i173);
    return;

  exit:
    return;
}



procedure initio_state_5_loop_$bb56(in_$p167: ref, in_$p174: ref, in_$i175: i32, in_$i176: i64, in_$i177: i64, in_$i178: i1, in_$p179: ref, in_$i180: i64, in_$i181: i64, in_$p217: ref, in_$i218: i64, in_$i219: i16, in_$i220: i64, in_$i221: i1, in_$i171: i64, in_$p172: ref, in_$i173: i64) returns (out_$p174: ref, out_$i175: i32, out_$i176: i64, out_$i177: i64, out_$i178: i1, out_$p179: ref, out_$i180: i64, out_$i181: i64, out_$p217: ref, out_$i218: i64, out_$i219: i16, out_$i220: i64, out_$i221: i1, out_$i171: i64, out_$p172: ref, out_$i173: i64);



implementation initio_state_5_loop_$bb29(in_$p106: ref, in_$i114: i16, in_$i115: i32, in_$i116: i32, in_$i117: i8, in_$i118: i32, in_$i119: i32, in_$i120: i1) returns (out_$i114: i16, out_$i115: i32, out_$i116: i32, out_$i117: i8, out_$i118: i32, out_$i119: i32, out_$i120: i1)
{

  entry:
    out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120 := in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i120 == 1;
    goto $bb31_dummy;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 0);
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    out_$i119 := $and.i32(out_$i118, 4);
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$i118 := $zext.i8.i32(out_$i117);
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} out_$i117 := inb(out_$i116);
    call {:si_unique_call 451} {:cexpr "tmp___6"} boogie_si_record_i8(out_$i117);
    goto corral_source_split_3199;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    out_$i116 := $add.i32(out_$i115, 220);
    goto corral_source_split_3198;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i16.i32(out_$i114);
    goto corral_source_split_3197;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i16($M.1, in_$p106);
    goto corral_source_split_3196;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} cpu_relax();
    goto corral_source_split_3195;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120 := initio_state_5_loop_$bb29(in_$p106, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120);
    return;

  exit:
    return;
}



procedure initio_state_5_loop_$bb29(in_$p106: ref, in_$i114: i16, in_$i115: i32, in_$i116: i32, in_$i117: i8, in_$i118: i32, in_$i119: i32, in_$i120: i1) returns (out_$i114: i16, out_$i115: i32, out_$i116: i32, out_$i117: i8, out_$i118: i32, out_$i119: i32, out_$i120: i1);



implementation initio_state_5_loop_$bb11(in_$p44: ref, in_$i52: i16, in_$i53: i32, in_$i54: i32, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i1) returns (out_$i52: i16, out_$i53: i32, out_$i54: i32, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i1)
{

  entry:
    out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58 := in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i58 == 1;
    goto $bb13_dummy;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    out_$i57 := $and.i32(out_$i56, 1);
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i55);
    goto corral_source_split_3128;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} out_$i55 := inb(out_$i54);
    call {:si_unique_call 437} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i55);
    goto corral_source_split_3127;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i53, 221);
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i52);
    goto corral_source_split_3125;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i16($M.1, in_$p44);
    goto corral_source_split_3124;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} cpu_relax();
    goto corral_source_split_3123;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58 := initio_state_5_loop_$bb11(in_$p44, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58);
    return;

  exit:
    return;
}



procedure initio_state_5_loop_$bb11(in_$p44: ref, in_$i52: i16, in_$i53: i32, in_$i54: i32, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i1) returns (out_$i52: i16, out_$i53: i32, out_$i54: i32, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i1);



implementation initio_state_6_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i4: i8, in_$i5: i32, in_$i6: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i7: i32, in_$i15: i32, in_$i16: i1, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i16, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$i26: i16, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i1) returns (out_$p3: ref, out_$i4: i8, out_$i5: i32, out_$i6: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i7: i32, out_$i15: i32, out_$i16: i1, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i16, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$i26: i16, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$i6, out_$i8, out_$i9, out_$i10, out_$i11, out_$i7, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30 := in_$p3, in_$i4, in_$i5, in_$i6, in_$i8, in_$i9, in_$i10, in_$i11, in_$i7, in_$i15, in_$i16, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_3345;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, $sub.i32(0, 1));
    goto corral_source_split_3370;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} out_$i15 := initio_status_msg(in_$p0);
    call {:si_unique_call 470} {:cexpr "tmp"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_3369;

  $bb12:
    assume out_$i11 == 1;
    goto corral_source_split_3368;

  $bb5:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i5, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  $bb4:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i5, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i5, 3);
    assume {:verifier.code 0} true;
    out_$i7 := out_$i5;
    assume true;
    goto $bb4;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    out_$i5 := $zext.i8.i32(out_$i4);
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    out_$i4 := $load.i8($M.1, out_$p3);
    goto corral_source_split_3346;

  $bb30:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, $sub.i32(0, 1));
    goto corral_source_split_3360;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} out_$i29 := wait_tulip(in_$p0);
    call {:si_unique_call 466} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_3359;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} outb(3, out_$i28);
    goto corral_source_split_3358;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i27, 145);
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(out_$i26);
    goto corral_source_split_3356;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i16($M.1, out_$p25);
    goto corral_source_split_3355;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3354;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} outb(8, out_$i24);
    goto corral_source_split_3353;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i23, 140);
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i22);
    goto corral_source_split_3351;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i16($M.1, out_$p21);
    goto corral_source_split_3350;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3349;

  $bb7:
    assume out_$i9 == 1;
    goto corral_source_split_3348;

  $bb6:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i5, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb27:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, $sub.i32(0, 1));
    goto corral_source_split_3366;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} out_$i19 := initio_msgin(in_$p0);
    call {:si_unique_call 468} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_3365;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p18, 6);
    goto corral_source_split_3364;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p2, $mul.ref(0, 352)), $mul.ref(9, 1));
    goto corral_source_split_3363;

  $bb9:
    assume out_$i10 == 1;
    goto corral_source_split_3362;

  $bb8:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i5, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$i6, out_$i8, out_$i9, out_$i10, out_$i11, out_$i7, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30 := initio_state_6_loop_$bb1(in_$p0, in_$p2, out_$p3, out_$i4, out_$i5, out_$i6, out_$i8, out_$i9, out_$i10, out_$i11, out_$i7, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30);
    return;

  exit:
    return;
}



procedure initio_state_6_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i4: i8, in_$i5: i32, in_$i6: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i7: i32, in_$i15: i32, in_$i16: i1, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i16, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$i26: i16, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i1) returns (out_$p3: ref, out_$i4: i8, out_$i5: i32, out_$i6: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i7: i32, out_$i15: i32, out_$i16: i1, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i16, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$i26: i16, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i1);
  modifies $M.1;



implementation initio_state_7_loop_$bb6(in_$p0: ref, in_$i7: i32, in_$p11: ref, in_$i12: i16, in_$i13: i32, in_$i14: i32, in_$i16: i32, in_$i17: i1, in_$i10: i32, in_vslice_dummy_var_27: i8) returns (out_$p11: ref, out_$i12: i16, out_$i13: i32, out_$i14: i32, out_$i16: i32, out_$i17: i1, out_$i10: i32, out_vslice_dummy_var_27: i8)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i10, out_vslice_dummy_var_27 := in_$p11, in_$i12, in_$i13, in_$i14, in_$i16, in_$i17, in_$i10, in_vslice_dummy_var_27;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3403;

  $bb8:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i16;
    goto $bb8_dummy;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, in_$i7);
    goto corral_source_split_3411;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i10, 1);
    call {:si_unique_call 481} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_3410;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} out_vslice_dummy_var_27 := inb(out_$i14);
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i13, 140);
    goto corral_source_split_3408;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i16.i32(out_$i12);
    goto corral_source_split_3407;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i16($M.1, out_$p11);
    goto corral_source_split_3406;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3405;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i10, out_vslice_dummy_var_27 := initio_state_7_loop_$bb6(in_$p0, in_$i7, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i10, out_vslice_dummy_var_27);
    return;

  exit:
    return;
}



procedure initio_state_7_loop_$bb6(in_$p0: ref, in_$i7: i32, in_$p11: ref, in_$i12: i16, in_$i13: i32, in_$i14: i32, in_$i16: i32, in_$i17: i1, in_$i10: i32, in_vslice_dummy_var_27: i8) returns (out_$p11: ref, out_$i12: i16, out_$i13: i32, out_$i14: i32, out_$i16: i32, out_$i17: i1, out_$i10: i32, out_vslice_dummy_var_27: i8);



implementation initio_bus_device_reset_loop_$bb8(in_$p0: ref, in_$i12: i8, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p23: ref, in_$p24: ref) returns (out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p23: ref, out_$p24: ref)
{

  entry:
    out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p23, out_$p24 := in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$p23, in_$p24;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3457;

  $bb22:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p23, out_$p24 := out_$p51, out_$p53;
    goto $bb22_dummy;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_3507;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_3506;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.1, out_$p52);
    goto corral_source_split_3505;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p24, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3504;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3503;

  $bb11:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$p51 := out_$p24;
    goto $bb21;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    out_$p51 := out_$p23;
    goto $bb21;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} initio_append_done_scb(in_$p0, out_$p24);
    goto corral_source_split_3497;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p50, 26);
    goto corral_source_split_3496;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p24, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_3495;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p40, $0.ref);
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_3492;

  $bb14:
    assume out_$i39 == 1;
    goto corral_source_split_3491;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i64(out_$i38, 0);
    goto corral_source_split_3478;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_3477;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p37, out_$p36);
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_3475;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.1, out_$p35);
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p24, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3473;

  $bb12:
    assume out_$i34 == 1;
    goto corral_source_split_3472;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i64(out_$i32, out_$i33);
    goto corral_source_split_3470;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_3469;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.1, out_$p30);
    goto corral_source_split_3467;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(120, 1));
    goto corral_source_split_3466;

  $bb10:
    assume out_$i29 == 1;
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i27, out_$i28);
    goto corral_source_split_3463;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i8.i32(in_$i12);
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.1, out_$p25);
    goto corral_source_split_3460;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p49, out_$p23);
    goto corral_source_split_3501;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_3500;

  $bb18:
    assume out_$i48 == 1;
    goto corral_source_split_3499;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i64(out_$i46, out_$i47);
    goto corral_source_split_3489;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.1, out_$p44);
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p43, out_$p42);
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p23, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.1, out_$p41);
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p24, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_3481;

  $bb13:
    assume !(out_$i34 == 1);
    goto corral_source_split_3480;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p23, out_$p24 := initio_bus_device_reset_loop_$bb8(in_$p0, in_$i12, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p23, out_$p24);
    return;

  exit:
    return;
}



procedure initio_bus_device_reset_loop_$bb8(in_$p0: ref, in_$i12: i8, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p23: ref, in_$p24: ref) returns (out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p23: ref, out_$p24: ref);
  modifies $M.1;



implementation initio_stop_bm_loop_$bb6(in_$p13: ref, in_$i21: i16, in_$i22: i32, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i1) returns (out_$i21: i16, out_$i22: i32, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i1)
{

  entry:
    out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27 := in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i27 == 1;
    goto $bb8_dummy;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 0);
    goto corral_source_split_3579;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i25, 4);
    goto corral_source_split_3578;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    goto corral_source_split_3577;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} out_$i24 := inb(out_$i23);
    call {:si_unique_call 508} {:cexpr "tmp"} boogie_si_record_i8(out_$i24);
    goto corral_source_split_3576;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i22, 220);
    goto corral_source_split_3575;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i16.i32(out_$i21);
    goto corral_source_split_3574;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i16($M.1, in_$p13);
    goto corral_source_split_3573;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} cpu_relax();
    goto corral_source_split_3572;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27 := initio_stop_bm_loop_$bb6(in_$p13, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27);
    return;

  exit:
    return;
}



procedure initio_stop_bm_loop_$bb6(in_$p13: ref, in_$i21: i16, in_$i22: i32, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i1) returns (out_$i21: i16, out_$i22: i32, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i1);



implementation initio_reset_scsi_loop_$bb4(in_$p6: ref, in_$p11: ref, in_$i15: i16, in_$i16: i32, in_$i17: i32, in_$i18: i8, in_$i19: i32, in_$i20: i32, in_$i21: i1) returns (out_$i15: i16, out_$i16: i32, out_$i17: i32, out_$i18: i8, out_$i19: i32, out_$i20: i32, out_$i21: i1)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21 := in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i21 == 1;
    goto $bb6_dummy;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 0);
    goto corral_source_split_3616;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    out_$i20 := $and.i32(out_$i19, 16);
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    goto corral_source_split_3614;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, in_$p11, out_$i18);
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} out_$i18 := inb(out_$i17);
    call {:si_unique_call 516} {:cexpr "tmp"} boogie_si_record_i8(out_$i18);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i16, 132);
    goto corral_source_split_3611;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i32(out_$i15);
    goto corral_source_split_3610;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i16($M.1, in_$p6);
    goto corral_source_split_3609;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} cpu_relax();
    goto corral_source_split_3608;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21 := initio_reset_scsi_loop_$bb4(in_$p6, in_$p11, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21);
    return;

  exit:
    return;
}



procedure initio_reset_scsi_loop_$bb4(in_$p6: ref, in_$p11: ref, in_$i15: i16, in_$i16: i32, in_$i17: i32, in_$i18: i8, in_$i19: i32, in_$i20: i32, in_$i21: i1) returns (out_$i15: i16, out_$i16: i32, out_$i17: i32, out_$i18: i8, out_$i19: i32, out_$i20: i32, out_$i21: i1);
  modifies $M.1;



implementation initio_post_scsi_rst_loop_$bb12(in_$p0: ref, in_$p14: ref, in_$p20: ref, in_$i21: i16, in_$i22: i32, in_$i23: i32, in_$i24: i16, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i8, in_$p29: ref, in_$p31: ref, in_$i32: i64, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i32, in_$i39: i16, in_$i40: i64, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i18: i32, in_$p19: ref) returns (out_$p20: ref, out_$i21: i16, out_$i22: i32, out_$i23: i32, out_$i24: i16, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i8, out_$p29: ref, out_$p31: ref, out_$i32: i64, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i32, out_$i39: i16, out_$i40: i64, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i18: i32, out_$p19: ref)
{

  entry:
    out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$p31, out_$i32, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i18, out_$p19 := in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$p26, in_$p27, in_$i28, in_$p29, in_$p31, in_$i32, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i18, in_$p19;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3666;

  $bb14:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i18, out_$p19 := out_$i45, out_$p44;
    goto $bb14_dummy;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    out_$i48 := $sgt.i32(out_$i47, out_$i45);
    goto corral_source_split_3696;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i46);
    goto corral_source_split_3695;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i8($M.1, in_$p14);
    goto corral_source_split_3694;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i18, 1);
    call {:si_unique_call 523} {:cexpr "i"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3693;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref(out_$p19, $mul.ref(1, 8));
    goto corral_source_split_3692;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p43, out_$i39);
    goto corral_source_split_3691;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i40, 8)), $mul.ref(0, 1));
    goto corral_source_split_3690;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i18);
    goto corral_source_split_3689;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i16(out_$i38);
    goto corral_source_split_3688;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i37, 64511);
    goto corral_source_split_3687;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i16.i32(out_$i36);
    goto corral_source_split_3686;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i16($M.1, out_$p35);
    goto corral_source_split_3685;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i32, 8)), $mul.ref(0, 1));
    goto corral_source_split_3684;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i18);
    goto corral_source_split_3683;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p31, 0);
    goto corral_source_split_3682;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3681;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p29, out_$i28);
    goto corral_source_split_3680;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p19, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_3679;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.1, out_$p27);
    goto corral_source_split_3678;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(19, 1));
    goto corral_source_split_3677;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p26, 0);
    goto corral_source_split_3676;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p19, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_3675;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p25, out_$i24);
    goto corral_source_split_3674;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p19, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3673;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i16(out_$i23);
    goto corral_source_split_3672;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i32(out_$i22, 64767);
    goto corral_source_split_3671;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i16.i32(out_$i21);
    goto corral_source_split_3670;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i16($M.1, out_$p20);
    goto corral_source_split_3669;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$p31, out_$i32, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i18, out_$p19 := initio_post_scsi_rst_loop_$bb12(in_$p0, in_$p14, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$p31, out_$i32, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i18, out_$p19);
    return;

  exit:
    return;
}



procedure initio_post_scsi_rst_loop_$bb12(in_$p0: ref, in_$p14: ref, in_$p20: ref, in_$i21: i16, in_$i22: i32, in_$i23: i32, in_$i24: i16, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i8, in_$p29: ref, in_$p31: ref, in_$i32: i64, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i32, in_$i39: i16, in_$i40: i64, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i18: i32, in_$p19: ref) returns (out_$p20: ref, out_$i21: i16, out_$i22: i32, out_$i23: i32, out_$i24: i16, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i8, out_$p29: ref, out_$p31: ref, out_$i32: i64, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i32, out_$i39: i16, out_$i40: i64, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i18: i32, out_$p19: ref);
  modifies $M.1;



implementation initio_post_scsi_rst_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p7: ref)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$i11, out_$p7 := in_$p8, in_$p9, in_$i10, in_$i11, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3646;

  $bb6:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p9;
    goto $bb6_dummy;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i64(out_$i10, 0);
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_3652;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} out_$p9 := initio_pop_busy_scb(in_$p0);
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} initio_append_done_scb(in_$p0, out_$p7);
    goto corral_source_split_3650;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p8, 20);
    goto corral_source_split_3649;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_3648;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$i11, out_$p7 := initio_post_scsi_rst_loop_$bb4(in_$p0, out_$p8, out_$p9, out_$i10, out_$i11, out_$p7);
    return;

  exit:
    return;
}



procedure initio_post_scsi_rst_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p7: ref);
  modifies $M.1;



implementation initio_do_pause_loop_$bb4(in_$i3: i64, in_$i7: i64, in_$i8: i64, in_$i9: i1) returns (out_$i7: i64, out_$i8: i64, out_$i9: i1)
{

  entry:
    out_$i7, out_$i8, out_$i9 := in_$i7, in_$i8, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i9 == 1;
    goto $bb6_dummy;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$i9 := $sge.i64(out_$i8, 0);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$i8 := $sub.i64(in_$i3, out_$i7);
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i64($M.3, jiffies);
    goto corral_source_split_3769;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} cpu_relax();
    goto corral_source_split_3768;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9 := initio_do_pause_loop_$bb4(in_$i3, out_$i7, out_$i8, out_$i9);
    return;

  exit:
    return;
}



procedure initio_do_pause_loop_$bb4(in_$i3: i64, in_$i7: i64, in_$i8: i64, in_$i9: i1) returns (out_$i7: i64, out_$i8: i64, out_$i9: i1);



implementation int_initio_bad_seq_loop_$bb12(in_$p0: ref, in_$p10: ref, in_$i15: i64, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i32, in_$i22: i16, in_$i23: i64, in_$p26: ref, in_$i27: i32, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$i14: i32) returns (out_$i15: i64, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i32, out_$i22: i16, out_$i23: i64, out_$p26: ref, out_$i27: i32, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$i14: i32)
{

  entry:
    out_$i15, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i14 := in_$i15, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i14;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3801;

  $bb14:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i27;
    goto $bb14_dummy;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    out_$i30 := $sgt.i32(out_$i29, out_$i27);
    goto corral_source_split_3815;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_3814;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.1, in_$p10);
    goto corral_source_split_3813;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i14, 1);
    call {:si_unique_call 531} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p26, out_$i22);
    goto corral_source_split_3811;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i23, 8)), $mul.ref(0, 1));
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i32.i16(out_$i21);
    goto corral_source_split_3808;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    out_$i21 := $and.i32(out_$i20, 64767);
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_3806;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i16($M.1, out_$p18);
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(184, 1)), $mul.ref(out_$i15, 8)), $mul.ref(0, 1));
    goto corral_source_split_3804;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3803;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i15, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i14 := int_initio_bad_seq_loop_$bb12(in_$p0, in_$p10, out_$i15, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i14);
    return;

  exit:
    return;
}



procedure int_initio_bad_seq_loop_$bb12(in_$p0: ref, in_$p10: ref, in_$i15: i64, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i32, in_$i22: i16, in_$i23: i64, in_$p26: ref, in_$i27: i32, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$i14: i32) returns (out_$i15: i64, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i32, out_$i22: i16, out_$i23: i64, out_$p26: ref, out_$i27: i32, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$i14: i32);
  modifies $M.1;



implementation int_initio_bad_seq_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p5: ref)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$i9, out_$p5 := in_$p6, in_$p7, in_$i8, in_$i9, in_$p5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  $bb6:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$p5 := out_$p7;
    goto $bb6_dummy;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} out_$p7 := initio_pop_busy_scb(in_$p0);
    goto corral_source_split_3788;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} initio_append_done_scb(in_$p0, out_$p5);
    goto corral_source_split_3787;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p6, 20);
    goto corral_source_split_3786;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p5, $mul.ref(0, 352)), $mul.ref(54, 1));
    goto corral_source_split_3785;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$i9, out_$p5 := int_initio_bad_seq_loop_$bb4(in_$p0, out_$p6, out_$p7, out_$i8, out_$i9, out_$p5);
    return;

  exit:
    return;
}



procedure int_initio_bad_seq_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p5: ref);
  modifies $M.1;



implementation initio_wait_disc_loop_$bb4(in_$p1: ref, in_$p6: ref, in_$i9: i16, in_$i10: i32, in_$i11: i32, in_$i12: i8, in_$i13: i32, in_$i14: i1) returns (out_$i9: i16, out_$i10: i32, out_$i11: i32, out_$i12: i8, out_$i13: i32, out_$i14: i1)
{

  entry:
    out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14 := in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i14 == 1;
    goto $bb6_dummy;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    out_$i14 := $sge.i32(out_$i13, 0);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i8.i32(out_$i12);
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, in_$p6, out_$i12);
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} out_$i12 := inb(out_$i11);
    call {:si_unique_call 536} {:cexpr "tmp"} boogie_si_record_i8(out_$i12);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i10, 133);
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i16.i32(out_$i9);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i16($M.1, in_$p1);
    goto corral_source_split_3833;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} cpu_relax();
    goto corral_source_split_3832;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14 := initio_wait_disc_loop_$bb4(in_$p1, in_$p6, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14);
    return;

  exit:
    return;
}



procedure initio_wait_disc_loop_$bb4(in_$p1: ref, in_$p6: ref, in_$i9: i16, in_$i10: i32, in_$i11: i32, in_$i12: i8, in_$i13: i32, in_$i14: i1) returns (out_$i9: i16, out_$i10: i32, out_$i11: i32, out_$i12: i8, out_$i13: i32, out_$i14: i1);
  modifies $M.1;



implementation initio_msgin_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i2: i16, in_$i3: i32, in_$i4: i32, in_$p5: ref, in_$i6: i16, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$i10: i16, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p16: ref, in_$i17: i16, in_$i18: i32, in_$i19: i32, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i8, in_$i44: i32, in_$i45: i32, in_$i46: i8, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i16, in_$i60: i32, in_$i61: i32, in_$i62: i8, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i8, in_$i67: i32, in_$i68: i8, in_$p69: ref, in_$i70: i16, in_$i71: i32, in_$i72: i32, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$i89: i1, in_vslice_dummy_var_32: i32, in_vslice_dummy_var_33: i32, in_vslice_dummy_var_34: i32, in_vslice_dummy_var_35: i32, in_vslice_dummy_var_36: i32) returns (out_$p1: ref, out_$i2: i16, out_$i3: i32, out_$i4: i32, out_$p5: ref, out_$i6: i16, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$i10: i16, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p16: ref, out_$i17: i16, out_$i18: i32, out_$i19: i32, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i8, out_$i44: i32, out_$i45: i32, out_$i46: i8, out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i16, out_$i60: i32, out_$i61: i32, out_$i62: i8, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i8, out_$i67: i32, out_$i68: i8, out_$p69: ref, out_$i70: i16, out_$i71: i32, out_$i72: i32, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$i89: i1, out_vslice_dummy_var_32: i32, out_vslice_dummy_var_33: i32, out_vslice_dummy_var_34: i32, out_vslice_dummy_var_35: i32, out_vslice_dummy_var_36: i32)
{

  entry:
    out_$p1, out_$i2, out_$i3, out_$i4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p86, out_$i87, out_$i88, out_$i89, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35, out_vslice_dummy_var_36 := in_$p1, in_$i2, in_$i3, in_$i4, in_$p5, in_$i6, in_$i7, in_$i8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$i72, in_$p86, in_$i87, in_$i88, in_$i89, in_vslice_dummy_var_32, in_vslice_dummy_var_33, in_vslice_dummy_var_34, in_vslice_dummy_var_35, in_vslice_dummy_var_36;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$p1 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4030;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb39_dummy;

  $bb38:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i88, 7);
    goto corral_source_split_4114;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i8.i32(out_$i87);
    goto corral_source_split_4113;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i8($M.1, out_$p86);
    goto corral_source_split_4112;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_4111;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} out_vslice_dummy_var_34 := initio_msgin_extend(in_$p0);
    goto corral_source_split_4096;

  $bb29:
    assume !(out_$i31 == 1);
    goto corral_source_split_4095;

  $bb23:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb7:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i21, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i21, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} out_$i20 := inb(out_$i19);
    call {:si_unique_call 580} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i20);
    goto corral_source_split_4056;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i18, 140);
    goto corral_source_split_4055;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i16.i32(out_$i17);
    goto corral_source_split_4054;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i16($M.1, out_$p16);
    goto corral_source_split_4053;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4052;

  $bb3:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, $sub.i32(0, 1));
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} out_$i13 := wait_tulip(in_$p0);
    call {:si_unique_call 578} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_4045;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} outb($sub.i8(0, 125), out_$i12);
    goto corral_source_split_4044;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i11, 145);
    goto corral_source_split_4043;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i16.i32(out_$i10);
    goto corral_source_split_4042;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i16($M.1, out_$p9);
    goto corral_source_split_4041;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4040;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} outl(1, out_$i8);
    goto corral_source_split_4039;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    out_$i8 := $add.i32(out_$i7, 128);
    goto corral_source_split_4038;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i16.i32(out_$i6);
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    out_$i6 := $load.i16($M.1, out_$p5);
    goto corral_source_split_4036;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} outb(16, out_$i4);
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$i4 := $add.i32(out_$i3, 133);
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    out_$i3 := $zext.i16.i32(out_$i2);
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    out_$i2 := $load.i16($M.1, out_$p1);
    goto corral_source_split_4031;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} out_vslice_dummy_var_35 := initio_msgin_accept(in_$p0);
    goto corral_source_split_4134;

  $bb34:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} outb(out_$i68, out_$i72);
    goto corral_source_split_4132;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i71, 144);
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i16.i32(out_$i70);
    goto corral_source_split_4130;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i16($M.1, out_$p69);
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4128;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    out_$i68 := $trunc.i32.i8(out_$i67);
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i8.i32(out_$i66);
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i8(out_$i65);
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$i65 := $or.i32(out_$i64, 8);
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    out_$i64 := $and.i32(out_$i63, 71);
    goto corral_source_split_4123;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i8.i32(out_$i62);
    goto corral_source_split_4122;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} out_$i62 := inb(out_$i61);
    call {:si_unique_call 595} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i62);
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i60, 144);
    goto corral_source_split_4120;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i16.i32(out_$i59);
    goto corral_source_split_4119;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i16($M.1, out_$p58);
    goto corral_source_split_4118;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4117;

  $bb33:
    assume out_$i57 == 1;
    goto corral_source_split_4116;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 0);
    goto corral_source_split_4083;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    out_$i56 := $and.i32(out_$i55, 528);
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i16.i32(out_$i54);
    goto corral_source_split_4081;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i16($M.1, out_$p53);
    goto corral_source_split_4080;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4079;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.1, out_$p51);
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_4077;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} outb(out_$i46, out_$i50);
    goto corral_source_split_4076;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i49, 144);
    goto corral_source_split_4075;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i32(out_$i48);
    goto corral_source_split_4074;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i16($M.1, out_$p47);
    goto corral_source_split_4073;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4072;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i32.i8(out_$i45);
    goto corral_source_split_4071;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i44, 71);
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i32(out_$i43);
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} out_$i43 := inb(out_$i42);
    call {:si_unique_call 584} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i43);
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i41, 144);
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_4066;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.1, out_$p39);
    goto corral_source_split_4065;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4064;

  $bb20:
    assume !(out_$i27 == 1);
    goto corral_source_split_4063;

  $bb9:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i21, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb8:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i21, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} out_vslice_dummy_var_33 := initio_msgin_accept(in_$p0);
    goto corral_source_split_4061;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i26 == 1;
    goto $bb17;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb27;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i30 == 1;
    goto corral_source_split_4093;

  $bb24:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i21, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb11:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i21, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb10:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i21, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} out_vslice_dummy_var_32 := initio_msgin_accept(in_$p0);
    goto corral_source_split_4059;

  $bb13:
    assume out_$i25 == 1;
    goto corral_source_split_4058;

  $bb12:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i21, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} out_vslice_dummy_var_36 := initio_msgout_reject(in_$p0);
    goto corral_source_split_4136;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb15;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb15;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb15;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb15;

  $bb28:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i21, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  $bb19:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i21, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  $bb39_dummy:
    call {:si_unique_call 1} out_$p1, out_$i2, out_$i3, out_$i4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p86, out_$i87, out_$i88, out_$i89, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35, out_vslice_dummy_var_36 := initio_msgin_loop_$bb1(in_$p0, out_$p1, out_$i2, out_$i3, out_$i4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$p86, out_$i87, out_$i88, out_$i89, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35, out_vslice_dummy_var_36);
    return;

  exit:
    return;
}



procedure initio_msgin_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i2: i16, in_$i3: i32, in_$i4: i32, in_$p5: ref, in_$i6: i16, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$i10: i16, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$p16: ref, in_$i17: i16, in_$i18: i32, in_$i19: i32, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$i42: i32, in_$i43: i8, in_$i44: i32, in_$i45: i32, in_$i46: i8, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i16, in_$i60: i32, in_$i61: i32, in_$i62: i8, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i8, in_$i67: i32, in_$i68: i8, in_$p69: ref, in_$i70: i16, in_$i71: i32, in_$i72: i32, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$i89: i1, in_vslice_dummy_var_32: i32, in_vslice_dummy_var_33: i32, in_vslice_dummy_var_34: i32, in_vslice_dummy_var_35: i32, in_vslice_dummy_var_36: i32) returns (out_$p1: ref, out_$i2: i16, out_$i3: i32, out_$i4: i32, out_$p5: ref, out_$i6: i16, out_$i7: i32, out_$i8: i32, out_$p9: ref, out_$i10: i16, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$p16: ref, out_$i17: i16, out_$i18: i32, out_$i19: i32, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$i42: i32, out_$i43: i8, out_$i44: i32, out_$i45: i32, out_$i46: i8, out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i16, out_$i60: i32, out_$i61: i32, out_$i62: i8, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i8, out_$i67: i32, out_$i68: i8, out_$p69: ref, out_$i70: i16, out_$i71: i32, out_$i72: i32, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$i89: i1, out_vslice_dummy_var_32: i32, out_vslice_dummy_var_33: i32, out_vslice_dummy_var_34: i32, out_vslice_dummy_var_35: i32, out_vslice_dummy_var_36: i32);
  modifies $M.1;



implementation initio_xpad_in_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i16, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i1, in_$p38: ref, in_$i39: i16, in_$i40: i32, in_$i41: i32, in_vslice_dummy_var_37: i8) returns (out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i16, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i1, out_$p38: ref, out_$i39: i16, out_$i40: i32, out_$i41: i32, out_vslice_dummy_var_37: i8)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$i31, out_$i32, out_$i33, out_$p38, out_$i39, out_$i40, out_$i41, out_vslice_dummy_var_37 := in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p30, in_$i31, in_$i32, in_$i33, in_$p38, in_$i39, in_$i40, in_$i41, in_vslice_dummy_var_37;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4158;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    goto corral_source_split_4204_dummy;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} out_vslice_dummy_var_37 := inb(out_$i41);
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i40, 140);
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i16.i32(out_$i39);
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i16($M.1, out_$p38);
    goto corral_source_split_4201;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4200;

  $bb13:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 1);
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i31);
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i8($M.1, out_$p30);
    goto corral_source_split_4189;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_4188;

  $bb9:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, $sub.i32(0, 1));
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} out_$i27 := wait_tulip(in_$p0);
    call {:si_unique_call 603} {:cexpr "tmp"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_4181;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} outb($sub.i8(0, 125), out_$i26);
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i25, 145);
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i24);
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i16($M.1, out_$p23);
    goto corral_source_split_4177;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4176;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} outl(1, out_$i22);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} outl(2, out_$i18);
    goto corral_source_split_4168;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i17, 128);
    goto corral_source_split_4167;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_4166;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.1, out_$p15);
    goto corral_source_split_4165;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4164;

  $bb5:
    assume out_$i14 == 1;
    goto corral_source_split_4163;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i13, 0);
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i8.i32(out_$i12);
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.1, out_$p11);
    goto corral_source_split_4159;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i21, 128);
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i20);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i16($M.1, out_$p19);
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4171;

  $bb6:
    assume !(out_$i14 == 1);
    goto corral_source_split_4170;

  corral_source_split_4204_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$i31, out_$i32, out_$i33, out_$p38, out_$i39, out_$i40, out_$i41, out_vslice_dummy_var_37 := initio_xpad_in_loop_$bb4(in_$p0, in_$p4, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$i31, out_$i32, out_$i33, out_$p38, out_$i39, out_$i40, out_$i41, out_vslice_dummy_var_37);
    return;

  exit:
    return;
}



procedure initio_xpad_in_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i16, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i1, in_$p38: ref, in_$i39: i16, in_$i40: i32, in_$i41: i32, in_vslice_dummy_var_37: i8) returns (out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i16, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i1, out_$p38: ref, out_$i39: i16, out_$i40: i32, out_$i41: i32, out_vslice_dummy_var_37: i8);
  modifies $M.1;



implementation initio_xpad_out_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i16, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$i26: i32, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1) returns (out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i16, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$i26: i32, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37 := in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p34, in_$i35, in_$i36, in_$i37;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4221;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb13:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_4259;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    goto corral_source_split_4258;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.1, out_$p34);
    goto corral_source_split_4257;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(15, 1));
    goto corral_source_split_4256;

  $bb9:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, $sub.i32(0, 1));
    goto corral_source_split_4250;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} out_$i31 := wait_tulip(in_$p0);
    call {:si_unique_call 611} {:cexpr "tmp"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_4249;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} outb(3, out_$i30);
    goto corral_source_split_4248;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i29, 145);
    goto corral_source_split_4247;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i28);
    goto corral_source_split_4246;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i16($M.1, out_$p27);
    goto corral_source_split_4245;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} outb(0, out_$i26);
    goto corral_source_split_4243;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i25, 140);
    goto corral_source_split_4242;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i24);
    goto corral_source_split_4241;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i16($M.1, out_$p23);
    goto corral_source_split_4240;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4239;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} outl(1, out_$i22);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} outl(2, out_$i18);
    goto corral_source_split_4231;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i17, 128);
    goto corral_source_split_4230;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_4229;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.1, out_$p15);
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4227;

  $bb5:
    assume out_$i14 == 1;
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i13, 0);
    goto corral_source_split_4224;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i8.i32(out_$i12);
    goto corral_source_split_4223;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.1, out_$p11);
    goto corral_source_split_4222;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i21, 128);
    goto corral_source_split_4237;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i20);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i16($M.1, out_$p19);
    goto corral_source_split_4235;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4234;

  $bb6:
    assume !(out_$i14 == 1);
    goto corral_source_split_4233;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37 := initio_xpad_out_loop_$bb4(in_$p0, in_$p4, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37);
    return;

  exit:
    return;
}



procedure initio_xpad_out_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p11: ref, in_$i12: i8, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i16, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$i24: i16, in_$i25: i32, in_$i26: i32, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i1) returns (out_$p11: ref, out_$i12: i8, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i16, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$i24: i16, out_$i25: i32, out_$i26: i32, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i1);
  modifies $M.1;



implementation initio_msgin_extend_loop_$bb11(in_$p0: ref, in_$i28: i32, in_$i29: i1, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i32, in_$i45: i8, in_$p46: ref, in_$i47: i16, in_$i48: i32, in_$i49: i32, in_$i50: i8, in_$i51: i32, in_$i52: i64, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$i26: i8, in_$i27: i8) returns (out_$i28: i32, out_$i29: i1, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i32, out_$i45: i8, out_$p46: ref, out_$i47: i16, out_$i48: i32, out_$i49: i32, out_$i50: i8, out_$i51: i32, out_$i52: i64, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$i26: i8, out_$i27: i8)
{

  entry:
    out_$i28, out_$i29, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i26, out_$i27 := in_$i28, in_$i29, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i26, in_$i27;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4321;

  $bb19:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := out_$i45, out_$i57;
    goto $bb19_dummy;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_4362;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i32.i8(out_$i56);
    call {:si_unique_call 636} {:cexpr "len"} boogie_si_record_i8(out_$i57);
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$i56 := $sub.i32(out_$i55, 1);
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i8.i32(out_$i27);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p54, out_$i50);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(20, 1)), $mul.ref(out_$i52, 1));
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i51);
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i8.i32(out_$i26);
    goto corral_source_split_4354;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} out_$i50 := inb(out_$i49);
    goto corral_source_split_4353;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i48, 140);
    goto corral_source_split_4352;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i16.i32(out_$i47);
    goto corral_source_split_4351;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i16($M.1, out_$p46);
    goto corral_source_split_4350;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4349;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    out_$i45 := $trunc.i32.i8(out_$i44);
    call {:si_unique_call 634} {:cexpr "idx"} boogie_si_record_i8(out_$i45);
    goto corral_source_split_4348;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i43, 1);
    goto corral_source_split_4347;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i26);
    goto corral_source_split_4346;

  $bb17:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, $sub.i32(0, 1));
    goto corral_source_split_4342;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} out_$i41 := wait_tulip(in_$p0);
    call {:si_unique_call 633} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} outb($sub.i8(0, 125), out_$i40);
    goto corral_source_split_4340;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i39, 145);
    goto corral_source_split_4339;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i38);
    goto corral_source_split_4338;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i16($M.1, out_$p37);
    goto corral_source_split_4337;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4336;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} outl(1, out_$i36);
    goto corral_source_split_4335;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i35, 128);
    goto corral_source_split_4334;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i34);
    goto corral_source_split_4333;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i16($M.1, out_$p33);
    goto corral_source_split_4332;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_4331;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 7);
    goto corral_source_split_4324;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} out_$i28 := initio_msgin_accept(in_$p0);
    call {:si_unique_call 629} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i26, out_$i27 := initio_msgin_extend_loop_$bb11(in_$p0, out_$i28, out_$i29, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i26, out_$i27);
    return;

  exit:
    return;
}



procedure initio_msgin_extend_loop_$bb11(in_$p0: ref, in_$i28: i32, in_$i29: i1, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$i38: i16, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i32, in_$i45: i8, in_$p46: ref, in_$i47: i16, in_$i48: i32, in_$i49: i32, in_$i50: i8, in_$i51: i32, in_$i52: i64, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$i26: i8, in_$i27: i8) returns (out_$i28: i32, out_$i29: i1, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$i38: i16, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i32, out_$i45: i8, out_$p46: ref, out_$i47: i16, out_$i48: i32, out_$i49: i32, out_$i50: i8, out_$i51: i32, out_$i52: i64, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$i26: i8, out_$i27: i8);
  modifies $M.1;



implementation initio_wait_done_disc_loop_$bb4(in_$p1: ref, in_$p6: ref, in_$i9: i16, in_$i10: i32, in_$i11: i32, in_$i12: i8, in_$i13: i32, in_$i14: i1) returns (out_$i9: i16, out_$i10: i32, out_$i11: i32, out_$i12: i8, out_$i13: i32, out_$i14: i1)
{

  entry:
    out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14 := in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i14 == 1;
    goto $bb6_dummy;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    out_$i14 := $sge.i32(out_$i13, 0);
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i8.i32(out_$i12);
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, in_$p6, out_$i12);
    goto corral_source_split_4634;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} out_$i12 := inb(out_$i11);
    call {:si_unique_call 685} {:cexpr "tmp"} boogie_si_record_i8(out_$i12);
    goto corral_source_split_4633;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i10, 133);
    goto corral_source_split_4632;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i16.i32(out_$i9);
    goto corral_source_split_4631;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i16($M.1, in_$p1);
    goto corral_source_split_4630;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} cpu_relax();
    goto corral_source_split_4629;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14 := initio_wait_done_disc_loop_$bb4(in_$p1, in_$p6, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14);
    return;

  exit:
    return;
}



procedure initio_wait_done_disc_loop_$bb4(in_$p1: ref, in_$p6: ref, in_$i9: i16, in_$i10: i32, in_$i11: i32, in_$i12: i8, in_$i13: i32, in_$i14: i1) returns (out_$i9: i16, out_$i10: i32, out_$i11: i32, out_$i12: i8, out_$i13: i32, out_$i14: i1);
  modifies $M.1;



implementation initio_find_busy_scb_loop_$bb4(in_$i1: i16, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i32, in_$i12: i16, in_$i13: i32, in_$p14: ref, in_$i15: i8, in_$i16: i16, in_$i17: i32, in_$i18: i32, in_$i19: i16, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p7: ref, in_$p29: ref) returns (out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i32, out_$i12: i16, out_$i13: i32, out_$p14: ref, out_$i15: i8, out_$i16: i16, out_$i17: i32, out_$i18: i32, out_$i19: i16, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p7: ref, out_$p29: ref)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p25, out_$p26, out_$i27, out_$i28, out_$p7, out_$p29 := in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$p25, in_$p26, in_$i27, in_$i28, in_$p7, in_$p29;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5302;

  $bb10:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p26;
    goto $bb10_dummy;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    out_$p29 := out_$p26;
    assume true;
    goto $bb10;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_5327;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_5326;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.1, out_$p25);
    goto corral_source_split_5325;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p7, $mul.ref(0, 352)), $mul.ref(0, 1));
    goto corral_source_split_5324;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p7;
    assume true;
    goto $bb7;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i20, out_$i21);
    goto corral_source_split_5318;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(in_$i1);
    goto corral_source_split_5317;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_5316;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i32.i16(out_$i18);
    call {:si_unique_call 745} {:cexpr "scbp_tarlun"} boogie_si_record_i16(out_$i19);
    goto corral_source_split_5315;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    out_$i18 := $or.i32(out_$i13, out_$i17);
    goto corral_source_split_5314;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i16.i32(out_$i16);
    goto corral_source_split_5313;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i16(out_$i15);
    goto corral_source_split_5312;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.1, out_$p14);
    goto corral_source_split_5311;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p7, $mul.ref(0, 352)), $mul.ref(42, 1));
    goto corral_source_split_5310;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i16.i32(out_$i12);
    goto corral_source_split_5309;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    out_$i12 := $trunc.i32.i16(out_$i11);
    goto corral_source_split_5308;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    out_$i11 := $shl.i32(out_$i10, 8);
    goto corral_source_split_5307;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i8.i32(out_$i9);
    goto corral_source_split_5306;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i8($M.1, out_$p8);
    goto corral_source_split_5305;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 352)), $mul.ref(43, 1));
    goto corral_source_split_5304;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p25, out_$p26, out_$i27, out_$i28, out_$p7, out_$p29 := initio_find_busy_scb_loop_$bb4(in_$i1, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p25, out_$p26, out_$i27, out_$i28, out_$p7, out_$p29);
    return;

  exit:
    return;
}



procedure initio_find_busy_scb_loop_$bb4(in_$i1: i16, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i32, in_$i12: i16, in_$i13: i32, in_$p14: ref, in_$i15: i8, in_$i16: i16, in_$i17: i32, in_$i18: i32, in_$i19: i16, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p7: ref, in_$p29: ref) returns (out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i32, out_$i12: i16, out_$i13: i32, out_$p14: ref, out_$i15: i8, out_$i16: i16, out_$i17: i32, out_$i18: i32, out_$i19: i16, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p7: ref, out_$p29: ref);



implementation {:SIextraRecBound 32} initio_se2_rd_all_loop_$bb1(in_$i0: i64, in_$p5: ref, in_$i6: i8, in_$i7: i32, in_$i8: i8, in_$i9: i16, in_$i10: i32, in_$i11: i1, in_$p3: ref, in_$i4: i32) returns (out_$p5: ref, out_$i6: i8, out_$i7: i32, out_$i8: i8, out_$i9: i16, out_$i10: i32, out_$i11: i1, out_$p3: ref, out_$i4: i32)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p3, out_$i4 := in_$p5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$p3, in_$i4;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5408;

  $bb3:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$p3, out_$i4 := out_$p5, out_$i10;
    goto $bb3_dummy;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    out_$i11 := $sle.i32(out_$i10, 31);
    goto corral_source_split_5417;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i4, 1);
    call {:si_unique_call 770} {:cexpr "i"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_5416;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.14 := $store.i16($M.14, out_$p3, out_$i9);
    goto corral_source_split_5415;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} out_$i9 := initio_se2_rd(in_$i0, out_$i8);
    goto corral_source_split_5414;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    out_$i8 := $trunc.i32.i8(out_$i7);
    goto corral_source_split_5413;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i8.i32(out_$i6);
    goto corral_source_split_5412;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    out_$i6 := $trunc.i32.i8(out_$i4);
    goto corral_source_split_5411;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref(out_$p3, $mul.ref(1, 2));
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p3, out_$i4 := initio_se2_rd_all_loop_$bb1(in_$i0, out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p3, out_$i4);
    return;

  exit:
    return;
}



procedure initio_se2_rd_all_loop_$bb1(in_$i0: i64, in_$p5: ref, in_$i6: i8, in_$i7: i32, in_$i8: i8, in_$i9: i16, in_$i10: i32, in_$i11: i1, in_$p3: ref, in_$i4: i32) returns (out_$p5: ref, out_$i6: i8, out_$i7: i32, out_$i8: i8, out_$i9: i16, out_$i10: i32, out_$i11: i1, out_$p3: ref, out_$i4: i32);
  modifies $M.14;



implementation {:SIextraRecBound 32} initio_se2_update_all_loop_$bb5(in_$i0: i64, in_$i10: i16, in_$i11: i32, in_$i12: i16, in_$i13: i32, in_$i14: i1, in_$i15: i8, in_$i16: i32, in_$i17: i8, in_$i18: i16, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$i24: i1, in_$p7: ref, in_$i8: i32, in_$p9: ref) returns (out_$i10: i16, out_$i11: i32, out_$i12: i16, out_$i13: i32, out_$i14: i1, out_$i15: i8, out_$i16: i32, out_$i17: i8, out_$i18: i16, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$i24: i1, out_$p7: ref, out_$i8: i32, out_$p9: ref)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p7, out_$i8, out_$p9 := in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$p7, in_$i8, in_$p9;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5701;

  $bb10:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p7, out_$i8, out_$p9 := out_$p23, out_$i21, out_$p22;
    goto $bb10_dummy;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$i24 := $sle.i32(out_$i21, 31);
    goto corral_source_split_5721;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p7, $mul.ref(1, 2));
    goto corral_source_split_5720;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p9, $mul.ref(1, 2));
    goto corral_source_split_5719;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i8, 1);
    call {:si_unique_call 776} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_5718;

  $bb8:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} initio_se2_wr(in_$i0, out_$i17, out_$i20);
    goto corral_source_split_5716;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i32.i16(out_$i19);
    goto corral_source_split_5715;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i16.i32(out_$i18);
    goto corral_source_split_5714;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i16($M.22, out_$p9);
    goto corral_source_split_5713;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i32.i8(out_$i16);
    goto corral_source_split_5712;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    goto corral_source_split_5711;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i32.i8(out_$i8);
    goto corral_source_split_5710;

  $bb7:
    assume out_$i14 == 1;
    goto corral_source_split_5709;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i11, out_$i13);
    goto corral_source_split_5707;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i16.i32(out_$i12);
    goto corral_source_split_5706;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i16($M.14, out_$p7);
    goto corral_source_split_5705;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i16.i32(out_$i10);
    goto corral_source_split_5704;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i16($M.22, out_$p9);
    goto corral_source_split_5703;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p7, out_$i8, out_$p9 := initio_se2_update_all_loop_$bb5(in_$i0, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p7, out_$i8, out_$p9);
    return;

  exit:
    return;
}



procedure initio_se2_update_all_loop_$bb5(in_$i0: i64, in_$i10: i16, in_$i11: i32, in_$i12: i16, in_$i13: i32, in_$i14: i1, in_$i15: i8, in_$i16: i32, in_$i17: i8, in_$i18: i16, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$i24: i1, in_$p7: ref, in_$i8: i32, in_$p9: ref) returns (out_$i10: i16, out_$i11: i32, out_$i12: i16, out_$i13: i32, out_$i14: i1, out_$i15: i8, out_$i16: i32, out_$i17: i8, out_$i18: i16, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$i24: i1, out_$p7: ref, out_$i8: i32, out_$p9: ref);



implementation initio_se2_wr_loop_$bb8(in_$i0: i64, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i1) returns (out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i1)
{

  entry:
    out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34 := in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i64.i32(in_$i0);
    goto corral_source_split_5950;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb10:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_5963;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i32(out_$i32, 1);
    goto corral_source_split_5962;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i31);
    goto corral_source_split_5961;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} out_$i31 := inb(out_$i30);
    call {:si_unique_call 804} {:cexpr "rb"} boogie_si_record_i8(out_$i31);
    goto corral_source_split_5960;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i29, 93);
    goto corral_source_split_5959;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i64.i32(in_$i0);
    goto corral_source_split_5958;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} __const_udelay(128850);
    goto corral_source_split_5957;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} outb(8, out_$i28);
    goto corral_source_split_5956;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i27, 93);
    goto corral_source_split_5955;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i64.i32(in_$i0);
    goto corral_source_split_5954;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} __const_udelay(128850);
    goto corral_source_split_5953;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} outb(12, out_$i26);
    goto corral_source_split_5952;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i25, 93);
    goto corral_source_split_5951;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34 := initio_se2_wr_loop_$bb8(in_$i0, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34);
    return;

  exit:
    return;
}



procedure initio_se2_wr_loop_$bb8(in_$i0: i64, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i1) returns (out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i1);



implementation initio_build_scb_loop_$bb13(in_$p96: ref, in_$p105: ref, in_$i106: i64, in_$i107: i32, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$p118: ref, in_$i119: i8, in_$i120: i32, in_$i121: i1, in_$i101: i64, in_$i102: i32, in_$p103: ref, in_$p104: ref, in_$i122: i64) returns (out_$p105: ref, out_$i106: i64, out_$i107: i32, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$p118: ref, out_$i119: i8, out_$i120: i32, out_$i121: i1, out_$i101: i64, out_$i102: i32, out_$p103: ref, out_$p104: ref, out_$i122: i64)
{

  entry:
    out_$p105, out_$i106, out_$i107, out_$p108, out_$p109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i101, out_$i102, out_$p103, out_$p104, out_$i122 := in_$p105, in_$i106, in_$i107, in_$p108, in_$p109, in_$i110, in_$p111, in_$p112, in_$i113, in_$i114, in_$i115, in_$p116, in_$i117, in_$p118, in_$i119, in_$i120, in_$i121, in_$i101, in_$i102, in_$p103, in_$p104, in_$i122;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7175;

  $bb15:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i101, out_$i102, out_$p103, out_$p104 := out_$i115, out_$i117, out_$p118, out_$p116;
    goto $bb15_dummy;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    out_$i122 := out_$i115;
    assume true;
    goto $bb15;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    out_$i121 := $sgt.i32(out_$i120, out_$i117);
    goto corral_source_split_7195;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    out_$i120 := $zext.i8.i32(out_$i119);
    goto corral_source_split_7194;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i8($M.1, in_$p96);
    goto corral_source_split_7193;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} out_$p118 := sg_next(out_$p103);
    goto corral_source_split_7192;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    out_$i117 := $add.i32(out_$i102, 1);
    call {:si_unique_call 1064} {:cexpr "i"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_7191;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref(out_$p104, $mul.ref(1, 8));
    goto corral_source_split_7190;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    out_$i115 := $add.i64(out_$i114, out_$i101);
    call {:si_unique_call 1063} {:cexpr "total_len"} boogie_si_record_i64(out_$i115);
    goto corral_source_split_7189;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    out_$i114 := $zext.i32.i64(out_$i113);
    goto corral_source_split_7188;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.1, out_$p112);
    goto corral_source_split_7187;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p103, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7186;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p111, out_$i110);
    goto corral_source_split_7185;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p104, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7184;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.1, out_$p109);
    goto corral_source_split_7183;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p103, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7182;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p108, out_$i107);
    goto corral_source_split_7181;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p104, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7180;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    out_$i107 := $trunc.i64.i32(out_$i106);
    goto corral_source_split_7179;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i64($M.1, out_$p105);
    goto corral_source_split_7178;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p103, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7177;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p105, out_$i106, out_$i107, out_$p108, out_$p109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i101, out_$i102, out_$p103, out_$p104, out_$i122 := initio_build_scb_loop_$bb13(in_$p96, out_$p105, out_$i106, out_$i107, out_$p108, out_$p109, out_$i110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i101, out_$i102, out_$p103, out_$p104, out_$i122);
    return;

  exit:
    return;
}



procedure initio_build_scb_loop_$bb13(in_$p96: ref, in_$p105: ref, in_$i106: i64, in_$i107: i32, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$i113: i32, in_$i114: i64, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$p118: ref, in_$i119: i8, in_$i120: i32, in_$i121: i1, in_$i101: i64, in_$i102: i32, in_$p103: ref, in_$p104: ref, in_$i122: i64) returns (out_$p105: ref, out_$i106: i64, out_$i107: i32, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$i113: i32, out_$i114: i64, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$p118: ref, out_$i119: i8, out_$i120: i32, out_$i121: i1, out_$i101: i64, out_$i102: i32, out_$p103: ref, out_$p104: ref, out_$i122: i64);
  modifies $M.1;



implementation initio_build_scb_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} initio_build_scb_loop_$bb6();
    return;

  exit:
    return;
}



procedure initio_build_scb_loop_$bb6();



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i64, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32) returns (out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i64, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32)
{

  entry:
    out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i50, out_$p51, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51 := in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i49, in_$i50, in_$p51, in_$i53, in_$i54, in_$p55, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$i75, in_$i76, in_vslice_dummy_var_48, in_vslice_dummy_var_49, in_vslice_dummy_var_50, in_vslice_dummy_var_51;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1190} out_$i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1191} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i13);
    call {:si_unique_call 1192} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i13);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} choose_interrupt_1();
    goto corral_source_split_7574;

  $bb14:
    assume out_$i20 == 1;
    goto corral_source_split_7573;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_7571;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    out_$i19 := $M.26;
    goto corral_source_split_7570;

  $bb12:
    assume out_$i18 == 1;
    goto corral_source_split_7569;

  $bb10:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb3:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb19:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb30;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_7588;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    out_$i29 := $M.27;
    goto corral_source_split_7587;

  $bb28:
    assume out_$i28 == 1;
    goto corral_source_split_7586;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 3);
    goto corral_source_split_7584;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    out_$i27 := $M.28;
    goto corral_source_split_7583;

  $bb26:
    assume out_$i26 == 1;
    goto corral_source_split_7582;

  $bb21:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i23, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i23, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_7576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1194} out_$i23 := __VERIFIER_nondet_int();
    call {:si_unique_call 1195} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i23);
    call {:si_unique_call 1196} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i23);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i22 == 1;
    goto corral_source_split_7576;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_7567;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    out_$i21 := $M.28;
    goto corral_source_split_7566;

  $bb11:
    assume !(out_$i17 == 1);
    goto corral_source_split_7565;

  $bb37:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_7606;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i36 := $M.30;
    goto corral_source_split_7605;

  $bb39:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 1202} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7603;

  $bb38:
    assume out_$i35 == 1;
    goto corral_source_split_7602;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 0);
    goto corral_source_split_7600;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    out_$i34 := $M.30;
    goto corral_source_split_7599;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $M.30 := out_$i33;
    call {:si_unique_call 1201} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_7598;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} out_$i33 := initio_init_driver();
    goto corral_source_split_7597;

  $bb36:
    assume out_$i32 == 1;
    goto corral_source_split_7596;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_7580;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    out_$i31 := $M.28;
    goto corral_source_split_7579;

  $bb23:
    assume out_$i25 == 1;
    goto corral_source_split_7578;

  $bb22:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i23, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} ldv_stop();
    goto corral_source_split_7611;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb25;

  $bb49:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb61:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 1209} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7630;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} out_vslice_dummy_var_48 := i91u_biosparam(in_$p8, in_$p4, out_$i47, in_$p2);
    goto corral_source_split_7629;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i64($M.23, in_$p0);
    goto corral_source_split_7628;

  $bb60:
    assume out_$i46 == 1;
    goto corral_source_split_7627;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 1);
    goto corral_source_split_7625;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    out_$i45 := $M.4;
    goto corral_source_split_7624;

  $bb58:
    assume out_$i44 == 1;
    goto corral_source_split_7623;

  $bb51:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i40, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_7613:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1205} out_$i40 := __VERIFIER_nondet_int();
    call {:si_unique_call 1206} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i40);
    call {:si_unique_call 1207} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i40);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i39 == 1;
    goto corral_source_split_7613;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_7559;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    out_$i38 := $M.4;
    goto corral_source_split_7558;

  $bb5:
    assume out_$i15 == 1;
    goto corral_source_split_7557;

  $bb4:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb65:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 1211} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7635;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} out_vslice_dummy_var_49 := i91u_queuecommand(in_$p6, out_$p51);
    goto corral_source_split_7634;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    out_$p51 := $M.15;
    goto corral_source_split_7633;

  $bb64:
    assume out_$i50 == 1;
    goto corral_source_split_7632;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 1);
    goto corral_source_split_7617;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    out_$i49 := $M.4;
    goto corral_source_split_7616;

  $bb53:
    assume out_$i42 == 1;
    goto corral_source_split_7615;

  $bb52:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb68:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 1213} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7640;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} out_vslice_dummy_var_50 := i91u_bus_reset(out_$p55);
    goto corral_source_split_7639;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    out_$p55 := $M.15;
    goto corral_source_split_7638;

  $bb67:
    assume out_$i54 == 1;
    goto corral_source_split_7637;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 1);
    goto corral_source_split_7621;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    out_$i53 := $M.4;
    goto corral_source_split_7620;

  $bb55:
    assume out_$i43 == 1;
    goto corral_source_split_7619;

  $bb54:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} ldv_stop();
    goto corral_source_split_7642;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb57;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb57;

  $bb74:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb86:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb88:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $M.27 := out_$i71;
    call {:si_unique_call 1221} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_7669;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i70, 1);
    goto corral_source_split_7668;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    out_$i70 := $M.27;
    goto corral_source_split_7667;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 1220} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7666;

  $bb87:
    assume out_$i69 == 1;
    goto corral_source_split_7665;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 0);
    goto corral_source_split_7663;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    out_$i68 := $M.31;
    goto corral_source_split_7662;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $M.31 := out_$i67;
    call {:si_unique_call 1219} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_7661;

  SeqInstr_15:
    goto corral_source_split_7660;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} out_$i67 := initio_probe_one(out_$p66, in_$p10);
    goto SeqInstr_14;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    out_$p66 := $M.25;
    goto corral_source_split_7659;

  $bb85:
    assume out_$i65 == 1;
    goto corral_source_split_7658;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 1);
    goto corral_source_split_7656;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    out_$i64 := $M.29;
    goto corral_source_split_7655;

  $bb83:
    assume out_$i63 == 1;
    goto corral_source_split_7654;

  $bb76:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i59, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i59, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_7644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1215} out_$i59 := __VERIFIER_nondet_int();
    call {:si_unique_call 1216} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i59);
    call {:si_unique_call 1217} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i59);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume out_$i58 == 1;
    goto corral_source_split_7644;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_7563;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    out_$i57 := $M.29;
    goto corral_source_split_7562;

  $bb7:
    assume out_$i16 == 1;
    goto corral_source_split_7561;

  $bb6:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb93:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1223} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7674;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} initio_remove_one(out_$p74);
    goto corral_source_split_7673;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    out_$p74 := $M.25;
    goto corral_source_split_7672;

  $bb92:
    assume out_$i73 == 1;
    goto corral_source_split_7671;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 2);
    goto corral_source_split_7648;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    out_$i72 := $M.29;
    goto corral_source_split_7647;

  $bb78:
    assume out_$i61 == 1;
    goto corral_source_split_7646;

  $bb77:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i59, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb96:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 1225} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7678;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} out_vslice_dummy_var_51 := ldv_shutdown_2();
    goto corral_source_split_7677;

  $bb95:
    assume out_$i76 == 1;
    goto corral_source_split_7676;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 2);
    goto corral_source_split_7652;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    out_$i75 := $M.29;
    goto corral_source_split_7651;

  $bb80:
    assume out_$i62 == 1;
    goto corral_source_split_7650;

  $bb79:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i59, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} ldv_stop();
    goto corral_source_split_7680;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb81:
    assume {:verifier.code 0} true;
    assume !(out_$i62 == 1);
    goto $bb82;

  $bb84:
    assume {:verifier.code 0} true;
    assume !(out_$i63 == 1);
    goto $bb82;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} ldv_stop();
    goto corral_source_split_7682;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i50, out_$p51, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51 := main_loop_$bb1(in_$p0, in_$p2, in_$p4, in_$p6, in_$p8, in_$p10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i50, out_$p51, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i64, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32) returns (out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i64, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32);
  modifies $M.5, $M.20, $M.1, $M.4, $M.7, $M.9, $M.11, $M.28, $M.30, $M.29, $M.25, $CurrAddr, $M.27, $M.31, $M.0, $M.15, $M.13, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.14, $M.22, assertsPassed;


