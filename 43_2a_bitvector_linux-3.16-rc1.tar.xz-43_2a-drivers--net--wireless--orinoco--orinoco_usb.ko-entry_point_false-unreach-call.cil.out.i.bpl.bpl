var $M.1: [ref]i8;

var $M.2: [ref]ref;

var $M.3: [ref]i64;

var $M.4: i16;

var $M.5: [ref]ref;

var $M.6: ref;

var $M.7: i32;

var $M.8: [ref]i8;

var $M.9: [ref]i8;

var $M.10: [ref]i8;

var $M.11: ref;

var $M.12: i32;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: [ref]ref;

var $M.17: [ref]i24;

var $M.18: [ref]i8;

var $M.19: [ref]ref;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]i24;

var $M.24: [ref]i8;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]i24;

var $M.34: [ref]i8;

var $M.35: [ref]i32;

var $M.36: ref;

var $M.37: ref;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: ref;

var $M.46: ref;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.125: [ref]i8;

var $M.126: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 367368);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_timer_state_1: ref;

axiom ldv_timer_state_1 == $sub.ref(0, 2056);

const ezusb_netdev_ops_group1: ref;

axiom ezusb_netdev_ops_group1 == $sub.ref(0, 3088);

const orinoco_driver_group1: ref;

axiom orinoco_driver_group1 == $sub.ref(0, 4120);

const ldv_timer_list_1: ref;

axiom ldv_timer_list_1 == $sub.ref(0, 5152);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 6180);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 7208);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 8236);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 9264);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 10292);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 11320);

const ezusb_ops_group1: ref;

axiom ezusb_ops_group1 == $sub.ref(0, 12352);

const ezusb_ops_group2: ref;

axiom ezusb_ops_group2 == $sub.ref(0, 13384);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 14412);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 15440);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 16468);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 17496);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 18524);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 19552);

const __mod_usb__ezusb_table_device_table: ref;

axiom __mod_usb__ezusb_table_device_table == $sub.ref(0, 20608);

const ezusb_netdev_ops: ref;

axiom ezusb_netdev_ops == $sub.ref(0, 22112);

const firmware: ref;

axiom firmware == $sub.ref(0, 23152);

const ezusb_ops: ref;

axiom ezusb_ops == $sub.ref(0, 24304);

const {:count 21} ezusb_table: ref;

axiom ezusb_table == $sub.ref(0, 26000);

const orinoco_driver: ref;

axiom orinoco_driver == $sub.ref(0, 27328);

const .str: ref;

axiom .str == $sub.ref(0, 28364);

const {:count 28} .str.85: ref;

axiom .str.85 == $sub.ref(0, 29416);

const {:count 234} .str.2: ref;

axiom .str.2 == $sub.ref(0, 30674);

const {:count 36} .str.84: ref;

axiom .str.84 == $sub.ref(0, 31734);

const {:count 23} .str.10: ref;

axiom .str.10 == $sub.ref(0, 32781);

const {:count 60} .str.7: ref;

axiom .str.7 == $sub.ref(0, 33865);

const {:count 53} .str.8: ref;

axiom .str.8 == $sub.ref(0, 34942);

const {:count 62} .str.9: ref;

axiom .str.9 == $sub.ref(0, 36028);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 44} .str.50: ref;

axiom .str.50 == $sub.ref(0, 37096);

const {:count 12} .str.51: ref;

axiom .str.51 == $sub.ref(0, 38132);

const {:count 35} .str.52: ref;

axiom .str.52 == $sub.ref(0, 39191);

const {:count 27} .str.53: ref;

axiom .str.53 == $sub.ref(0, 40242);

const {:count 36} .str.54: ref;

axiom .str.54 == $sub.ref(0, 41302);

const {:count 38} .str.55: ref;

axiom .str.55 == $sub.ref(0, 42364);

const {:count 30} .str.56: ref;

axiom .str.56 == $sub.ref(0, 43418);

const {:count 31} .str.57: ref;

axiom .str.57 == $sub.ref(0, 44473);

const {:count 43} .str.58: ref;

axiom .str.58 == $sub.ref(0, 45540);

const {:count 37} .str.59: ref;

axiom .str.59 == $sub.ref(0, 46601);

const {:count 32} .str.60: ref;

axiom .str.60 == $sub.ref(0, 47657);

const {:count 32} .str.61: ref;

axiom .str.61 == $sub.ref(0, 48713);

const {:count 49} .str.62: ref;

axiom .str.62 == $sub.ref(0, 49786);

const {:count 55} .str.63: ref;

axiom .str.63 == $sub.ref(0, 50865);

const {:count 17} .str.64: ref;

axiom .str.64 == $sub.ref(0, 51906);

const {:count 39} .str.65: ref;

axiom .str.65 == $sub.ref(0, 52969);

const {:count 39} .str.66: ref;

axiom .str.66 == $sub.ref(0, 54032);

const {:count 46} .str.67: ref;

axiom .str.67 == $sub.ref(0, 55102);

const {:count 63} .str.68: ref;

axiom .str.68 == $sub.ref(0, 56189);

const {:count 38} .str.69: ref;

axiom .str.69 == $sub.ref(0, 57251);

const {:count 43} .str.70: ref;

axiom .str.70 == $sub.ref(0, 58318);

const {:count 12} .str.71: ref;

axiom .str.71 == $sub.ref(0, 59354);

const {:count 2} .str.27: ref;

axiom .str.27 == $sub.ref(0, 60380);

const {:count 40} .str.28: ref;

axiom .str.28 == $sub.ref(0, 61444);

const {:count 40} .str.29: ref;

axiom .str.29 == $sub.ref(0, 62508);

const {:count 17} .str.1: ref;

axiom .str.1 == $sub.ref(0, 63549);

const {:count 22} .str.3: ref;

axiom .str.3 == $sub.ref(0, 64595);

const {:count 38} .str.11: ref;

axiom .str.11 == $sub.ref(0, 65657);

const {:count 17} .str.12: ref;

axiom .str.12 == $sub.ref(0, 66698);

const {:count 47} .str.13: ref;

axiom .str.13 == $sub.ref(0, 67769);

const {:count 67} .str.14: ref;

axiom .str.14 == $sub.ref(0, 68860);

const {:count 29} .str.15: ref;

axiom .str.15 == $sub.ref(0, 69913);

const {:count 26} .str.16: ref;

axiom .str.16 == $sub.ref(0, 70963);

const {:count 71} .str.17: ref;

axiom .str.17 == $sub.ref(0, 72058);

const {:count 32} .str.18: ref;

axiom .str.18 == $sub.ref(0, 73114);

const {:count 53} .str.19: ref;

axiom .str.19 == $sub.ref(0, 74191);

const {:count 22} .str.5: ref;

axiom .str.5 == $sub.ref(0, 75237);

const {:count 17} .str.6: ref;

axiom .str.6 == $sub.ref(0, 76278);

const {:count 9} .str.4: ref;

axiom .str.4 == $sub.ref(0, 77311);

const {:count 20} .str.30: ref;

axiom .str.30 == $sub.ref(0, 78355);

const {:count 27} .str.31: ref;

axiom .str.31 == $sub.ref(0, 79406);

const {:count 35} .str.32: ref;

axiom .str.32 == $sub.ref(0, 80465);

const {:count 36} .str.33: ref;

axiom .str.33 == $sub.ref(0, 81525);

const {:count 23} .str.34: ref;

axiom .str.34 == $sub.ref(0, 82572);

const {:count 39} .str.35: ref;

axiom .str.35 == $sub.ref(0, 83635);

const {:count 28} .str.36: ref;

axiom .str.36 == $sub.ref(0, 84687);

const {:count 23} .str.37: ref;

axiom .str.37 == $sub.ref(0, 85734);

const {:count 40} .str.38: ref;

axiom .str.38 == $sub.ref(0, 86798);

const {:count 42} .str.39: ref;

axiom .str.39 == $sub.ref(0, 87864);

const {:count 26} .str.40: ref;

axiom .str.40 == $sub.ref(0, 88914);

const {:count 29} .str.41: ref;

axiom .str.41 == $sub.ref(0, 89967);

const {:count 46} .str.42: ref;

axiom .str.42 == $sub.ref(0, 91037);

const {:count 48} .str.43: ref;

axiom .str.43 == $sub.ref(0, 92109);

const {:count 50} .str.79: ref;

axiom .str.79 == $sub.ref(0, 93183);

const {:count 55} .str.80: ref;

axiom .str.80 == $sub.ref(0, 94262);

const {:count 24} .str.81: ref;

axiom .str.81 == $sub.ref(0, 95310);

const {:count 38} .str.82: ref;

axiom .str.82 == $sub.ref(0, 96372);

const {:count 50} .str.83: ref;

axiom .str.83 == $sub.ref(0, 97446);

const {:count 32} .str.77: ref;

axiom .str.77 == $sub.ref(0, 98502);

const {:count 17} .str.78: ref;

axiom .str.78 == $sub.ref(0, 99543);

const {:count 31} .str.72: ref;

axiom .str.72 == $sub.ref(0, 100598);

const {:count 33} .str.73: ref;

axiom .str.73 == $sub.ref(0, 101655);

const {:count 17} .str.74: ref;

axiom .str.74 == $sub.ref(0, 102696);

const {:count 25} .str.75: ref;

axiom .str.75 == $sub.ref(0, 103745);

const {:count 53} .str.76: ref;

axiom .str.76 == $sub.ref(0, 104822);

const {:count 14} .str.25: ref;

axiom .str.25 == $sub.ref(0, 105860);

const {:count 64} .str.26: ref;

axiom .str.26 == $sub.ref(0, 106948);

const {:count 54} .str.22: ref;

axiom .str.22 == $sub.ref(0, 108026);

const {:count 56} .str.23: ref;

axiom .str.23 == $sub.ref(0, 109106);

const {:count 37} .str.24: ref;

axiom .str.24 == $sub.ref(0, 110167);

const {:count 18} .str.20: ref;

axiom .str.20 == $sub.ref(0, 111209);

const {:count 50} .str.21: ref;

axiom .str.21 == $sub.ref(0, 112283);

const {:count 28} .str.44: ref;

axiom .str.44 == $sub.ref(0, 113335);

const {:count 33} .str.45: ref;

axiom .str.45 == $sub.ref(0, 114392);

const {:count 47} .str.46: ref;

axiom .str.46 == $sub.ref(0, 115463);

const {:count 35} .str.47: ref;

axiom .str.47 == $sub.ref(0, 116522);

const {:count 26} .str.48: ref;

axiom .str.48 == $sub.ref(0, 117572);

const {:count 63} .str.49: ref;

axiom .str.49 == $sub.ref(0, 118659);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 119691);

const {:count 3} .str.1.184: ref;

axiom .str.1.184 == $sub.ref(0, 120718);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 121756);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 122784);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 123816);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 124848);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 125880);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 126912);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const ezusb_probe: ref;

axiom ezusb_probe == $sub.ref(0, 127944);

procedure ezusb_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.1, $M.4, $M.6, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, $M.7, $M.8, $M.11, $M.12, assertsPassed;



implementation ezusb_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $p119: ref;
  var $i120: i16;
  var $i121: i32;
  var $i122: i1;
  var $p124: ref;
  var $i125: i8;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i32;
  var $i136: i32;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $i143: i1;
  var $i145: i32;
  var $i146: i8;
  var $i147: i32;
  var $i148: i1;
  var $i46: i32;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $i156: i1;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $i163: i64;
  var $i164: i16;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i16;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i172: i64;
  var $i173: i1;
  var $i174: i32;
  var $i175: i1;
  var $i177: i32;
  var $i178: i1;
  var $i180: i32;
  var $i181: i1;
  var $i184: i32;
  var $i185: i1;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i64;
  var $i197: i1;
  var $p12: ref;
  var $i13: i32;
  var $p198: ref;
  var $i199: i64;
  var $i200: i1;
  var $p201: ref;
  var $p202: ref;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: ref;
  var vslice_dummy_var_33: ref;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p6 := interface_to_usbdev($p0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p2, $0.ref);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p8 := alloc_orinocodev(520, $p7, ezusb_hard_reset, $0.ref);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 2312)), $mul.ref(1624, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(16, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} __mutex_init($p18, .str.51, $p3);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(288, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vslice_dummy_var_32 := spinlock_check($p19);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(288, 1)), $mul.ref(0, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} __raw_spin_lock_init($p23, .str.52, $p4);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(184, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} vslice_dummy_var_33 := spinlock_check($p24);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} __raw_spin_lock_init($p28, .str.53, $p5);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(256, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} INIT_LIST_HEAD($p29);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(272, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} INIT_LIST_HEAD($p30);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, $p6);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(360, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2312)), $mul.ref(1624, 1)), $mul.ref(0, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, $p32);
    $p35 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2312)), $mul.ref(1624, 1)), $mul.ref(8, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p35, 0);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2312)), $mul.ref(1624, 1)), $mul.ref(24, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, $p16);
    $p38 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2312)), $mul.ref(1624, 1)), $mul.ref(16, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p38, ezusb_ops);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.1, $p42);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(488, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.1, $p149);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p150);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i152 := $eq.i64($i151, 0);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb56;

  $bb56:
    assume !($i152 == 1);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.1, $p153);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i155 := $p2i.ref.i64($p154);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i156 := $eq.i64($i155, 0);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i159 := request_firmware($p2, .str.64, $p158);
    call {:si_unique_call 44} {:cexpr "tmp___3"} boogie_si_record_i32($i159);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 0);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i168 := $M.4;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i169 := $zext.i16.i32($i168);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vslice_dummy_var_44 := printk.ref(.str.65);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} ezusb_delete($p17);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.1, $p194);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i196 := $p2i.ref.i64($p195);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i197 := $ne.i64($i196, 0);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p12, $i13 := $0.ref, $sub.i32(0, 14);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.2, $p2);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i199 := $p2i.ref.i64($p198);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i200 := $ne.i64($i199, 0);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p12);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} usb_set_intfdata($p0, $p202);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb87:
    assume $i200 == 1;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $M.6 := $0.ref;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $M.4 := 0;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.2, $p2);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} release_firmware($p201);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i197 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} free_orinocodev($p8);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    goto $bb86;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i170 == 1;
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p171 := $M.6;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i172 := $p2i.ref.i64($p171);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i173 := $ne.i64($i172, 0);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i173 == 1);
    goto $bb65;

  $bb66:
    assume $i173 == 1;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i174 := ezusb_firmware_download($p17, firmware);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 47} {:cexpr "tmp___4"} boogie_si_record_i32($i174);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i175 := $slt.i32($i174, 0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i177 := ezusb_hard_reset($p8);
    call {:si_unique_call 49} {:cexpr "tmp___5"} boogie_si_record_i32($i177);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i178 := $slt.i32($i177, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i180 := ezusb_init($p14);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 52} {:cexpr "tmp___6"} boogie_si_record_i32($i180);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i180, 0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i184 := orinoco_init($p8);
    call {:si_unique_call 56} {:cexpr "tmp___7"} boogie_si_record_i32($i184);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i187 := orinoco_if_add($p8, 0, 0, ezusb_netdev_ops);
    call {:si_unique_call 59} {:cexpr "tmp___8"} boogie_si_record_i32($i187);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i187, 0);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p8, $mul.ref(0, 2312)), $mul.ref(1400, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.1, $p191);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p193, $p192);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p12, $i13 := $p16, 0;
    goto $bb3;

  $bb81:
    assume $i188 == 1;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p189, $0.ref);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} vslice_dummy_var_49 := printk.ref.ref(.str.70, .str.71);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb78:
    assume $i185 == 1;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_48 := printk.ref(.str.69);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb75:
    assume $i181 == 1;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} vslice_dummy_var_46 := printk.ref(.str.67);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_47 := printk.ref(.str.68);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i178 == 1;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_45 := printk.ref(.str.66);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb68:
    assume $i175 == 1;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i160 == 1;
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.2, $p2);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p161, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i163 := $load.i64($M.3, $p162);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i64.i16($i163);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $M.4 := $i164;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.2, $p2);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.5, $p166);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $M.6 := $p167;
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} vslice_dummy_var_43 := printk.ref(.str.63);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb55;

  $bb5:
    assume $i45 == 1;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb8;

  $bb8:
    call $p47, $p48, $p49, $p50, $i51, $p54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $p63, $p64, $i65, $i66, $p68, $p69, $p70, $p71, $i72, $i73, $p75, $i76, $i77, $i78, $p80, $i81, $i82, $i83, $p84, $i85, $i86, $p88, $i89, $i90, $i91, $i92, $p93, $p94, $p95, $p96, $p97, $p98, $p99, $p100, $p101, $i102, $i103, $p105, $i106, $i107, $i108, $p109, $i110, $i111, $i112, $i113, $p114, $p115, $i116, $i117, $p119, $i120, $i121, $i122, $p124, $i125, $i126, $i127, $p128, $i129, $i130, $p132, $i133, $i134, $i135, $i136, $p137, $p138, $p139, $p140, $p141, $i142, $i143, $i145, $i146, $i147, $i148, $i46, vslice_dummy_var_34, vslice_dummy_var_36, vslice_dummy_var_37, vslice_dummy_var_39, vslice_dummy_var_40, vslice_dummy_var_41 := ezusb_probe_loop_$bb8($p0, $p6, $p17, $p42, $p47, $p48, $p49, $p50, $i51, $p54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $p63, $p64, $i65, $i66, $p68, $p69, $p70, $p71, $i72, $i73, $p75, $i76, $i77, $i78, $p80, $i81, $i82, $i83, $p84, $i85, $i86, $p88, $i89, $i90, $i91, $i92, $p93, $p94, $p95, $p96, $p97, $p98, $p99, $p100, $p101, $i102, $i103, $p105, $i106, $i107, $i108, $p109, $i110, $i111, $i112, $i113, $p114, $p115, $i116, $i117, $p119, $i120, $i121, $i122, $p124, $i125, $i126, $i127, $p128, $i129, $i130, $p132, $i133, $i134, $i135, $i136, $p137, $p138, $p139, $p140, $p141, $i142, $i143, $i145, $i146, $i147, $i148, $i46, vslice_dummy_var_34, vslice_dummy_var_36, vslice_dummy_var_37, vslice_dummy_var_39, vslice_dummy_var_40, vslice_dummy_var_41);
    goto $bb8_last;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i46);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.1, $p54);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i56 := $sext.i8.i32($i55);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, 0);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    $p105 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.1, $p105);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i107 := $sext.i8.i32($i106);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i108 := $sge.i32($i107, 0);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i145 := $add.i32($i46, 1);
    call {:si_unique_call 25} {:cexpr "i"} boogie_si_record_i32($i145);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.1, $p42);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i148 := $sgt.i32($i147, $i145);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i148 == 1);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb51:
    assume $i148 == 1;
    assume {:verifier.code 0} true;
    $i46 := $i145;
    goto $bb51_dummy;

  $bb33:
    assume $i108 == 1;
    $p109 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.1, $p109);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, 3);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 2);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb35;

  $bb36:
    assume $i113 == 1;
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(488, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.1, $p114);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, 0);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    $p119 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i120 := $load.i16($M.1, $p119);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i120);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 64);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    $p124 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.1, $p124);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 2);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    $p132 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.1, $p132);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i135 := __create_pipe($p6, $i134);
    call {:si_unique_call 39} {:cexpr "tmp___1"} boogie_si_record_i32($i135);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i136 := $or.i32($i135, $sub.i32(0, 1073741824));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(508, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p137, $i136);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p138 := kmalloc(2048, 208);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(488, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p139, $p138);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(488, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.1, $p140);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p141);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i143 := $eq.i64($i142, 0);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i143 == 1;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} vslice_dummy_var_42 := printk.ref(.str.62);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i127 == 1;
    $p128 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.1, $p128);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vslice_dummy_var_41 := printk.ref.i32(.str.61, $i130);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i122 == 1;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} vslice_dummy_var_40 := printk.ref(.str.60);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i117 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_39 := printk.ref(.str.59);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i57 == 1;
    $p58 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.1, $p58);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 3);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 2);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb12;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p68 := ldv_usb_alloc_urb_41(0, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p69, $p68);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.1, $p70);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $p75 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.1, $p75);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 64);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $p80 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.1, $p80);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 130);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    $p88 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.1, $p88);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i91 := __create_pipe($p6, $i90);
    call {:si_unique_call 32} {:cexpr "tmp___0"} boogie_si_record_i32($i91);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i92 := $or.i32($i91, $sub.i32(0, 1073741696));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(504, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p93, $i92);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p94 := kmalloc(2048, 208);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.1, $p95);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p97, $p94);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p17, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.1, $p98);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.1, $p100);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i103 := $eq.i64($i102, 0);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i103 == 1;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} vslice_dummy_var_38 := printk.ref(.str.58);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i83 == 1;
    $p84 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.1, $p84);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} vslice_dummy_var_37 := printk.ref.i32(.str.57, $i86);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i78 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_36 := printk.ref(.str.56);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i73 == 1;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_35 := printk.ref(.str.55);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i66 == 1;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vslice_dummy_var_34 := printk.ref(.str.54);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_31 := printk.ref(.str.50);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p12, $i13 := $0.ref, 0;
    goto $bb3;

  $bb51_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_73;
}



const ezusb_disconnect: ref;

axiom ezusb_disconnect == $sub.ref(0, 128976);

procedure ezusb_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.7, $M.8, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.11, $M.12, $CurrAddr, assertsPassed;



implementation ezusb_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} ezusb_delete($p2);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_50 := printk.ref(.str.85);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 130008);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 131040);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} dev_set_drvdata($p2, $p1);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    return;
}



const ezusb_delete: ref;

axiom ezusb_delete == $sub.ref(0, 132072);

procedure ezusb_delete($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.7, $M.8, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.11, $M.12, $CurrAddr, assertsPassed;



implementation ezusb_delete($p0: ref)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p28: ref;
  var $p29: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p64: ref;
  var $p65: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i1 := preempt_count();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 71} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 2096896);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 73} {:cexpr "tmp___0"} boogie_si_record_i64($i7);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 76} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(16, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} mutex_lock_nested($p15, 0);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, $0.ref);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} usb_kill_urb($p18);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} ldv_spin_lock();
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(272, 1)), $mul.ref(0, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(272, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p21);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i25, $i26);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(184, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} spin_unlock_irqrestore($p54, $u0);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(256, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p57);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i61, $i62);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(16, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} mutex_unlock($p81);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.1, $p82);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(488, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.1, $p92);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} kfree($p93);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p94);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    return;

  $bb40:
    assume $i97 == 1;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.1, $p98);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p100 := ndev_priv($p99);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} orinoco_if_del($p100);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} free_orinocodev($p100);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i85 == 1;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.1, $p86);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.1, $p88);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} kfree($p89);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.1, $p90);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} usb_free_urb($p91);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume $i74 == 1;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.1, $p77);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, $sub.i32(0, 115));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb33;

  $bb34:
    assume $i79 == 1;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} vslice_dummy_var_52 := printk.ref(.str.84);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb23:
    assume $i63 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p64, $p65 := $p59, $p57;
    goto $bb26;

  $bb26:
    call $p66, $p67, $p68, $i69, $i70, $p64, $p65 := ezusb_delete_loop_$bb26($i61, $p66, $p67, $p68, $i69, $i70, $p64, $p65);
    goto $bb26_last;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} ezusb_ctx_complete($p66);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p64, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p64);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i61, $i69);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i70 == 1);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $p64, $p65 := $p68, $p64;
    goto $bb28_dummy;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p28, $p29 := $p23, $p21;
    goto $bb12;

  $bb12:
    call $p30, $p31, $p32, $p33, $p34, $i35, $p36, $p37, $p38, $p39, $p40, $i41, $p42, $i43, $p44, $p45, $p47, $i48, $i49, $p50, $p51, $i52, $i53, $p28, $p29, vslice_dummy_var_51 := ezusb_delete_loop_$bb12($p0, $i25, $p30, $p31, $p32, $p33, $p34, $i35, $p36, $p37, $p38, $p39, $p40, $i41, $p42, $i43, $p44, $p45, $p47, $i48, $i49, $p50, $p51, $i52, $i53, $p28, $p29, vslice_dummy_var_51);
    goto $bb12_last;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} atomic_inc($p31);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p38, $i35);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $i41 := usb_unlink_urb($p40);
    call {:si_unique_call 83} {:cexpr "err"} boogie_si_record_i32($i41);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(184, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} spin_unlock_irqrestore($p42, $u0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i41, $sub.i32(0, 115));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(160, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} vslice_dummy_var_51 := ldv_del_timer_sync_40($p45);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i48 := list_empty($p47);
    call {:si_unique_call 88} {:cexpr "tmp___2"} boogie_si_record_i32($i48);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} ezusb_request_context_put($p30);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} ldv_spin_lock();
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p28);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i25, $i52);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i53 == 1);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb20:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $p28, $p29 := $p51, $p28;
    goto $bb20_dummy;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} ezusb_ctx_complete($p30);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} wait_for_completion($p44);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i14 == 1;
    call {:si_unique_call 77} devirtbounce(0, .str.2, 1497, 12);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call ezusb_delete_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i8 == 1;
    call {:si_unique_call 74} devirtbounce(0, .str.2, 1496, 12);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ezusb_delete_loop_$bb3();
    goto $bb3_last;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  $bb20_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_365;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const printk: ref;

axiom printk == $sub.ref(0, 133104);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 1} true;
    call {:si_unique_call 102} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 103} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 1} true;
    call {:si_unique_call 104} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 1} true;
    call {:si_unique_call 106} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 107} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 1} true;
    call {:si_unique_call 108} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 109} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 110} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 1} true;
    call {:si_unique_call 112} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 113} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const preempt_count: ref;

axiom preempt_count == $sub.ref(0, 134136);

procedure preempt_count() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.1, $M.11, $M.12, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation preempt_count() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i0 := devirtbounce.1(0, __preempt_count);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 115} {:cexpr "pfo_ret__"} boogie_si_record_i32($i0);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 2147483647);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 135168);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 117} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 136200);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 137232);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 138264);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 119} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 139296);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 120} devirtbounce.2(0, $p1, $p1);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    return;
}



const usb_unlink_urb: ref;

axiom usb_unlink_urb == $sub.ref(0, 140328);

procedure usb_unlink_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_unlink_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 1} true;
    call {:si_unique_call 121} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 122} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 141360);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.7;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} ldv_spin_unlock();
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    return;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 142392);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_sync_40: ref;

axiom ldv_del_timer_sync_40 == $sub.ref(0, 143424);

procedure ldv_del_timer_sync_40($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12;



implementation ldv_del_timer_sync_40($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i1 := del_timer_sync($p0);
    call {:si_unique_call 127} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} disable_suitable_timer_1($p0);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 144456);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ezusb_ctx_complete: ref;

axiom ezusb_ctx_complete == $sub.ref(0, 145488);

procedure ezusb_ctx_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.1, $CurrAddr, $M.11, $M.12, assertsPassed;



implementation ezusb_ctx_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p48: ref;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} ldv_spin_lock();
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} list_del_init($p3);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(184, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} spin_unlock_irqrestore($p42, $u0);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_54 := printk.ref(.str.8);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    return;

  $bb33:
    assume $i46 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} vslice_dummy_var_53 := printk.ref(.str.7);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} ezusb_complete_all($p48);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} ezusb_request_context_put($p0);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(184, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} spin_unlock_irqrestore($p17, $u0);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(292, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.1, $p18);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1792);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} ezusb_complete_all($p41);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} ezusb_request_context_put($p0);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb22:
    assume $i21 == 1;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb24;

  $bb25:
    assume $i25 == 1;
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p28 := ndev_priv($p27);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 9);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i32 == 1);
    $p37 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 2312)), $mul.ref(1408, 1)), $mul.ref(8, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.8, $p37);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 1);
    $p40 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 2312)), $mul.ref(1408, 1)), $mul.ref(8, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $M.8 := $store.i64($M.8, $p40, $i39);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} netif_wake_queue($p27);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i32 == 1;
    $p33 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 2312)), $mul.ref(1408, 1)), $mul.ref(40, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.8, $p33);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 1);
    $p36 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 2312)), $mul.ref(1408, 1)), $mul.ref(40, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $M.8 := $store.i64($M.8, $p36, $i35);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb11;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb8;

  $bb5:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i10, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb18;

  $bb16:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb20;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 520)), $mul.ref(184, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} spin_unlock_irqrestore($p8, $u0);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} ezusb_req_queue_run($p2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} ldv_spin_lock();
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const ezusb_request_context_put: ref;

axiom ezusb_request_context_put == $sub.ref(0, 146520);

procedure ezusb_request_context_put($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ezusb_request_context_put($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var vslice_dummy_var_55: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i2 := atomic_dec_and_test($p1);
    call {:si_unique_call 145} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 146} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 148} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} vslice_dummy_var_55 := ldv__builtin_expect($i16, 0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, $sub.i32(0, 115));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 152} {:cexpr "tmp___1"} boogie_si_record_i64($i25);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(160, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i28 := timer_pending($p27);
    call {:si_unique_call 155} {:cexpr "tmp___2"} boogie_si_record_i32($i28);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 157} {:cexpr "tmp___3"} boogie_si_record_i64($i32);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} usb_free_urb($p35);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(144, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} kfree($p38);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p0);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} kfree($p39);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i33 == 1;
    call {:si_unique_call 158} devirtbounce(0, .str.2, 347, 12);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call ezusb_request_context_put_loop_$bb14();
    goto $bb14_last;

  $bb8:
    assume $i26 == 1;
    call {:si_unique_call 153} devirtbounce(0, .str.2, 346, 12);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call ezusb_request_context_put_loop_$bb10();
    goto $bb10_last;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} warn_slowpath_null(.str.2, 345);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 147552);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 148584);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} free_($p0);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 149616);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    return;
}



const ndev_priv: ref;

axiom ndev_priv == $sub.ref(0, 150648);

procedure ndev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ndev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p1 := netdev_priv($p0);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p3 := wdev_priv($p2);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const orinoco_if_del: ref;

axiom orinoco_if_del == $sub.ref(0, 151680);

procedure orinoco_if_del($p0: ref);
  free requires assertsPassed;



implementation orinoco_if_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    return;
}



const free_orinocodev: ref;

axiom free_orinocodev == $sub.ref(0, 152712);

procedure free_orinocodev($p0: ref);
  free requires assertsPassed;



implementation free_orinocodev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 153744);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3264, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const wdev_priv: ref;

axiom wdev_priv == $sub.ref(0, 154776);

procedure wdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation wdev_priv($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 166} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1008)), $mul.ref(0, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p9 := wiphy_priv($p8);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 167} devirtbounce(0, .str.10, 3343, 12);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call wdev_priv_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const wiphy_priv: ref;

axiom wiphy_priv == $sub.ref(0, 155808);

procedure wiphy_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation wiphy_priv($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 170} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1768)), $mul.ref(1764, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 171} devirtbounce(0, .str.10, 3111, 12);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call wiphy_priv_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const free_: ref;

axiom free_ == $sub.ref(0, 156840);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 172} $free($p0);
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 157872);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 174} devirtbounce.3(0, $p2, $p1, $p2);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.9, $p1);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 158904);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    return;
}



const timer_pending: ref;

axiom timer_pending == $sub.ref(0, 159936);

procedure timer_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation timer_pending($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 160968);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} __list_del_entry($p0);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} INIT_LIST_HEAD($p0);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    return;
}



const ezusb_req_queue_run: ref;

axiom ezusb_req_queue_run == $sub.ref(0, 162000);

procedure ezusb_req_queue_run($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.1, $M.8, $CurrAddr, $M.11, $M.12, assertsPassed;



implementation ezusb_req_queue_run($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} ldv_spin_lock();
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(272, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i2 := list_empty($p1);
    call {:si_unique_call 180} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(256, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i5 := list_empty($p4);
    call {:si_unique_call 183} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 296)), $mul.ref(136, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(272, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} list_move_tail($p17, $p18);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(184, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} spin_unlock_irqrestore($p36, $u0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} atomic_inc($p22);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i25 := ldv_usb_submit_urb_35($p24, 32);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 187} {:cexpr "result"} boogie_si_record_i32($i25);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p10, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, 2);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p10, $mul.ref(0, 296)), $mul.ref(136, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p10, $mul.ref(0, 296)), $mul.ref(160, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.1, jiffies);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 750);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} ezusb_mod_timer($p32, $p33, $i35);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p10, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p27, 8);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(184, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} spin_unlock_irqrestore($p28, $u0);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_56 := printk.ref.i32(.str.9, $i25);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} ezusb_ctx_complete($p10);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} ezusb_request_context_put($p10);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 163032);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} netif_tx_wake_queue($p1);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    return;
}



const ezusb_complete_all: ref;

axiom ezusb_complete_all == $sub.ref(0, 164064);

procedure ezusb_complete_all($p0: ref);
  free requires assertsPassed;



implementation ezusb_complete_all($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} complete_($p0);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} complete_($p0);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} complete_($p0);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} complete_($p0);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 165096);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 166128);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(920, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 496));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 167160);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation netif_tx_wake_queue($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i2 := test_and_clear_bit(0, $p1);
    call {:si_unique_call 201} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(8, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} __netif_schedule($p5);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 168192);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 204} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 205} devirtbounce.4(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.10, $p2);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __netif_schedule: ref;

axiom __netif_schedule == $sub.ref(0, 169224);

procedure __netif_schedule($p0: ref);
  free requires assertsPassed;



implementation __netif_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    return;
}



const list_move_tail: ref;

axiom list_move_tail == $sub.ref(0, 170256);

procedure list_move_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_move_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} __list_del_entry($p0);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} list_add_tail($p0, $p1);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_35: ref;

axiom ldv_usb_submit_urb_35 == $sub.ref(0, 171288);

procedure ldv_usb_submit_urb_35($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_35($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} {:cexpr "ldv_usb_submit_urb_35:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} ldv_check_alloc_flags($i1);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i2 := usb_submit_urb($p0, $i1);
    call {:si_unique_call 211} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ezusb_mod_timer: ref;

axiom ezusb_mod_timer == $sub.ref(0, 172320);

procedure ezusb_mod_timer($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.11, $M.1, $M.12;



implementation ezusb_mod_timer($p0: ref, $p1: ref, $i2: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} {:cexpr "ezusb_mod_timer:arg:expire"} boogie_si_record_i64($i2);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} vslice_dummy_var_57 := ldv_mod_timer_33($p1, $i2);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mod_timer_33: ref;

axiom ldv_mod_timer_33 == $sub.ref(0, 173352);

procedure ldv_mod_timer_33($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.1, $M.12;



implementation ldv_mod_timer_33($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} {:cexpr "ldv_mod_timer_33:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 216} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 174384);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 218} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 1} true;
    call {:si_unique_call 219} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 220} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_1: ref;

axiom activate_pending_timer_1 == $sub.ref(0, 175416);

procedure activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.11, $M.1, $M.12;



implementation activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} {:cexpr "activate_pending_timer_1:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 222} {:cexpr "activate_pending_timer_1:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p3 := $M.11;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} vslice_dummy_var_58 := reg_timer_1($p0);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p13 := $M.11;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p14, $i1);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i7 := $M.12;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.11 := $p0;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p10 := $M.11;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p11, $i1);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 223} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(1);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const reg_timer_1: ref;

axiom reg_timer_1 == $sub.ref(0, 176448);

procedure reg_timer_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12;



implementation reg_timer_1($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $M.11 := $p0;
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 225} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(1);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 177480);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i1 := $M.7;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} ldv_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 178512);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 228} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 1} true;
    call {:si_unique_call 229} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 230} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 179544);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 231} __VERIFIER_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 180576);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 181608);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} __list_add($p0, $p3, $p1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 182640);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 183672);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 184704);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 1} true;
    call {:si_unique_call 233} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 234} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_1: ref;

axiom disable_suitable_timer_1 == $sub.ref(0, 185736);

procedure disable_suitable_timer_1($p0: ref);
  free requires assertsPassed;
  modifies $M.12;



implementation disable_suitable_timer_1($p0: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p2 := $M.11;
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i1, $i3);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 235} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(0);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 186768);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 236} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 187800);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 188832);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 189864);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p1);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 190896);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 191928);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const ezusb_hard_reset: ref;

axiom ezusb_hard_reset == $sub.ref(0, 192960);

procedure ezusb_hard_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.1, $CurrAddr;



implementation ezusb_hard_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i8: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i5 := ezusb_8051_cpucs($p4, 1);
    call {:si_unique_call 242} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i9 := ezusb_8051_cpucs($p4, 0);
    call {:si_unique_call 245} {:cexpr "retval"} boogie_si_record_i32($i9);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p12, .str);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p13, .str.74);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p14, .str.2);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p15, .str.75);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.17, $p17);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1363);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $M.17 := $store.i24($M.17, $p17, $i20);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p21, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.18, $p22);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 248} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i33 := __create_pipe($p32, 0);
    call {:si_unique_call 251} {:cexpr "tmp___1"} boogie_si_record_i32($i33);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i33, $sub.i32(0, 2147483648));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i37 := usb_control_msg($p35, $i36, $sub.i8(0, 86), 64, 0, 0, $0.ref, 0, 750);
    call {:si_unique_call 253} {:cexpr "retval"} boogie_si_record_i32($i37);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} vslice_dummy_var_62 := printk.ref.i32(.str.76, $i37);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i8 := $i37;
    goto $bb3;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} vslice_dummy_var_61 := __dynamic_netdev_dbg.ref.ref.ref($p1, $p29, .str.75);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_60 := printk.ref(.str.73);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} vslice_dummy_var_59 := printk.ref(.str.72);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb3;
}



const alloc_orinocodev: ref;

axiom alloc_orinocodev == $sub.ref(0, 193992);

procedure alloc_orinocodev($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_orinocodev($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} {:cexpr "alloc_orinocodev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p4 := external_alloc();
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 195024);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 196056);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 197088);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_urb_41: ref;

axiom ldv_usb_alloc_urb_41 == $sub.ref(0, 198120);

procedure ldv_usb_alloc_urb_41($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_41($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} {:cexpr "ldv_usb_alloc_urb_41:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 258} {:cexpr "ldv_usb_alloc_urb_41:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} ldv_check_alloc_flags($i1);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p2 := usb_alloc_urb($i0, $i1);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 199152);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 200184);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var vslice_dummy_var_63: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 263} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} ldv_check_alloc_flags($i1);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} vslice_dummy_var_63 := ldv_kmalloc_12($i0, $i1);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 201216);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 1} true;
    call {:si_unique_call 266} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 267} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ezusb_firmware_download: ref;

axiom ezusb_firmware_download == $sub.ref(0, 202248);

procedure ezusb_firmware_download($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $CurrAddr, assertsPassed;



implementation ezusb_firmware_download($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $i20: i32;
  var $i21: i1;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $i27: i1;
  var $i28: i1;
  var $i30: i1;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i16;
  var $i71: i32;
  var $i72: i16;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i29: i32;
  var $i76: i32;
  var $i77: i16;
  var $i78: i32;
  var $i79: i1;
  var $i26: i32;
  var $i80: i32;
  var $i81: i1;
  var $i19: i32;
  var $i82: i32;
  var $i7: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $p3 := kmalloc(64, 208);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p9 := $M.6;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(857, 2));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i12 := __be16_to_cpup($p11);
    call {:si_unique_call 272} {:cexpr "tmp___0"} boogie_si_record_i16($i12);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    call {:si_unique_call 273} {:cexpr "variant_offset"} boogie_si_record_i32($i13);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i15 := $M.4;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, $i13);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i20 := ezusb_8051_cpucs($p0, 1);
    call {:si_unique_call 277} {:cexpr "retval"} boogie_si_record_i32($i20);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i23 := $M.4;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 0);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i80 := ezusb_8051_cpucs($p0, 0);
    call {:si_unique_call 289} {:cexpr "retval"} boogie_si_record_i32($i80);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i80, 0);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i82 := $i80;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} kfree($p3);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i7 := $i82;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb42:
    assume $i81 == 1;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i19 := $i80;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} vslice_dummy_var_66 := printk.ref.i32(.str.83, $i19);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i82 := $i19;
    goto $bb45;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb15;

  $bb15:
    call $i27, $i28, $i30, $p32, $i33, $p34, $p36, $i37, $p38, $i39, $i40, $i41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $p58, $p59, $i61, $i62, $p63, $p64, $p65, $i66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i29, $i76, $i77, $i78, $i79, $i26, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, vslice_dummy_var_67 := ezusb_firmware_download_loop_$bb15($p0, $p2, $p3, $i13, $i27, $i28, $i30, $p32, $i33, $p34, $p36, $i37, $p38, $i39, $i40, $i41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $p58, $p59, $i61, $i62, $p63, $p64, $p65, $i66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i29, $i76, $i77, $i78, $i79, $i26, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, vslice_dummy_var_67);
    goto $bb15_last;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, 255);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i64(64, 63);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i30 == 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p36 := $M.6;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i26);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p36, $mul.ref($i37, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.1;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 280} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p3, $p38, 64, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i39 := $sge.i32($i13, $i26);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.1, $p64);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i66 := __create_pipe($p65, 0);
    call {:si_unique_call 285} {:cexpr "tmp___2"} boogie_si_record_i32($i66);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i66, $sub.i32(0, 2147483648));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i26);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i73 := usb_control_msg($p68, $i69, $sub.i8(0, 96), 64, $i72, 0, $p3, 64, 750);
    call {:si_unique_call 287} {:cexpr "retval"} boogie_si_record_i32($i73);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 0);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i75 := $i73;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i29 := $i26;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i29, 64);
    call {:si_unique_call 278} {:cexpr "addr"} boogie_si_record_i32($i76);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i77 := $M.4;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i79 := $sgt.i32($i78, $i76);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i79 == 1);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb39:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i26 := $i76;
    goto $bb39_dummy;

  $bb36:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i19 := $i75;
    goto $bb7;

  $bb27:
    assume $i39 == 1;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i26, 64);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, $i13);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb29;

  $bb30:
    assume $i41 == 1;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p42, .str);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p43, .str.81);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p44, .str.2);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p45, .str.82);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.17, $p47);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 870);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $M.17 := $store.i24($M.17, $p47, $i50);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p51, 0);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.18, $p52);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 282} {:cexpr "tmp___1"} boogie_si_record_i64($i56);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i13, $i26);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p3, $mul.ref($i62, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p63, 0);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i57 == 1;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} vslice_dummy_var_67 := __dynamic_netdev_dbg.ref.ref.ref.i32($p2, $p59, .str.82, $i13);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb24:
    assume $i30 == 1;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p32 := $M.6;
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i26);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 279} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p3, $p34, 64, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i28 := $sle.i32($i26, 767);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb19;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i29 := $i26;
    goto $bb22;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb7;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} vslice_dummy_var_65 := printk.ref.i32(.str.80, $i13);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} vslice_dummy_var_64 := printk.ref(.str.79);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb39_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;
}



const ezusb_init: ref;

axiom ezusb_init == $sub.ref(0, 203280);

procedure ezusb_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.11, $M.12, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation ezusb_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i36: i32;
  var $i37: i1;
  var $i40: i32;
  var $i41: i1;
  var $i39: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i4 := preempt_count();
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 292} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 2096896);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 294} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p3);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 297} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 520)), $mul.ref(512, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, 0);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32(40, $i22);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p20, $mul.ref($i24, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} iowrite16(32031, $p25);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32(32, $i29);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p27, $mul.ref($i31, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} iowrite16(1793, $p32);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} usb_kill_urb($p34);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} vslice_dummy_var_68 := ezusb_submit_in_urb($p3);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i36 := ezusb_write_ltv($p0, 0, 1794, 2, .str.27);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 304} {:cexpr "retval"} boogie_si_record_i32($i36);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i40 := ezusb_docmd_wait($p0, 0, 0, $0.ref);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 307} {:cexpr "retval"} boogie_si_record_i32($i40);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_70 := printk.ref.i32(.str.29, $i40);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i39 := $i40;
    goto $bb11;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i37 == 1;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} vslice_dummy_var_69 := printk.ref.i32(.str.28, $i36);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i39 := $i36;
    goto $bb11;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    call {:si_unique_call 298} devirtbounce(0, .str.2, 1398, 12);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call ezusb_init_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 295} devirtbounce(0, .str.2, 1397, 12);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ezusb_init_loop_$bb3();
    goto $bb3_last;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const orinoco_init: ref;

axiom orinoco_init == $sub.ref(0, 204312);

procedure orinoco_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation orinoco_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 1} true;
    call {:si_unique_call 309} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 310} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const orinoco_if_add: ref;

axiom orinoco_if_add == $sub.ref(0, 205344);

procedure orinoco_if_add($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation orinoco_if_add($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 311} {:cexpr "orinoco_if_add:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 312} {:cexpr "orinoco_if_add:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 1} true;
    call {:si_unique_call 313} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 314} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 206376);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    return;
}



const iowrite16: ref;

axiom iowrite16 == $sub.ref(0, 207408);

procedure iowrite16($i0: i16, $p1: ref);
  free requires assertsPassed;



implementation iowrite16($i0: i16, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} {:cexpr "iowrite16:arg:arg0"} boogie_si_record_i16($i0);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    return;
}



const ezusb_submit_in_urb: ref;

axiom ezusb_submit_in_urb == $sub.ref(0, 208440);

procedure ezusb_submit_in_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.1, $CurrAddr, assertsPassed;



implementation ezusb_submit_in_urb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i30: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, $sub.i32(0, 115));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(504, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p0);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} usb_fill_bulk_urb($p32, $p34, $i36, $p5, 2048, ezusb_bulk_in_callback, $p37);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p40, 0);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i43 := ldv_usb_submit_urb_39($p42, 32);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 322} {:cexpr "retval"} boogie_si_record_i32($i43);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $i43;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb8:
    assume $i44 == 1;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_72 := printk.ref.ref.i32(.str.32, .str.30, $i43);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p11, .str);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p12, .str.30);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p13, .str.2);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p14, .str.31);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.17, $p16);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 798);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $M.17 := $store.i24($M.17, $p16, $i19);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p20, 0);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.18, $p21);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 318} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 16);
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} vslice_dummy_var_71 := __dynamic_netdev_dbg.ref.ref.ref($p1, $p28, .str.31);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ezusb_write_ltv: ref;

axiom ezusb_write_ltv == $sub.ref(0, 209472);

procedure ezusb_write_ltv($p0: ref, $i1: i32, $i2: i16, $i3: i16, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.7, $M.8, assertsPassed, $CurrAddr;



implementation ezusb_write_ltv($p0: ref, $i1: i32, $i2: i16, $i3: i16, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} {:cexpr "ezusb_write_ltv:arg:bap"} boogie_si_record_i32($i1);
    call {:si_unique_call 325} {:cexpr "ezusb_write_ltv:arg:rid"} boogie_si_record_i16($i2);
    call {:si_unique_call 326} {:cexpr "ezusb_write_ltv:arg:length"} boogie_si_record_i16($i3);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i3);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i3);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 2);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    call {:si_unique_call 327} {:cexpr "length"} boogie_si_record_i16($i16);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i2);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p21 := ezusb_alloc_ctx($p7, $i20, 1808);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i2);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1792);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := 2;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i16);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i26);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i31 := ezusb_access_ltv($p7, $p21, $i28, $p4, $i30, $0.ref, 0, $0.ref);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 330} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i10 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb13;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const ezusb_docmd_wait: ref;

axiom ezusb_docmd_wait == $sub.ref(0, 210504);

procedure ezusb_docmd_wait($p0: ref, $i1: i16, $i2: i16, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.11, $M.12, $CurrAddr, $M.7, $M.8, assertsPassed;



implementation ezusb_docmd_wait($p0: ref, $i1: i16, $i2: i16, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $i39: i32;
  var $i37: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 333} {:cexpr "ezusb_docmd_wait:arg:cmd"} boogie_si_record_i16($i1);
    call {:si_unique_call 334} {:cexpr "ezusb_docmd_wait:arg:parm0"} boogie_si_record_i16($i2);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 2));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p9, $i1);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 2));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p10, $i2);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(2, 2));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p11, 0);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(3, 2));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p12, 0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p13, .str);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p14, .str.1);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p15, .str.2);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p16, .str.3);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.17, $p18);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 1076);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $M.17 := $store.i24($M.17, $p18, $i21);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p22, 0);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.18, $p23);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 336} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $p34 := ezusb_alloc_ctx($p8, 2144, 1808);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p4);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i39 := ezusb_access_ltv($p8, $p34, 8, $p38, 2, $0.ref, 0, $0.ref);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 340} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i37 := $i39;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i36 == 1;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i1);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i2);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} vslice_dummy_var_73 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p5, $p30, .str.3, $i31, $i32);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __dynamic_netdev_dbg: ref;

axiom __dynamic_netdev_dbg == $sub.ref(0, 211536);

procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 1} true;
    call {:si_unique_call 341} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 342} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 1} true;
    call {:si_unique_call 343} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 344} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 1} true;
    call {:si_unique_call 345} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 346} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 1} true;
    call {:si_unique_call 347} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 348} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ezusb_alloc_ctx: ref;

axiom ezusb_alloc_ctx == $sub.ref(0, 212568);

procedure ezusb_alloc_ctx($p0: ref, $i1: i16, $i2: i16) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.12, assertsPassed, $CurrAddr;



implementation ezusb_alloc_ctx($p0: ref, $i1: i16, $i2: i16) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $p7: ref;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} {:cexpr "ezusb_alloc_ctx:arg:out_rid"} boogie_si_record_i16($i1);
    call {:si_unique_call 350} {:cexpr "ezusb_alloc_ctx:arg:in_rid"} boogie_si_record_i16($i2);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p3 := kzalloc(296, 32);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p8 := kmalloc(2048, 32);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(144, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p8);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(144, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p16 := ldv_usb_alloc_urb_34(0, 32);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, $p16);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(136, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, $p0);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p27, 0);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(292, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p28, $i1);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(294, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p29, $i2);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} atomic_set($p30, 1);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} init_completion($p31);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(160, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} vslice_dummy_var_74 := reg_timer_1($p32);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(160, 1)), $mul.ref(32, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p35, ezusb_request_timerfn);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p4);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(160, 1)), $mul.ref(40, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p38, $i36);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 296)), $mul.ref(144, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} kfree($p24);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p4);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} kfree($p25);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} kfree($p15);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const ezusb_access_ltv: ref;

axiom ezusb_access_ltv == $sub.ref(0, 213600);

procedure ezusb_access_ltv($p0: ref, $p1: ref, $i2: i16, $p3: ref, $i4: i16, $p5: ref, $i6: i32, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.11, $M.12, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation ezusb_access_ltv($p0: ref, $p1: ref, $i2: i16, $p3: ref, $i4: i16, $p5: ref, $i6: i32, $p7: ref) returns ($r: i32)
{
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i16;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i16;
  var $i36: i32;
  var $i37: i16;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i8;
  var $i61: i8;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p84: ref;
  var $i85: i16;
  var $i86: i32;
  var $i87: i1;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $p93: ref;
  var $i94: i1;
  var $i95: i1;
  var $i97: i32;
  var $i83: i32;
  var $p99: ref;
  var $i100: i16;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i16;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i16;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i16;
  var $i120: i32;
  var $p121: ref;
  var $i122: i32;
  var $i124: i64;
  var $i125: i1;
  var $i126: i1;
  var $i127: i32;
  var $i128: i64;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $i134: i16;
  var $i20: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} {:cexpr "ezusb_access_ltv:arg:length"} boogie_si_record_i16($i2);
    call {:si_unique_call 361} {:cexpr "ezusb_access_ltv:arg:frame_type"} boogie_si_record_i16($i4);
    call {:si_unique_call 362} {:cexpr "ezusb_access_ltv:arg:ans_size"} boogie_si_record_i32($i6);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i8 := preempt_count();
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 364} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i9, 983040);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 366} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, $sub.i32(0, 115));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(288, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} spin_lock_bh($p27);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(144, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i2);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(292, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.1, $p32);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i4);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(512, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i42 := ezusb_fill_req($p29, $i31, $i35, $p3, $i37, $i41);
    call {:si_unique_call 372} {:cexpr "req_size"} boogie_si_record_i32($i42);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(508, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(144, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p1);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} usb_fill_bulk_urb($p44, $p46, $i48, $p51, $i42, ezusb_request_out_callback, $p52);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(294, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.1, $p53);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} ezusb_req_enqueue_run($p0, $p1);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(288, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} spin_unlock_bh($p63);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(294, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.1, $p64);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.1, $p68);
    call {:si_unique_call 378} {:cexpr "state"} boogie_si_record_i32($i69);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i69, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i69, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i69, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i69, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} vslice_dummy_var_77 := printk.ref.ref.i32(.str.13, .str.12, $i69);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(512, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.1, $p89);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_76 := printk.ref.i32.i32(.str.14, $i69, $i91);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(512, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p93, 0);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i69, 5);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb48, $bb50;

  $bb50:
    assume !($i94 == 1);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i69, 7);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i95 == 1);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_79 := printk.ref(.str.16);
    assume {:verifier.code 0} true;
    $i97 := $sub.i32(0, 14);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i20 := $i97;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} ezusb_request_context_put($p1);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_78 := printk.ref(.str.15);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32(0, 110);
    goto $bb53;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb49;

  $bb26:
    assume $i73 == 1;
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, $p79);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.1, $p81);
    call {:si_unique_call 380} {:cexpr "retval"} boogie_si_record_i32($i82);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i83 := $i82;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(294, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.1, $p99);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i20 := $i83;
    goto $bb7;

  $bb54:
    assume $i102 == 1;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(144, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.1, $p103);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 14)), $mul.ref(10, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.1, $p105);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    $i114 := 14;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(152, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.1, $p115);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, $i114);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p5);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, 0);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p7);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb68:
    assume $i132 == 1;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p104, $mul.ref(0, 14)), $mul.ref(10, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i134 := $load.i16($M.1, $p133);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p7, $i134);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb62:
    assume $i125 == 1;
    call {:si_unique_call 386} {:cexpr "ezusb_access_ltv:arg:_min2"} boogie_si_record_i32($i6);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i126 := $ult.i32($i114, $i6);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i126 == 1);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i127 := $i6;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i128 := $zext.i32.i64($i127);
    call {:si_unique_call 387} {:cexpr "__len"} boogie_si_record_i64($i128);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p104, $mul.ref(0, 14)), $mul.ref(14, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.1;
    cmdloc_dummy_var_7 := $M.1;
    call {:si_unique_call 388} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p5, $p130, $i128, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_8;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i126 == 1;
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i127 := $i114;
    goto $bb66;

  $bb59:
    assume $i117 == 1;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(294, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i119 := $load.i16($M.1, $p118);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i119);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(152, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.1, $p121);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vslice_dummy_var_80 := printk.ref.ref.i32.i32.i32(.str.17, .str.12, $i120, $i114, $i122);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 5);
    goto $bb7;

  $bb56:
    assume $i108 == 1;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p104, $mul.ref(0, 14)), $mul.ref(10, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.1, $p109);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i110);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i111, 6);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i113 := $mul.i32($i112, 2);
    call {:si_unique_call 384} {:cexpr "exp_len"} boogie_si_record_i32($i113);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i114 := $i113;
    goto $bb58;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb24;

  $bb21:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i69, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb32;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb30;

  $bb19:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i69, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i69, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb37;

  $bb35:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i69, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb28;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(294, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i85 := $load.i16($M.1, $p84);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 0);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i87 == 1;
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i83 := 0;
    goto $bb43;

  $bb33:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i69, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb28;

  $bb41:
    assume $i78 == 1;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb15:
    assume $i67 == 1;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} ezusb_req_ctx_wait($p0, $p1);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i56 == 1;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(512, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.1, $p57);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i61 := ezusb_reply_inc($i60);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(512, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p62, $i61);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} vslice_dummy_var_75 := printk.ref.ref(.str.11, .str.12);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 19);
    goto $bb7;

  $bb1:
    assume $i15 == 1;
    call {:si_unique_call 367} devirtbounce(0, .str.2, 907, 12);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ezusb_access_ltv_loop_$bb3();
    goto $bb3_last;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 214632);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} ldv_spin_lock();
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} ldv_spin_lock_bh_2($p0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    return;
}



const ezusb_fill_req: ref;

axiom ezusb_fill_req == $sub.ref(0, 215664);

procedure ezusb_fill_req($p0: ref, $i1: i16, $i2: i16, $p3: ref, $i4: i16, $i5: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation ezusb_fill_req($p0: ref, $i1: i16, $i2: i16, $p3: ref, $i4: i16, $i5: i8) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $p20: ref;
  var $i21: i16;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i16;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} {:cexpr "ezusb_fill_req:arg:length"} boogie_si_record_i16($i1);
    call {:si_unique_call 392} {:cexpr "ezusb_fill_req:arg:rid"} boogie_si_record_i16($i2);
    call {:si_unique_call 393} {:cexpr "ezusb_fill_req:arg:frame_type"} boogie_si_record_i16($i4);
    call {:si_unique_call 394} {:cexpr "ezusb_fill_req:arg:reply_count"} boogie_si_record_i8($i5);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i1);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 14);
    call {:si_unique_call 395} {:cexpr "total_size"} boogie_si_record_i32($i7);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 2048);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 397} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 14)), $mul.ref(0, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p13, 528);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 14)), $mul.ref(2, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, $i5);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 14)), $mul.ref(3, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 0);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 14)), $mul.ref(4, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p16, $i4);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i1);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 4);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 14)), $mul.ref(6, 1));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p20, $i19);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i21 := build_crc($p0);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 14)), $mul.ref(8, 1));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p22, $i21);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i1);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i25 := $sdiv.i32($i24, 2);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 1);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 14)), $mul.ref(10, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p30, $i29);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p31, $i2);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p3);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i64($i1);
    call {:si_unique_call 400} {:cexpr "__len"} boogie_si_record_i64($i34);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 14)), $mul.ref(14, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.1;
    cmdloc_dummy_var_10 := $M.1;
    call {:si_unique_call 401} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p36, $p3, $i34, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_11;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 398} devirtbounce(0, .str.2, 777, 12);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ezusb_fill_req_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ezusb_request_out_callback: ref;

axiom ezusb_request_out_callback == $sub.ref(0, 216696);

procedure ezusb_request_out_callback($p0: ref);



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 217728);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 403} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p1);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, $i2);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p3);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, $i4);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $p5);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p6);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    return;
}



const ezusb_reply_inc: ref;

axiom ezusb_reply_inc == $sub.ref(0, 218760);

procedure ezusb_reply_inc($i0: i8) returns ($r: i8);
  free requires assertsPassed;



implementation ezusb_reply_inc($i0: i8) returns ($r: i8)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} {:cexpr "ezusb_reply_inc:arg:count"} boogie_si_record_i8($i0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i2 := $ule.i32($i1, 126);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const ezusb_req_enqueue_run: ref;

axiom ezusb_req_enqueue_run == $sub.ref(0, 219792);

procedure ezusb_req_enqueue_run($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.7, $M.1, $M.8, $CurrAddr, $M.11, $M.12, assertsPassed;



implementation ezusb_req_enqueue_run($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} ldv_spin_lock();
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(136, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} atomic_inc($p9);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(256, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} list_add_tail($p10, $p11);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(184, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} spin_unlock_irqrestore($p12, $u0);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, 1);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} ezusb_req_queue_run($p0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(184, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} spin_unlock_irqrestore($p8, $u0);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 220824);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} ldv_spin_unlock();
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} ldv_spin_unlock_bh_6($p0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    return;
}



const ezusb_req_ctx_wait: ref;

axiom ezusb_req_ctx_wait == $sub.ref(0, 221856);

procedure ezusb_req_ctx_wait($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.11, $M.12, $CurrAddr, $M.7, $M.8, assertsPassed;



implementation ezusb_req_ctx_wait($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $i18: i32;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $i37: i1;
  var $i38: i64;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i10 := preempt_count();
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 415} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i11, 65280);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i13 == 1);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb30:
    assume $i26 == 1;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} INIT_LIST_HEAD($p27);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, 0);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i31 := prepare_to_wait_event($p30, $p2, 1);
    call {:si_unique_call 420} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.1, $p33);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i35 == 1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i36 := $i31;
    goto $bb35;

  $bb35:
    call $i36, $i37, $i38, $i39, $i40 := ezusb_req_ctx_wait_loop_$bb35($p2, $p30, $p33, $i36, $i37, $i38, $i39, $i40);
    goto $bb35_last;

  $bb38:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} schedule();
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i38 := prepare_to_wait_event($p30, $p2, 1);
    call {:si_unique_call 424} {:cexpr "tmp___0"} boogie_si_record_i64($i38);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p33);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb42;

  $bb42:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i38;
    goto $bb42_dummy;

  $bb36:
    assume $i40 == 1;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} finish_wait($p42, $p2);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb39:
    assume $i37 == 1;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb33;

  $bb16:
    assume $i13 == 1;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb18:
    assume $i17 == 1;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i18 := 3000;
    goto $bb21;

  $bb21:
    call $i19, $i20, $i18, $i21, $i22 := ezusb_req_ctx_wait_loop_$bb21($p15, $i19, $i20, $i18, $i21, $i22);
    goto $bb21_last;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i18, 1);
    call {:si_unique_call 416} {:cexpr "msecs"} boogie_si_record_i32($i21);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i18, 0);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i22 == 1);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume $i22 == 1;
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} __const_udelay(4295000);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p15);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i20 == 1);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i21;
    goto $bb23_dummy;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb14:
    assume $i9 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb42_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1774;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 222888);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 223920);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 224952);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 426} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 1} true;
    call {:si_unique_call 427} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 428} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 225984);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 227016);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_bh_6: ref;

axiom ldv_spin_unlock_bh_6 == $sub.ref(0, 228048);

procedure ldv_spin_unlock_bh_6($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_bh_6($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} _raw_spin_unlock_bh($p2);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 229080);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_36: ref;

axiom ldv_del_timer_36 == $sub.ref(0, 230112);

procedure ldv_del_timer_36($p0: ref) returns ($r: i32);



const del_timer: ref;

axiom del_timer == $sub.ref(0, 231144);

procedure del_timer($p0: ref) returns ($r: i32);



const build_crc: ref;

axiom build_crc == $sub.ref(0, 232176);

procedure build_crc($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation build_crc($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i16;
  var $i4: i32;
  var $i5: i16;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i8;
  var $i51: i16;
  var $i52: i32;
  var $i53: i32;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i58: i8;
  var $i59: i16;
  var $i60: i32;
  var $i61: i32;
  var $i6: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i16($i2);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    call {:si_unique_call 430} {:cexpr "crc"} boogie_si_record_i16($i5);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i5);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 1);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i16($i10);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i8, $i12);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 1);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i16($i18);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i16, $i20);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32($i23, 1);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i16($i26);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i24, $i28);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i32 := $shl.i32($i31, 1);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i16($i34);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i32, $i36);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32($i39, 1);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i16($i42);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i40, $i44);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i48 := $shl.i32($i47, 1);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p1, $mul.ref(6, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.1, $p49);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i16($i50);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i48, $i52);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i56 := $shl.i32($i55, 1);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p1, $mul.ref(7, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.1, $p57);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i16($i58);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i56, $i60);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i61);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_spin_lock_bh_2: ref;

axiom ldv_spin_lock_bh_2 == $sub.ref(0, 233208);

procedure ldv_spin_lock_bh_2($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_bh_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} _raw_spin_lock_bh($p2);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 234240);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 235272);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 433} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} ldv_check_alloc_flags($i1);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_34: ref;

axiom ldv_usb_alloc_urb_34 == $sub.ref(0, 236304);

procedure ldv_usb_alloc_urb_34($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_34($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} {:cexpr "ldv_usb_alloc_urb_34:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 436} {:cexpr "ldv_usb_alloc_urb_34:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} ldv_check_alloc_flags($i1);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p2 := usb_alloc_urb($i0, $i1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 237336);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i1);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    return;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 238368);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, 0);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} __init_waitqueue_head($p3, .str.4, $p1);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    return;
}



const ezusb_request_timerfn: ref;

axiom ezusb_request_timerfn == $sub.ref(0, 239400);

procedure ezusb_request_timerfn($i0: i64);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.8, $CurrAddr, $M.11, $M.12, assertsPassed;



implementation ezusb_request_timerfn($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 443} {:cexpr "ezusb_request_timerfn:arg:_ctx"} boogie_si_record_i64($i0);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, $i6);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i12 := usb_unlink_urb($p11);
    call {:si_unique_call 445} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, $sub.i32(0, 115));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p15, 7);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p16, .str);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p17, .str.5);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p18, .str.2);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p19, .str.6);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.23, $p21);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 371);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $M.23 := $store.i24($M.23, $p21, $i24);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p25, 0);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.24, $p26);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 447} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} atomic_inc($p38);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(120, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p39, 1);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} ezusb_ctx_complete($p2);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} ezusb_request_context_put($p2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_81 := __dynamic_dev_dbg.ref.ref.ref($p1, $p36, .str.6);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p14, 5);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 240432);

procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 452} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 453} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 241464);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    return;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 242496);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 455} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $p2 := external_alloc();
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 243528);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 1} true;
    call {:si_unique_call 457} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 458} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ezusb_bulk_in_callback: ref;

axiom ezusb_bulk_in_callback == $sub.ref(0, 244560);

procedure ezusb_bulk_in_callback($p0: ref);



const ldv_usb_submit_urb_39: ref;

axiom ldv_usb_submit_urb_39 == $sub.ref(0, 245592);

procedure ldv_usb_submit_urb_39($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_39($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} {:cexpr "ldv_usb_submit_urb_39:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} ldv_check_alloc_flags($i1);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i2 := usb_submit_urb($p0, $i1);
    call {:si_unique_call 462} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const ezusb_request_in_callback: ref;

axiom ezusb_request_in_callback == $sub.ref(0, 246624);

procedure ezusb_request_in_callback($p0: ref, $p1: ref);



const __orinoco_ev_rx: ref;

axiom __orinoco_ev_rx == $sub.ref(0, 247656);

procedure __orinoco_ev_rx($p0: ref, $p1: ref);



const __orinoco_ev_info: ref;

axiom __orinoco_ev_info == $sub.ref(0, 248688);

procedure __orinoco_ev_info($p0: ref, $p1: ref);



const ldv_del_timer_37: ref;

axiom ldv_del_timer_37 == $sub.ref(0, 249720);

procedure ldv_del_timer_37($p0: ref) returns ($r: i32);



const ldv_del_timer_38: ref;

axiom ldv_del_timer_38 == $sub.ref(0, 250752);

procedure ldv_del_timer_38($p0: ref) returns ($r: i32);



const __be16_to_cpup: ref;

axiom __be16_to_cpup == $sub.ref(0, 251784);

procedure __be16_to_cpup($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __be16_to_cpup($p0: ref) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i1 := __swab16p($p0);
    call {:si_unique_call 464} {:cexpr "tmp"} boogie_si_record_i16($i1);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ezusb_8051_cpucs: ref;

axiom ezusb_8051_cpucs == $sub.ref(0, 252816);

procedure ezusb_8051_cpucs($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ezusb_8051_cpucs($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i9: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 466} {:cexpr "ezusb_8051_cpucs:arg:reset"} boogie_si_record_i32($i1);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2, $i3);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i12 := __create_pipe($p11, 0);
    call {:si_unique_call 469} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i12, $sub.i32(0, 2147483648));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i16 := usb_control_msg($p14, $i15, $sub.i8(0, 96), 64, 32658, 0, $p2, 1, 750);
    call {:si_unique_call 471} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_82 := printk.ref.ref(.str.77, .str.78);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 253848);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 472} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 473} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 474} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 475} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 476} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 477} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 478} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 1} true;
    call {:si_unique_call 479} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 480} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const __swab16p: ref;

axiom __swab16p == $sub.ref(0, 254880);

procedure __swab16p($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __swab16p($p0: ref) returns ($r: i16)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i16;
  var $i4: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.1, $p0);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i4 := __fswab16($i3);
    call {:si_unique_call 482} {:cexpr "tmp"} boogie_si_record_i16($i4);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 255912);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const ldv_kmalloc_12: ref;

axiom ldv_kmalloc_12 == $sub.ref(0, 256944);

procedure ldv_kmalloc_12($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_kmalloc_12($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} {:cexpr "ldv_kmalloc_12:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 485} {:cexpr "ldv_kmalloc_12:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ezusb_doicmd_wait: ref;

axiom ezusb_doicmd_wait == $sub.ref(0, 257976);

procedure ezusb_doicmd_wait($p0: ref, $i1: i16, $i2: i16, $i3: i16, $i4: i16, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.11, $M.12, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation ezusb_doicmd_wait($p0: ref, $i1: i16, $i2: i16, $i3: i16, $i4: i16, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $i43: i32;
  var $i41: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 489} {:cexpr "ezusb_doicmd_wait:arg:cmd"} boogie_si_record_i16($i1);
    call {:si_unique_call 490} {:cexpr "ezusb_doicmd_wait:arg:parm0"} boogie_si_record_i16($i2);
    call {:si_unique_call 491} {:cexpr "ezusb_doicmd_wait:arg:parm1"} boogie_si_record_i16($i3);
    call {:si_unique_call 492} {:cexpr "ezusb_doicmd_wait:arg:parm2"} boogie_si_record_i16($i4);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 2));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p11, $i1);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(1, 2));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p12, $i2);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(2, 2));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p13, $i3);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(3, 2));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p14, $i4);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p15, .str);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p16, .str.20);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p17, .str.2);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p18, .str.21);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.17, $p20);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 1055);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $M.17 := $store.i24($M.17, $p20, $i23);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p24, 0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.18, $p25);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 494} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p38 := ezusb_alloc_ctx($p10, 2144, 1808);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p6);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i43 := ezusb_access_ltv($p10, $p38, 8, $p42, 2, $0.ref, 0, $0.ref);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 498} {:cexpr "tmp___0"} boogie_si_record_i32($i43);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i41 := $i43;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i40 == 1;
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p10, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i1);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i2);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i3);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i4);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} vslice_dummy_var_83 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32($p7, $p32, .str.21, $i33, $i34, $i35, $i36);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ezusb_allocate: ref;

axiom ezusb_allocate == $sub.ref(0, 259008);

procedure ezusb_allocate($p0: ref, $i1: i16, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation ezusb_allocate($p0: ref, $i1: i16, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} {:cexpr "ezusb_allocate:arg:size"} boogie_si_record_i16($i1);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p2, 1792);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ezusb_read_ltv: ref;

axiom ezusb_read_ltv == $sub.ref(0, 260040);

procedure ezusb_read_ltv($p0: ref, $i1: i32, $i2: i16, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.7, $M.8, assertsPassed, $CurrAddr;



implementation ezusb_read_ltv($p0: ref, $i1: i32, $i2: i16, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} {:cexpr "ezusb_read_ltv:arg:bap"} boogie_si_record_i32($i1);
    call {:si_unique_call 501} {:cexpr "ezusb_read_ltv:arg:rid"} boogie_si_record_i16($i2);
    call {:si_unique_call 502} {:cexpr "ezusb_read_ltv:arg:bufsize"} boogie_si_record_i32($i3);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i3, 1);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i2);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i2);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $p16 := ezusb_alloc_ctx($p8, $i13, $i15);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i19 := ezusb_access_ltv($p8, $p16, 0, $0.ref, 2, $p5, $i3, $p4);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 505} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i11 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const ezusb_bap_pread: ref;

axiom ezusb_bap_pread == $sub.ref(0, 261072);

procedure ezusb_bap_pread($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i16, $i5: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation ezusb_bap_pread($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i16, $i5: i16) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i27: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} {:cexpr "ezusb_bap_pread:arg:bap"} boogie_si_record_i32($i1);
    call {:si_unique_call 507} {:cexpr "ezusb_bap_pread:arg:len"} boogie_si_record_i32($i3);
    call {:si_unique_call 508} {:cexpr "ezusb_bap_pread:arg:id"} boogie_si_record_i16($i4);
    call {:si_unique_call 509} {:cexpr "ezusb_bap_pread:arg:offset"} boogie_si_record_i16($i5);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    call {:si_unique_call 510} {:cexpr "actual_length"} boogie_si_record_i32($i17);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i4);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1793);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i4);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i32($i33, 61439);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i4);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} vslice_dummy_var_85 := printk.ref.i32(.str.24, $i50);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i4);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i36 := $ule.i32($i35, 62207);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb10;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i64($i5);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i3);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i37, $i38);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 10);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i17);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i64($i40, $i41);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i3);
    call {:si_unique_call 516} {:cexpr "__len___0"} boogie_si_record_i64($i44);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p13, $mul.ref(0, 14)), $mul.ref(14, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i64($i5);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, $sub.i64(0, 4));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p46, $mul.ref($i48, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.1;
    cmdloc_dummy_var_16 := $M.1;
    call {:si_unique_call 517} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p2, $p49, $i44, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_17;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb5;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_86 := printk.ref(.str.23);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 14);
    goto $bb5;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i64($i5);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i3);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i20, $i21);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 14);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i17);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i64($i23, $i24);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i3);
    call {:si_unique_call 512} {:cexpr "__len"} boogie_si_record_i64($i28);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p13, $mul.ref(0, 14)), $mul.ref(14, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i64($i5);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p30, $mul.ref($i31, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.1;
    cmdloc_dummy_var_13 := $M.1;
    call {:si_unique_call 513} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p2, $p32, $i28, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_14;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb5;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_84 := printk.ref(.str.22);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb5;
}



const ezusb_read_pda: ref;

axiom ezusb_read_pda == $sub.ref(0, 262104);

procedure ezusb_read_pda($p0: ref, $p1: ref, $i2: i32, $i3: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation ezusb_read_pda($p0: ref, $p1: ref, $i2: i32, $i3: i16) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 519} {:cexpr "ezusb_read_pda:arg:pda_addr"} boogie_si_record_i32($i2);
    call {:si_unique_call 520} {:cexpr "ezusb_read_pda:arg:pda_len"} boogie_si_record_i16($i3);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i2);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 2));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p9, $i8);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i3);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i10, 4);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p13, $i12);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $p14 := ezusb_alloc_ctx($p7, 2048, 2048);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i3);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i18, 2);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p1, $i20);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p1, $mul.ref(1, 2));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p21, 2048);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p4);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(2, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i3);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, $sub.i32(0, 4));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i27 := ezusb_access_ltv($p7, $p14, 4, $p22, 2, $p24, $i26, $0.ref);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 523} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i17 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const ezusb_program_init: ref;

axiom ezusb_program_init == $sub.ref(0, 263136);

procedure ezusb_program_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation ezusb_program_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 525} {:cexpr "ezusb_program_init:arg:main___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i1);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $p6 := ezusb_alloc_ctx($p5, 2130, 1808);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i11 := ezusb_access_ltv($p5, $p6, 4, $p10, 2, $0.ref, 0, $0.ref);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 528} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const ezusb_program_end: ref;

axiom ezusb_program_end == $sub.ref(0, 264168);

procedure ezusb_program_end($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.7, $M.8, assertsPassed, $CurrAddr;



implementation ezusb_program_end($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p4 := ezusb_alloc_ctx($p3, 2133, 1808);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i8 := ezusb_access_ltv($p3, $p4, 0, $0.ref, 2, $0.ref, 0, $0.ref);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 531} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const ezusb_program: ref;

axiom ezusb_program == $sub.ref(0, 265200);

procedure ezusb_program($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.1, $M.11, $M.12, $CurrAddr, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.7, $M.8, assertsPassed;



implementation ezusb_program($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $i32: i32;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i44: i32;
  var $i45: i32;
  var $i43: i32;
  var $i46: i1;
  var $i10: i32;
  var $i11: i32;
  var $i47: i32;
  var $i9: i32;
  var $i38: i32;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 533} {:cexpr "ezusb_program:arg:addr"} boogie_si_record_i32($i2);
    call {:si_unique_call 534} {:cexpr "ezusb_program:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32(2034, $i3);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i6 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} {:cexpr "ezusb_program:arg:ch_addr"} boogie_si_record_i32($i2);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i2, $i3);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, $i2);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i38 := $i9;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i10, $i11 := $i6, $i2;
    goto $bb7;

  $bb7:
    call $p12, $p13, $p14, $p15, $p16, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i32, $i33, $p34, $i35, $i36, $i37, $i39, $i40, $i41, $i42, $i44, $i45, $i43, $i46, $i10, $i11, $i47, vslice_dummy_var_87 := ezusb_program_loop_$bb7($p0, $p1, $i2, $i3, $p4, $i7, $p12, $p13, $p14, $p15, $p16, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i32, $i33, $p34, $i35, $i36, $i37, $i39, $i40, $i41, $i42, $i44, $i45, $i43, $i46, $i10, $i11, $i47, vslice_dummy_var_87);
    goto $bb7_last;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p12, .str);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p13, .str.25);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p14, .str.2);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p15, .str.26);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.33, $p17);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1212);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $M.33 := $store.i24($M.33, $p17, $i20);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p21, 0);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.34, $p22);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 537} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i11, $i2);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p1, $mul.ref($i33, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i35 := ezusb_program_bytes($p0, $p34, $i11, $i10);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 540} {:cexpr "err"} boogie_si_record_i32($i35);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i37 := $i35;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i11, $i10);
    call {:si_unique_call 541} {:cexpr "ch_addr"} boogie_si_record_i32($i39);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i2, $i3);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, $i39);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i42 := $ult.i32(2034, $i41);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i2, $i3);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i44, $i39);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i43 := $i45;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i32($i7, $i39);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i47 := $i35;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i9 := $i47;
    goto $bb6;

  $bb19:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i10, $i11 := $i43, $i39;
    goto $bb19_dummy;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i43 := 2034;
    goto $bb18;

  $bb12:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb14;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i11, $i2);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p1, $mul.ref($i29, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_87 := __dynamic_pr_debug.ref.ref.i32.i32.ref($p4, .str.26, $i10, $i11, $p30);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i6 := 2034;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2270;
}



const ezusb_lock_irqsave: ref;

axiom ezusb_lock_irqsave == $sub.ref(0, 266232);

procedure ezusb_lock_irqsave($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ezusb_lock_irqsave($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} spin_lock_bh($p0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    return;
}



const ezusb_unlock_irqrestore: ref;

axiom ezusb_unlock_irqrestore == $sub.ref(0, 267264);

procedure ezusb_unlock_irqrestore($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ezusb_unlock_irqrestore($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} spin_unlock_bh($p0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    return;
}



const ezusb_lock_irq: ref;

axiom ezusb_lock_irq == $sub.ref(0, 268296);

procedure ezusb_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ezusb_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} spin_lock_bh($p0);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    return;
}



const ezusb_unlock_irq: ref;

axiom ezusb_unlock_irq == $sub.ref(0, 269328);

procedure ezusb_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation ezusb_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} spin_unlock_bh($p0);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 270360);

procedure __dynamic_pr_debug.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 1} true;
    call {:si_unique_call 546} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 547} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ezusb_program_bytes: ref;

axiom ezusb_program_bytes == $sub.ref(0, 271392);

procedure ezusb_program_bytes($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation ezusb_program_bytes($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i16;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 549} {:cexpr "ezusb_program_bytes:arg:addr"} boogie_si_record_i32($i2);
    call {:si_unique_call 550} {:cexpr "ezusb_program_bytes:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, $i2);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $p8 := ezusb_alloc_ctx($p7, 2131, 1808);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i13 := ezusb_access_ltv($p7, $p8, 4, $p12, 2, $0.ref, 0, $0.ref);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 553} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $p15 := ezusb_alloc_ctx($p7, 2132, 1808);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i3);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i21 := ezusb_access_ltv($p7, $p15, $i20, $p1, 2, $0.ref, 0, $0.ref);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 556} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i11 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb3;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const orinoco_open: ref;

axiom orinoco_open == $sub.ref(0, 272424);

procedure orinoco_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation orinoco_open($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 557} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 558} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const orinoco_stop: ref;

axiom orinoco_stop == $sub.ref(0, 273456);

procedure orinoco_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation orinoco_stop($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 1} true;
    call {:si_unique_call 559} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 560} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ezusb_xmit: ref;

axiom ezusb_xmit == $sub.ref(0, 274488);

procedure ezusb_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.12, $M.35, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation ezusb_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i16;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i1;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i16;
  var $i93: i32;
  var $i94: i16;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $p106: ref;
  var $i107: i32;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i64;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i64;
  var $p118: ref;
  var $i18: i32;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $p2 := $alloc($mul.ref(9, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $p5 := ndev_priv($p1);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i10 := netif_running($p1);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 566} {:cexpr "tmp___0"} boogie_si_record_i8($i11);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i19 := netif_queue_stopped($p1);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 569} {:cexpr "tmp___2"} boogie_si_record_i8($i20);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i25 := orinoco_lock($p5, $p4);
    call {:si_unique_call 572} {:cexpr "tmp___3"} boogie_si_record_i32($i25);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i30 := netif_carrier_ok($p1);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 575} {:cexpr "tmp___4"} boogie_si_record_i8($i31);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i34 == 1);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 2312)), $mul.ref(1676, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 6);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i40 := $ule.i32($i39, 13);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p41 := ezusb_alloc_ctx($p9, 1792, 0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p41, $mul.ref(0, 296)), $mul.ref(144, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.1;
    call {:si_unique_call 578} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p46, 0, 2048, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_19;
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p41, $mul.ref(0, 296)), $mul.ref(144, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 14)), $mul.ref(14, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p3, 0);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p2);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i52 := orinoco_process_xmit_skb($p0, $p1, $p5, $p3, $p51);
    call {:si_unique_call 580} {:cexpr "err"} boogie_si_record_i32($i52);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p50);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.35, $p3);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p54, $i56);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p50, $mul.ref(2, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.1, $p58);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    call {:si_unique_call 581} {:cexpr "__len"} boogie_si_record_i64($i60);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.1;
    cmdloc_dummy_var_21 := $M.1;
    call {:si_unique_call 582} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p57, $p62, $i60, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_22;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.1, $p63);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    $i66 := $add.i64(2, $i65);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p50, $mul.ref($i66, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.35, $p3);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 16);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $p81 := $p67;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} netif_stop_queue($p1);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i64.i32($i82);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p41, $mul.ref(0, 296)), $mul.ref(144, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 14)), $mul.ref(14, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i64.i32($i87);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32($i83, $i88);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, 1);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, $sub.i32(0, 2));
    call {:si_unique_call 586} {:cexpr "tx_size"} boogie_si_record_i32($i91);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i16($i93);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i95 := ezusb_access_ltv($p9, $p41, $i94, $0.ref, 1, $0.ref, 0, $0.ref);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 588} {:cexpr "err"} boogie_si_record_i32($i95);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.1, jiffies);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(1040, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p103, $i102);
    $p104 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2312)), $mul.ref(1408, 1)), $mul.ref(24, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.1, $p104);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.1, $p106);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i108 := $zext.i32.i64($i107);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i105, $i108);
    $p110 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2312)), $mul.ref(1408, 1)), $mul.ref(24, 1));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p110, $i109);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} orinoco_unlock($p5, $p4);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} consume_skb($p0);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb43:
    assume $i96 == 1;
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} netif_start_queue($p1);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i97 := net_ratelimit();
    call {:si_unique_call 591} {:cexpr "tmp___6"} boogie_si_record_i32($i97);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} orinoco_unlock($p5, $p4);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i18 := 16;
    goto $bb6;

  $bb45:
    assume $i98 == 1;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} vslice_dummy_var_91 := printk.ref.ref.i32(.str.47, $p100, $i95);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i70 == 1;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p2);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.1, $p72);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 1);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $p77 := $p2;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i78 := $ugt.i64(8, 63);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i78 == 1);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.1;
    cmdloc_dummy_var_27 := $M.1;
    call {:si_unique_call 584} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p67, $p77, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_28;
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    $i79 := $add.i64($i66, 8);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p50, $mul.ref($i79, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p81 := $p80;
    goto $bb42;

  $bb39:
    assume $i78 == 1;
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.1;
    cmdloc_dummy_var_24 := $M.1;
    call {:si_unique_call 583} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p67, $p77, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_25;
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i75 == 1;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p71, $mul.ref(1, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p77 := $p76;
    goto $bb38;

  $bb31:
    assume $i53 == 1;
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $p111 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2312)), $mul.ref(1408, 1)), $mul.ref(40, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i112 := $load.i64($M.1, $p111);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i113 := $add.i64($i112, 1);
    $p114 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2312)), $mul.ref(1408, 1)), $mul.ref(40, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p114, $i113);
    $p115 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2312)), $mul.ref(1408, 1)), $mul.ref(56, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i116 := $load.i64($M.1, $p115);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i117 := $add.i64($i116, 1);
    $p118 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2312)), $mul.ref(1408, 1)), $mul.ref(56, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p118, $i117);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb27:
    assume $i43 == 1;
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i40 == 1;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb18;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb16;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_90 := printk.ref.ref(.str.46, $p28);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i18 := 16;
    goto $bb6;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_89 := printk.ref.ref(.str.45, $p23);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i18 := 16;
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} vslice_dummy_var_88 := printk.ref.ref(.str.44, $p16);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i18 := 16;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;
}



const orinoco_set_multicast_list: ref;

axiom orinoco_set_multicast_list == $sub.ref(0, 275520);

procedure orinoco_set_multicast_list($p0: ref);
  free requires assertsPassed;



implementation orinoco_set_multicast_list($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    return;
}



const eth_mac_addr: ref;

axiom eth_mac_addr == $sub.ref(0, 276552);

procedure eth_mac_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_mac_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 1} true;
    call {:si_unique_call 595} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 596} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const eth_validate_addr: ref;

axiom eth_validate_addr == $sub.ref(0, 277584);

procedure eth_validate_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_validate_addr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 597} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 598} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const orinoco_change_mtu: ref;

axiom orinoco_change_mtu == $sub.ref(0, 278616);

procedure orinoco_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation orinoco_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 599} {:cexpr "orinoco_change_mtu:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 1} true;
    call {:si_unique_call 600} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 601} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const orinoco_tx_timeout: ref;

axiom orinoco_tx_timeout == $sub.ref(0, 279648);

procedure orinoco_tx_timeout($p0: ref);
  free requires assertsPassed;



implementation orinoco_tx_timeout($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    return;
}



const orinoco_get_stats: ref;

axiom orinoco_get_stats == $sub.ref(0, 280680);

procedure orinoco_get_stats($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation orinoco_get_stats($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $p1 := external_alloc();
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 281712);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 604} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const netif_queue_stopped: ref;

axiom netif_queue_stopped == $sub.ref(0, 282744);

procedure netif_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i2 := netif_tx_queue_stopped($p1);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 607} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const orinoco_lock: ref;

axiom orinoco_lock == $sub.ref(0, 283776);

procedure orinoco_lock($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation orinoco_lock($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(1624, 1)), $mul.ref(16, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(1016, 1));
    call {:si_unique_call 608} devirtbounce.5($p6, $p7, $p1);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(1088, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(1624, 1)), $mul.ref(16, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(1016, 1));
    call {:si_unique_call 609} devirtbounce.5($p15, $p16, $p1);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 16);
    goto $bb3;
}



const netif_carrier_ok: ref;

axiom netif_carrier_ok == $sub.ref(0, 284808);

procedure netif_carrier_ok($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_carrier_ok($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i2 := constant_test_bit(2, $p1);
    call {:si_unique_call 611} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 285840);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const orinoco_process_xmit_skb: ref;

axiom orinoco_process_xmit_skb == $sub.ref(0, 286872);

procedure orinoco_process_xmit_skb($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation orinoco_process_xmit_skb($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 1} true;
    call {:si_unique_call 612} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 613} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 287904);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} netif_tx_stop_queue($p1);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    return;
}



const netif_start_queue: ref;

axiom netif_start_queue == $sub.ref(0, 288936);

procedure netif_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} netif_tx_start_queue($p1);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    return;
}



const net_ratelimit: ref;

axiom net_ratelimit == $sub.ref(0, 289968);

procedure net_ratelimit() returns ($r: i32);
  free requires assertsPassed;



implementation net_ratelimit() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 1} true;
    call {:si_unique_call 618} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 619} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const orinoco_unlock: ref;

axiom orinoco_unlock == $sub.ref(0, 291000);

procedure orinoco_unlock($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation orinoco_unlock($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(1624, 1)), $mul.ref(16, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(1016, 1));
    call {:si_unique_call 620} devirtbounce.5($p6, $p7, $p1);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    return;
}



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 292032);

procedure consume_skb($p0: ref);
  free requires assertsPassed;



implementation consume_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 293064);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} clear_bit(0, $p1);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 294096);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 623} devirtbounce.6(0, $p1, $i0, $p1);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 295128);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 624} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 626} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 629} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} set_bit(0, $p15);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} vslice_dummy_var_92 := printk.ref(.str.49);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} warn_slowpath_null(.str.48, 2212);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 296160);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 633} devirtbounce.6(0, $p1, $i0, $p1);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 297192);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 298224);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_tx_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 636} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 299256);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 637} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 1} true;
    call {:si_unique_call 638} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 639} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 640} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $p4 := calloc(1, $i0);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 1} true;
    call {:si_unique_call 642} __VERIFIER_assume($i7);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_net_device_ops_3: ref;

axiom ldv_net_device_ops_3 == $sub.ref(0, 300288);

procedure ldv_net_device_ops_3();
  free requires assertsPassed;
  modifies $M.36, $M.1, $CurrAddr;



implementation ldv_net_device_ops_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p0 := ldv_zalloc(3264);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $M.36 := $p0;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_driver_2: ref;

axiom ldv_usb_driver_2 == $sub.ref(0, 301320);

procedure ldv_usb_driver_2();
  free requires assertsPassed;
  modifies $M.37, $M.1, $CurrAddr;



implementation ldv_usb_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p0 := ldv_zalloc(1560);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $M.37 := $p0;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_1: ref;

axiom choose_timer_1 == $sub.ref(0, 302352);

procedure choose_timer_1($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.8, $CurrAddr, $M.11, assertsPassed;



implementation choose_timer_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    call {:si_unique_call 646} devirtbounce.7($p2, $i4);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $M.12 := 2;
    call {:si_unique_call 648} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(2);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 303384);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.1, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.11, $M.12, $M.7, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.47, $M.36, $M.48, $M.35, $M.49, $M.50, $M.2, $M.4, $M.6, $M.51, $M.37, $M.45, $M.46, $M.125, $M.126, $CurrAddr, $M.8, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, assertsPassed;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i16;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i16;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i16;
  var $i36: i16;
  var $i37: i32;
  var $i38: i16;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i16;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i16;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i16;
  var $i94: i32;
  var $i95: i16;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i16;
  var $i101: i32;
  var $i102: i16;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i16;
  var $i108: i32;
  var $i109: i16;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i16;
  var $i115: i32;
  var $i116: i16;
  var $i117: i32;
  var $i118: i16;
  var $i119: i32;
  var $i120: i16;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i16;
  var $i126: i32;
  var $i127: i16;
  var $i128: i32;
  var $i129: i16;
  var $i130: i32;
  var $i131: i16;
  var $i133: i32;
  var $i134: i1;
  var $i135: i32;
  var $i136: i16;
  var $i137: i32;
  var $i138: i16;
  var $i139: i32;
  var $i140: i16;
  var $i141: i32;
  var $i142: i16;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i16;
  var $i148: i32;
  var $i149: i16;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i16;
  var $i155: i32;
  var $i156: i16;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i16;
  var $i162: i32;
  var $i163: i16;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i16;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i16;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $i178: i16;
  var $i180: i32;
  var $i181: i1;
  var $i183: i32;
  var $i184: i1;
  var $i186: i32;
  var $i187: i1;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $i192: i32;
  var $i193: i32;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $p197: ref;
  var $i198: i32;
  var $i199: i32;
  var $i200: i32;
  var $i201: i1;
  var $i203: i32;
  var $i204: i1;
  var $i206: i32;
  var $i207: i1;
  var $i209: i32;
  var $i210: i1;
  var $i212: i32;
  var $i213: i1;
  var $i215: i32;
  var $i216: i1;
  var $i218: i32;
  var $i219: i1;
  var $i220: i32;
  var $i221: i16;
  var $i222: i32;
  var $i223: i16;
  var $i225: i32;
  var $i226: i1;
  var $i227: i32;
  var $i228: i16;
  var $i229: i32;
  var $i230: i16;
  var $i232: i32;
  var $i233: i1;
  var $i234: i32;
  var $i235: i16;
  var $i236: i32;
  var $i237: i16;
  var $i239: i32;
  var $i240: i1;
  var $i241: i32;
  var $i242: i16;
  var $i244: i32;
  var $i245: i1;
  var $i246: i32;
  var $i247: i16;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i252: i16;
  var $i254: i32;
  var $i255: i1;
  var $i256: i32;
  var $i257: i16;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i16;
  var $i264: i32;
  var $i265: i1;
  var $i266: i32;
  var $i267: i16;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $i272: i32;
  var $i273: i32;
  var $i274: i32;
  var $i275: i1;
  var $i277: i32;
  var $i278: i1;
  var $i280: i32;
  var $i281: i1;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $p286: ref;
  var $i287: i32;
  var $i288: i32;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $i292: i32;
  var $i293: i1;
  var $i294: i32;
  var $i295: i1;
  var $i296: i1;
  var $i297: i1;
  var $i298: i32;
  var $i299: i1;
  var $i300: i32;
  var $i301: i1;
  var $i302: i32;
  var $i303: i1;
  var $i304: i32;
  var $i305: i32;
  var $i306: i1;
  var $i307: i32;
  var $i308: i1;
  var $i309: i32;
  var $i310: i1;
  var $i311: i32;
  var $i312: i1;
  var $i313: i1;
  var $i314: i1;
  var $i315: i1;
  var $i316: i1;
  var $i317: i1;
  var $i318: i1;
  var $i319: i1;
  var $i320: i1;
  var $i321: i1;
  var $i322: i1;
  var $i323: i1;
  var $i324: i32;
  var $i325: i1;
  var $p326: ref;
  var $i328: i32;
  var $i329: i1;
  var $p330: ref;
  var $i331: i32;
  var $i332: i1;
  var $p333: ref;
  var $i334: i32;
  var $i335: i1;
  var $p336: ref;
  var $i337: i32;
  var $i338: i1;
  var $p339: ref;
  var $i341: i32;
  var $i342: i1;
  var $p343: ref;
  var $i345: i32;
  var $i346: i1;
  var $p347: ref;
  var $i349: i32;
  var $i350: i1;
  var $p351: ref;
  var $i353: i32;
  var $i354: i1;
  var $p355: ref;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $i361: i32;
  var $i362: i1;
  var $p363: ref;
  var $i365: i32;
  var $i366: i1;
  var $p367: ref;
  var $i369: i32;
  var $i370: i1;
  var $p371: ref;
  var $i372: i32;
  var $i373: i32;
  var $i374: i1;
  var $i375: i32;
  var $i376: i1;
  var $p377: ref;
  var $i379: i32;
  var $i380: i1;
  var $p381: ref;
  var $i383: i32;
  var $i384: i1;
  var $p385: ref;
  var $i387: i32;
  var $i388: i1;
  var $p389: ref;
  var $i391: i32;
  var $i392: i1;
  var $p393: ref;
  var $i394: i32;
  var $i395: i1;
  var $p396: ref;
  var $i397: i32;
  var $i398: i1;
  var $p399: ref;
  var $i400: i32;
  var $i401: i1;
  var $i402: i32;
  var $i403: i32;
  var $i404: i1;
  var $i405: i32;
  var $i406: i32;
  var $i407: i32;
  var $i408: i32;
  var $i409: i32;
  var $i410: i1;
  var $i412: i32;
  var $i413: i32;
  var $i414: i32;
  var $i415: i32;
  var $i416: i32;
  var $i417: i1;
  var $i418: i32;
  var $i419: i1;
  var $i420: i1;
  var $i421: i1;
  var $i422: i32;
  var $i423: i1;
  var $p424: ref;
  var $i425: i32;
  var $i426: i32;
  var $i427: i1;
  var $i428: i32;
  var $i429: i32;
  var $i430: i32;
  var $i431: i1;
  var $i432: i32;
  var $i433: i1;
  var $p434: ref;
  var $i435: i32;
  var $i436: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: ref;
  var vslice_dummy_var_131: ref;
  var vslice_dummy_var_132: ref;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;

  $bb0:
    call {:si_unique_call 649} $initialize();
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 1} true;
    call {:si_unique_call 650} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 1} true;
    call {:si_unique_call 651} $i0 := __VERIFIER_nondet_u32();
    call {:si_unique_call 652} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i0);
    call {:si_unique_call 653} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $p1 := ldv_zalloc(2);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $p3 := ldv_zalloc(8);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $p5 := ldv_zalloc(2);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $p7 := ldv_zalloc(32);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 1} true;
    call {:si_unique_call 658} $i9 := __VERIFIER_nondet_u16();
    call {:si_unique_call 659} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i9);
    call {:si_unique_call 660} {:cexpr "tmp___4"} boogie_si_record_i16($i9);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 1} true;
    call {:si_unique_call 661} $i10 := __VERIFIER_nondet_u32();
    call {:si_unique_call 662} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i10);
    call {:si_unique_call 663} {:cexpr "tmp___5"} boogie_si_record_i32($i10);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 1} true;
    call {:si_unique_call 664} $i11 := __VERIFIER_nondet_u16();
    call {:si_unique_call 665} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i11);
    call {:si_unique_call 666} {:cexpr "tmp___6"} boogie_si_record_i16($i11);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p12 := ldv_zalloc(1);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p13 := ldv_zalloc(2);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 1} true;
    call {:si_unique_call 669} $i15 := __VERIFIER_nondet_u16();
    call {:si_unique_call 670} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i15);
    call {:si_unique_call 671} {:cexpr "tmp___9"} boogie_si_record_i16($i15);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p16 := ldv_zalloc(32);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p18 := ldv_zalloc(8);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 1} true;
    call {:si_unique_call 674} $i20 := __VERIFIER_nondet_u16();
    call {:si_unique_call 675} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i20);
    call {:si_unique_call 676} {:cexpr "tmp___12"} boogie_si_record_i16($i20);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 1} true;
    call {:si_unique_call 677} $i21 := __VERIFIER_nondet_u16();
    call {:si_unique_call 678} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i21);
    call {:si_unique_call 679} {:cexpr "tmp___13"} boogie_si_record_i16($i21);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p22 := ldv_zalloc(1);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 681} $i23 := __VERIFIER_nondet_int();
    call {:si_unique_call 682} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i23);
    call {:si_unique_call 683} {:cexpr "tmp___15"} boogie_si_record_i32($i23);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p24 := ldv_zalloc(32);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 1} true;
    call {:si_unique_call 685} $i26 := __VERIFIER_nondet_u16();
    call {:si_unique_call 686} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i26);
    call {:si_unique_call 687} {:cexpr "tmp___17"} boogie_si_record_i16($i26);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $p27 := ldv_zalloc(32);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p29 := ldv_zalloc(32);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p31 := ldv_zalloc(1);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p32 := ldv_zalloc(32);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 1} true;
    call {:si_unique_call 692} $i34 := __VERIFIER_nondet_u32();
    call {:si_unique_call 693} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i34);
    call {:si_unique_call 694} {:cexpr "tmp___22"} boogie_si_record_i32($i34);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 1} true;
    call {:si_unique_call 695} $i35 := __VERIFIER_nondet_u16();
    call {:si_unique_call 696} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i35);
    call {:si_unique_call 697} {:cexpr "tmp___23"} boogie_si_record_i16($i35);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 1} true;
    call {:si_unique_call 698} $i36 := __VERIFIER_nondet_u16();
    call {:si_unique_call 699} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i36);
    call {:si_unique_call 700} {:cexpr "tmp___24"} boogie_si_record_i16($i36);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 1} true;
    call {:si_unique_call 701} $i37 := __VERIFIER_nondet_uint();
    call {:si_unique_call 702} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i37);
    call {:si_unique_call 703} {:cexpr "tmp___25"} boogie_si_record_i32($i37);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 1} true;
    call {:si_unique_call 704} $i38 := __VERIFIER_nondet_u16();
    call {:si_unique_call 705} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i38);
    call {:si_unique_call 706} {:cexpr "tmp___26"} boogie_si_record_i16($i38);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $p39 := ldv_zalloc(32);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 1} true;
    call {:si_unique_call 708} $i41 := __VERIFIER_nondet_u16();
    call {:si_unique_call 709} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i41);
    call {:si_unique_call 710} {:cexpr "tmp___28"} boogie_si_record_i16($i41);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 711} $i42 := __VERIFIER_nondet_u32();
    call {:si_unique_call 712} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i42);
    call {:si_unique_call 713} {:cexpr "tmp___29"} boogie_si_record_i32($i42);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 1} true;
    call {:si_unique_call 714} $i43 := __VERIFIER_nondet_u16();
    call {:si_unique_call 715} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i43);
    call {:si_unique_call 716} {:cexpr "tmp___30"} boogie_si_record_i16($i43);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p44 := ldv_zalloc(32);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 1} true;
    call {:si_unique_call 718} $i46 := __VERIFIER_nondet_u16();
    call {:si_unique_call 719} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i46);
    call {:si_unique_call 720} {:cexpr "tmp___32"} boogie_si_record_i16($i46);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 1} true;
    call {:si_unique_call 721} $i47 := __VERIFIER_nondet_int();
    call {:si_unique_call 722} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i47);
    call {:si_unique_call 723} {:cexpr "tmp___33"} boogie_si_record_i32($i47);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 724} $i48 := __VERIFIER_nondet_int();
    call {:si_unique_call 725} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i48);
    call {:si_unique_call 726} {:cexpr "tmp___34"} boogie_si_record_i32($i48);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 1} true;
    call {:si_unique_call 727} $i49 := __VERIFIER_nondet_int();
    call {:si_unique_call 728} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i49);
    call {:si_unique_call 729} {:cexpr "tmp___35"} boogie_si_record_i32($i49);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $p50 := ldv_zalloc(1);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $p51 := ldv_zalloc(32);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 1} true;
    call {:si_unique_call 732} $i53 := __VERIFIER_nondet_u16();
    call {:si_unique_call 733} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i53);
    call {:si_unique_call 734} {:cexpr "tmp___38"} boogie_si_record_i16($i53);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $p54 := ldv_zalloc(32);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $p56 := ldv_zalloc(32);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $p58 := ldv_zalloc(232);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p60 := ldv_zalloc(1);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 1} true;
    call {:si_unique_call 739} $i61 := __VERIFIER_nondet_int();
    call {:si_unique_call 740} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i61);
    call {:si_unique_call 741} {:cexpr "tmp___43"} boogie_si_record_i32($i61);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $p62 := ldv_zalloc(32);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} ldv_initialize();
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 744} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 745} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 746} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 747} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 748} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 749} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i97, $i98, $i99, $i100, $i101, $i102, $i104, $i105, $i106, $i107, $i108, $i109, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i144, $i145, $i146, $i147, $i148, $i149, $i151, $i152, $i153, $i154, $i155, $i156, $i158, $i159, $i160, $i161, $i162, $i163, $i165, $i166, $i167, $i168, $i170, $i171, $i172, $i173, $i175, $i176, $i177, $i178, $i180, $i181, $i183, $i184, $i186, $i187, $i189, $i190, $p191, $i192, $i193, $i194, $i195, $p196, $p197, $i198, $i199, $i200, $i201, $i203, $i204, $i206, $i207, $i209, $i210, $i212, $i213, $i215, $i216, $i218, $i219, $i220, $i221, $i222, $i223, $i225, $i226, $i227, $i228, $i229, $i230, $i232, $i233, $i234, $i235, $i236, $i237, $i239, $i240, $i241, $i242, $i244, $i245, $i246, $i247, $i249, $i250, $i251, $i252, $i254, $i255, $i256, $i257, $i259, $i260, $i261, $i262, $i264, $i265, $i266, $i267, $i269, $i270, $p271, $i272, $i273, $i274, $i275, $i277, $i278, $i280, $i281, $i283, $i284, $p285, $p286, $i287, $i288, $i289, $i290, $p291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $p326, $i328, $i329, $p330, $i331, $i332, $p333, $i334, $i335, $p336, $i337, $i338, $p339, $i341, $i342, $p343, $i345, $i346, $p347, $i349, $i350, $p351, $i353, $i354, $p355, $i357, $i358, $p359, $i361, $i362, $p363, $i365, $i366, $p367, $i369, $i370, $p371, $i372, $i373, $i374, $i375, $i376, $p377, $i379, $i380, $p381, $i383, $i384, $p385, $i387, $i388, $p389, $i391, $i392, $p393, $i394, $i395, $p396, $i397, $i398, $p399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $i410, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $p424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $p434, $i435, $i436, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139 := main_loop_$bb1($i0, $p2, $p4, $p6, $p8, $i9, $i10, $i11, $p12, $p14, $i15, $p17, $p19, $i20, $i21, $p22, $i23, $p25, $i26, $p28, $p30, $p31, $p33, $i34, $i35, $i36, $i37, $i38, $p40, $i41, $i42, $i43, $p45, $i46, $i47, $i48, $i49, $p50, $p52, $i53, $p55, $p57, $p59, $p60, $i61, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i97, $i98, $i99, $i100, $i101, $i102, $i104, $i105, $i106, $i107, $i108, $i109, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i144, $i145, $i146, $i147, $i148, $i149, $i151, $i152, $i153, $i154, $i155, $i156, $i158, $i159, $i160, $i161, $i162, $i163, $i165, $i166, $i167, $i168, $i170, $i171, $i172, $i173, $i175, $i176, $i177, $i178, $i180, $i181, $i183, $i184, $i186, $i187, $i189, $i190, $p191, $i192, $i193, $i194, $i195, $p196, $p197, $i198, $i199, $i200, $i201, $i203, $i204, $i206, $i207, $i209, $i210, $i212, $i213, $i215, $i216, $i218, $i219, $i220, $i221, $i222, $i223, $i225, $i226, $i227, $i228, $i229, $i230, $i232, $i233, $i234, $i235, $i236, $i237, $i239, $i240, $i241, $i242, $i244, $i245, $i246, $i247, $i249, $i250, $i251, $i252, $i254, $i255, $i256, $i257, $i259, $i260, $i261, $i262, $i264, $i265, $i266, $i267, $i269, $i270, $p271, $i272, $i273, $i274, $i275, $i277, $i278, $i280, $i281, $i283, $i284, $p285, $p286, $i287, $i288, $i289, $i290, $p291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $p326, $i328, $i329, $p330, $i331, $i332, $p333, $i334, $i335, $p336, $i337, $i338, $p339, $i341, $i342, $p343, $i345, $i346, $p347, $i349, $i350, $p351, $i353, $i354, $p355, $i357, $i358, $p359, $i361, $i362, $p363, $i365, $i366, $p367, $i369, $i370, $p371, $i372, $i373, $i374, $i375, $i376, $p377, $i379, $i380, $p381, $i383, $i384, $p385, $i387, $i388, $p389, $i391, $i392, $p393, $i394, $i395, $p396, $i397, $i398, $p399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $i410, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $p424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $p434, $i435, $i436, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i64, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i64, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i64, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} ldv_stop();
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb167_dummy;

  $bb9:
    assume $i68 == 1;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i416 := $M.44;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i417 := $ne.i32($i416, 0);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb305:
    assume $i417 == 1;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 1} true;
    call {:si_unique_call 904} $i418 := __VERIFIER_nondet_int();
    call {:si_unique_call 905} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i418);
    call {:si_unique_call 906} {:cexpr "tmp___49"} boogie_si_record_i32($i418);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $i419 := $slt.i32($i418, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    $i420 := $eq.i32($i418, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    assume !($i420 == 1);
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} ldv_stop();
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb310:
    assume $i420 == 1;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i430 := $M.44;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i431 := $eq.i32($i430, 2);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    assume !($i431 == 1);
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb322:
    assume $i431 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i432 := $M.50;
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i433 := $eq.i32($i432, 0);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    assume !($i433 == 1);
    goto $bb324;

  $bb325:
    assume $i433 == 1;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p434 := $M.37;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} ezusb_disconnect($p434);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 912} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i435 := $M.41;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i436 := $sub.i32($i435, 1);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $M.41 := $i436;
    call {:si_unique_call 913} {:cexpr "ref_cnt"} boogie_si_record_i32($i436);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    goto $bb327;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb308:
    assume $i419 == 1;
    assume {:verifier.code 0} true;
    $i421 := $eq.i32($i418, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    assume !($i421 == 1);
    goto $bb312;

  $bb313:
    assume $i421 == 1;
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i422 := $M.44;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i423 := $eq.i32($i422, 1);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb315:
    assume $i423 == 1;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p424 := $M.37;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i425 := ezusb_probe($p424, $p63);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $M.51 := $i425;
    call {:si_unique_call 908} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i425);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i426 := $M.51;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i427 := $eq.i32($i426, 0);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb317:
    assume $i427 == 1;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i428 := $M.41;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i429 := $add.i32($i428, 1);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $M.41 := $i429;
    call {:si_unique_call 910} {:cexpr "ref_cnt"} boogie_si_record_i32($i429);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    goto $bb319;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i67 == 1;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i309 := $M.43;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i310 := $ne.i32($i309, 0);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb201:
    assume $i310 == 1;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 850} $i311 := __VERIFIER_nondet_int();
    call {:si_unique_call 851} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i311);
    call {:si_unique_call 852} {:cexpr "tmp___48"} boogie_si_record_i32($i311);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i312 := $slt.i32($i311, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    $i313 := $slt.i32($i311, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    $i314 := $slt.i32($i311, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    $i315 := $slt.i32($i311, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i311, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    assume !($i316 == 1);
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} ldv_stop();
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb212:
    assume $i316 == 1;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i409 := $M.43;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i409, 2);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb299:
    assume $i410 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} vslice_dummy_var_139 := ldv_ndo_uninit_3();
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 900} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i412 := $M.50;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i413 := $sub.i32($i412, 1);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.50 := $i413;
    call {:si_unique_call 901} {:cexpr "usb_counter"} boogie_si_record_i32($i413);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i414 := $M.41;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i415 := $sub.i32($i414, 1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $M.41 := $i415;
    call {:si_unique_call 902} {:cexpr "ref_cnt"} boogie_si_record_i32($i415);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb210:
    assume $i315 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i400 := $M.43;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i400, 1);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb293:
    assume $i401 == 1;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i402 := ldv_ndo_init_3();
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $M.49 := $i402;
    call {:si_unique_call 895} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i402);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i403 := $M.49;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i403, 0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb295:
    assume $i404 == 1;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 896} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i405 := $M.50;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i406 := $add.i32($i405, 1);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $M.50 := $i406;
    call {:si_unique_call 897} {:cexpr "usb_counter"} boogie_si_record_i32($i406);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i407 := $M.41;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i408 := $add.i32($i407, 1);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $M.41 := $i408;
    call {:si_unique_call 898} {:cexpr "ref_cnt"} boogie_si_record_i32($i408);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb208:
    assume $i314 == 1;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i391 := $M.43;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i391, 1);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $i394 := $M.43;
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i394, 3);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $i397 := $M.43;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32($i397, 2);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb290:
    assume $i398 == 1;
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p399 := $M.36;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} orinoco_tx_timeout($p399);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb287:
    assume $i395 == 1;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p396 := $M.36;
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} orinoco_tx_timeout($p396);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb284:
    assume $i392 == 1;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p393 := $M.36;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} orinoco_tx_timeout($p393);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb206:
    assume $i313 == 1;
    assume {:verifier.code 0} true;
    $i317 := $slt.i32($i311, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    $i318 := $slt.i32($i311, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i318 == 1);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i379 := $M.43;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i379, 1);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $i383 := $M.43;
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i383, 3);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $i387 := $M.43;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i388 := $eq.i32($i387, 2);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb281:
    assume $i388 == 1;
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p389 := $M.36;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vslice_dummy_var_138 := eth_mac_addr($p389, $p60);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb278:
    assume $i384 == 1;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p385 := $M.36;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} vslice_dummy_var_137 := eth_mac_addr($p385, $p60);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 885} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb275:
    assume $i380 == 1;
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p381 := $M.36;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} vslice_dummy_var_136 := eth_mac_addr($p381, $p60);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 883} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb217:
    assume $i318 == 1;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i375 := $M.43;
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i376 := $eq.i32($i375, 3);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb272:
    assume $i376 == 1;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p377 := $M.36;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} vslice_dummy_var_135 := ezusb_xmit($p59, $p377);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 881} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    goto $bb274;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb215:
    assume $i317 == 1;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i369 := $M.43;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i369, 2);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb266:
    assume $i370 == 1;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p371 := $M.36;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i372 := orinoco_open($p371);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $M.48 := $i372;
    call {:si_unique_call 878} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i372);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i373 := $M.48;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, 0);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb268:
    assume $i374 == 1;
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 879} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb204:
    assume $i312 == 1;
    assume {:verifier.code 0} true;
    $i319 := $slt.i32($i311, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    $i320 := $slt.i32($i311, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    $i321 := $slt.i32($i311, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i321 == 1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i361 := $M.43;
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 3);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $i365 := $M.43;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i365, 2);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb263:
    assume $i366 == 1;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p367 := $M.36;
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} vslice_dummy_var_134 := orinoco_change_mtu($p367, $i61);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 876} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb260:
    assume $i362 == 1;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p363 := $M.36;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} vslice_dummy_var_133 := orinoco_change_mtu($p363, $i61);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 874} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb223:
    assume $i321 == 1;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i349 := $M.43;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 1);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $i353 := $M.43;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i353, 3);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $i357 := $M.43;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 2);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb257:
    assume $i358 == 1;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p359 := $M.36;
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} vslice_dummy_var_132 := orinoco_get_stats($p359);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 872} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb254:
    assume $i354 == 1;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p355 := $M.36;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} vslice_dummy_var_131 := orinoco_get_stats($p355);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 870} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb251:
    assume $i350 == 1;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p351 := $M.36;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} vslice_dummy_var_130 := orinoco_get_stats($p351);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 868} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb221:
    assume $i320 == 1;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i337 := $M.43;
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 1);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i341 := $M.43;
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i341, 3);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $i345 := $M.43;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i346 := $eq.i32($i345, 2);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb248:
    assume $i346 == 1;
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p347 := $M.36;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} vslice_dummy_var_129 := eth_validate_addr($p347);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 866} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb245:
    assume $i342 == 1;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p343 := $M.36;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} vslice_dummy_var_128 := eth_validate_addr($p343);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 864} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb242:
    assume $i338 == 1;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p339 := $M.36;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} vslice_dummy_var_127 := eth_validate_addr($p339);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 862} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb219:
    assume $i319 == 1;
    assume {:verifier.code 0} true;
    $i322 := $slt.i32($i311, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i322 == 1);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i328 := $M.43;
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i328, 1);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $i331 := $M.43;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, 3);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $i334 := $M.43;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i334, 2);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb239:
    assume $i335 == 1;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p336 := $M.36;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} orinoco_set_multicast_list($p336);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 860} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb236:
    assume $i332 == 1;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p333 := $M.36;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} orinoco_set_multicast_list($p333);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 858} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb233:
    assume $i329 == 1;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p330 := $M.36;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} orinoco_set_multicast_list($p330);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb225:
    assume $i322 == 1;
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i311, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    assume !($i323 == 1);
    goto $bb214;

  $bb227:
    assume $i323 == 1;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i324 := $M.43;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i324, 3);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb229:
    assume $i325 == 1;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p326 := $M.36;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} vslice_dummy_var_126 := orinoco_stop($p326);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 854} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb5:
    assume $i66 == 1;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i292 := $M.42;
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i293 := $ne.i32($i292, 0);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb171:
    assume $i293 == 1;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 836} $i294 := __VERIFIER_nondet_int();
    call {:si_unique_call 837} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i294);
    call {:si_unique_call 838} {:cexpr "tmp___47"} boogie_si_record_i32($i294);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i295 := $slt.i32($i294, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i294, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !($i296 == 1);
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} ldv_stop();
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb176:
    assume $i296 == 1;
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i302 := $M.42;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i303 := $eq.i32($i302, 1);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb189:
    assume $i303 == 1;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i304 := orinoco_driver_init();
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $M.47 := $i304;
    call {:si_unique_call 843} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i304);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i305 := $M.47;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, 0);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i307 := $M.47;
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i308 := $ne.i32($i307, 0);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb194:
    assume $i308 == 1;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 848} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} ldv_check_final_state();
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb191:
    assume $i306 == 1;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 845} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} ldv_net_device_ops_3();
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 847} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb174:
    assume $i295 == 1;
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i294, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i297 == 1);
    goto $bb178;

  $bb179:
    assume $i297 == 1;
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i298 := $M.42;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i298, 3);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    assume !($i299 == 1);
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb181:
    assume $i299 == 1;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i300 := $M.41;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i300, 0);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i301 == 1);
    goto $bb183;

  $bb184:
    assume $i301 == 1;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} orinoco_driver_exit();
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 840} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb3:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i64, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i69 == 1);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i289 := $M.40;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 0);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb168:
    assume $i290 == 1;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p291 := $M.11;
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} choose_timer_1($p291);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    goto $bb170;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i64, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb11;

  $bb14:
    assume $i70 == 1;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i71 := $M.39;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb16:
    assume $i72 == 1;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 1} true;
    call {:si_unique_call 753} $i73 := __VERIFIER_nondet_int();
    call {:si_unique_call 754} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i73);
    call {:si_unique_call 755} {:cexpr "tmp___46"} boogie_si_record_i32($i73);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i73, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i73, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i73, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i73, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} ldv_stop();
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb27:
    assume $i78 == 1;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i283 := $M.39;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 1);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb161:
    assume $i284 == 1;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p285 := $M.45;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p286 := $M.46;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} ezusb_lock_irqsave($p285, $p286);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 832} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i287 := $M.41;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i287, 1);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $M.41 := $i288;
    call {:si_unique_call 833} {:cexpr "ref_cnt"} boogie_si_record_i32($i288);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb25:
    assume $i77 == 1;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i274 := $M.39;
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i274, 1);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i277 := $M.39;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 3);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i280 := $M.39;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 2);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb158:
    assume $i281 == 1;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} vslice_dummy_var_125 := ezusb_program_init($p17, $i10);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 830} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    goto $bb160;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb155:
    assume $i278 == 1;
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} vslice_dummy_var_124 := ezusb_program_init($p17, $i10);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 828} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    goto $bb157;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb152:
    assume $i275 == 1;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vslice_dummy_var_123 := ezusb_program_init($p17, $i10);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    goto $bb154;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i73, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i79 == 1);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i269 := $M.39;
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 1);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb149:
    assume $i270 == 1;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p271 := $M.45;
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} ezusb_lock_irq($p271);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 823} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i272 := $M.41;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i273 := $add.i32($i272, 1);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $M.41 := $i273;
    call {:si_unique_call 824} {:cexpr "ref_cnt"} boogie_si_record_i32($i273);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb30:
    assume $i79 == 1;
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i254 := $M.39;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 1);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i259 := $M.39;
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 3);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i264 := $M.39;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i265 := $eq.i32($i264, 2);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb146:
    assume $i265 == 1;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i266 := $zext.i16.i32($i20);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i32.i16($i266);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_122 := ezusb_read_ltv($p25, $i23, $i267, $i37, $p6, $p31);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 821} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    goto $bb148;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb143:
    assume $i260 == 1;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i261 := $zext.i16.i32($i20);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i262 := $trunc.i32.i16($i261);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} vslice_dummy_var_121 := ezusb_read_ltv($p25, $i23, $i262, $i37, $p6, $p31);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 819} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    goto $bb145;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb140:
    assume $i255 == 1;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i256 := $zext.i16.i32($i20);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i32.i16($i256);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} vslice_dummy_var_120 := ezusb_read_ltv($p25, $i23, $i257, $i37, $p6, $p31);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 817} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    goto $bb142;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i73, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i73, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i81 == 1);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i239 := $M.39;
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 1);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i244 := $M.39;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 3);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i249 := $M.39;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 2);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb137:
    assume $i250 == 1;
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i251 := $zext.i16.i32($i38);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i252 := $trunc.i32.i16($i251);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} vslice_dummy_var_119 := ezusb_read_pda($p45, $p2, $i42, $i252);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 815} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i245 == 1;
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i246 := $zext.i16.i32($i38);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i247 := $trunc.i32.i16($i246);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_118 := ezusb_read_pda($p45, $p2, $i42, $i247);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 813} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    goto $bb136;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb131:
    assume $i240 == 1;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i241 := $zext.i16.i32($i38);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i16($i241);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_117 := ezusb_read_pda($p45, $p2, $i42, $i242);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 811} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    goto $bb133;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i81 == 1;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i218 := $M.39;
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 1);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i225 := $M.39;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 3);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i232 := $M.39;
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 2);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb128:
    assume $i233 == 1;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i234 := $zext.i16.i32($i26);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i235 := $trunc.i32.i16($i234);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i236 := $zext.i16.i32($i9);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i237 := $trunc.i32.i16($i236);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_116 := ezusb_write_ltv($p40, $i48, $i235, $i237, $p22);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    goto $bb130;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb125:
    assume $i226 == 1;
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i227 := $zext.i16.i32($i26);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i228 := $trunc.i32.i16($i227);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i229 := $zext.i16.i32($i9);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i230 := $trunc.i32.i16($i229);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_115 := ezusb_write_ltv($p40, $i48, $i228, $i230, $p22);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 807} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    goto $bb127;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb122:
    assume $i219 == 1;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i220 := $zext.i16.i32($i26);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i221 := $trunc.i32.i16($i220);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i222 := $zext.i16.i32($i9);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i32.i16($i222);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} vslice_dummy_var_114 := ezusb_write_ltv($p40, $i48, $i221, $i223, $p22);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 805} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto $bb124;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i73, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i82 == 1);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i209 := $M.39;
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 1);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i212 := $M.39;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 3);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i215 := $M.39;
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 2);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb119:
    assume $i216 == 1;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} vslice_dummy_var_113 := ezusb_init($p52);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 803} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    goto $bb121;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb116:
    assume $i213 == 1;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} vslice_dummy_var_112 := ezusb_init($p52);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 801} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    goto $bb118;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb113:
    assume $i210 == 1;
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} vslice_dummy_var_111 := ezusb_init($p52);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 799} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    goto $bb115;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i82 == 1;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i200 := $M.39;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 1);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i203 := $M.39;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 3);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i206 := $M.39;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 2);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb110:
    assume $i207 == 1;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} vslice_dummy_var_110 := ezusb_program($p57, $p50, $i34, $i0);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 797} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb107:
    assume $i204 == 1;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} vslice_dummy_var_109 := ezusb_program($p57, $p50, $i34, $i0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 795} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    goto $bb109;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i201 == 1;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} vslice_dummy_var_108 := ezusb_program($p57, $p50, $i34, $i0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 793} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    goto $bb106;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i73, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i73, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i73, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i85 == 1);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i194 := $M.39;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 3);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb101:
    assume $i195 == 1;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p196 := $M.45;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p197 := $M.46;
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} ezusb_unlock_irqrestore($p196, $p197);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 790} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i198 := $M.41;
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i199 := $sub.i32($i198, 1);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $M.41 := $i199;
    call {:si_unique_call 791} {:cexpr "ref_cnt"} boogie_si_record_i32($i199);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb42:
    assume $i85 == 1;
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i189 := $M.39;
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 2);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb98:
    assume $i190 == 1;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p191 := $M.45;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} ezusb_unlock_irq($p191);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 787} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i192 := $M.41;
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i193 := $sub.i32($i192, 1);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $M.41 := $i193;
    call {:si_unique_call 788} {:cexpr "ref_cnt"} boogie_si_record_i32($i193);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb40:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i73, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i86 == 1);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i180 := $M.39;
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 1);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i183 := $M.39;
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 3);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i186 := $M.39;
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 2);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb95:
    assume $i187 == 1;
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} vslice_dummy_var_107 := ezusb_program_end($p55);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 785} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    goto $bb97;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb92:
    assume $i184 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_106 := ezusb_program_end($p55);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 783} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    goto $bb94;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb89:
    assume $i181 == 1;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} vslice_dummy_var_105 := ezusb_program_end($p55);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 781} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    goto $bb91;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i86 == 1;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i165 := $M.39;
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 1);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i170 := $M.39;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 3);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i175 := $M.39;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 2);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb86:
    assume $i176 == 1;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i177 := $zext.i16.i32($i53);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i178 := $trunc.i32.i16($i177);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} vslice_dummy_var_104 := ezusb_allocate($p8, $i178, $p14);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 779} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb83:
    assume $i171 == 1;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i172 := $zext.i16.i32($i53);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i32.i16($i172);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_103 := ezusb_allocate($p8, $i173, $p14);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 777} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb80:
    assume $i166 == 1;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i167 := $zext.i16.i32($i53);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i16($i167);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} vslice_dummy_var_102 := ezusb_allocate($p8, $i168, $p14);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 775} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb38:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i73, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i73, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i88 == 1);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i144 := $M.39;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 1);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i151 := $M.39;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 3);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i158 := $M.39;
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 2);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb77:
    assume $i159 == 1;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i160 := $zext.i16.i32($i35);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i32.i16($i160);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i162 := $zext.i16.i32($i46);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i16($i162);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} vslice_dummy_var_101 := ezusb_bap_pread($p30, $i49, $p12, $i47, $i161, $i163);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 773} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume $i152 == 1;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i153 := $zext.i16.i32($i35);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i32.i16($i153);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i155 := $zext.i16.i32($i46);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i16($i155);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} vslice_dummy_var_100 := ezusb_bap_pread($p30, $i49, $p12, $i47, $i154, $i156);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 771} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb71:
    assume $i145 == 1;
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i146 := $zext.i16.i32($i35);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i16($i146);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i148 := $zext.i16.i32($i46);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i16($i148);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} vslice_dummy_var_99 := ezusb_bap_pread($p30, $i49, $p12, $i47, $i147, $i149);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 769} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb48:
    assume $i88 == 1;
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i111 := $M.39;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 1);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i122 := $M.39;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 3);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i133 := $M.39;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 2);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb68:
    assume $i134 == 1;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i135 := $zext.i16.i32($i41);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i16($i135);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i137 := $zext.i16.i32($i15);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i32.i16($i137);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i21);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i16($i139);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i11);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i16($i141);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_98 := ezusb_doicmd_wait($p28, $i136, $i138, $i140, $i142, $p4);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 767} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb65:
    assume $i123 == 1;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i41);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i16($i124);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i126 := $zext.i16.i32($i15);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i32.i16($i126);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i21);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i16($i128);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i130 := $zext.i16.i32($i11);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i16($i130);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_97 := ezusb_doicmd_wait($p28, $i125, $i127, $i129, $i131, $p4);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 765} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    goto $bb67;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i112 == 1;
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i41);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i15);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i115);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i21);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i16($i117);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i11);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i16($i119);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_96 := ezusb_doicmd_wait($p28, $i114, $i116, $i118, $i120, $p4);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    goto $bb64;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i73, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb29;

  $bb50:
    assume $i89 == 1;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i90 := $M.39;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i97 := $M.39;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 3);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i104 := $M.39;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 2);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i105 == 1;
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i36);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i43);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} vslice_dummy_var_95 := ezusb_docmd_wait($p33, $i107, $i109, $p19);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i98 == 1;
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i36);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i99);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i43);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i16($i101);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} vslice_dummy_var_94 := ezusb_docmd_wait($p33, $i100, $i102, $p19);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 759} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i91 == 1;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i32($i36);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i16($i92);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i43);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i16($i94);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} vslice_dummy_var_93 := ezusb_docmd_wait($p33, $i93, $i95, $p19);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 757} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb167_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 750} $i64 := __VERIFIER_nondet_int();
    call {:si_unique_call 751} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i64);
    call {:si_unique_call 752} {:cexpr "tmp___45"} boogie_si_record_i32($i64);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_u32: ref;

axiom __VERIFIER_nondet_u32 == $sub.ref(0, 304416);

procedure __VERIFIER_nondet_u32() returns ($r: i32);



const __VERIFIER_nondet_u16: ref;

axiom __VERIFIER_nondet_u16 == $sub.ref(0, 305448);

procedure __VERIFIER_nondet_u16() returns ($r: i16);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 306480);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 307512);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const orinoco_driver_exit: ref;

axiom orinoco_driver_exit == $sub.ref(0, 308544);

procedure orinoco_driver_exit();
  free requires assertsPassed;
  modifies $M.44;



implementation orinoco_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} ldv_usb_deregister_43(orinoco_driver);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    return;
}



const orinoco_driver_init: ref;

axiom orinoco_driver_init == $sub.ref(0, 309576);

procedure orinoco_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.44, $M.50, $M.37, $M.1, $CurrAddr;



implementation orinoco_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i0 := ldv_usb_register_driver_42(orinoco_driver, __this_module, .str);
    call {:si_unique_call 918} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_init_3: ref;

axiom ldv_ndo_init_3 == $sub.ref(0, 310608);

procedure ldv_ndo_init_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 1} true;
    call {:si_unique_call 919} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 920} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_3: ref;

axiom ldv_ndo_uninit_3 == $sub.ref(0, 311640);

procedure ldv_ndo_uninit_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 1} true;
    call {:si_unique_call 921} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 922} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 312672);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_register_driver_42: ref;

axiom ldv_usb_register_driver_42 == $sub.ref(0, 313704);

procedure ldv_usb_register_driver_42($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.44, $M.50, $M.37, $M.1, $CurrAddr;



implementation ldv_usb_register_driver_42($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 924} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 925} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 926} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} ldv_usb_driver_2();
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 314736);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 1} true;
    call {:si_unique_call 928} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 929} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_43: ref;

axiom ldv_usb_deregister_43 == $sub.ref(0, 315768);

procedure ldv_usb_deregister_43($p0: ref);
  free requires assertsPassed;
  modifies $M.44;



implementation ldv_usb_deregister_43($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} usb_deregister($p0);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 316800);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 317832);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 932} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 1} true;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 318864);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 319896);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 320928);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 321960);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 322992);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 324024);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 325056);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 326088);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 327120);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 328152);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 329184);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 330216);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 331248);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 1} true;
    call {:si_unique_call 933} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 934} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 935} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 1} true;
    call {:si_unique_call 936} __VERIFIER_assume($i4);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 332280);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 333312);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 334344);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 335376);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 937} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 938} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 939} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 940} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 941} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 942} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 1} true;
    call {:si_unique_call 943} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 944} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 945} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 946} __VERIFIER_assume($i7);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 1} true;
    call {:si_unique_call 947} __VERIFIER_assume($i11);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 336408);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 337440);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 948} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 949} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 950} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 1} true;
    call {:si_unique_call 951} __VERIFIER_assume($i4);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 338472);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 339504);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 340536);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 341568);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 342600);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 343632);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 344664);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 345696);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 346728);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 347760);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 348792);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 349824);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 350856);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 1} true;
    call {:si_unique_call 952} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 953} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 954} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 351888);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 955} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 956} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 352920);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 353952);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 957} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 958} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 354984);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 356016);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 357048);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 959} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 960} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 1} true;
    call {:si_unique_call 961} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 962} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $p6 := malloc($i5);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.1;
    call {:si_unique_call 964} cmdloc_dummy_var_30 := $memset.i8(cmdloc_dummy_var_29, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_30;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 358080);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 359112);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.12, $M.36, $M.37, $M.11, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.7, $M.4, $M.6, $M.1, $M.125, $M.126;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 965} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.12 := 0;
    call {:si_unique_call 966} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(0);
    $M.36 := $0.ref;
    $M.37 := $0.ref;
    $M.11 := $0.ref;
    $M.39 := 0;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 968} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 969} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 970} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 972} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.45 := $0.ref;
    $M.46 := $0.ref;
    $M.47 := 0;
    call {:si_unique_call 973} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 974} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 975} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 976} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 977} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 978} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.4 := 0;
    $M.6 := $0.ref;
    $M.1 := $store.ref($M.1, ezusb_ops, ezusb_init);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(8, 1)), ezusb_docmd_wait);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(16, 1)), ezusb_doicmd_wait);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(24, 1)), ezusb_allocate);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(32, 1)), ezusb_read_ltv);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(40, 1)), ezusb_write_ltv);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(48, 1)), ezusb_bap_pread);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(64, 1)), ezusb_read_pda);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(72, 1)), ezusb_program_init);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(80, 1)), ezusb_program_end);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(88, 1)), ezusb_program);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(96, 1)), ezusb_lock_irqsave);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(104, 1)), ezusb_unlock_irqrestore);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(112, 1)), ezusb_lock_irq);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(ezusb_ops, $mul.ref(0, 128)), $mul.ref(120, 1)), ezusb_unlock_irq);
    $M.125 := $store.i16($M.125, ezusb_table, 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1183);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(4, 1)), 31);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1183);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(4, 1)), 130);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(2, 1)), 1183);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(4, 1)), 118);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(2, 1)), 1041);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(4, 1)), 6);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(2, 1)), 1041);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(4, 1)), 11);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(2, 1)), 1041);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(4, 1)), 13);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(2, 1)), 1150);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(4, 1)), 768);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(2, 1)), 3480);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(4, 1)), 768);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(2, 1)), 3486);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(4, 1)), 768);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(2, 1)), 3406);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(4, 1)), 4096);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(2, 1)), 3406);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(4, 1)), 4097);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(2, 1)), 1484);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(4, 1)), 12544);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(2, 1)), 3708);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(4, 1)), 768);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(0, 1)), 15);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(2, 1)), 1256);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(4, 1)), 20482);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(2, 1)), 1256);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(4, 1)), 23313);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(2, 1)), 1256);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(4, 1)), 28689);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(2, 1)), 1665);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(4, 1)), 18);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(2, 1)), 3064);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(4, 1)), 4098);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(2, 1)), 5680);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(4, 1)), $sub.i16(0, 127));
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(0, 1)), 3);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(2, 1)), 3406);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(4, 1)), 1146);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(0, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(2, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(4, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.125 := $store.i16($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.125 := $store.i8($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.125 := $store.i64($M.125, $add.ref($add.ref($add.ref(ezusb_table, $mul.ref(0, 672)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.126 := $store.ref($M.126, orinoco_driver, .str);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), ezusb_probe);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), ezusb_disconnect);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), ezusb_table);
    $M.126 := $store.i32($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.126 := $store.i32($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.126 := $store.i32($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.126 := $store.i32($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.126 := $store.i64($M.126, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.126 := $store.i8($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.126 := $store.i32($M.126, $add.ref($add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(orinoco_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 4);
    call {:si_unique_call 979} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 360144);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 361176);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.1, $M.11, $M.12, $M.7, $M.8, $CurrAddr, assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(eth_validate_addr, $p0);
    assume {:branchcond $i18} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i18 == 1);
    $i17 := $eq.ref(orinoco_stop, $p0);
    assume {:branchcond $i17} true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i17 == 1);
    $i16 := $eq.ref(orinoco_open, $p0);
    assume {:branchcond $i16} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(ezusb_program_end, $p0);
    assume {:branchcond $i15} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i15 == 1);
    $i14 := $eq.ref(ezusb_init, $p0);
    assume {:branchcond $i14} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(ezusb_hard_reset, $p0);
    assume {:branchcond $i13} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 980} $i2 := ezusb_hard_reset($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 981} $i4 := ezusb_init($p3);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    $r := $i4;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 982} $i6 := ezusb_program_end($p5);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    $r := $i6;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 983} $i8 := orinoco_open($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i17 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 984} $i10 := orinoco_stop($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i18 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 985} $i12 := eth_validate_addr($p11);
    $r := $i12;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 362208);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(ezusb_unlock_irqrestore, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(ezusb_lock_irqsave, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 986} ezusb_lock_irqsave($p1, $p2);
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 987} ezusb_unlock_irqrestore($p3, $p4);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 363240);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 364272);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 365304);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(ezusb_unlock_irqrestore, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    $i1 := $eq.ref(ezusb_lock_irqsave, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 988} ezusb_lock_irqsave(arg, arg1);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 989} ezusb_unlock_irqrestore(arg, arg1);
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 366336);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 367368);

procedure devirtbounce.7(funcPtr: ref, arg: i64);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.8, $CurrAddr, $M.11, $M.12, assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: i64)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(ezusb_request_timerfn, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 990} ezusb_request_timerfn(arg);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.12, $M.36, $M.37, $M.11, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.7, $M.4, $M.6, $M.1, $M.125, $M.126, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 991} __SMACK_static_init();
    call {:si_unique_call 992} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.1, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.11, $M.12, $M.7, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.47, $M.36, $M.48, $M.35, $M.49, $M.50, $M.2, $M.4, $M.6, $M.51, $M.37, $M.45, $M.46, $M.125, $M.126, $CurrAddr, $M.8, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation ezusb_probe_loop_$bb8(in_$p0: ref, in_$p6: ref, in_$p17: ref, in_$p42: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i8, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p75: ref, in_$i76: i16, in_$i77: i32, in_$i78: i1, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i8, in_$i86: i32, in_$p88: ref, in_$i89: i8, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$i110: i8, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$i117: i1, in_$p119: ref, in_$i120: i16, in_$i121: i32, in_$i122: i1, in_$p124: ref, in_$i125: i8, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i8, in_$i130: i32, in_$p132: ref, in_$i133: i8, in_$i134: i32, in_$i135: i32, in_$i136: i32, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i64, in_$i143: i1, in_$i145: i32, in_$i146: i8, in_$i147: i32, in_$i148: i1, in_$i46: i32, in_vslice_dummy_var_34: i32, in_vslice_dummy_var_36: i32, in_vslice_dummy_var_37: i32, in_vslice_dummy_var_39: i32, in_vslice_dummy_var_40: i32, in_vslice_dummy_var_41: i32) returns (out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i8, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p75: ref, out_$i76: i16, out_$i77: i32, out_$i78: i1, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i8, out_$i86: i32, out_$p88: ref, out_$i89: i8, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i1, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$i110: i8, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$i117: i1, out_$p119: ref, out_$i120: i16, out_$i121: i32, out_$i122: i1, out_$p124: ref, out_$i125: i8, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i8, out_$i130: i32, out_$p132: ref, out_$i133: i8, out_$i134: i32, out_$i135: i32, out_$i136: i32, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i64, out_$i143: i1, out_$i145: i32, out_$i146: i8, out_$i147: i32, out_$i148: i1, out_$i46: i32, out_vslice_dummy_var_34: i32, out_vslice_dummy_var_36: i32, out_vslice_dummy_var_37: i32, out_vslice_dummy_var_39: i32, out_vslice_dummy_var_40: i32, out_vslice_dummy_var_41: i32)
{

  entry:
    out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p75, out_$i76, out_$i77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p119, out_$i120, out_$i121, out_$i122, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i145, out_$i146, out_$i147, out_$i148, out_$i46, out_vslice_dummy_var_34, out_vslice_dummy_var_36, out_vslice_dummy_var_37, out_vslice_dummy_var_39, out_vslice_dummy_var_40, out_vslice_dummy_var_41 := in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$p54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$p64, in_$i65, in_$i66, in_$p68, in_$p69, in_$p70, in_$p71, in_$i72, in_$i73, in_$p75, in_$i76, in_$i77, in_$i78, in_$p80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$p93, in_$p94, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$p101, in_$i102, in_$i103, in_$p105, in_$i106, in_$i107, in_$i108, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$p114, in_$p115, in_$i116, in_$i117, in_$p119, in_$i120, in_$i121, in_$i122, in_$p124, in_$i125, in_$i126, in_$i127, in_$p128, in_$i129, in_$i130, in_$p132, in_$i133, in_$i134, in_$i135, in_$i136, in_$p137, in_$p138, in_$p139, in_$p140, in_$p141, in_$i142, in_$i143, in_$i145, in_$i146, in_$i147, in_$i148, in_$i46, in_vslice_dummy_var_34, in_vslice_dummy_var_36, in_vslice_dummy_var_37, in_vslice_dummy_var_39, in_vslice_dummy_var_40, in_vslice_dummy_var_41;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_73;

  $bb51:
    assume out_$i148 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := out_$i145;
    goto $bb51_dummy;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    out_$i148 := $sgt.i32(out_$i147, out_$i145);
    goto corral_source_split_104;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    out_$i147 := $zext.i8.i32(out_$i146);
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i8($M.1, in_$p42);
    goto corral_source_split_102;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i145 := $add.i32(out_$i46, 1);
    call {:si_unique_call 25} {:cexpr "i"} boogie_si_record_i32(out_$i145);
    goto corral_source_split_101;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} out_vslice_dummy_var_34 := printk.ref(.str.54);
    goto corral_source_split_99;

  $bb15:
    assume out_$i66 == 1;
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i64(out_$i65, 0);
    goto corral_source_split_96;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_95;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.1, out_$p63);
    goto corral_source_split_94;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p17, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_93;

  $bb13:
    assume out_$i62 == 1;
    goto corral_source_split_92;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 2);
    goto corral_source_split_90;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$i61 := $and.i32(out_$i60, 3);
    goto corral_source_split_89;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i8.i32(out_$i59);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i8($M.1, out_$p58);
    goto corral_source_split_87;

  $bb10:
    assume out_$i57 == 1;
    out_$p58 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_86;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i56, 0);
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i8.i32(out_$i55);
    goto corral_source_split_83;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.1, out_$p54);
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_81;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i46);
    goto corral_source_split_79;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.1, out_$p49);
    goto corral_source_split_78;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_77;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.1, out_$p47);
    goto corral_source_split_76;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_75;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} out_vslice_dummy_var_39 := printk.ref(.str.59);
    goto corral_source_split_181;

  $bb38:
    assume out_$i117 == 1;
    goto corral_source_split_180;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i64(out_$i116, 0);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i116 := $p2i.ref.i64(out_$p115);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.1, out_$p114);
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p17, $mul.ref(0, 520)), $mul.ref(488, 1));
    goto corral_source_split_175;

  $bb36:
    assume out_$i113 == 1;
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 2);
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$i112 := $and.i32(out_$i111, 3);
    goto corral_source_split_171;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    out_$i111 := $zext.i8.i32(out_$i110);
    goto corral_source_split_170;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i8($M.1, out_$p109);
    goto corral_source_split_169;

  $bb33:
    assume out_$i108 == 1;
    out_$p109 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_168;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    out_$i108 := $sge.i32(out_$i107, 0);
    goto corral_source_split_166;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    out_$i107 := $sext.i8.i32(out_$i106);
    goto corral_source_split_165;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i8($M.1, out_$p105);
    goto corral_source_split_164;

  $bb32:
    out_$p105 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_163;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i64(out_$i102, 0);
    goto corral_source_split_158;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$i102 := $p2i.ref.i64(out_$p101);
    goto corral_source_split_157;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.1, out_$p100);
    goto corral_source_split_156;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p99, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_155;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.1, out_$p98);
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p17, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_153;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p97, out_$p94);
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p96, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_151;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.1, out_$p95);
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p17, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_149;

  SeqInstr_9:
    goto corral_source_split_148;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} out_$p94 := kmalloc(2048, 208);
    goto SeqInstr_8;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p93, out_$i92);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p17, $mul.ref(0, 520)), $mul.ref(504, 1));
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$i92 := $or.i32(out_$i91, $sub.i32(0, 1073741696));
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} out_$i91 := __create_pipe(in_$p6, out_$i90);
    call {:si_unique_call 32} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_144;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i8.i32(out_$i89);
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i8($M.1, out_$p88);
    goto corral_source_split_142;

  $bb28:
    out_$p88 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_141;

  $bb27:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} out_vslice_dummy_var_37 := printk.ref.i32(.str.57, out_$i86);
    goto corral_source_split_139;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i8.i32(out_$i85);
    goto corral_source_split_138;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i8($M.1, out_$p84);
    goto corral_source_split_137;

  $bb26:
    assume out_$i83 == 1;
    out_$p84 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_136;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 130);
    goto corral_source_split_134;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i8.i32(out_$i81);
    goto corral_source_split_133;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i8($M.1, out_$p80);
    goto corral_source_split_132;

  $bb25:
    out_$p80 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_131;

  $bb24:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} out_vslice_dummy_var_36 := printk.ref(.str.56);
    goto corral_source_split_129;

  $bb23:
    assume out_$i78 == 1;
    goto corral_source_split_128;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i77, 64);
    goto corral_source_split_126;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i16.i32(out_$i76);
    goto corral_source_split_125;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i16($M.1, out_$p75);
    goto corral_source_split_124;

  $bb22:
    out_$p75 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_123;

  $bb20:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i64(out_$i72, 0);
    goto corral_source_split_112;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_111;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.1, out_$p70);
    goto corral_source_split_110;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p17, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_109;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p69, out_$p68);
    goto corral_source_split_108;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p17, $mul.ref(0, 520)), $mul.ref(496, 1));
    goto corral_source_split_107;

  SeqInstr_3:
    goto corral_source_split_106;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} out_$p68 := ldv_usb_alloc_urb_41(0, 208);
    goto SeqInstr_2;

  $bb16:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i62 == 1);
    goto $bb12;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i64(out_$i142, 0);
    goto corral_source_split_214;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    out_$i142 := $p2i.ref.i64(out_$p141);
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$p141 := $load.ref($M.1, out_$p140);
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p17, $mul.ref(0, 520)), $mul.ref(488, 1));
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p139, out_$p138);
    goto corral_source_split_210;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p17, $mul.ref(0, 520)), $mul.ref(488, 1));
    goto corral_source_split_209;

  SeqInstr_12:
    goto corral_source_split_208;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} out_$p138 := kmalloc(2048, 208);
    goto SeqInstr_11;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p137, out_$i136);
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p17, $mul.ref(0, 520)), $mul.ref(508, 1));
    goto corral_source_split_206;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    out_$i136 := $or.i32(out_$i135, $sub.i32(0, 1073741824));
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} out_$i135 := __create_pipe(in_$p6, out_$i134);
    call {:si_unique_call 39} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i135);
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i8.i32(out_$i133);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i8($M.1, out_$p132);
    goto corral_source_split_202;

  $bb46:
    out_$p132 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_201;

  $bb45:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} out_vslice_dummy_var_41 := printk.ref.i32(.str.61, out_$i130);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$i130 := $zext.i8.i32(out_$i129);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i8($M.1, out_$p128);
    goto corral_source_split_197;

  $bb44:
    assume out_$i127 == 1;
    out_$p128 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i32(out_$i126, 2);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$i126 := $zext.i8.i32(out_$i125);
    goto corral_source_split_193;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i8($M.1, out_$p124);
    goto corral_source_split_192;

  $bb43:
    out_$p124 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_191;

  $bb42:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} out_vslice_dummy_var_40 := printk.ref(.str.60);
    goto corral_source_split_189;

  $bb41:
    assume out_$i122 == 1;
    goto corral_source_split_188;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i32(out_$i121, 64);
    goto corral_source_split_186;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i16.i32(out_$i120);
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i16($M.1, out_$p119);
    goto corral_source_split_184;

  $bb40:
    out_$p119 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_183;

  $bb39:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i108 == 1);
    goto $bb35;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i113 == 1);
    goto $bb35;

  $bb51_dummy:
    call {:si_unique_call 1} out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p75, out_$i76, out_$i77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p119, out_$i120, out_$i121, out_$i122, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i145, out_$i146, out_$i147, out_$i148, out_$i46, out_vslice_dummy_var_34, out_vslice_dummy_var_36, out_vslice_dummy_var_37, out_vslice_dummy_var_39, out_vslice_dummy_var_40, out_vslice_dummy_var_41 := ezusb_probe_loop_$bb8(in_$p0, in_$p6, in_$p17, in_$p42, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p75, out_$i76, out_$i77, out_$i78, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p119, out_$i120, out_$i121, out_$i122, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i145, out_$i146, out_$i147, out_$i148, out_$i46, out_vslice_dummy_var_34, out_vslice_dummy_var_36, out_vslice_dummy_var_37, out_vslice_dummy_var_39, out_vslice_dummy_var_40, out_vslice_dummy_var_41);
    return;

  exit:
    return;
}



procedure ezusb_probe_loop_$bb8(in_$p0: ref, in_$p6: ref, in_$p17: ref, in_$p42: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i8, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p75: ref, in_$i76: i16, in_$i77: i32, in_$i78: i1, in_$p80: ref, in_$i81: i8, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i8, in_$i86: i32, in_$p88: ref, in_$i89: i8, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$i110: i8, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$i117: i1, in_$p119: ref, in_$i120: i16, in_$i121: i32, in_$i122: i1, in_$p124: ref, in_$i125: i8, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i8, in_$i130: i32, in_$p132: ref, in_$i133: i8, in_$i134: i32, in_$i135: i32, in_$i136: i32, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i64, in_$i143: i1, in_$i145: i32, in_$i146: i8, in_$i147: i32, in_$i148: i1, in_$i46: i32, in_vslice_dummy_var_34: i32, in_vslice_dummy_var_36: i32, in_vslice_dummy_var_37: i32, in_vslice_dummy_var_39: i32, in_vslice_dummy_var_40: i32, in_vslice_dummy_var_41: i32) returns (out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i8, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p75: ref, out_$i76: i16, out_$i77: i32, out_$i78: i1, out_$p80: ref, out_$i81: i8, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i8, out_$i86: i32, out_$p88: ref, out_$i89: i8, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i1, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$i110: i8, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$i117: i1, out_$p119: ref, out_$i120: i16, out_$i121: i32, out_$i122: i1, out_$p124: ref, out_$i125: i8, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i8, out_$i130: i32, out_$p132: ref, out_$i133: i8, out_$i134: i32, out_$i135: i32, out_$i136: i32, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i64, out_$i143: i1, out_$i145: i32, out_$i146: i8, out_$i147: i32, out_$i148: i1, out_$i46: i32, out_vslice_dummy_var_34: i32, out_vslice_dummy_var_36: i32, out_vslice_dummy_var_37: i32, out_vslice_dummy_var_39: i32, out_vslice_dummy_var_40: i32, out_vslice_dummy_var_41: i32);
  modifies $M.1, assertsPassed, $CurrAddr;



implementation ezusb_delete_loop_$bb26(in_$i61: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p64: ref, in_$p65: ref) returns (out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p64: ref, out_$p65: ref)
{

  entry:
    out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p64, out_$p65 := in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p64, in_$p65;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  $bb28:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$p64, out_$p65 := out_$p68, out_$p64;
    goto $bb28_dummy;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(in_$i61, out_$i69);
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.1, out_$p67);
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p64, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_424;

  SeqInstr_30:
    goto corral_source_split_423;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} ezusb_ctx_complete(out_$p66);
    goto SeqInstr_29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_422;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p64, out_$p65 := ezusb_delete_loop_$bb26(in_$i61, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p64, out_$p65);
    return;

  exit:
    return;
}



procedure ezusb_delete_loop_$bb26(in_$i61: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p64: ref, in_$p65: ref) returns (out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p64: ref, out_$p65: ref);
  modifies $M.7, $M.8, $M.1, $CurrAddr, $M.11, $M.12, assertsPassed;



implementation ezusb_delete_loop_$bb12(in_$p0: ref, in_$i25: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p28: ref, in_$p29: ref, in_vslice_dummy_var_51: i32) returns (out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p28: ref, out_$p29: ref, out_vslice_dummy_var_51: i32)
{

  entry:
    out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$p45, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p28, out_$p29, out_vslice_dummy_var_51 := in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$p42, in_$i43, in_$p44, in_$p45, in_$p47, in_$i48, in_$i49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p28, in_$p29, in_vslice_dummy_var_51;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_365;

  $bb20:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$p28, out_$p29 := out_$p51, out_$p28;
    goto $bb20_dummy;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(in_$i25, out_$i52);
    goto corral_source_split_403;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_402;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.1, out_$p50);
    goto corral_source_split_401;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_400;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} ldv_spin_lock();
    goto corral_source_split_399;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} ezusb_request_context_put(out_$p30);
    goto corral_source_split_398;

  $bb18:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_27:
    goto corral_source_split_396;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} ezusb_ctx_complete(out_$p30);
    goto SeqInstr_26;

  $bb17:
    assume out_$i49 == 1;
    goto corral_source_split_395;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 0);
    goto corral_source_split_393;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} out_$i48 := list_empty(out_$p47);
    call {:si_unique_call 88} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_392;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p30, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_391;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} out_vslice_dummy_var_51 := ldv_del_timer_sync_40(out_$p45);
    goto corral_source_split_390;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p30, $mul.ref(0, 296)), $mul.ref(160, 1));
    goto corral_source_split_389;

  $bb15:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} wait_for_completion(out_$p44);
    goto corral_source_split_387;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p30, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_386;

  $bb14:
    assume out_$i43 == 1;
    goto corral_source_split_385;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i41, $sub.i32(0, 115));
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} spin_unlock_irqrestore(out_$p42, $u0);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 520)), $mul.ref(184, 1));
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} out_$i41 := usb_unlink_urb(out_$p40);
    call {:si_unique_call 83} {:cexpr "err"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_380;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.1, out_$p39);
    goto corral_source_split_379;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p30, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_378;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p38, out_$i35);
    goto corral_source_split_377;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_376;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.1, out_$p36);
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p30, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_374;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.1, out_$p34);
    goto corral_source_split_373;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_372;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.1, out_$p32);
    goto corral_source_split_371;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p30, $mul.ref(0, 296)), $mul.ref(128, 1));
    goto corral_source_split_370;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} atomic_inc(out_$p31);
    goto corral_source_split_369;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_368;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$p45, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p28, out_$p29, out_vslice_dummy_var_51 := ezusb_delete_loop_$bb12(in_$p0, in_$i25, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$p45, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p28, out_$p29, out_vslice_dummy_var_51);
    return;

  exit:
    return;
}



procedure ezusb_delete_loop_$bb12(in_$p0: ref, in_$i25: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p28: ref, in_$p29: ref, in_vslice_dummy_var_51: i32) returns (out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p28: ref, out_$p29: ref, out_vslice_dummy_var_51: i32);
  modifies $M.7, $CurrAddr, $M.8, $M.1, $M.11, $M.12, assertsPassed;



implementation ezusb_delete_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} ezusb_delete_loop_$bb7();
    return;

  exit:
    return;
}



procedure ezusb_delete_loop_$bb7();



implementation ezusb_delete_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ezusb_delete_loop_$bb3();
    return;

  exit:
    return;
}



procedure ezusb_delete_loop_$bb3();



implementation ezusb_request_context_put_loop_$bb14()
{

  entry:
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb14_dummy:
    call {:si_unique_call 1} ezusb_request_context_put_loop_$bb14();
    return;

  exit:
    return;
}



procedure ezusb_request_context_put_loop_$bb14();



implementation ezusb_request_context_put_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} ezusb_request_context_put_loop_$bb10();
    return;

  exit:
    return;
}



procedure ezusb_request_context_put_loop_$bb10();



implementation wdev_priv_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} wdev_priv_loop_$bb3();
    return;

  exit:
    return;
}



procedure wdev_priv_loop_$bb3();



implementation wiphy_priv_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} wiphy_priv_loop_$bb3();
    return;

  exit:
    return;
}



procedure wiphy_priv_loop_$bb3();



implementation ezusb_firmware_download_loop_$bb15(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i13: i32, in_$i27: i1, in_$i28: i1, in_$i30: i1, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i24, in_$i49: i24, in_$i50: i24, in_$p51: ref, in_$p52: ref, in_$i53: i8, in_$i54: i64, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i16, in_$i71: i32, in_$i72: i16, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i29: i32, in_$i76: i32, in_$i77: i16, in_$i78: i32, in_$i79: i1, in_$i26: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_vslice_dummy_var_67: i32) returns (out_$i27: i1, out_$i28: i1, out_$i30: i1, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i24, out_$i49: i24, out_$i50: i24, out_$p51: ref, out_$p52: ref, out_$i53: i8, out_$i54: i64, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i16, out_$i71: i32, out_$i72: i16, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i29: i32, out_$i76: i32, out_$i77: i16, out_$i78: i32, out_$i79: i1, out_$i26: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_vslice_dummy_var_67: i32)
{

  entry:
    out_$i27, out_$i28, out_$i30, out_$p32, out_$i33, out_$p34, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i29, out_$i76, out_$i77, out_$i78, out_$i79, out_$i26, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_vslice_dummy_var_67 := in_$i27, in_$i28, in_$i30, in_$p32, in_$i33, in_$p34, in_$p36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$p59, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$i66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i29, in_$i76, in_$i77, in_$i78, in_$i79, in_$i26, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5, in_vslice_dummy_var_67;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;

  $bb39:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i76;
    goto $bb39_dummy;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$i79 := $sgt.i32(out_$i78, out_$i76);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i16.i32(out_$i77);
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    out_$i77 := $M.4;
    goto corral_source_split_1087;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i29, 64);
    call {:si_unique_call 278} {:cexpr "addr"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_1086;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1085;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i26;
    goto $bb22;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i26;
    goto $bb22;

  $bb20:
    assume out_$i28 == 1;
    goto corral_source_split_1083;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    out_$i28 := $sle.i32(out_$i26, 767);
    goto corral_source_split_1081;

  $bb17:
    assume out_$i27 == 1;
    goto corral_source_split_1080;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i27 := $sgt.i32(out_$i26, 255);
    goto corral_source_split_1078;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb37:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i73;
    assume true;
    goto $bb37;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i73, 0);
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} out_$i73 := usb_control_msg(out_$p68, out_$i69, $sub.i8(0, 96), 64, out_$i72, 0, in_$p3, 64, 750);
    call {:si_unique_call 287} {:cexpr "retval"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_1155;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i32.i16(out_$i71);
    goto corral_source_split_1154;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i16.i32(out_$i70);
    goto corral_source_split_1153;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    out_$i70 := $trunc.i32.i16(out_$i26);
    goto corral_source_split_1152;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    out_$i69 := $or.i32(out_$i66, $sub.i32(0, 2147483648));
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.1, out_$p67);
    goto corral_source_split_1150;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} out_$i66 := __create_pipe(out_$p65, 0);
    call {:si_unique_call 285} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_1148;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.1, out_$p64);
    goto corral_source_split_1147;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_1146;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p63, 0);
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(in_$p3, $mul.ref(out_$i62, 1));
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i61);
    goto corral_source_split_1142;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i32(in_$i13, out_$i26);
    goto corral_source_split_1141;

  $bb33:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} out_vslice_dummy_var_67 := __dynamic_netdev_dbg.ref.ref.ref.i32(in_$p2, out_$p59, .str.82, in_$i13);
    goto corral_source_split_1139;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.1, out_$p58);
    goto corral_source_split_1138;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_1137;

  $bb32:
    assume out_$i57 == 1;
    goto corral_source_split_1136;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_1134;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} out_$i56 := ldv__builtin_expect(out_$i55, 0);
    call {:si_unique_call 282} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    out_$i55 := $and.i64(out_$i54, 1);
    goto corral_source_split_1132;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i8.i64(out_$i53);
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i8($M.18, out_$p52);
    goto corral_source_split_1130;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1129;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, out_$p51, 0);
    goto corral_source_split_1128;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1127;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $M.17 := $store.i24($M.17, out_$p47, out_$i50);
    goto corral_source_split_1126;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    out_$i50 := $or.i24(out_$i49, 870);
    goto corral_source_split_1125;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    out_$i49 := $and.i24(out_$i48, $sub.i24(0, 262144));
    goto corral_source_split_1124;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i24($M.17, out_$p47);
    goto corral_source_split_1123;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_1122;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1121;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, out_$p45, .str.82);
    goto corral_source_split_1120;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p44, .str.2);
    goto corral_source_split_1118;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1117;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, out_$p43, .str.81);
    goto corral_source_split_1116;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1115;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, out_$p42, .str);
    goto corral_source_split_1114;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1113;

  $bb30:
    assume out_$i41 == 1;
    goto corral_source_split_1112;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    out_$i41 := $sgt.i32(out_$i40, in_$i13);
    goto corral_source_split_1110;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i26, 64);
    goto corral_source_split_1109;

  $bb27:
    assume out_$i39 == 1;
    goto corral_source_split_1108;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i39 := $sge.i32(in_$i13, out_$i26);
    goto corral_source_split_1106;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.1;
    out_cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 280} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, in_$p3, out_$p38, 64, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.1;
    out_cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 279} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, in_$p3, out_$p34, 64, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_2;
    goto corral_source_split_1098;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p32, $mul.ref(out_$i33, 1));
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i26);
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$p32 := $M.6;
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto corral_source_split_1094;

  $bb24:
    assume out_$i30 == 1;
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i30 := $ugt.i64(64, 63);
    goto corral_source_split_1091;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb19;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(out_$i37, 1));
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i26);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$p36 := $M.6;
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    goto corral_source_split_1101;

  $bb25:
    assume !(out_$i30 == 1);
    goto corral_source_split_1100;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb29;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i27, out_$i28, out_$i30, out_$p32, out_$i33, out_$p34, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i29, out_$i76, out_$i77, out_$i78, out_$i79, out_$i26, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_vslice_dummy_var_67 := ezusb_firmware_download_loop_$bb15(in_$p0, in_$p2, in_$p3, in_$i13, out_$i27, out_$i28, out_$i30, out_$p32, out_$i33, out_$p34, out_$p36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i29, out_$i76, out_$i77, out_$i78, out_$i79, out_$i26, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_vslice_dummy_var_67);
    return;

  exit:
    return;
}



procedure ezusb_firmware_download_loop_$bb15(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i13: i32, in_$i27: i1, in_$i28: i1, in_$i30: i1, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i24, in_$i49: i24, in_$i50: i24, in_$p51: ref, in_$p52: ref, in_$i53: i8, in_$i54: i64, in_$i55: i64, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i16, in_$i71: i32, in_$i72: i16, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i29: i32, in_$i76: i32, in_$i77: i16, in_$i78: i32, in_$i79: i1, in_$i26: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_vslice_dummy_var_67: i32) returns (out_$i27: i1, out_$i28: i1, out_$i30: i1, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i24, out_$i49: i24, out_$i50: i24, out_$p51: ref, out_$p52: ref, out_$i53: i8, out_$i54: i64, out_$i55: i64, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i16, out_$i71: i32, out_$i72: i16, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i29: i32, out_$i76: i32, out_$i77: i16, out_$i78: i32, out_$i79: i1, out_$i26: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_vslice_dummy_var_67: i32);
  modifies $M.1, $M.18, $M.17, $M.16, $M.15, $M.14, $M.13;



implementation ezusb_init_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} ezusb_init_loop_$bb7();
    return;

  exit:
    return;
}



procedure ezusb_init_loop_$bb7();



implementation ezusb_init_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ezusb_init_loop_$bb3();
    return;

  exit:
    return;
}



procedure ezusb_init_loop_$bb3();



implementation ezusb_access_ltv_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ezusb_access_ltv_loop_$bb3();
    return;

  exit:
    return;
}



procedure ezusb_access_ltv_loop_$bb3();



implementation ezusb_fill_req_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ezusb_fill_req_loop_$bb3();
    return;

  exit:
    return;
}



procedure ezusb_fill_req_loop_$bb3();



implementation ezusb_req_ctx_wait_loop_$bb35(in_$p2: ref, in_$p30: ref, in_$p33: ref, in_$i36: i64, in_$i37: i1, in_$i38: i64, in_$i39: i32, in_$i40: i1) returns (out_$i36: i64, out_$i37: i1, out_$i38: i64, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i36, out_$i37, out_$i38, out_$i39, out_$i40 := in_$i36, in_$i37, in_$i38, in_$i39, in_$i40;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb42:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := out_$i38;
    goto $bb42_dummy;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.1, in_$p33);
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} out_$i38 := prepare_to_wait_event(in_$p30, in_$p2, 1);
    call {:si_unique_call 424} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_1811;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} schedule();
    goto corral_source_split_1810;

  $bb40:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_1806;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i36, out_$i37, out_$i38, out_$i39, out_$i40 := ezusb_req_ctx_wait_loop_$bb35(in_$p2, in_$p30, in_$p33, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure ezusb_req_ctx_wait_loop_$bb35(in_$p2: ref, in_$p30: ref, in_$p33: ref, in_$i36: i64, in_$i37: i1, in_$i38: i64, in_$i39: i32, in_$i40: i1) returns (out_$i36: i64, out_$i37: i1, out_$i38: i64, out_$i39: i32, out_$i40: i1);



implementation ezusb_req_ctx_wait_loop_$bb21(in_$p15: ref, in_$i19: i32, in_$i20: i1, in_$i18: i32, in_$i21: i32, in_$i22: i1) returns (out_$i19: i32, out_$i20: i1, out_$i18: i32, out_$i21: i32, out_$i22: i1)
{

  entry:
    out_$i19, out_$i20, out_$i18, out_$i21, out_$i22 := in_$i19, in_$i20, in_$i18, in_$i21, in_$i22;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1774;

  $bb23:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i21;
    goto $bb23_dummy;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 0);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.1, in_$p15);
    goto corral_source_split_1779;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} __const_udelay(4295000);
    goto corral_source_split_1778;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume out_$i22 == 1;
    goto corral_source_split_1784;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i18, 0);
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    out_$i21 := $sub.i32(out_$i18, 1);
    call {:si_unique_call 416} {:cexpr "msecs"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_1775;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$i18, out_$i21, out_$i22 := ezusb_req_ctx_wait_loop_$bb21(in_$p15, out_$i19, out_$i20, out_$i18, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure ezusb_req_ctx_wait_loop_$bb21(in_$p15: ref, in_$i19: i32, in_$i20: i1, in_$i18: i32, in_$i21: i32, in_$i22: i1) returns (out_$i19: i32, out_$i20: i1, out_$i18: i32, out_$i21: i32, out_$i22: i1);



implementation ezusb_program_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$p4: ref, in_$i7: i32, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i24, in_$i19: i24, in_$i20: i24, in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i64, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$i28: i32, in_$i29: i64, in_$p30: ref, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i44: i32, in_$i45: i32, in_$i43: i32, in_$i46: i1, in_$i10: i32, in_$i11: i32, in_$i47: i32, in_vslice_dummy_var_87: i32) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i24, out_$i19: i24, out_$i20: i24, out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i64, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$i28: i32, out_$i29: i64, out_$p30: ref, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i44: i32, out_$i45: i32, out_$i43: i32, out_$i46: i1, out_$i10: i32, out_$i11: i32, out_$i47: i32, out_vslice_dummy_var_87: i32)
{

  entry:
    out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i44, out_$i45, out_$i43, out_$i46, out_$i10, out_$i11, out_$i47, out_vslice_dummy_var_87 := in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i39, in_$i40, in_$i41, in_$i42, in_$i44, in_$i45, in_$i43, in_$i46, in_$i10, in_$i11, in_$i47, in_vslice_dummy_var_87;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2270;

  $bb19:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$i11 := out_$i43, out_$i39;
    goto $bb19_dummy;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i35;
    assume true;
    goto $bb19;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    out_$i46 := $ugt.i32(in_$i7, out_$i39);
    goto corral_source_split_2323;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2322;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i45;
    goto $bb18;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    out_$i43 := 2034;
    goto $bb18;

  $bb16:
    assume out_$i42 == 1;
    goto corral_source_split_2316;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    out_$i42 := $ult.i32(2034, out_$i41);
    goto corral_source_split_2314;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    out_$i41 := $sub.i32(out_$i40, out_$i39);
    goto corral_source_split_2313;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(in_$i2, in_$i3);
    goto corral_source_split_2312;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i11, out_$i10);
    call {:si_unique_call 541} {:cexpr "ch_addr"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_2311;

  $bb13:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i35;
    assume true;
    goto $bb13;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_2305;

  SeqInstr_156:
    call {:si_unique_call 540} {:cexpr "err"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_2304;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} out_$i35 := ezusb_program_bytes(in_$p0, out_$p34, out_$i11, out_$i10);
    goto SeqInstr_155;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(in_$p1, $mul.ref(out_$i33, 1));
    goto corral_source_split_2303;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i32.i64(out_$i32);
    goto corral_source_split_2302;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i32(out_$i11, in_$i2);
    goto corral_source_split_2301;

  $bb10:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} out_vslice_dummy_var_87 := __dynamic_pr_debug.ref.ref.i32.i32.ref(in_$p4, .str.26, out_$i10, out_$i11, out_$p30);
    goto corral_source_split_2299;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(in_$p1, $mul.ref(out_$i29, 1));
    goto corral_source_split_2298;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i32.i64(out_$i28);
    goto corral_source_split_2297;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    out_$i28 := $sub.i32(out_$i11, in_$i2);
    goto corral_source_split_2296;

  $bb9:
    assume out_$i27 == 1;
    goto corral_source_split_2295;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_2293;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} out_$i26 := ldv__builtin_expect(out_$i25, 0);
    call {:si_unique_call 537} {:cexpr "tmp"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_2292;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    out_$i25 := $and.i64(out_$i24, 1);
    goto corral_source_split_2291;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i64(out_$i23);
    goto corral_source_split_2290;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.34, out_$p22);
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2288;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, out_$p21, 0);
    goto corral_source_split_2287;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2286;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $M.33 := $store.i24($M.33, out_$p17, out_$i20);
    goto corral_source_split_2285;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    out_$i20 := $or.i24(out_$i19, 1212);
    goto corral_source_split_2284;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    out_$i19 := $and.i24(out_$i18, $sub.i24(0, 262144));
    goto corral_source_split_2283;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i24($M.33, out_$p17);
    goto corral_source_split_2282;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_2281;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2280;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, out_$p15, .str.26);
    goto corral_source_split_2279;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2278;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, out_$p14, .str.2);
    goto corral_source_split_2277;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2276;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, out_$p13, .str.25);
    goto corral_source_split_2275;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2274;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, out_$p12, .str);
    goto corral_source_split_2273;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2272;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    out_$i45 := $sub.i32(out_$i44, out_$i39);
    goto corral_source_split_2320;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(in_$i2, in_$i3);
    goto corral_source_split_2319;

  $bb17:
    assume !(out_$i42 == 1);
    goto corral_source_split_2318;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i44, out_$i45, out_$i43, out_$i46, out_$i10, out_$i11, out_$i47, out_vslice_dummy_var_87 := ezusb_program_loop_$bb7(in_$p0, in_$p1, in_$i2, in_$i3, in_$p4, in_$i7, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i44, out_$i45, out_$i43, out_$i46, out_$i10, out_$i11, out_$i47, out_vslice_dummy_var_87);
    return;

  exit:
    return;
}



procedure ezusb_program_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$p4: ref, in_$i7: i32, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i24, in_$i19: i24, in_$i20: i24, in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i64, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$i28: i32, in_$i29: i64, in_$p30: ref, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i44: i32, in_$i45: i32, in_$i43: i32, in_$i46: i1, in_$i10: i32, in_$i11: i32, in_$i47: i32, in_vslice_dummy_var_87: i32) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i24, out_$i19: i24, out_$i20: i24, out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i64, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$i28: i32, out_$i29: i64, out_$p30: ref, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i44: i32, out_$i45: i32, out_$i43: i32, out_$i46: i1, out_$i10: i32, out_$i11: i32, out_$i47: i32, out_vslice_dummy_var_87: i32);
  modifies $M.1, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.7, $M.8, $CurrAddr, assertsPassed, $M.34, $M.33, $M.32, $M.31, $M.30, $M.29;



implementation main_loop_$bb1(in_$i0: i32, in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$i9: i16, in_$i10: i32, in_$i11: i16, in_$p12: ref, in_$p14: ref, in_$i15: i16, in_$p17: ref, in_$p19: ref, in_$i20: i16, in_$i21: i16, in_$p22: ref, in_$i23: i32, in_$p25: ref, in_$i26: i16, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$i34: i32, in_$i35: i16, in_$i36: i16, in_$i37: i32, in_$i38: i16, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i16, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p52: ref, in_$i53: i16, in_$p55: ref, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i16, in_$i94: i32, in_$i95: i16, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i16, in_$i101: i32, in_$i102: i16, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$i107: i16, in_$i108: i32, in_$i109: i16, in_$i111: i32, in_$i112: i1, in_$i113: i32, in_$i114: i16, in_$i115: i32, in_$i116: i16, in_$i117: i32, in_$i118: i16, in_$i119: i32, in_$i120: i16, in_$i122: i32, in_$i123: i1, in_$i124: i32, in_$i125: i16, in_$i126: i32, in_$i127: i16, in_$i128: i32, in_$i129: i16, in_$i130: i32, in_$i131: i16, in_$i133: i32, in_$i134: i1, in_$i135: i32, in_$i136: i16, in_$i137: i32, in_$i138: i16, in_$i139: i32, in_$i140: i16, in_$i141: i32, in_$i142: i16, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i16, in_$i148: i32, in_$i149: i16, in_$i151: i32, in_$i152: i1, in_$i153: i32, in_$i154: i16, in_$i155: i32, in_$i156: i16, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i16, in_$i162: i32, in_$i163: i16, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i16, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i16, in_$i175: i32, in_$i176: i1, in_$i177: i32, in_$i178: i16, in_$i180: i32, in_$i181: i1, in_$i183: i32, in_$i184: i1, in_$i186: i32, in_$i187: i1, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$i192: i32, in_$i193: i32, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$p197: ref, in_$i198: i32, in_$i199: i32, in_$i200: i32, in_$i201: i1, in_$i203: i32, in_$i204: i1, in_$i206: i32, in_$i207: i1, in_$i209: i32, in_$i210: i1, in_$i212: i32, in_$i213: i1, in_$i215: i32, in_$i216: i1, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i16, in_$i222: i32, in_$i223: i16, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i16, in_$i229: i32, in_$i230: i16, in_$i232: i32, in_$i233: i1, in_$i234: i32, in_$i235: i16, in_$i236: i32, in_$i237: i16, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i16, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i16, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i16, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i16, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i16, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i16, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$i275: i1, in_$i277: i32, in_$i278: i1, in_$i280: i32, in_$i281: i1, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i1, in_$i296: i1, in_$i297: i1, in_$i298: i32, in_$i299: i1, in_$i300: i32, in_$i301: i1, in_$i302: i32, in_$i303: i1, in_$i304: i32, in_$i305: i32, in_$i306: i1, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i313: i1, in_$i314: i1, in_$i315: i1, in_$i316: i1, in_$i317: i1, in_$i318: i1, in_$i319: i1, in_$i320: i1, in_$i321: i1, in_$i322: i1, in_$i323: i1, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$i331: i32, in_$i332: i1, in_$p333: ref, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$i341: i32, in_$i342: i1, in_$p343: ref, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$i372: i32, in_$i373: i32, in_$i374: i1, in_$i375: i32, in_$i376: i1, in_$p377: ref, in_$i379: i32, in_$i380: i1, in_$p381: ref, in_$i383: i32, in_$i384: i1, in_$p385: ref, in_$i387: i32, in_$i388: i1, in_$p389: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i394: i32, in_$i395: i1, in_$p396: ref, in_$i397: i32, in_$i398: i1, in_$p399: ref, in_$i400: i32, in_$i401: i1, in_$i402: i32, in_$i403: i32, in_$i404: i1, in_$i405: i32, in_$i406: i32, in_$i407: i32, in_$i408: i32, in_$i409: i32, in_$i410: i1, in_$i412: i32, in_$i413: i32, in_$i414: i32, in_$i415: i32, in_$i416: i32, in_$i417: i1, in_$i418: i32, in_$i419: i1, in_$i420: i1, in_$i421: i1, in_$i422: i32, in_$i423: i1, in_$p424: ref, in_$i425: i32, in_$i426: i32, in_$i427: i1, in_$i428: i32, in_$i429: i32, in_$i430: i32, in_$i431: i1, in_$i432: i32, in_$i433: i1, in_$p434: ref, in_$i435: i32, in_$i436: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: ref, in_vslice_dummy_var_131: ref, in_vslice_dummy_var_132: ref, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32) returns (out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i16, out_$i94: i32, out_$i95: i16, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i16, out_$i101: i32, out_$i102: i16, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$i107: i16, out_$i108: i32, out_$i109: i16, out_$i111: i32, out_$i112: i1, out_$i113: i32, out_$i114: i16, out_$i115: i32, out_$i116: i16, out_$i117: i32, out_$i118: i16, out_$i119: i32, out_$i120: i16, out_$i122: i32, out_$i123: i1, out_$i124: i32, out_$i125: i16, out_$i126: i32, out_$i127: i16, out_$i128: i32, out_$i129: i16, out_$i130: i32, out_$i131: i16, out_$i133: i32, out_$i134: i1, out_$i135: i32, out_$i136: i16, out_$i137: i32, out_$i138: i16, out_$i139: i32, out_$i140: i16, out_$i141: i32, out_$i142: i16, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i16, out_$i148: i32, out_$i149: i16, out_$i151: i32, out_$i152: i1, out_$i153: i32, out_$i154: i16, out_$i155: i32, out_$i156: i16, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i16, out_$i162: i32, out_$i163: i16, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i16, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i16, out_$i175: i32, out_$i176: i1, out_$i177: i32, out_$i178: i16, out_$i180: i32, out_$i181: i1, out_$i183: i32, out_$i184: i1, out_$i186: i32, out_$i187: i1, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$i192: i32, out_$i193: i32, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$p197: ref, out_$i198: i32, out_$i199: i32, out_$i200: i32, out_$i201: i1, out_$i203: i32, out_$i204: i1, out_$i206: i32, out_$i207: i1, out_$i209: i32, out_$i210: i1, out_$i212: i32, out_$i213: i1, out_$i215: i32, out_$i216: i1, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i16, out_$i222: i32, out_$i223: i16, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i16, out_$i229: i32, out_$i230: i16, out_$i232: i32, out_$i233: i1, out_$i234: i32, out_$i235: i16, out_$i236: i32, out_$i237: i16, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i16, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i16, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i16, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i16, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i16, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i16, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$i275: i1, out_$i277: i32, out_$i278: i1, out_$i280: i32, out_$i281: i1, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i1, out_$i296: i1, out_$i297: i1, out_$i298: i32, out_$i299: i1, out_$i300: i32, out_$i301: i1, out_$i302: i32, out_$i303: i1, out_$i304: i32, out_$i305: i32, out_$i306: i1, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i313: i1, out_$i314: i1, out_$i315: i1, out_$i316: i1, out_$i317: i1, out_$i318: i1, out_$i319: i1, out_$i320: i1, out_$i321: i1, out_$i322: i1, out_$i323: i1, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$i331: i32, out_$i332: i1, out_$p333: ref, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$i341: i32, out_$i342: i1, out_$p343: ref, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$i372: i32, out_$i373: i32, out_$i374: i1, out_$i375: i32, out_$i376: i1, out_$p377: ref, out_$i379: i32, out_$i380: i1, out_$p381: ref, out_$i383: i32, out_$i384: i1, out_$p385: ref, out_$i387: i32, out_$i388: i1, out_$p389: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i394: i32, out_$i395: i1, out_$p396: ref, out_$i397: i32, out_$i398: i1, out_$p399: ref, out_$i400: i32, out_$i401: i1, out_$i402: i32, out_$i403: i32, out_$i404: i1, out_$i405: i32, out_$i406: i32, out_$i407: i32, out_$i408: i32, out_$i409: i32, out_$i410: i1, out_$i412: i32, out_$i413: i32, out_$i414: i32, out_$i415: i32, out_$i416: i32, out_$i417: i1, out_$i418: i32, out_$i419: i1, out_$i420: i1, out_$i421: i1, out_$i422: i32, out_$i423: i1, out_$p424: ref, out_$i425: i32, out_$i426: i32, out_$i427: i1, out_$i428: i32, out_$i429: i32, out_$i430: i32, out_$i431: i1, out_$i432: i32, out_$i433: i1, out_$p434: ref, out_$i435: i32, out_$i436: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: ref, out_vslice_dummy_var_131: ref, out_vslice_dummy_var_132: ref, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32)
{

  entry:
    out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i166, out_$i167, out_$i168, out_$i170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i183, out_$i184, out_$i186, out_$i187, out_$i189, out_$i190, out_$p191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i203, out_$i204, out_$i206, out_$i207, out_$i209, out_$i210, out_$i212, out_$i213, out_$i215, out_$i216, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i239, out_$i240, out_$i241, out_$i242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i259, out_$i260, out_$i261, out_$i262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i277, out_$i278, out_$i280, out_$i281, out_$i283, out_$i284, out_$p285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p326, out_$i328, out_$i329, out_$p330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$p336, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i353, out_$i354, out_$p355, out_$i357, out_$i358, out_$p359, out_$i361, out_$i362, out_$p363, out_$i365, out_$i366, out_$p367, out_$i369, out_$i370, out_$p371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$p377, out_$i379, out_$i380, out_$p381, out_$i383, out_$i384, out_$p385, out_$i387, out_$i388, out_$p389, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$p396, out_$i397, out_$i398, out_$p399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$p434, out_$i435, out_$i436, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139 := in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i165, in_$i166, in_$i167, in_$i168, in_$i170, in_$i171, in_$i172, in_$i173, in_$i175, in_$i176, in_$i177, in_$i178, in_$i180, in_$i181, in_$i183, in_$i184, in_$i186, in_$i187, in_$i189, in_$i190, in_$p191, in_$i192, in_$i193, in_$i194, in_$i195, in_$p196, in_$p197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i203, in_$i204, in_$i206, in_$i207, in_$i209, in_$i210, in_$i212, in_$i213, in_$i215, in_$i216, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i239, in_$i240, in_$i241, in_$i242, in_$i244, in_$i245, in_$i246, in_$i247, in_$i249, in_$i250, in_$i251, in_$i252, in_$i254, in_$i255, in_$i256, in_$i257, in_$i259, in_$i260, in_$i261, in_$i262, in_$i264, in_$i265, in_$i266, in_$i267, in_$i269, in_$i270, in_$p271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i277, in_$i278, in_$i280, in_$i281, in_$i283, in_$i284, in_$p285, in_$p286, in_$i287, in_$i288, in_$i289, in_$i290, in_$p291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$p326, in_$i328, in_$i329, in_$p330, in_$i331, in_$i332, in_$p333, in_$i334, in_$i335, in_$p336, in_$i337, in_$i338, in_$p339, in_$i341, in_$i342, in_$p343, in_$i345, in_$i346, in_$p347, in_$i349, in_$i350, in_$p351, in_$i353, in_$i354, in_$p355, in_$i357, in_$i358, in_$p359, in_$i361, in_$i362, in_$p363, in_$i365, in_$i366, in_$p367, in_$i369, in_$i370, in_$p371, in_$i372, in_$i373, in_$i374, in_$i375, in_$i376, in_$p377, in_$i379, in_$i380, in_$p381, in_$i383, in_$i384, in_$p385, in_$i387, in_$i388, in_$p389, in_$i391, in_$i392, in_$p393, in_$i394, in_$i395, in_$p396, in_$i397, in_$i398, in_$p399, in_$i400, in_$i401, in_$i402, in_$i403, in_$i404, in_$i405, in_$i406, in_$i407, in_$i408, in_$i409, in_$i410, in_$i412, in_$i413, in_$i414, in_$i415, in_$i416, in_$i417, in_$i418, in_$i419, in_$i420, in_$i421, in_$i422, in_$i423, in_$p424, in_$i425, in_$i426, in_$i427, in_$i428, in_$i429, in_$i430, in_$i431, in_$i432, in_$i433, in_$p434, in_$i435, in_$i436, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_123, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 750} out_$i64 := __VERIFIER_nondet_int();
    call {:si_unique_call 751} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i64);
    call {:si_unique_call 752} {:cexpr "tmp___45"} boogie_si_record_i32(out_$i64);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb167_dummy;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb17:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2891;

  SeqInstr_186:
    goto corral_source_split_2890;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_vslice_dummy_var_95 := ezusb_docmd_wait(in_$p33, out_$i107, out_$i109, in_$p19);
    goto SeqInstr_185;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    out_$i109 := $trunc.i32.i16(out_$i108);
    goto corral_source_split_2889;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i16.i32(in_$i43);
    goto corral_source_split_2888;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    out_$i107 := $trunc.i32.i16(out_$i106);
    goto corral_source_split_2887;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i16.i32(in_$i36);
    goto corral_source_split_2886;

  $bb58:
    assume out_$i105 == 1;
    goto corral_source_split_2885;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 2);
    goto corral_source_split_2883;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i104 := $M.39;
    goto corral_source_split_2882;

  $bb56:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 759} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_2880;

  SeqInstr_183:
    goto corral_source_split_2879;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} out_vslice_dummy_var_94 := ezusb_docmd_wait(in_$p33, out_$i100, out_$i102, in_$p19);
    goto SeqInstr_182;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    out_$i102 := $trunc.i32.i16(out_$i101);
    goto corral_source_split_2878;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i16.i32(in_$i43);
    goto corral_source_split_2877;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    out_$i100 := $trunc.i32.i16(out_$i99);
    goto corral_source_split_2876;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i16.i32(in_$i36);
    goto corral_source_split_2875;

  $bb55:
    assume out_$i98 == 1;
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 3);
    goto corral_source_split_2872;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i97 := $M.39;
    goto corral_source_split_2871;

  $bb53:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 757} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2869;

  SeqInstr_180:
    goto corral_source_split_2868;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} out_vslice_dummy_var_93 := ezusb_docmd_wait(in_$p33, out_$i93, out_$i95, in_$p19);
    goto SeqInstr_179;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    out_$i95 := $trunc.i32.i16(out_$i94);
    goto corral_source_split_2867;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i16.i32(in_$i43);
    goto corral_source_split_2866;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    out_$i93 := $trunc.i32.i16(out_$i92);
    goto corral_source_split_2865;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i16.i32(in_$i36);
    goto corral_source_split_2864;

  $bb52:
    assume out_$i91 == 1;
    goto corral_source_split_2863;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 1);
    goto corral_source_split_2861;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    out_$i90 := $M.39;
    goto corral_source_split_2860;

  $bb50:
    assume out_$i89 == 1;
    goto corral_source_split_2859;

  $bb46:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i73, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb38:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i73, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb19:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i73, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i73, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_2801:
    assume {:verifier.code 1} true;
    call {:si_unique_call 753} out_$i73 := __VERIFIER_nondet_int();
    call {:si_unique_call 754} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i73);
    call {:si_unique_call 755} {:cexpr "tmp___46"} boogie_si_record_i32(out_$i73);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i72 == 1;
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$i71 := $M.39;
    goto corral_source_split_2798;

  $bb14:
    assume out_$i70 == 1;
    goto corral_source_split_2797;

  $bb12:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i64, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb3:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i64, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i64, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb69:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 767} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2933;

  SeqInstr_195:
    goto corral_source_split_2932;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} out_vslice_dummy_var_98 := ezusb_doicmd_wait(in_$p28, out_$i136, out_$i138, out_$i140, out_$i142, in_$p4);
    goto SeqInstr_194;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    out_$i142 := $trunc.i32.i16(out_$i141);
    goto corral_source_split_2931;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    out_$i141 := $zext.i16.i32(in_$i11);
    goto corral_source_split_2930;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    out_$i140 := $trunc.i32.i16(out_$i139);
    goto corral_source_split_2929;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i16.i32(in_$i21);
    goto corral_source_split_2928;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    out_$i138 := $trunc.i32.i16(out_$i137);
    goto corral_source_split_2927;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    out_$i137 := $zext.i16.i32(in_$i15);
    goto corral_source_split_2926;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    out_$i136 := $trunc.i32.i16(out_$i135);
    goto corral_source_split_2925;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    out_$i135 := $zext.i16.i32(in_$i41);
    goto corral_source_split_2924;

  $bb68:
    assume out_$i134 == 1;
    goto corral_source_split_2923;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 2);
    goto corral_source_split_2921;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i133 := $M.39;
    goto corral_source_split_2920;

  $bb66:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 765} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_2918;

  SeqInstr_192:
    goto corral_source_split_2917;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_vslice_dummy_var_97 := ezusb_doicmd_wait(in_$p28, out_$i125, out_$i127, out_$i129, out_$i131, in_$p4);
    goto SeqInstr_191;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    out_$i131 := $trunc.i32.i16(out_$i130);
    goto corral_source_split_2916;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    out_$i130 := $zext.i16.i32(in_$i11);
    goto corral_source_split_2915;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    out_$i129 := $trunc.i32.i16(out_$i128);
    goto corral_source_split_2914;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i16.i32(in_$i21);
    goto corral_source_split_2913;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    out_$i127 := $trunc.i32.i16(out_$i126);
    goto corral_source_split_2912;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    out_$i126 := $zext.i16.i32(in_$i15);
    goto corral_source_split_2911;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    out_$i125 := $trunc.i32.i16(out_$i124);
    goto corral_source_split_2910;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    out_$i124 := $zext.i16.i32(in_$i41);
    goto corral_source_split_2909;

  $bb65:
    assume out_$i123 == 1;
    goto corral_source_split_2908;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 3);
    goto corral_source_split_2906;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i122 := $M.39;
    goto corral_source_split_2905;

  $bb63:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2903;

  SeqInstr_189:
    goto corral_source_split_2902;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} out_vslice_dummy_var_96 := ezusb_doicmd_wait(in_$p28, out_$i114, out_$i116, out_$i118, out_$i120, in_$p4);
    goto SeqInstr_188;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    out_$i120 := $trunc.i32.i16(out_$i119);
    goto corral_source_split_2901;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i16.i32(in_$i11);
    goto corral_source_split_2900;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i32.i16(out_$i117);
    goto corral_source_split_2899;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i16.i32(in_$i21);
    goto corral_source_split_2898;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    out_$i116 := $trunc.i32.i16(out_$i115);
    goto corral_source_split_2897;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i16.i32(in_$i15);
    goto corral_source_split_2896;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    out_$i114 := $trunc.i32.i16(out_$i113);
    goto corral_source_split_2895;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i16.i32(in_$i41);
    goto corral_source_split_2894;

  $bb62:
    assume out_$i112 == 1;
    goto corral_source_split_2893;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i111, 1);
    goto corral_source_split_2853;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    out_$i111 := $M.39;
    goto corral_source_split_2852;

  $bb48:
    assume out_$i88 == 1;
    goto corral_source_split_2851;

  $bb47:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i73, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb78:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 773} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2963;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} out_vslice_dummy_var_101 := ezusb_bap_pread(in_$p30, in_$i49, in_$p12, in_$i47, out_$i161, out_$i163);
    goto corral_source_split_2962;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    out_$i163 := $trunc.i32.i16(out_$i162);
    goto corral_source_split_2961;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    out_$i162 := $zext.i16.i32(in_$i46);
    goto corral_source_split_2960;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    out_$i161 := $trunc.i32.i16(out_$i160);
    goto corral_source_split_2959;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    out_$i160 := $zext.i16.i32(in_$i35);
    goto corral_source_split_2958;

  $bb77:
    assume out_$i159 == 1;
    goto corral_source_split_2957;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 2);
    goto corral_source_split_2955;

  $bb76:
    assume {:verifier.code 0} true;
    out_$i158 := $M.39;
    goto corral_source_split_2954;

  $bb75:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 771} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_2952;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} out_vslice_dummy_var_100 := ezusb_bap_pread(in_$p30, in_$i49, in_$p12, in_$i47, out_$i154, out_$i156);
    goto corral_source_split_2951;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    out_$i156 := $trunc.i32.i16(out_$i155);
    goto corral_source_split_2950;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    out_$i155 := $zext.i16.i32(in_$i46);
    goto corral_source_split_2949;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    out_$i154 := $trunc.i32.i16(out_$i153);
    goto corral_source_split_2948;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    out_$i153 := $zext.i16.i32(in_$i35);
    goto corral_source_split_2947;

  $bb74:
    assume out_$i152 == 1;
    goto corral_source_split_2946;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 3);
    goto corral_source_split_2944;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i151 := $M.39;
    goto corral_source_split_2943;

  $bb72:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 769} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2941;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} out_vslice_dummy_var_99 := ezusb_bap_pread(in_$p30, in_$i49, in_$p12, in_$i47, out_$i147, out_$i149);
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$i149 := $trunc.i32.i16(out_$i148);
    goto corral_source_split_2939;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    out_$i148 := $zext.i16.i32(in_$i46);
    goto corral_source_split_2938;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    out_$i147 := $trunc.i32.i16(out_$i146);
    goto corral_source_split_2937;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    out_$i146 := $zext.i16.i32(in_$i35);
    goto corral_source_split_2936;

  $bb71:
    assume out_$i145 == 1;
    goto corral_source_split_2935;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 1);
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    out_$i144 := $M.39;
    goto corral_source_split_2856;

  $bb49:
    assume !(out_$i88 == 1);
    goto corral_source_split_2855;

  $bb87:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 779} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2987;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} out_vslice_dummy_var_104 := ezusb_allocate(in_$p8, out_$i178, in_$p14);
    goto corral_source_split_2986;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    out_$i178 := $trunc.i32.i16(out_$i177);
    goto corral_source_split_2985;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    out_$i177 := $zext.i16.i32(in_$i53);
    goto corral_source_split_2984;

  $bb86:
    assume out_$i176 == 1;
    goto corral_source_split_2983;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 2);
    goto corral_source_split_2981;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i175 := $M.39;
    goto corral_source_split_2980;

  $bb84:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 777} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_2978;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} out_vslice_dummy_var_103 := ezusb_allocate(in_$p8, out_$i173, in_$p14);
    goto corral_source_split_2977;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    out_$i173 := $trunc.i32.i16(out_$i172);
    goto corral_source_split_2976;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    out_$i172 := $zext.i16.i32(in_$i53);
    goto corral_source_split_2975;

  $bb83:
    assume out_$i171 == 1;
    goto corral_source_split_2974;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 3);
    goto corral_source_split_2972;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i170 := $M.39;
    goto corral_source_split_2971;

  $bb81:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 775} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2969;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} out_vslice_dummy_var_102 := ezusb_allocate(in_$p8, out_$i168, in_$p14);
    goto corral_source_split_2968;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    out_$i168 := $trunc.i32.i16(out_$i167);
    goto corral_source_split_2967;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    out_$i167 := $zext.i16.i32(in_$i53);
    goto corral_source_split_2966;

  $bb80:
    assume out_$i166 == 1;
    goto corral_source_split_2965;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 1);
    goto corral_source_split_2845;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    out_$i165 := $M.39;
    goto corral_source_split_2844;

  $bb44:
    assume out_$i86 == 1;
    goto corral_source_split_2843;

  $bb40:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i73, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb39:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i73, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb96:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 785} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3005;

  SeqInstr_204:
    goto corral_source_split_3004;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} out_vslice_dummy_var_107 := ezusb_program_end(in_$p55);
    goto SeqInstr_203;

  $bb95:
    assume out_$i187 == 1;
    goto corral_source_split_3003;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 2);
    goto corral_source_split_3001;

  $bb94:
    assume {:verifier.code 0} true;
    out_$i186 := $M.39;
    goto corral_source_split_3000;

  $bb93:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 783} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_2998;

  SeqInstr_201:
    goto corral_source_split_2997;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} out_vslice_dummy_var_106 := ezusb_program_end(in_$p55);
    goto SeqInstr_200;

  $bb92:
    assume out_$i184 == 1;
    goto corral_source_split_2996;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 3);
    goto corral_source_split_2994;

  $bb91:
    assume {:verifier.code 0} true;
    out_$i183 := $M.39;
    goto corral_source_split_2993;

  $bb90:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 781} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2991;

  SeqInstr_198:
    goto corral_source_split_2990;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} out_vslice_dummy_var_105 := ezusb_program_end(in_$p55);
    goto SeqInstr_197;

  $bb89:
    assume out_$i181 == 1;
    goto corral_source_split_2989;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 1);
    goto corral_source_split_2849;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    out_$i180 := $M.39;
    goto corral_source_split_2848;

  $bb45:
    assume !(out_$i86 == 1);
    goto corral_source_split_2847;

  $bb99:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $M.41 := out_$i193;
    call {:si_unique_call 788} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i193);
    goto corral_source_split_3013;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    out_$i193 := $sub.i32(out_$i192, 1);
    goto corral_source_split_3012;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    out_$i192 := $M.41;
    goto corral_source_split_3011;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 787} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3010;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} ezusb_unlock_irq(out_$p191);
    goto corral_source_split_3009;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    out_$p191 := $M.45;
    goto corral_source_split_3008;

  $bb98:
    assume out_$i190 == 1;
    goto corral_source_split_3007;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i189, 2);
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$i189 := $M.39;
    goto corral_source_split_2836;

  $bb42:
    assume out_$i85 == 1;
    goto corral_source_split_2835;

  $bb41:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i73, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb102:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $M.41 := out_$i199;
    call {:si_unique_call 791} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i199);
    goto corral_source_split_3022;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    out_$i199 := $sub.i32(out_$i198, 1);
    goto corral_source_split_3021;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$i198 := $M.41;
    goto corral_source_split_3020;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 790} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3019;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} ezusb_unlock_irqrestore(out_$p196, out_$p197);
    goto corral_source_split_3018;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    out_$p197 := $M.46;
    goto corral_source_split_3017;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    out_$p196 := $M.45;
    goto corral_source_split_3016;

  $bb101:
    assume out_$i195 == 1;
    goto corral_source_split_3015;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 3);
    goto corral_source_split_2841;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    out_$i194 := $M.39;
    goto corral_source_split_2840;

  $bb43:
    assume !(out_$i85 == 1);
    goto corral_source_split_2839;

  $bb111:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 797} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3040;

  SeqInstr_213:
    goto corral_source_split_3039;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} out_vslice_dummy_var_110 := ezusb_program(in_$p57, in_$p50, in_$i34, in_$i0);
    goto SeqInstr_212;

  $bb110:
    assume out_$i207 == 1;
    goto corral_source_split_3038;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 2);
    goto corral_source_split_3036;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i206 := $M.39;
    goto corral_source_split_3035;

  $bb108:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 795} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3033;

  SeqInstr_210:
    goto corral_source_split_3032;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} out_vslice_dummy_var_109 := ezusb_program(in_$p57, in_$p50, in_$i34, in_$i0);
    goto SeqInstr_209;

  $bb107:
    assume out_$i204 == 1;
    goto corral_source_split_3031;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 3);
    goto corral_source_split_3029;

  $bb106:
    assume {:verifier.code 0} true;
    out_$i203 := $M.39;
    goto corral_source_split_3028;

  $bb105:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 793} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3026;

  SeqInstr_207:
    goto corral_source_split_3025;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} out_vslice_dummy_var_108 := ezusb_program(in_$p57, in_$p50, in_$i34, in_$i0);
    goto SeqInstr_206;

  $bb104:
    assume out_$i201 == 1;
    goto corral_source_split_3024;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 1);
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$i200 := $M.39;
    goto corral_source_split_2828;

  $bb36:
    assume out_$i82 == 1;
    goto corral_source_split_2827;

  $bb32:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i73, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb21:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i73, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb20:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i73, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb120:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 803} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3058;

  SeqInstr_222:
    goto corral_source_split_3057;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} out_vslice_dummy_var_113 := ezusb_init(in_$p52);
    goto SeqInstr_221;

  $bb119:
    assume out_$i216 == 1;
    goto corral_source_split_3056;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 2);
    goto corral_source_split_3054;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i215 := $M.39;
    goto corral_source_split_3053;

  $bb117:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 801} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3051;

  SeqInstr_219:
    goto corral_source_split_3050;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} out_vslice_dummy_var_112 := ezusb_init(in_$p52);
    goto SeqInstr_218;

  $bb116:
    assume out_$i213 == 1;
    goto corral_source_split_3049;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 3);
    goto corral_source_split_3047;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i212 := $M.39;
    goto corral_source_split_3046;

  $bb114:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 799} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3044;

  SeqInstr_216:
    goto corral_source_split_3043;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} out_vslice_dummy_var_111 := ezusb_init(in_$p52);
    goto SeqInstr_215;

  $bb113:
    assume out_$i210 == 1;
    goto corral_source_split_3042;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 1);
    goto corral_source_split_2833;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$i209 := $M.39;
    goto corral_source_split_2832;

  $bb37:
    assume !(out_$i82 == 1);
    goto corral_source_split_2831;

  $bb129:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3088;

  SeqInstr_231:
    goto corral_source_split_3087;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} out_vslice_dummy_var_116 := ezusb_write_ltv(in_$p40, in_$i48, out_$i235, out_$i237, in_$p22);
    goto SeqInstr_230;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    out_$i237 := $trunc.i32.i16(out_$i236);
    goto corral_source_split_3086;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    out_$i236 := $zext.i16.i32(in_$i9);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    out_$i235 := $trunc.i32.i16(out_$i234);
    goto corral_source_split_3084;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    out_$i234 := $zext.i16.i32(in_$i26);
    goto corral_source_split_3083;

  $bb128:
    assume out_$i233 == 1;
    goto corral_source_split_3082;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i232, 2);
    goto corral_source_split_3080;

  $bb127:
    assume {:verifier.code 0} true;
    out_$i232 := $M.39;
    goto corral_source_split_3079;

  $bb126:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 807} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3077;

  SeqInstr_228:
    goto corral_source_split_3076;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} out_vslice_dummy_var_115 := ezusb_write_ltv(in_$p40, in_$i48, out_$i228, out_$i230, in_$p22);
    goto SeqInstr_227;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$i230 := $trunc.i32.i16(out_$i229);
    goto corral_source_split_3075;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    out_$i229 := $zext.i16.i32(in_$i9);
    goto corral_source_split_3074;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$i228 := $trunc.i32.i16(out_$i227);
    goto corral_source_split_3073;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    out_$i227 := $zext.i16.i32(in_$i26);
    goto corral_source_split_3072;

  $bb125:
    assume out_$i226 == 1;
    goto corral_source_split_3071;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 3);
    goto corral_source_split_3069;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i225 := $M.39;
    goto corral_source_split_3068;

  $bb123:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 805} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3066;

  SeqInstr_225:
    goto corral_source_split_3065;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} out_vslice_dummy_var_114 := ezusb_write_ltv(in_$p40, in_$i48, out_$i221, out_$i223, in_$p22);
    goto SeqInstr_224;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    out_$i223 := $trunc.i32.i16(out_$i222);
    goto corral_source_split_3064;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    out_$i222 := $zext.i16.i32(in_$i9);
    goto corral_source_split_3063;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    out_$i221 := $trunc.i32.i16(out_$i220);
    goto corral_source_split_3062;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    out_$i220 := $zext.i16.i32(in_$i26);
    goto corral_source_split_3061;

  $bb122:
    assume out_$i219 == 1;
    goto corral_source_split_3060;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 1);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$i218 := $M.39;
    goto corral_source_split_2820;

  $bb34:
    assume out_$i81 == 1;
    goto corral_source_split_2819;

  $bb33:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i73, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb138:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 815} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3112;

  SeqInstr_240:
    goto corral_source_split_3111;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} out_vslice_dummy_var_119 := ezusb_read_pda(in_$p45, in_$p2, in_$i42, out_$i252);
    goto SeqInstr_239;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$i252 := $trunc.i32.i16(out_$i251);
    goto corral_source_split_3110;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    out_$i251 := $zext.i16.i32(in_$i38);
    goto corral_source_split_3109;

  $bb137:
    assume out_$i250 == 1;
    goto corral_source_split_3108;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 2);
    goto corral_source_split_3106;

  $bb136:
    assume {:verifier.code 0} true;
    out_$i249 := $M.39;
    goto corral_source_split_3105;

  $bb135:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 813} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3103;

  SeqInstr_237:
    goto corral_source_split_3102;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} out_vslice_dummy_var_118 := ezusb_read_pda(in_$p45, in_$p2, in_$i42, out_$i247);
    goto SeqInstr_236;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    out_$i247 := $trunc.i32.i16(out_$i246);
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    out_$i246 := $zext.i16.i32(in_$i38);
    goto corral_source_split_3100;

  $bb134:
    assume out_$i245 == 1;
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 3);
    goto corral_source_split_3097;

  $bb133:
    assume {:verifier.code 0} true;
    out_$i244 := $M.39;
    goto corral_source_split_3096;

  $bb132:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 811} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3094;

  SeqInstr_234:
    goto corral_source_split_3093;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} out_vslice_dummy_var_117 := ezusb_read_pda(in_$p45, in_$p2, in_$i42, out_$i242);
    goto SeqInstr_233;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$i242 := $trunc.i32.i16(out_$i241);
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    out_$i241 := $zext.i16.i32(in_$i38);
    goto corral_source_split_3091;

  $bb131:
    assume out_$i240 == 1;
    goto corral_source_split_3090;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 1);
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$i239 := $M.39;
    goto corral_source_split_2824;

  $bb35:
    assume !(out_$i81 == 1);
    goto corral_source_split_2823;

  $bb147:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 821} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3136;

  SeqInstr_249:
    goto corral_source_split_3135;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} out_vslice_dummy_var_122 := ezusb_read_ltv(in_$p25, in_$i23, out_$i267, in_$i37, in_$p6, in_$p31);
    goto SeqInstr_248;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$i267 := $trunc.i32.i16(out_$i266);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    out_$i266 := $zext.i16.i32(in_$i20);
    goto corral_source_split_3133;

  $bb146:
    assume out_$i265 == 1;
    goto corral_source_split_3132;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$i265 := $eq.i32(out_$i264, 2);
    goto corral_source_split_3130;

  $bb145:
    assume {:verifier.code 0} true;
    out_$i264 := $M.39;
    goto corral_source_split_3129;

  $bb144:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 819} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3127;

  SeqInstr_246:
    goto corral_source_split_3126;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} out_vslice_dummy_var_121 := ezusb_read_ltv(in_$p25, in_$i23, out_$i262, in_$i37, in_$p6, in_$p31);
    goto SeqInstr_245;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    out_$i262 := $trunc.i32.i16(out_$i261);
    goto corral_source_split_3125;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    out_$i261 := $zext.i16.i32(in_$i20);
    goto corral_source_split_3124;

  $bb143:
    assume out_$i260 == 1;
    goto corral_source_split_3123;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 3);
    goto corral_source_split_3121;

  $bb142:
    assume {:verifier.code 0} true;
    out_$i259 := $M.39;
    goto corral_source_split_3120;

  $bb141:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 817} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3118;

  SeqInstr_243:
    goto corral_source_split_3117;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} out_vslice_dummy_var_120 := ezusb_read_ltv(in_$p25, in_$i23, out_$i257, in_$i37, in_$p6, in_$p31);
    goto SeqInstr_242;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    out_$i257 := $trunc.i32.i16(out_$i256);
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    out_$i256 := $zext.i16.i32(in_$i20);
    goto corral_source_split_3115;

  $bb140:
    assume out_$i255 == 1;
    goto corral_source_split_3114;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 1);
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$i254 := $M.39;
    goto corral_source_split_2812;

  $bb30:
    assume out_$i79 == 1;
    goto corral_source_split_2811;

  $bb23:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i73, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb22:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i73, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb150:
    assume !(out_$i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $M.41 := out_$i273;
    call {:si_unique_call 824} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i273);
    goto corral_source_split_3144;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    out_$i273 := $add.i32(out_$i272, 1);
    goto corral_source_split_3143;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    out_$i272 := $M.41;
    goto corral_source_split_3142;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 823} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3141;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} ezusb_lock_irq(out_$p271);
    goto corral_source_split_3140;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    out_$p271 := $M.45;
    goto corral_source_split_3139;

  $bb149:
    assume out_$i270 == 1;
    goto corral_source_split_3138;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i269, 1);
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$i269 := $M.39;
    goto corral_source_split_2816;

  $bb31:
    assume !(out_$i79 == 1);
    goto corral_source_split_2815;

  $bb159:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 830} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3162;

  SeqInstr_258:
    goto corral_source_split_3161;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} out_vslice_dummy_var_125 := ezusb_program_init(in_$p17, in_$i10);
    goto SeqInstr_257;

  $bb158:
    assume out_$i281 == 1;
    goto corral_source_split_3160;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 2);
    goto corral_source_split_3158;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i280 := $M.39;
    goto corral_source_split_3157;

  $bb156:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 828} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3155;

  SeqInstr_255:
    goto corral_source_split_3154;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} out_vslice_dummy_var_124 := ezusb_program_init(in_$p17, in_$i10);
    goto SeqInstr_254;

  $bb155:
    assume out_$i278 == 1;
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 3);
    goto corral_source_split_3151;

  $bb154:
    assume {:verifier.code 0} true;
    out_$i277 := $M.39;
    goto corral_source_split_3150;

  $bb153:
    assume !(out_$i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3148;

  SeqInstr_252:
    goto corral_source_split_3147;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} out_vslice_dummy_var_123 := ezusb_program_init(in_$p17, in_$i10);
    goto SeqInstr_251;

  $bb152:
    assume out_$i275 == 1;
    goto corral_source_split_3146;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$i275 := $eq.i32(out_$i274, 1);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$i274 := $M.39;
    goto corral_source_split_2804;

  $bb25:
    assume out_$i77 == 1;
    goto corral_source_split_2803;

  $bb24:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i73, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb162:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $M.41 := out_$i288;
    call {:si_unique_call 833} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i288);
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$i288 := $add.i32(out_$i287, 1);
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$i287 := $M.41;
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 832} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3168;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} ezusb_lock_irqsave(out_$p285, out_$p286);
    goto corral_source_split_3167;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    out_$p286 := $M.46;
    goto corral_source_split_3166;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$p285 := $M.45;
    goto corral_source_split_3165;

  $bb161:
    assume out_$i284 == 1;
    goto corral_source_split_3164;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i283, 1);
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$i283 := $M.39;
    goto corral_source_split_2808;

  $bb27:
    assume out_$i78 == 1;
    goto corral_source_split_2807;

  $bb26:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i73, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} ldv_stop();
    goto corral_source_split_3173;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i78 == 1);
    goto $bb29;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i89 == 1);
    goto $bb29;

  $bb169:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    goto $bb170;

  SeqInstr_261:
    goto corral_source_split_3177;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} choose_timer_1(out_$p291);
    goto SeqInstr_260;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    out_$p291 := $M.11;
    goto corral_source_split_3176;

  $bb168:
    assume out_$i290 == 1;
    goto corral_source_split_3175;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    out_$i290 := $ne.i32(out_$i289, 0);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$i289 := $M.40;
    goto corral_source_split_2794;

  $bb13:
    assume !(out_$i69 == 1);
    goto corral_source_split_2793;

  $bb172:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb182:
    assume {:verifier.code 0} true;
    assume !(out_$i299 == 1);
    goto $bb183;

  $bb185:
    assume {:verifier.code 0} true;
    assume !(out_$i301 == 1);
    goto $bb183;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$i301 := $eq.i32(out_$i300, 0);
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    out_$i300 := $M.41;
    goto corral_source_split_3190;

  $bb181:
    assume out_$i299 == 1;
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    out_$i299 := $eq.i32(out_$i298, 3);
    goto corral_source_split_3187;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    out_$i298 := $M.42;
    goto corral_source_split_3186;

  $bb179:
    assume out_$i297 == 1;
    goto corral_source_split_3185;

  $bb174:
    assume out_$i295 == 1;
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i294, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb173:
    assume {:verifier.code 0} true;
    out_$i295 := $slt.i32(out_$i294, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_3179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 836} out_$i294 := __VERIFIER_nondet_int();
    call {:si_unique_call 837} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i294);
    call {:si_unique_call 838} {:cexpr "tmp___47"} boogie_si_record_i32(out_$i294);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb171:
    assume out_$i293 == 1;
    goto corral_source_split_3179;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$i293 := $ne.i32(out_$i292, 0);
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$i292 := $M.42;
    goto corral_source_split_2782;

  $bb5:
    assume out_$i66 == 1;
    goto corral_source_split_2781;

  $bb4:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i64, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb190:
    assume !(out_$i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb195:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$i308 := $ne.i32(out_$i307, 0);
    goto corral_source_split_3212;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i307 := $M.47;
    goto corral_source_split_3211;

  $bb192:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 847} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3209;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} ldv_net_device_ops_3();
    goto corral_source_split_3208;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 845} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3207;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3206;

  $bb191:
    assume out_$i306 == 1;
    goto corral_source_split_3205;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i305, 0);
    goto corral_source_split_3203;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$i305 := $M.47;
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $M.47 := out_$i304;
    call {:si_unique_call 843} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i304);
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} out_$i304 := orinoco_driver_init();
    goto corral_source_split_3200;

  $bb189:
    assume out_$i303 == 1;
    goto corral_source_split_3199;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    out_$i303 := $eq.i32(out_$i302, 1);
    goto corral_source_split_3183;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    out_$i302 := $M.42;
    goto corral_source_split_3182;

  $bb176:
    assume out_$i296 == 1;
    goto corral_source_split_3181;

  $bb175:
    assume !(out_$i295 == 1);
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i294, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} ldv_stop();
    goto corral_source_split_3217;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb177:
    assume {:verifier.code 0} true;
    assume !(out_$i296 == 1);
    goto $bb178;

  $bb180:
    assume {:verifier.code 0} true;
    assume !(out_$i297 == 1);
    goto $bb178;

  $bb202:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb230:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 854} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} out_vslice_dummy_var_126 := orinoco_stop(out_$p326);
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$p326 := $M.36;
    goto corral_source_split_3266;

  $bb229:
    assume out_$i325 == 1;
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    out_$i325 := $eq.i32(out_$i324, 3);
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    out_$i324 := $M.43;
    goto corral_source_split_3262;

  $bb227:
    assume out_$i323 == 1;
    goto corral_source_split_3261;

  $bb225:
    assume out_$i322 == 1;
    assume {:verifier.code 0} true;
    out_$i323 := $eq.i32(out_$i311, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb219:
    assume out_$i319 == 1;
    assume {:verifier.code 0} true;
    out_$i322 := $slt.i32(out_$i311, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb204:
    assume out_$i312 == 1;
    assume {:verifier.code 0} true;
    out_$i319 := $slt.i32(out_$i311, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb203:
    assume {:verifier.code 0} true;
    out_$i312 := $slt.i32(out_$i311, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_3219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 850} out_$i311 := __VERIFIER_nondet_int();
    call {:si_unique_call 851} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i311);
    call {:si_unique_call 852} {:cexpr "tmp___48"} boogie_si_record_i32(out_$i311);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb201:
    assume out_$i310 == 1;
    goto corral_source_split_3219;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    out_$i310 := $ne.i32(out_$i309, 0);
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$i309 := $M.43;
    goto corral_source_split_2786;

  $bb7:
    assume out_$i67 == 1;
    goto corral_source_split_2785;

  $bb6:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i64, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb240:
    assume !(out_$i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 860} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} orinoco_set_multicast_list(out_$p336);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$p336 := $M.36;
    goto corral_source_split_3287;

  $bb239:
    assume out_$i335 == 1;
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$i335 := $eq.i32(out_$i334, 2);
    goto corral_source_split_3284;

  $bb238:
    assume {:verifier.code 0} true;
    out_$i334 := $M.43;
    goto corral_source_split_3283;

  $bb237:
    assume !(out_$i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 858} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} orinoco_set_multicast_list(out_$p333);
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$p333 := $M.36;
    goto corral_source_split_3279;

  $bb236:
    assume out_$i332 == 1;
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$i332 := $eq.i32(out_$i331, 3);
    goto corral_source_split_3276;

  $bb235:
    assume {:verifier.code 0} true;
    out_$i331 := $M.43;
    goto corral_source_split_3275;

  $bb234:
    assume !(out_$i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} orinoco_set_multicast_list(out_$p330);
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$p330 := $M.36;
    goto corral_source_split_3271;

  $bb233:
    assume out_$i329 == 1;
    goto corral_source_split_3270;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    out_$i329 := $eq.i32(out_$i328, 1);
    goto corral_source_split_3259;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    out_$i328 := $M.43;
    goto corral_source_split_3258;

  $bb226:
    assume !(out_$i322 == 1);
    goto corral_source_split_3257;

  $bb249:
    assume !(out_$i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 866} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3310;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} out_vslice_dummy_var_129 := eth_validate_addr(out_$p347);
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    out_$p347 := $M.36;
    goto corral_source_split_3308;

  $bb248:
    assume out_$i346 == 1;
    goto corral_source_split_3307;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    out_$i346 := $eq.i32(out_$i345, 2);
    goto corral_source_split_3305;

  $bb247:
    assume {:verifier.code 0} true;
    out_$i345 := $M.43;
    goto corral_source_split_3304;

  $bb246:
    assume !(out_$i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 864} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} out_vslice_dummy_var_128 := eth_validate_addr(out_$p343);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$p343 := $M.36;
    goto corral_source_split_3300;

  $bb245:
    assume out_$i342 == 1;
    goto corral_source_split_3299;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    out_$i342 := $eq.i32(out_$i341, 3);
    goto corral_source_split_3297;

  $bb244:
    assume {:verifier.code 0} true;
    out_$i341 := $M.43;
    goto corral_source_split_3296;

  $bb243:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 862} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} out_vslice_dummy_var_127 := eth_validate_addr(out_$p339);
    goto corral_source_split_3293;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$p339 := $M.36;
    goto corral_source_split_3292;

  $bb242:
    assume out_$i338 == 1;
    goto corral_source_split_3291;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    out_$i338 := $eq.i32(out_$i337, 1);
    goto corral_source_split_3247;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    out_$i337 := $M.43;
    goto corral_source_split_3246;

  $bb221:
    assume out_$i320 == 1;
    goto corral_source_split_3245;

  $bb220:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    out_$i320 := $slt.i32(out_$i311, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb258:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 872} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3331;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} out_vslice_dummy_var_132 := orinoco_get_stats(out_$p359);
    goto corral_source_split_3330;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$p359 := $M.36;
    goto corral_source_split_3329;

  $bb257:
    assume out_$i358 == 1;
    goto corral_source_split_3328;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 2);
    goto corral_source_split_3326;

  $bb256:
    assume {:verifier.code 0} true;
    out_$i357 := $M.43;
    goto corral_source_split_3325;

  $bb255:
    assume !(out_$i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 870} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3323;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} out_vslice_dummy_var_131 := orinoco_get_stats(out_$p355);
    goto corral_source_split_3322;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    out_$p355 := $M.36;
    goto corral_source_split_3321;

  $bb254:
    assume out_$i354 == 1;
    goto corral_source_split_3320;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    out_$i354 := $eq.i32(out_$i353, 3);
    goto corral_source_split_3318;

  $bb253:
    assume {:verifier.code 0} true;
    out_$i353 := $M.43;
    goto corral_source_split_3317;

  $bb252:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 868} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3315;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} out_vslice_dummy_var_130 := orinoco_get_stats(out_$p351);
    goto corral_source_split_3314;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$p351 := $M.36;
    goto corral_source_split_3313;

  $bb251:
    assume out_$i350 == 1;
    goto corral_source_split_3312;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i349, 1);
    goto corral_source_split_3251;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    out_$i349 := $M.43;
    goto corral_source_split_3250;

  $bb223:
    assume out_$i321 == 1;
    goto corral_source_split_3249;

  $bb222:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    out_$i321 := $slt.i32(out_$i311, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb264:
    assume !(out_$i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 876} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3344;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} out_vslice_dummy_var_134 := orinoco_change_mtu(out_$p367, in_$i61);
    goto corral_source_split_3343;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$p367 := $M.36;
    goto corral_source_split_3342;

  $bb263:
    assume out_$i366 == 1;
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    out_$i366 := $eq.i32(out_$i365, 2);
    goto corral_source_split_3339;

  $bb262:
    assume {:verifier.code 0} true;
    out_$i365 := $M.43;
    goto corral_source_split_3338;

  $bb261:
    assume !(out_$i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 874} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} out_vslice_dummy_var_133 := orinoco_change_mtu(out_$p363, in_$i61);
    goto corral_source_split_3335;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    out_$p363 := $M.36;
    goto corral_source_split_3334;

  $bb260:
    assume out_$i362 == 1;
    goto corral_source_split_3333;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 3);
    goto corral_source_split_3255;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    out_$i361 := $M.43;
    goto corral_source_split_3254;

  $bb224:
    assume !(out_$i321 == 1);
    goto corral_source_split_3253;

  $bb267:
    assume !(out_$i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb269:
    assume !(out_$i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    goto $bb270;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 879} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3354;

  $bb268:
    assume out_$i374 == 1;
    goto corral_source_split_3353;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    out_$i374 := $eq.i32(out_$i373, 0);
    goto corral_source_split_3351;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$i373 := $M.48;
    goto corral_source_split_3350;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $M.48 := out_$i372;
    call {:si_unique_call 878} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i372);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} out_$i372 := orinoco_open(out_$p371);
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    out_$p371 := $M.36;
    goto corral_source_split_3347;

  $bb266:
    assume out_$i370 == 1;
    goto corral_source_split_3346;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    out_$i370 := $eq.i32(out_$i369, 2);
    goto corral_source_split_3235;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    out_$i369 := $M.43;
    goto corral_source_split_3234;

  $bb215:
    assume out_$i317 == 1;
    goto corral_source_split_3233;

  $bb206:
    assume out_$i313 == 1;
    assume {:verifier.code 0} true;
    out_$i317 := $slt.i32(out_$i311, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb205:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    out_$i313 := $slt.i32(out_$i311, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb273:
    assume !(out_$i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 881} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3359;

  SeqInstr_264:
    goto corral_source_split_3358;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} out_vslice_dummy_var_135 := ezusb_xmit(in_$p59, out_$p377);
    goto SeqInstr_263;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$p377 := $M.36;
    goto corral_source_split_3357;

  $bb272:
    assume out_$i376 == 1;
    goto corral_source_split_3356;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    out_$i376 := $eq.i32(out_$i375, 3);
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    out_$i375 := $M.43;
    goto corral_source_split_3238;

  $bb217:
    assume out_$i318 == 1;
    goto corral_source_split_3237;

  $bb216:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    out_$i318 := $slt.i32(out_$i311, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb282:
    assume !(out_$i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3380;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} out_vslice_dummy_var_138 := eth_mac_addr(out_$p389, in_$p60);
    goto corral_source_split_3379;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$p389 := $M.36;
    goto corral_source_split_3378;

  $bb281:
    assume out_$i388 == 1;
    goto corral_source_split_3377;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    out_$i388 := $eq.i32(out_$i387, 2);
    goto corral_source_split_3375;

  $bb280:
    assume {:verifier.code 0} true;
    out_$i387 := $M.43;
    goto corral_source_split_3374;

  $bb279:
    assume !(out_$i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 885} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} out_vslice_dummy_var_137 := eth_mac_addr(out_$p385, in_$p60);
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    out_$p385 := $M.36;
    goto corral_source_split_3370;

  $bb278:
    assume out_$i384 == 1;
    goto corral_source_split_3369;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    out_$i384 := $eq.i32(out_$i383, 3);
    goto corral_source_split_3367;

  $bb277:
    assume {:verifier.code 0} true;
    out_$i383 := $M.43;
    goto corral_source_split_3366;

  $bb276:
    assume !(out_$i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 883} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3364;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} out_vslice_dummy_var_136 := eth_mac_addr(out_$p381, in_$p60);
    goto corral_source_split_3363;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    out_$p381 := $M.36;
    goto corral_source_split_3362;

  $bb275:
    assume out_$i380 == 1;
    goto corral_source_split_3361;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$i380 := $eq.i32(out_$i379, 1);
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$i379 := $M.43;
    goto corral_source_split_3242;

  $bb218:
    assume !(out_$i318 == 1);
    goto corral_source_split_3241;

  $bb291:
    assume !(out_$i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3401;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} orinoco_tx_timeout(out_$p399);
    goto corral_source_split_3400;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    out_$p399 := $M.36;
    goto corral_source_split_3399;

  $bb290:
    assume out_$i398 == 1;
    goto corral_source_split_3398;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    out_$i398 := $eq.i32(out_$i397, 2);
    goto corral_source_split_3396;

  $bb289:
    assume {:verifier.code 0} true;
    out_$i397 := $M.43;
    goto corral_source_split_3395;

  $bb288:
    assume !(out_$i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_3393;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} orinoco_tx_timeout(out_$p396);
    goto corral_source_split_3392;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    out_$p396 := $M.36;
    goto corral_source_split_3391;

  $bb287:
    assume out_$i395 == 1;
    goto corral_source_split_3390;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    out_$i395 := $eq.i32(out_$i394, 3);
    goto corral_source_split_3388;

  $bb286:
    assume {:verifier.code 0} true;
    out_$i394 := $M.43;
    goto corral_source_split_3387;

  $bb285:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} orinoco_tx_timeout(out_$p393);
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    out_$p393 := $M.36;
    goto corral_source_split_3383;

  $bb284:
    assume out_$i392 == 1;
    goto corral_source_split_3382;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$i392 := $eq.i32(out_$i391, 1);
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$i391 := $M.43;
    goto corral_source_split_3222;

  $bb208:
    assume out_$i314 == 1;
    goto corral_source_split_3221;

  $bb207:
    assume !(out_$i313 == 1);
    assume {:verifier.code 0} true;
    out_$i314 := $slt.i32(out_$i311, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb294:
    assume !(out_$i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb296:
    assume !(out_$i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $M.41 := out_$i408;
    call {:si_unique_call 898} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i408);
    goto corral_source_split_3416;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    out_$i408 := $add.i32(out_$i407, 1);
    goto corral_source_split_3415;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    out_$i407 := $M.41;
    goto corral_source_split_3414;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $M.50 := out_$i406;
    call {:si_unique_call 897} {:cexpr "usb_counter"} boogie_si_record_i32(out_$i406);
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    out_$i406 := $add.i32(out_$i405, 1);
    goto corral_source_split_3412;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    out_$i405 := $M.50;
    goto corral_source_split_3411;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 896} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3410;

  $bb295:
    assume out_$i404 == 1;
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    out_$i404 := $eq.i32(out_$i403, 0);
    goto corral_source_split_3407;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    out_$i403 := $M.49;
    goto corral_source_split_3406;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $M.49 := out_$i402;
    call {:si_unique_call 895} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i402);
    goto corral_source_split_3405;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} out_$i402 := ldv_ndo_init_3();
    goto corral_source_split_3404;

  $bb293:
    assume out_$i401 == 1;
    goto corral_source_split_3403;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    out_$i401 := $eq.i32(out_$i400, 1);
    goto corral_source_split_3227;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$i400 := $M.43;
    goto corral_source_split_3226;

  $bb210:
    assume out_$i315 == 1;
    goto corral_source_split_3225;

  $bb209:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    out_$i315 := $slt.i32(out_$i311, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb300:
    assume !(out_$i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $M.41 := out_$i415;
    call {:si_unique_call 902} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i415);
    goto corral_source_split_3426;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    out_$i415 := $sub.i32(out_$i414, 1);
    goto corral_source_split_3425;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$i414 := $M.41;
    goto corral_source_split_3424;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.50 := out_$i413;
    call {:si_unique_call 901} {:cexpr "usb_counter"} boogie_si_record_i32(out_$i413);
    goto corral_source_split_3423;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    out_$i413 := $sub.i32(out_$i412, 1);
    goto corral_source_split_3422;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    out_$i412 := $M.50;
    goto corral_source_split_3421;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 900} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3420;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} out_vslice_dummy_var_139 := ldv_ndo_uninit_3();
    goto corral_source_split_3419;

  $bb299:
    assume out_$i410 == 1;
    goto corral_source_split_3418;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    out_$i410 := $eq.i32(out_$i409, 2);
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$i409 := $M.43;
    goto corral_source_split_3230;

  $bb212:
    assume out_$i316 == 1;
    goto corral_source_split_3229;

  $bb211:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    out_$i316 := $eq.i32(out_$i311, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} ldv_stop();
    goto corral_source_split_3428;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb213:
    assume {:verifier.code 0} true;
    assume !(out_$i316 == 1);
    goto $bb214;

  $bb228:
    assume {:verifier.code 0} true;
    assume !(out_$i323 == 1);
    goto $bb214;

  $bb306:
    assume !(out_$i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb316:
    assume !(out_$i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb318:
    assume !(out_$i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $M.41 := out_$i429;
    call {:si_unique_call 910} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i429);
    goto corral_source_split_3451;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    out_$i429 := $add.i32(out_$i428, 1);
    goto corral_source_split_3450;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    out_$i428 := $M.41;
    goto corral_source_split_3449;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3448;

  $bb317:
    assume out_$i427 == 1;
    goto corral_source_split_3447;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    out_$i427 := $eq.i32(out_$i426, 0);
    goto corral_source_split_3445;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$i426 := $M.51;
    goto corral_source_split_3444;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $M.51 := out_$i425;
    call {:si_unique_call 908} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i425);
    goto corral_source_split_3443;

  SeqInstr_267:
    goto corral_source_split_3442;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} out_$i425 := ezusb_probe(out_$p424, in_$p63);
    goto SeqInstr_266;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    out_$p424 := $M.37;
    goto corral_source_split_3441;

  $bb315:
    assume out_$i423 == 1;
    goto corral_source_split_3440;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    out_$i423 := $eq.i32(out_$i422, 1);
    goto corral_source_split_3438;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    out_$i422 := $M.44;
    goto corral_source_split_3437;

  $bb313:
    assume out_$i421 == 1;
    goto corral_source_split_3436;

  $bb308:
    assume out_$i419 == 1;
    assume {:verifier.code 0} true;
    out_$i421 := $eq.i32(out_$i418, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb307:
    assume {:verifier.code 0} true;
    out_$i419 := $slt.i32(out_$i418, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_3430:
    assume {:verifier.code 1} true;
    call {:si_unique_call 904} out_$i418 := __VERIFIER_nondet_int();
    call {:si_unique_call 905} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i418);
    call {:si_unique_call 906} {:cexpr "tmp___49"} boogie_si_record_i32(out_$i418);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb305:
    assume out_$i417 == 1;
    goto corral_source_split_3430;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    out_$i417 := $ne.i32(out_$i416, 0);
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    out_$i416 := $M.44;
    goto corral_source_split_2790;

  $bb9:
    assume out_$i68 == 1;
    goto corral_source_split_2789;

  $bb8:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i64, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $M.41 := out_$i436;
    call {:si_unique_call 913} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i436);
    goto corral_source_split_3463;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    out_$i436 := $sub.i32(out_$i435, 1);
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$i435 := $M.41;
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 912} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3460;

  SeqInstr_270:
    goto corral_source_split_3459;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} ezusb_disconnect(out_$p434);
    goto SeqInstr_269;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    out_$p434 := $M.37;
    goto corral_source_split_3458;

  $bb325:
    assume out_$i433 == 1;
    goto corral_source_split_3457;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    out_$i433 := $eq.i32(out_$i432, 0);
    goto corral_source_split_3455;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    out_$i432 := $M.50;
    goto corral_source_split_3454;

  $bb322:
    assume out_$i431 == 1;
    goto corral_source_split_3453;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    out_$i431 := $eq.i32(out_$i430, 2);
    goto corral_source_split_3434;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$i430 := $M.44;
    goto corral_source_split_3433;

  $bb310:
    assume out_$i420 == 1;
    goto corral_source_split_3432;

  $bb309:
    assume !(out_$i419 == 1);
    assume {:verifier.code 0} true;
    out_$i420 := $eq.i32(out_$i418, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb323:
    assume {:verifier.code 0} true;
    assume !(out_$i431 == 1);
    goto $bb324;

  $bb326:
    assume {:verifier.code 0} true;
    assume !(out_$i433 == 1);
    goto $bb324;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} ldv_stop();
    goto corral_source_split_3465;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb311:
    assume {:verifier.code 0} true;
    assume !(out_$i420 == 1);
    goto $bb312;

  $bb314:
    assume {:verifier.code 0} true;
    assume !(out_$i421 == 1);
    goto $bb312;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} ldv_stop();
    goto corral_source_split_3467;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i68 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i70 == 1);
    goto $bb11;

  $bb167_dummy:
    call {:si_unique_call 1} out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i166, out_$i167, out_$i168, out_$i170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i183, out_$i184, out_$i186, out_$i187, out_$i189, out_$i190, out_$p191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i203, out_$i204, out_$i206, out_$i207, out_$i209, out_$i210, out_$i212, out_$i213, out_$i215, out_$i216, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i239, out_$i240, out_$i241, out_$i242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i259, out_$i260, out_$i261, out_$i262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i277, out_$i278, out_$i280, out_$i281, out_$i283, out_$i284, out_$p285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p326, out_$i328, out_$i329, out_$p330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$p336, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i353, out_$i354, out_$p355, out_$i357, out_$i358, out_$p359, out_$i361, out_$i362, out_$p363, out_$i365, out_$i366, out_$p367, out_$i369, out_$i370, out_$p371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$p377, out_$i379, out_$i380, out_$p381, out_$i383, out_$i384, out_$p385, out_$i387, out_$i388, out_$p389, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$p396, out_$i397, out_$i398, out_$p399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$p434, out_$i435, out_$i436, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139 := main_loop_$bb1(in_$i0, in_$p2, in_$p4, in_$p6, in_$p8, in_$i9, in_$i10, in_$i11, in_$p12, in_$p14, in_$i15, in_$p17, in_$p19, in_$i20, in_$i21, in_$p22, in_$i23, in_$p25, in_$i26, in_$p28, in_$p30, in_$p31, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p40, in_$i41, in_$i42, in_$i43, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$p52, in_$i53, in_$p55, in_$p57, in_$p59, in_$p60, in_$i61, in_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i166, out_$i167, out_$i168, out_$i170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i183, out_$i184, out_$i186, out_$i187, out_$i189, out_$i190, out_$p191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i203, out_$i204, out_$i206, out_$i207, out_$i209, out_$i210, out_$i212, out_$i213, out_$i215, out_$i216, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i239, out_$i240, out_$i241, out_$i242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i259, out_$i260, out_$i261, out_$i262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i277, out_$i278, out_$i280, out_$i281, out_$i283, out_$i284, out_$p285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p326, out_$i328, out_$i329, out_$p330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$p336, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i353, out_$i354, out_$p355, out_$i357, out_$i358, out_$p359, out_$i361, out_$i362, out_$p363, out_$i365, out_$i366, out_$p367, out_$i369, out_$i370, out_$p371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$p377, out_$i379, out_$i380, out_$p381, out_$i383, out_$i384, out_$p385, out_$i387, out_$i388, out_$p389, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$p396, out_$i397, out_$i398, out_$p399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$p434, out_$i435, out_$i436, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i32, in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$i9: i16, in_$i10: i32, in_$i11: i16, in_$p12: ref, in_$p14: ref, in_$i15: i16, in_$p17: ref, in_$p19: ref, in_$i20: i16, in_$i21: i16, in_$p22: ref, in_$i23: i32, in_$p25: ref, in_$i26: i16, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$i34: i32, in_$i35: i16, in_$i36: i16, in_$i37: i32, in_$i38: i16, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i16, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p52: ref, in_$i53: i16, in_$p55: ref, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i16, in_$i94: i32, in_$i95: i16, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i16, in_$i101: i32, in_$i102: i16, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$i107: i16, in_$i108: i32, in_$i109: i16, in_$i111: i32, in_$i112: i1, in_$i113: i32, in_$i114: i16, in_$i115: i32, in_$i116: i16, in_$i117: i32, in_$i118: i16, in_$i119: i32, in_$i120: i16, in_$i122: i32, in_$i123: i1, in_$i124: i32, in_$i125: i16, in_$i126: i32, in_$i127: i16, in_$i128: i32, in_$i129: i16, in_$i130: i32, in_$i131: i16, in_$i133: i32, in_$i134: i1, in_$i135: i32, in_$i136: i16, in_$i137: i32, in_$i138: i16, in_$i139: i32, in_$i140: i16, in_$i141: i32, in_$i142: i16, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i16, in_$i148: i32, in_$i149: i16, in_$i151: i32, in_$i152: i1, in_$i153: i32, in_$i154: i16, in_$i155: i32, in_$i156: i16, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i16, in_$i162: i32, in_$i163: i16, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i16, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i16, in_$i175: i32, in_$i176: i1, in_$i177: i32, in_$i178: i16, in_$i180: i32, in_$i181: i1, in_$i183: i32, in_$i184: i1, in_$i186: i32, in_$i187: i1, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$i192: i32, in_$i193: i32, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$p197: ref, in_$i198: i32, in_$i199: i32, in_$i200: i32, in_$i201: i1, in_$i203: i32, in_$i204: i1, in_$i206: i32, in_$i207: i1, in_$i209: i32, in_$i210: i1, in_$i212: i32, in_$i213: i1, in_$i215: i32, in_$i216: i1, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i16, in_$i222: i32, in_$i223: i16, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i16, in_$i229: i32, in_$i230: i16, in_$i232: i32, in_$i233: i1, in_$i234: i32, in_$i235: i16, in_$i236: i32, in_$i237: i16, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i16, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i16, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i16, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i16, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i16, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i16, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$i275: i1, in_$i277: i32, in_$i278: i1, in_$i280: i32, in_$i281: i1, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i1, in_$i296: i1, in_$i297: i1, in_$i298: i32, in_$i299: i1, in_$i300: i32, in_$i301: i1, in_$i302: i32, in_$i303: i1, in_$i304: i32, in_$i305: i32, in_$i306: i1, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i313: i1, in_$i314: i1, in_$i315: i1, in_$i316: i1, in_$i317: i1, in_$i318: i1, in_$i319: i1, in_$i320: i1, in_$i321: i1, in_$i322: i1, in_$i323: i1, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$i331: i32, in_$i332: i1, in_$p333: ref, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$i341: i32, in_$i342: i1, in_$p343: ref, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$i372: i32, in_$i373: i32, in_$i374: i1, in_$i375: i32, in_$i376: i1, in_$p377: ref, in_$i379: i32, in_$i380: i1, in_$p381: ref, in_$i383: i32, in_$i384: i1, in_$p385: ref, in_$i387: i32, in_$i388: i1, in_$p389: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i394: i32, in_$i395: i1, in_$p396: ref, in_$i397: i32, in_$i398: i1, in_$p399: ref, in_$i400: i32, in_$i401: i1, in_$i402: i32, in_$i403: i32, in_$i404: i1, in_$i405: i32, in_$i406: i32, in_$i407: i32, in_$i408: i32, in_$i409: i32, in_$i410: i1, in_$i412: i32, in_$i413: i32, in_$i414: i32, in_$i415: i32, in_$i416: i32, in_$i417: i1, in_$i418: i32, in_$i419: i1, in_$i420: i1, in_$i421: i1, in_$i422: i32, in_$i423: i1, in_$p424: ref, in_$i425: i32, in_$i426: i32, in_$i427: i1, in_$i428: i32, in_$i429: i32, in_$i430: i32, in_$i431: i1, in_$i432: i32, in_$i433: i1, in_$p434: ref, in_$i435: i32, in_$i436: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: ref, in_vslice_dummy_var_131: ref, in_vslice_dummy_var_132: ref, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32) returns (out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i16, out_$i94: i32, out_$i95: i16, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i16, out_$i101: i32, out_$i102: i16, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$i107: i16, out_$i108: i32, out_$i109: i16, out_$i111: i32, out_$i112: i1, out_$i113: i32, out_$i114: i16, out_$i115: i32, out_$i116: i16, out_$i117: i32, out_$i118: i16, out_$i119: i32, out_$i120: i16, out_$i122: i32, out_$i123: i1, out_$i124: i32, out_$i125: i16, out_$i126: i32, out_$i127: i16, out_$i128: i32, out_$i129: i16, out_$i130: i32, out_$i131: i16, out_$i133: i32, out_$i134: i1, out_$i135: i32, out_$i136: i16, out_$i137: i32, out_$i138: i16, out_$i139: i32, out_$i140: i16, out_$i141: i32, out_$i142: i16, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i16, out_$i148: i32, out_$i149: i16, out_$i151: i32, out_$i152: i1, out_$i153: i32, out_$i154: i16, out_$i155: i32, out_$i156: i16, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i16, out_$i162: i32, out_$i163: i16, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i16, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i16, out_$i175: i32, out_$i176: i1, out_$i177: i32, out_$i178: i16, out_$i180: i32, out_$i181: i1, out_$i183: i32, out_$i184: i1, out_$i186: i32, out_$i187: i1, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$i192: i32, out_$i193: i32, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$p197: ref, out_$i198: i32, out_$i199: i32, out_$i200: i32, out_$i201: i1, out_$i203: i32, out_$i204: i1, out_$i206: i32, out_$i207: i1, out_$i209: i32, out_$i210: i1, out_$i212: i32, out_$i213: i1, out_$i215: i32, out_$i216: i1, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i16, out_$i222: i32, out_$i223: i16, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i16, out_$i229: i32, out_$i230: i16, out_$i232: i32, out_$i233: i1, out_$i234: i32, out_$i235: i16, out_$i236: i32, out_$i237: i16, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i16, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i16, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i16, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i16, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i16, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i16, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$i275: i1, out_$i277: i32, out_$i278: i1, out_$i280: i32, out_$i281: i1, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i1, out_$i296: i1, out_$i297: i1, out_$i298: i32, out_$i299: i1, out_$i300: i32, out_$i301: i1, out_$i302: i32, out_$i303: i1, out_$i304: i32, out_$i305: i32, out_$i306: i1, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i313: i1, out_$i314: i1, out_$i315: i1, out_$i316: i1, out_$i317: i1, out_$i318: i1, out_$i319: i1, out_$i320: i1, out_$i321: i1, out_$i322: i1, out_$i323: i1, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$i331: i32, out_$i332: i1, out_$p333: ref, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$i341: i32, out_$i342: i1, out_$p343: ref, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$i372: i32, out_$i373: i32, out_$i374: i1, out_$i375: i32, out_$i376: i1, out_$p377: ref, out_$i379: i32, out_$i380: i1, out_$p381: ref, out_$i383: i32, out_$i384: i1, out_$p385: ref, out_$i387: i32, out_$i388: i1, out_$p389: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i394: i32, out_$i395: i1, out_$p396: ref, out_$i397: i32, out_$i398: i1, out_$p399: ref, out_$i400: i32, out_$i401: i1, out_$i402: i32, out_$i403: i32, out_$i404: i1, out_$i405: i32, out_$i406: i32, out_$i407: i32, out_$i408: i32, out_$i409: i32, out_$i410: i1, out_$i412: i32, out_$i413: i32, out_$i414: i32, out_$i415: i32, out_$i416: i32, out_$i417: i1, out_$i418: i32, out_$i419: i1, out_$i420: i1, out_$i421: i1, out_$i422: i32, out_$i423: i1, out_$p424: ref, out_$i425: i32, out_$i426: i32, out_$i427: i1, out_$i428: i32, out_$i429: i32, out_$i430: i32, out_$i431: i1, out_$i432: i32, out_$i433: i1, out_$p434: ref, out_$i435: i32, out_$i436: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: ref, out_vslice_dummy_var_131: ref, out_vslice_dummy_var_132: ref, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32);
  modifies $M.39, $M.1, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.11, $M.12, $CurrAddr, $M.7, $M.8, assertsPassed, $M.41, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.36, $M.43, $M.42, $M.47, $M.44, $M.50, $M.37, $M.48, $M.35, $M.49, $M.51, $M.2, $M.4, $M.6;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


